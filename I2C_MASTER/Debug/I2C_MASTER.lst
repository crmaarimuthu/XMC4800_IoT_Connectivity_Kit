
I2C_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c8  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000010  1ffe8800  0c0022c8  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000038  1ffe8810  0c0022d8  00010810  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000850  00000000  00000000  00010810  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009d6d  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019bd  00000000  00000000  0001adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036b0  00000000  00000000  0001c78a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002268  00000000  00000000  0001fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056df  00000000  00000000  000220a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004606  00000000  00000000  00027783  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000750  00000000  00000000  0002bd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000359  00000000  00000000  0002c4d9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0022c8 	.word	0x0c0022c8
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000010 	.word	0x00000010
 8000254:	0c0022c8 	.word	0x0c0022c8
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8810 	.word	0x1ffe8810
 8000264:	00000038 	.word	0x00000038
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800221d 	.word	0x0800221d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08002149 	.word	0x08002149

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f001 fe5f 	bl	8001f70 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f001 fedb 	bl	800206c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 fea6 	bl	8002030 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2003ffc0 	.word	0x2003ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2003ffc0 	.word	0x2003ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 facb 	bl	8000b2c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fb03 	bl	8000ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 faee 	bl	8000b84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa86 	bl	8000ae0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fb08 	bl	8000c18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb2d 	bl	8000c68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb3e 	bl	8000cb0 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb2b 	bl	8000c90 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb38 	bl	8000cd0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe23 	bl	80002bc <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000952:	4313      	orrs	r3, r2
 8000954:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000972:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800097a:	4313      	orrs	r3, r2
 800097c:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	50004600 	.word	0x50004600

0800098c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	0f1b      	lsrs	r3, r3, #28
 8000998:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009a0:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009b0:	4413      	add	r3, r2
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	50004648 	.word	0x50004648

080009c4 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	0f1b      	lsrs	r3, r3, #28
 80009d0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009d8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009e8:	4413      	add	r3, r2
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	50004640 	.word	0x50004640

08000a0c <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a10:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1a:	f023 0302 	bic.w	r3, r3, #2
 8000a1e:	6153      	str	r3, [r2, #20]
}
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	50004710 	.word	0x50004710

08000a2c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a36:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a42:	bf00      	nop
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f9      	beq.n	8000a44 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a5c:	491e      	ldr	r1, [pc, #120]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f023 0310 	bic.w	r3, r3, #16
 8000a84:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a86:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a90:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a92:	bf00      	nop
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f9      	beq.n	8000a94 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000aac:	bf00      	nop
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f9      	bne.n	8000aae <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ac4:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	60da      	str	r2, [r3, #12]
}
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	50004710 	.word	0x50004710
 8000adc:	50004160 	.word	0x50004160

08000ae0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d10e      	bne.n	8000b1a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b06:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f7ff fcff 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b18:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f7ff fcf6 	bl	800050c <XMC_SCU_lDelay>
}
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	50004710 	.word	0x50004710

08000b2c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d109      	bne.n	8000b50 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b42:	bf00      	nop
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f9      	beq.n	8000b44 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00a      	beq.n	8000b72 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b62:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b64:	bf00      	nop
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f9      	bne.n	8000b66 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	50004200 	.word	0x50004200
 8000b80:	50004400 	.word	0x50004400

08000b84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	50004300 	.word	0x50004300

08000ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000bac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bb0:	f7ff fcda 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bbe:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bc0:	bf00      	nop
 8000bc2:	f7ff fcc5 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f8      	beq.n	8000bc2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bd0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bd4:	f7ff fcc8 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bda:	2208      	movs	r2, #8
 8000bdc:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bde:	bf00      	nop
 8000be0:	f7ff fcb6 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f8      	beq.n	8000be0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bf2:	f7ff fcb9 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c02:	bf00      	nop
 8000c04:	f7ff fca4 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f8      	beq.n	8000c04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	50004300 	.word	0x50004300

08000c18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c26:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c28:	4d0d      	ldr	r5, [pc, #52]	; (8000c60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c32:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c36:	f001 f9fb 	bl	8002030 <OSCHP_GetFrequency>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c42:	0d1b      	lsrs	r3, r3, #20
 8000c44:	3b01      	subs	r3, #1
 8000c46:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c48:	4323      	orrs	r3, r4
 8000c4a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c4e:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c56:	6053      	str	r3, [r2, #4]
}
 8000c58:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	50004710 	.word	0x50004710
 8000c60:	50004700 	.word	0x50004700
 8000c64:	6b5fca6b 	.word	0x6b5fca6b

08000c68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c74:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	50004710 	.word	0x50004710

08000c90 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9e:	f023 0302 	bic.w	r3, r3, #2
 8000ca2:	6053      	str	r3, [r2, #4]
}
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	50004710 	.word	0x50004710

08000cb0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	6053      	str	r3, [r2, #4]
}
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	50004710 	.word	0x50004710

08000cd0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60ba      	str	r2, [r7, #8]
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd55 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	f040 808b 	bne.w	8000e08 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf8:	f001 f99a 	bl	8002030 <OSCHP_GetFrequency>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000d00:	fba3 2302 	umull	r2, r3, r3, r2
 8000d04:	0c9b      	lsrs	r3, r3, #18
 8000d06:	059b      	lsls	r3, r3, #22
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e002      	b.n	8000d12 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d0c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d10:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	fb02 f203 	mul.w	r2, r2, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	0d9b      	lsrs	r3, r3, #22
 8000d2e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d30:	4a49      	ldr	r2, [pc, #292]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d3c:	bf00      	nop
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d4a:	4a43      	ldr	r2, [pc, #268]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d56:	4940      	ldr	r1, [pc, #256]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d5e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	3a01      	subs	r2, #1
 8000d64:	0212      	lsls	r2, r2, #8
 8000d66:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d6e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d76:	4313      	orrs	r3, r2
 8000d78:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d7a:	4a37      	ldr	r2, [pc, #220]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d84:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d86:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f023 0310 	bic.w	r3, r3, #16
 8000d90:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d92:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d9e:	bf00      	nop
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f9      	beq.n	8000da0 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000dac:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000db8:	bf00      	nop
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	0d9b      	lsrs	r3, r3, #22
 8000dd2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dd4:	6a3a      	ldr	r2, [r7, #32]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d202      	bcs.n	8000de2 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ddc:	6938      	ldr	r0, [r7, #16]
 8000dde:	f000 f845 	bl	8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	085b      	lsrs	r3, r3, #1
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	095b      	lsrs	r3, r3, #5
 8000dee:	0d9b      	lsrs	r3, r3, #22
 8000df0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000df2:	6a3a      	ldr	r2, [r7, #32]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d202      	bcs.n	8000e00 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dfa:	6938      	ldr	r0, [r7, #16]
 8000dfc:	f000 f836 	bl	8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000e00:	6a38      	ldr	r0, [r7, #32]
 8000e02:	f000 f833 	bl	8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e06:	e01c      	b.n	8000e42 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e08:	4913      	ldr	r1, [pc, #76]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e16:	4313      	orrs	r3, r2
 8000e18:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e1a:	bf00      	nop
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f9      	beq.n	8000e1c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e34:	bf00      	nop
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f9      	beq.n	8000e36 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e44:	2205      	movs	r2, #5
 8000e46:	60da      	str	r2, [r3, #12]
}
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	aaaaaaab 	.word	0xaaaaaaab
 8000e58:	50004710 	.word	0x50004710
 8000e5c:	f08080ff 	.word	0xf08080ff
 8000e60:	88888889 	.word	0x88888889
 8000e64:	b60b60b7 	.word	0xb60b60b7
 8000e68:	50004160 	.word	0x50004160

08000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e74:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e88:	bf00      	nop
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f9      	beq.n	8000e8a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e96:	2032      	movs	r0, #50	; 0x32
 8000e98:	f7ff fb38 	bl	800050c <XMC_SCU_lDelay>
}
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	50004710 	.word	0x50004710

08000ea8 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3204      	adds	r2, #4
 8000ecc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	23f8      	movs	r3, #248	; 0xf8
 8000edc:	408b      	lsls	r3, r1
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	ea02 0103 	and.w	r1, r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	1d02      	adds	r2, r0, #4
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3204      	adds	r2, #4
 8000f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f04:	78bb      	ldrb	r3, [r7, #2]
 8000f06:	78f9      	ldrb	r1, [r7, #3]
 8000f08:	f001 0103 	and.w	r1, r1, #3
 8000f0c:	00c9      	lsls	r1, r1, #3
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	ea42 0103 	orr.w	r1, r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1d02      	adds	r2, r0, #4
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f9b8 	bl	80012ec <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <XMC_I2C_CH_InitEx+0x5c>)
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	88db      	ldrh	r3, [r3, #6]
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f000 f81d 	bl	8000fc8 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d008      	beq.n	8000fa6 <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f000 f83b 	bl	800101c <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	073f0303 	.word	0x073f0303

08000fc8 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8000fda:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8000fde:	d10e      	bne.n	8000ffe <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe4:	0c1b      	lsrs	r3, r3, #16
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	887a      	ldrh	r2, [r7, #2]
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8000ff6:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ffc:	e008      	b.n	8001010 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4613      	mov	r3, r2
 8001028:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d819      	bhi.n	8001066 <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	4619      	mov	r1, r3
 800104a:	220a      	movs	r2, #10
 800104c:	f000 fa0c 	bl	8001468 <XMC_USIC_CH_SetBaudrateEx>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	e027      	b.n	80010a6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	220a      	movs	r2, #10
 800105c:	f000 f992 	bl	8001384 <XMC_USIC_CH_SetBaudrate>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]
 8001064:	e01f      	b.n	80010a6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <XMC_I2C_CH_SetBaudrateEx+0x98>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d819      	bhi.n	80010a2 <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	4619      	mov	r1, r3
 8001086:	2219      	movs	r2, #25
 8001088:	f000 f9ee 	bl	8001468 <XMC_USIC_CH_SetBaudrateEx>
 800108c:	4603      	mov	r3, r0
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e009      	b.n	80010a6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	2219      	movs	r2, #25
 8001098:	f000 f974 	bl	8001384 <XMC_USIC_CH_SetBaudrate>
 800109c:	4603      	mov	r3, r0
 800109e:	75fb      	strb	r3, [r7, #23]
 80010a0:	e001      	b.n	80010a6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	000186a0 	.word	0x000186a0
 80010b4:	00061a80 	.word	0x00061a80

080010b8 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80010d2:	787b      	ldrb	r3, [r7, #1]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d110      	bne.n	8001110 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80010ee:	bf00      	nop
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff19 	bl	8000f28 <XMC_USIC_CH_GetTransmitBufferStatus>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b80      	cmp	r3, #128	; 0x80
 80010fa:	d0f9      	beq.n	80010f0 <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001102:	f7ff ff21 	bl	8000f48 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800110e:	e003      	b.n	8001118 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop

08001120 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001136:	b29b      	uxth	r3, r3
 8001138:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800113a:	787b      	ldrb	r3, [r7, #1]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d103      	bne.n	8001148 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800114e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d110      	bne.n	8001178 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001156:	bf00      	nop
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fee5 	bl	8000f28 <XMC_USIC_CH_GetTransmitBufferStatus>
 800115e:	4603      	mov	r3, r0
 8001160:	2b80      	cmp	r3, #128	; 0x80
 8001162:	d0f9      	beq.n	8001158 <XMC_I2C_CH_MasterRepeatedStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116a:	f7ff feed 	bl	8000f48 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001176:	e003      	b.n	8001180 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop

08001188 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001196:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800119e:	bf00      	nop
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fec1 	bl	8000f28 <XMC_USIC_CH_GetTransmitBufferStatus>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b80      	cmp	r3, #128	; 0x80
 80011aa:	d0f9      	beq.n	80011a0 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b2:	f7ff fec9 	bl	8000f48 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011c0:	e004      	b.n	80011cc <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d110      	bne.n	8001210 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80011ee:	bf00      	nop
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fe99 	bl	8000f28 <XMC_USIC_CH_GetTransmitBufferStatus>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b80      	cmp	r3, #128	; 0x80
 80011fa:	d0f9      	beq.n	80011f0 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001202:	f7ff fea1 	bl	8000f48 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001206:	78fa      	ldrb	r2, [r7, #3]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800120e:	e003      	b.n	8001218 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001210:	78fa      	ldrb	r2, [r7, #3]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop

08001220 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800122e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d111      	bne.n	800125a <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001236:	bf00      	nop
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fe75 	bl	8000f28 <XMC_USIC_CH_GetTransmitBufferStatus>
 800123e:	4603      	mov	r3, r0
 8001240:	2b80      	cmp	r3, #128	; 0x80
 8001242:	d0f9      	beq.n	8001238 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	f7ff fe7d 	bl	8000f48 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001258:	e004      	b.n	8001264 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800127a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d111      	bne.n	80012a6 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001282:	bf00      	nop
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fe4f 	bl	8000f28 <XMC_USIC_CH_GetTransmitBufferStatus>
 800128a:	4603      	mov	r3, r0
 800128c:	2b80      	cmp	r3, #128	; 0x80
 800128e:	d0f9      	beq.n	8001284 <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	f7ff fe57 	bl	8000f48 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80012a4:	e004      	b.n	80012b0 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop

080012b8 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80012c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e003      	b.n	80012de <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80012dc:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <XMC_USIC_CH_Enable+0x74>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d003      	beq.n	8001304 <XMC_USIC_CH_Enable+0x18>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <XMC_USIC_CH_Enable+0x78>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d103      	bne.n	800130c <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001304:	4818      	ldr	r0, [pc, #96]	; (8001368 <XMC_USIC_CH_Enable+0x7c>)
 8001306:	f000 f981 	bl	800160c <XMC_USIC_Enable>
 800130a:	e016      	b.n	800133a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <XMC_USIC_CH_Enable+0x80>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d003      	beq.n	800131c <XMC_USIC_CH_Enable+0x30>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <XMC_USIC_CH_Enable+0x84>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d103      	bne.n	8001324 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 800131c:	4815      	ldr	r0, [pc, #84]	; (8001374 <XMC_USIC_CH_Enable+0x88>)
 800131e:	f000 f975 	bl	800160c <XMC_USIC_Enable>
 8001322:	e00a      	b.n	800133a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <XMC_USIC_CH_Enable+0x8c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d003      	beq.n	8001334 <XMC_USIC_CH_Enable+0x48>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <XMC_USIC_CH_Enable+0x90>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d102      	bne.n	800133a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <XMC_USIC_CH_Enable+0x94>)
 8001336:	f000 f969 	bl	800160c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001340:	bf00      	nop
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f9      	beq.n	8001342 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f023 020f 	bic.w	r2, r3, #15
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
}
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40030000 	.word	0x40030000
 8001364:	40030200 	.word	0x40030200
 8001368:	40030008 	.word	0x40030008
 800136c:	48020000 	.word	0x48020000
 8001370:	48020200 	.word	0x48020200
 8001374:	48020008 	.word	0x48020008
 8001378:	48024000 	.word	0x48024000
 800137c:	48024200 	.word	0x48024200
 8001380:	48024008 	.word	0x48024008

08001384 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b63      	cmp	r3, #99	; 0x63
 8001394:	d95a      	bls.n	800144c <XMC_USIC_CH_SetBaudrate+0xc8>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d057      	beq.n	800144c <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 800139c:	f7ff f9ae 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80013a4:	fba3 2302 	umull	r2, r3, r3, r2
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4a2c      	ldr	r2, [pc, #176]	; (8001460 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 80013b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80013c2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80013c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
 80013ce:	e022      	b.n	8001416 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d4:	fb02 f203 	mul.w	r2, r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	fb01 f303 	mul.w	r3, r1, r3
 80013e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e4:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	0a9b      	lsrs	r3, r3, #10
 80013ea:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f2:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fa:	d809      	bhi.n	8001410 <XMC_USIC_CH_SetBaudrate+0x8c>
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	429a      	cmp	r2, r3
 8001402:	d205      	bcs.n	8001410 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	3b01      	subs	r3, #1
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1d9      	bne.n	80013d0 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 800141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141e:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001420:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <XMC_USIC_CH_SetBaudrate+0xe0>)
 800142e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	3a01      	subs	r2, #1
 8001434:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001436:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	3b01      	subs	r3, #1
 800143c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800143e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800144a:	e002      	b.n	8001452 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001456:	4618      	mov	r0, r3
 8001458:	3738      	adds	r7, #56	; 0x38
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	51eb851f 	.word	0x51eb851f
 8001464:	fc0080ef 	.word	0xfc0080ef

08001468 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001474:	f7ff f942 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001478:	4603      	mov	r3, r0
 800147a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800148a:	6a3a      	ldr	r2, [r7, #32]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	429a      	cmp	r2, r3
 8001490:	dd5f      	ble.n	8001552 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	fb92 f3f3 	sdiv	r3, r2, r3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 800149c:	e010      	b.n	80014c0 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	3301      	adds	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	fb03 f302 	mul.w	r3, r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d8e9      	bhi.n	800149e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80014ca:	6a3a      	ldr	r2, [r7, #32]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80014e0:	6a3a      	ldr	r2, [r7, #32]
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	3301      	adds	r3, #1
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001502:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1acb      	subs	r3, r1, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	bfb8      	it	lt
 8001510:	425b      	neglt	r3, r3
 8001512:	429a      	cmp	r2, r3
 8001514:	da02      	bge.n	800151c <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	3301      	adds	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001534:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	3a01      	subs	r2, #1
 800153a:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800153c:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	3b01      	subs	r3, #1
 8001542:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001544:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001550:	e002      	b.n	8001558 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800155c:	4618      	mov	r0, r3
 800155e:	3730      	adds	r7, #48	; 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	fc0080ef 	.word	0xfc0080ef

08001568 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800157e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001590:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	0211      	lsls	r1, r2, #8
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800159e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 80015a0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	f8ffc0c0 	.word	0xf8ffc0c0

080015b8 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80015e0:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	0211      	lsls	r1, r2, #8
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80015ee:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	efffc0c0 	.word	0xefffc0c0

0800160c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <XMC_USIC_Enable+0xac>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d118      	bne.n	800164e <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 800161c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001620:	f7ff f9b4 	bl	800098c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001624:	bf00      	nop
 8001626:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800162a:	f7ff f9cb 	bl	80009c4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f8      	bne.n	8001626 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001634:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001638:	f7ff f820 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 800163c:	bf00      	nop
 800163e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001642:	f7ff f837 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f8      	bne.n	800163e <XMC_USIC_Enable+0x32>
 800164c:	e030      	b.n	80016b0 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <XMC_USIC_Enable+0xb0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d114      	bne.n	8001680 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001656:	481a      	ldr	r0, [pc, #104]	; (80016c0 <XMC_USIC_Enable+0xb4>)
 8001658:	f7ff f998 	bl	800098c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 800165c:	bf00      	nop
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <XMC_USIC_Enable+0xb4>)
 8001660:	f7ff f9b0 	bl	80009c4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800166a:	4815      	ldr	r0, [pc, #84]	; (80016c0 <XMC_USIC_Enable+0xb4>)
 800166c:	f7ff f806 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001670:	bf00      	nop
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <XMC_USIC_Enable+0xb4>)
 8001674:	f7ff f81e 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <XMC_USIC_Enable+0x66>
 800167e:	e017      	b.n	80016b0 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <XMC_USIC_Enable+0xb8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d113      	bne.n	80016b0 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001688:	480f      	ldr	r0, [pc, #60]	; (80016c8 <XMC_USIC_Enable+0xbc>)
 800168a:	f7ff f97f 	bl	800098c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 800168e:	bf00      	nop
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <XMC_USIC_Enable+0xbc>)
 8001692:	f7ff f997 	bl	80009c4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <XMC_USIC_Enable+0xbc>)
 800169e:	f7fe ffed 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 80016a2:	bf00      	nop
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <XMC_USIC_Enable+0xbc>)
 80016a6:	f7ff f805 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40030008 	.word	0x40030008
 80016bc:	48020008 	.word	0x48020008
 80016c0:	10000080 	.word	0x10000080
 80016c4:	48024008 	.word	0x48024008
 80016c8:	10000100 	.word	0x10000100

080016cc <_init>:
  }
}

/* Init */
void _init(void)
{}
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80016e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff9f 	bl	80016d8 <XMC_USIC_CH_TXFIFO_IsFull>
 800179a:	4603      	mov	r3, r0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ffb9 	bl	8001728 <XMC_USIC_CH_RXFIFO_IsEmpty>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fd73 	bl	80012b8 <XMC_I2C_CH_GetReceivedData>
 80017d2:	4603      	mov	r3, r0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff fcef 	bl	80011d4 <XMC_I2C_CH_MasterTransmit>
}
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fd09 	bl	8001220 <XMC_I2C_CH_MasterReceiveAck>
}
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fd23 	bl	800126c <XMC_I2C_CH_MasterReceiveNack>
}
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	2110      	movs	r1, #16
 800183c:	f7ff ff94 	bl	8001768 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc9f 	bl	8001188 <XMC_I2C_CH_MasterStop>
}
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	2104      	movs	r1, #4
 8001866:	f7ff ff7f 	bl	8001768 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	b29a      	uxth	r2, r3
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4608      	mov	r0, r1
 8001876:	4611      	mov	r1, r2
 8001878:	461a      	mov	r2, r3
 800187a:	f7ff fc1d 	bl	80010b8 <XMC_I2C_CH_MasterStart>
}
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	2108      	movs	r1, #8
 800189a:	f7ff ff65 	bl	8001768 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	f7ff fc37 	bl	8001120 <XMC_I2C_CH_MasterRepeatedStart>
}
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e001      	b.n	80018d8 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop

080018e4 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff2c 	bl	8001750 <XMC_I2C_CH_GetStatusFlag>
 80018f8:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4013      	ands	r3, r2
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	f7ff ff25 	bl	8001768 <XMC_I2C_CH_ClearStatusFlag>
}
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	460b      	mov	r3, r1
 8001932:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8001934:	2302      	movs	r3, #2
 8001936:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800194c:	2b01      	cmp	r3, #1
 800194e:	d00d      	beq.n	800196c <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 8001950:	7afa      	ldrb	r2, [r7, #11]
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	4611      	mov	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f000 f88c 	bl	8001a80 <I2C_MASTER_lStartTransmitPolling>
 8001968:	4603      	mov	r3, r0
 800196a:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 800196c:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop

08001978 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af04      	add	r7, sp, #16
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001994:	2b00      	cmp	r3, #0
 8001996:	d016      	beq.n	80019c6 <I2C_MASTER_Receive+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d010      	beq.n	80019c6 <I2C_MASTER_Receive+0x4e>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
 80019a4:	7afa      	ldrb	r2, [r7, #11]
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	4611      	mov	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f000 f929 	bl	8001c14 <I2C_MASTER_lStartReceivePolling>
 80019c2:	4603      	mov	r3, r0
 80019c4:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	71fb      	strb	r3, [r7, #7]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	210c      	movs	r1, #12
 80019e6:	f7ff febf 	bl	8001768 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3c>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	f7ff ff3d 	bl	8001884 <I2C_MASTER_SendRepeatedStart>
 8001a0a:	e00d      	b.n	8001a28 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x58>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	4611      	mov	r1, r2
 8001a22:	461a      	mov	r2, r3
 8001a24:	f7ff ff14 	bl	8001850 <I2C_MASTER_SendStart>
  }
}
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop

08001a30 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <I2C_MASTER_AbortTransmit+0x28>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d001      	beq.n	8001a58 <I2C_MASTER_AbortTransmit+0x28>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a62:	f042 0202 	orr.w	r2, r2, #2
 8001a66:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8001a90:	2302      	movs	r3, #2
 8001a92:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	f083 0301 	eor.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <I2C_MASTER_lStartTransmitPolling+0x38>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <I2C_MASTER_lStartTransmitPolling+0x44>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <I2C_MASTER_lStartTransmitPolling+0x44>
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	74fb      	strb	r3, [r7, #19]
 8001ac8:	e09e      	b.n	8001c08 <I2C_MASTER_lStartTransmitPolling+0x188>
  }
  else
  {
    if (send_start == true)
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d02c      	beq.n	8001b2a <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      if (handle->runtime->bus_acquired == false)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f083 0301 	eor.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d022      	beq.n	8001b2a <I2C_MASTER_lStartTransmitPolling+0xaa>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f7ff ff71 	bl	80019d0 <I2C_MASTER_lSendStart_Or_RepeatedStart>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8001aee:	bf00      	nop
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001af6:	f7ff fef5 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f7      	beq.n	8001af0 <I2C_MASTER_lStartTransmitPolling+0x70>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	2120      	movs	r1, #32
 8001b04:	f7ff feee 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <I2C_MASTER_lStartTransmitPolling+0xa0>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	2120      	movs	r1, #32
 8001b12:	f7ff fef9 	bl	8001908 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ff8a 	bl	8001a30 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e074      	b.n	8001c0a <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b26:	f7ff feef 	bl	8001908 <I2C_MASTER_ClearFlag>
        }
      }
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d12e      	bne.n	8001b94 <I2C_MASTER_lStartTransmitPolling+0x114>
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8001b36:	e028      	b.n	8001b8a <I2C_MASTER_lStartTransmitPolling+0x10a>
      {
        I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff fe4a 	bl	80017dc <I2C_MASTER_TransmitByte>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8001b48:	bf00      	nop
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001b50:	f7ff fec8 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f7      	beq.n	8001b4a <I2C_MASTER_lStartTransmitPolling+0xca>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	f7ff fec1 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <I2C_MASTER_lStartTransmitPolling+0xfa>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	f7ff fecc 	bl	8001908 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff ff5d 	bl	8001a30 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e047      	b.n	8001c0a <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b80:	f7ff fec2 	bl	8001908 <I2C_MASTER_ClearFlag>
        }

        buffer_index++;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3d2      	bcc.n	8001b38 <I2C_MASTER_lStartTransmitPolling+0xb8>
 8001b92:	e02b      	b.n	8001bec <I2C_MASTER_lStartTransmitPolling+0x16c>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8001b94:	e01a      	b.n	8001bcc <I2C_MASTER_lStartTransmitPolling+0x14c>
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8001b96:	e010      	b.n	8001bba <I2C_MASTER_lStartTransmitPolling+0x13a>
        {
          /* transmit each byte till index reaches to the last byte */
          if (buffer_index < size)
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d20b      	bcs.n	8001bb8 <I2C_MASTER_lStartTransmitPolling+0x138>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff fe16 	bl	80017dc <I2C_MASTER_TransmitByte>
            buffer_index++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e000      	b.n	8001bba <I2C_MASTER_lStartTransmitPolling+0x13a>
          }
          else
          {
            break;
 8001bb8:	e008      	b.n	8001bcc <I2C_MASTER_lStartTransmitPolling+0x14c>
    else
    {
      while (buffer_index < size)
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f7ff fde4 	bl	8001788 <I2C_MASTER_IsTXFIFOFull>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e5      	bne.n	8001b98 <I2C_MASTER_lStartTransmitPolling+0x118>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3e0      	bcc.n	8001b96 <I2C_MASTER_lStartTransmitPolling+0x116>
          }
        }
      }
      
      /*make sure data is transmitted from FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8001bd4:	bf00      	nop
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fd90 	bl	8001700 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f083 0301 	eor.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f4      	bne.n	8001bd6 <I2C_MASTER_lStartTransmitPolling+0x156>
    }

    if(send_stop == true)
 8001bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <I2C_MASTER_lStartTransmitPolling+0x184>
    {
      handle->runtime->bus_acquired = false;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff fe14 	bl	800182c <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8001c04:	2300      	movs	r3, #0
 8001c06:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <I2C_MASTER_lStartReceivePolling>:

#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_start,
                                                       uint32_t slave_address, uint8_t *data, uint32_t count,
                               bool send_stop, bool send_nack)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  uint32_t buffer_index;
  uint32_t temp_index;

  status = I2C_MASTER_STATUS_BUSY;
 8001c24:	2302      	movs	r3, #2
 8001c26:	77fb      	strb	r3, [r7, #31]
  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (count == 0U)))
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f083 0301 	eor.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <I2C_MASTER_lStartReceivePolling+0x34>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <I2C_MASTER_lStartReceivePolling+0x40>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <I2C_MASTER_lStartReceivePolling+0x40>
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <I2C_MASTER_lStartReceivePolling+0x46>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	77fb      	strb	r3, [r7, #31]
 8001c58:	e0b8      	b.n	8001dcc <I2C_MASTER_lStartReceivePolling+0x1b8>
  }
  else
  {
    buffer_index = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
    temp_index = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
    if (send_start == true)
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d022      	beq.n	8001cae <I2C_MASTER_lStartReceivePolling+0x9a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f7ff feaf 	bl	80019d0 <I2C_MASTER_lSendStart_Or_RepeatedStart>
      while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8001c72:	bf00      	nop
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001c7a:	f7ff fe33 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f7      	beq.n	8001c74 <I2C_MASTER_lStartReceivePolling+0x60>
      if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	2120      	movs	r1, #32
 8001c88:	f7ff fe2c 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <I2C_MASTER_lStartReceivePolling+0x90>
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	2120      	movs	r1, #32
 8001c96:	f7ff fe37 	bl	8001908 <I2C_MASTER_ClearFlag>
        I2C_MASTER_AbortTransmit(handle);
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff fec8 	bl	8001a30 <I2C_MASTER_AbortTransmit>
        return I2C_MASTER_STATUS_FAILURE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e094      	b.n	8001dce <I2C_MASTER_lStartReceivePolling+0x1ba>
      }
      else
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001caa:	f7ff fe2d 	bl	8001908 <I2C_MASTER_ClearFlag>
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d13a      	bne.n	8001d30 <I2C_MASTER_lStartReceivePolling+0x11c>
    {
      while (buffer_index < count)
 8001cba:	e034      	b.n	8001d26 <I2C_MASTER_lStartReceivePolling+0x112>
      {
        if (((buffer_index + 1U) == count) && (send_nack == true))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d107      	bne.n	8001cd6 <I2C_MASTER_lStartReceivePolling+0xc2>
 8001cc6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <I2C_MASTER_lStartReceivePolling+0xc2>
        {
          I2C_MASTER_ReceiveNACK(handle);
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fda0 	bl	8001814 <I2C_MASTER_ReceiveNACK>
 8001cd4:	e002      	b.n	8001cdc <I2C_MASTER_lStartReceivePolling+0xc8>
        }
        else
        {
          I2C_MASTER_ReceiveACK(handle);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fd90 	bl	80017fc <I2C_MASTER_ReceiveACK>
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 8001cdc:	bf00      	nop
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce4:	f7ff fdfe 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <I2C_MASTER_lStartReceivePolling+0xea>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf4:	f7ff fdf6 	bl	80018e4 <I2C_MASTER_GetFlagStatus>
 8001cf8:	4603      	mov	r3, r0
        else
        {
          I2C_MASTER_ReceiveACK(handle);
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ef      	beq.n	8001cde <I2C_MASTER_lStartReceivePolling+0xca>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
        {
          /* wait for RSI */
        }

        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	f7ff fe00 	bl	8001908 <I2C_MASTER_ClearFlag>
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0e:	f7ff fdfb 	bl	8001908 <I2C_MASTER_ClearFlag>

        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	61ba      	str	r2, [r7, #24]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	18d4      	adds	r4, r2, r3
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff fd4f 	bl	80017c0 <I2C_MASTER_GetReceivedByte>
 8001d22:	4603      	mov	r3, r0
 8001d24:	7023      	strb	r3, [r4, #0]
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      while (buffer_index < count)
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3c6      	bcc.n	8001cbc <I2C_MASTER_lStartReceivePolling+0xa8>
 8001d2e:	e03f      	b.n	8001db0 <I2C_MASTER_lStartReceivePolling+0x19c>
        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	617b      	str	r3, [r7, #20]
      while (temp_index < count)
 8001d34:	e038      	b.n	8001da8 <I2C_MASTER_lStartReceivePolling+0x194>
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8001d36:	e018      	b.n	8001d6a <I2C_MASTER_lStartReceivePolling+0x156>
        {
          /* transmit each byte till index reaches to the last byte */
          if (temp_index < count)
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d213      	bcs.n	8001d68 <I2C_MASTER_lStartReceivePolling+0x154>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            if (((temp_index + 1U) == count) && (send_nack == true))
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d107      	bne.n	8001d5a <I2C_MASTER_lStartReceivePolling+0x146>
 8001d4a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <I2C_MASTER_lStartReceivePolling+0x146>
            {
              I2C_MASTER_ReceiveNACK(handle);
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff fd5e 	bl	8001814 <I2C_MASTER_ReceiveNACK>
 8001d58:	e002      	b.n	8001d60 <I2C_MASTER_lStartReceivePolling+0x14c>
            }
            else
            {
              I2C_MASTER_ReceiveACK(handle);
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fd4e 	bl	80017fc <I2C_MASTER_ReceiveACK>
            }
            temp_index++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e000      	b.n	8001d6a <I2C_MASTER_lStartReceivePolling+0x156>
          }
          else
          {
            break;
 8001d68:	e008      	b.n	8001d7c <I2C_MASTER_lStartReceivePolling+0x168>
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff fd0c 	bl	8001788 <I2C_MASTER_IsTXFIFOFull>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1dd      	bne.n	8001d38 <I2C_MASTER_lStartReceivePolling+0x124>
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8001d7c:	e010      	b.n	8001da0 <I2C_MASTER_lStartReceivePolling+0x18c>
        {
          /* wait for data to come in RX fifo */
          while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 8001d7e:	bf00      	nop
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff fd0f 	bl	80017a4 <I2C_MASTER_IsRXFIFOEmpty>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <I2C_MASTER_lStartReceivePolling+0x16c>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	61ba      	str	r2, [r7, #24]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	18d4      	adds	r4, r2, r3
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff fd12 	bl	80017c0 <I2C_MASTER_GetReceivedByte>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	7023      	strb	r3, [r4, #0]
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3ea      	bcc.n	8001d7e <I2C_MASTER_lStartReceivePolling+0x16a>
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3c2      	bcc.n	8001d36 <I2C_MASTER_lStartReceivePolling+0x122>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
        }
      } /* end of while (temp_index < count) */
    } /* end of else */

    if (send_stop == true)
 8001db0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <I2C_MASTER_lStartReceivePolling+0x1b4>
    {
      handle->runtime->bus_acquired = false;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff fd32 	bl	800182c <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
  }

  return (status);
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop

08001dd8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
 8001de4:	4613      	mov	r3, r2
 8001de6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001de8:	78f8      	ldrb	r0, [r7, #3]
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	3306      	adds	r3, #6
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001dfa:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	1d83      	adds	r3, r0, #6
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop

08001e14 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f023 020f 	bic.w	r2, r3, #15
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	6839      	ldr	r1, [r7, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f7ff f88c 	bl	8000f68 <XMC_I2C_CH_InitEx>
}
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop

08001e58 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	2104      	movs	r1, #4
 8001e64:	f7ff ffd6 	bl	8001e14 <XMC_USIC_CH_SetMode>
}
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop

08001e70 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(200000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <I2C_MASTER_0_disable_io+0x1c>)
 8001e76:	2105      	movs	r1, #5
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f7ff f815 	bl	8000ea8 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, XMC_GPIO_MODE_INPUT_TRISTATE);
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <I2C_MASTER_0_disable_io+0x20>)
 8001e80:	2108      	movs	r1, #8
 8001e82:	2200      	movs	r2, #0
 8001e84:	f7ff f810 	bl	8000ea8 <XMC_GPIO_SetMode>
}
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	48028100 	.word	0x48028100
 8001e90:	48028000 	.word	0x48028000

08001e94 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8001e98:	23d0      	movs	r3, #208	; 0xd0
 8001e9a:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <I2C_MASTER_0_enable_io+0x20>)
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f7ff f802 	bl	8000ea8 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, I2C_MASTER_0_scl_pin_config.mode);
 8001ea4:	23d0      	movs	r3, #208	; 0xd0
 8001ea6:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <I2C_MASTER_0_enable_io+0x24>)
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f7fe fffc 	bl	8000ea8 <XMC_GPIO_SetMode>
}
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	48028100 	.word	0x48028100
 8001eb8:	48028000 	.word	0x48028000

08001ebc <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C0_CH0, &I2C_MASTER_0_channel_config);
 8001ec0:	4813      	ldr	r0, [pc, #76]	; (8001f10 <I2C_MASTER_0_init+0x54>)
 8001ec2:	4914      	ldr	r1, [pc, #80]	; (8001f14 <I2C_MASTER_0_init+0x58>)
 8001ec4:	f7ff ffba 	bl	8001e3c <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX0, 0);
 8001ec8:	4811      	ldr	r0, [pc, #68]	; (8001f10 <I2C_MASTER_0_init+0x54>)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f7ff ff83 	bl	8001dd8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX1, 1);
 8001ed2:	480f      	ldr	r0, [pc, #60]	; (8001f10 <I2C_MASTER_0_init+0x54>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f7ff ff7e 	bl	8001dd8 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH0,
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <I2C_MASTER_0_init+0x54>)
 8001ede:	2108      	movs	r1, #8
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f7ff fb40 	bl	8001568 <XMC_USIC_CH_TXFIFO_Configure>
                               8,
                               XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH0,
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <I2C_MASTER_0_init+0x54>)
 8001eea:	2100      	movs	r1, #0
 8001eec:	2203      	movs	r2, #3
 8001eee:	2307      	movs	r3, #7
 8001ef0:	f7ff fb62 	bl	80015b8 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_8WORDS,
                                (uint32_t)(7));
  XMC_I2C_CH_Start(XMC_I2C0_CH0);
 8001ef4:	4806      	ldr	r0, [pc, #24]	; (8001f10 <I2C_MASTER_0_init+0x54>)
 8001ef6:	f7ff ffaf 	bl	8001e58 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <I2C_MASTER_0_init+0x5c>)
 8001efc:	2105      	movs	r1, #5
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <I2C_MASTER_0_init+0x60>)
 8001f00:	f7fe fa46 	bl	8000390 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, &I2C_MASTER_0_scl_pin_config);
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <I2C_MASTER_0_init+0x64>)
 8001f06:	2108      	movs	r1, #8
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <I2C_MASTER_0_init+0x68>)
 8001f0a:	f7fe fa41 	bl	8000390 <XMC_GPIO_Init>
}
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40030000 	.word	0x40030000
 8001f14:	08002280 	.word	0x08002280
 8001f18:	48028100 	.word	0x48028100
 8001f1c:	08002268 	.word	0x08002268
 8001f20:	48028000 	.word	0x48028000
 8001f24:	08002274 	.word	0x08002274

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff ffd6 	bl	8001f28 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <SystemCoreSetup+0x94>)
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <SystemCoreSetup+0x98>)
 8001f82:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f84:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001f88:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <SystemCoreSetup+0x94>)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <SystemCoreSetup+0x94>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <SystemCoreSetup+0x9c>)
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f023 030f 	bic.w	r3, r3, #15
 8001fac:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <SystemCoreSetup+0x9c>)
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	3314      	adds	r3, #20
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <SystemCoreSetup+0x94>)
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <SystemCoreSetup+0x94>)
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f023 0310 	bic.w	r3, r3, #16
 8001fcc:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001fce:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <SystemCoreSetup+0x94>)
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <SystemCoreSetup+0x94>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f023 0308 	bic.w	r3, r3, #8
 8001fd8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <SystemCoreSetup+0x94>)
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <SystemCoreSetup+0x94>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <SystemCoreSetup+0x94>)
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <SystemCoreSetup+0x94>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ff0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <SystemCoreSetup+0x94>)
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <SystemCoreSetup+0x94>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	08000000 	.word	0x08000000
 800200c:	58001000 	.word	0x58001000

08002010 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]

  return (status);
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <OSCHP_GetFrequency+0x10>)
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	00b71b00 	.word	0x00b71b00

08002044 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 800204c:	4906      	ldr	r1, [pc, #24]	; (8002068 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4313      	orrs	r3, r2
 800205a:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	50004600 	.word	0x50004600

0800206c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <SystemCoreClockSetup+0x60>)
 8002074:	1d3c      	adds	r4, r7, #4
 8002076:	461d      	mov	r5, r3
 8002078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa7e 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002088:	2000      	movs	r0, #0
 800208a:	f7fe fba3 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 800208e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002092:	f7fe fb57 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8002096:	2006      	movs	r0, #6
 8002098:	f7fe fc28 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 800209c:	f7fe fcb6 	bl	8000a0c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 80020a0:	2003      	movs	r0, #3
 80020a2:	2164      	movs	r1, #100	; 0x64
 80020a4:	f7fe fcc2 	bl	8000a2c <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff ffcb 	bl	8002044 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 80020ae:	2002      	movs	r0, #2
 80020b0:	f7fe fc58 	bl	8000964 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7fe fb59 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7fe fc3e 	bl	800093c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe fc27 	bl	8000914 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}
 80020cc:	080022b4 	.word	0x080022b4

080020d0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80020d6:	2300      	movs	r3, #0
 80020d8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <DAVE_Init+0x30>)
 80020dc:	f7ff ff98 	bl	8002010 <CLOCK_XMC4_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d104      	bne.n	80020f4 <DAVE_Init+0x24>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <DAVE_Init+0x34>)
 80020ec:	f7ff fbe4 	bl	80018b8 <I2C_MASTER_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	1ffe883c 	.word	0x1ffe883c
 8002104:	1ffe8800 	.word	0x1ffe8800

08002108 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002118:	b2db      	uxtb	r3, r3
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop

08002128 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
  return handle->runtime->rx_busy;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002138:	b2db      	uxtb	r3, r3
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af04      	add	r7, sp, #16
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800214e:	f7ff ffbf 	bl	80020d0 <DAVE_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	70fb      	strb	r3, [r7, #3]

  if (status != DAVE_STATUS_SUCCESS)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d000      	beq.n	800215e <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 800215c:	e7fe      	b.n	800215c <main+0x14>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  mem_address[0] = IO_STATE;//memory which need to be read from slave
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <main+0xc0>)
 8002160:	2258      	movs	r2, #88	; 0x58
 8002162:	701a      	strb	r2, [r3, #0]
	  //Write data to IO EXPANDER
	  I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 8002164:	2301      	movs	r3, #1
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	4827      	ldr	r0, [pc, #156]	; (800220c <main+0xc4>)
 800216e:	2101      	movs	r1, #1
 8002170:	22a0      	movs	r2, #160	; 0xa0
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <main+0xc0>)
 8002174:	f7ff fbd6 	bl	8001924 <I2C_MASTER_Transmit>
	  while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 8002178:	bf00      	nop
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <main+0xc4>)
 800217c:	f7ff ffc4 	bl	8002108 <I2C_MASTER_IsTxBusy>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f9      	bne.n	800217a <main+0x32>

	  I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 8002186:	2301      	movs	r3, #1
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	481f      	ldr	r0, [pc, #124]	; (800220c <main+0xc4>)
 8002190:	2100      	movs	r1, #0
 8002192:	22a0      	movs	r2, #160	; 0xa0
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <main+0xc8>)
 8002196:	f7ff fbc5 	bl	8001924 <I2C_MASTER_Transmit>
	  while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 800219a:	bf00      	nop
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <main+0xc4>)
 800219e:	f7ff ffb3 	bl	8002108 <I2C_MASTER_IsTxBusy>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <main+0x54>

	  //Read data from IO EXPANDER
	  I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 80021a8:	2301      	movs	r3, #1
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	4816      	ldr	r0, [pc, #88]	; (800220c <main+0xc4>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	22a0      	movs	r2, #160	; 0xa0
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <main+0xc0>)
 80021b8:	f7ff fbb4 	bl	8001924 <I2C_MASTER_Transmit>
	  while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 80021bc:	bf00      	nop
 80021be:	4813      	ldr	r0, [pc, #76]	; (800220c <main+0xc4>)
 80021c0:	f7ff ffa2 	bl	8002108 <I2C_MASTER_IsTxBusy>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <main+0x76>

	  I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 80021ca:	2301      	movs	r3, #1
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2301      	movs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	480d      	ldr	r0, [pc, #52]	; (800220c <main+0xc4>)
 80021d8:	2101      	movs	r1, #1
 80021da:	22a0      	movs	r2, #160	; 0xa0
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <main+0xcc>)
 80021de:	f7ff fbcb 	bl	8001978 <I2C_MASTER_Receive>
	  while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 80021e2:	bf00      	nop
 80021e4:	4809      	ldr	r0, [pc, #36]	; (800220c <main+0xc4>)
 80021e6:	f7ff ff9f 	bl	8002128 <I2C_MASTER_IsRxBusy>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <main+0x9c>
	  for(int i=0;i<90000;i++);
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e002      	b.n	80021fc <main+0xb4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a06      	ldr	r2, [pc, #24]	; (8002218 <main+0xd0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	ddf8      	ble.n	80021f6 <main+0xae>
  }
 8002204:	e7ab      	b.n	800215e <main+0x16>
 8002206:	bf00      	nop
 8002208:	1ffe8844 	.word	0x1ffe8844
 800220c:	1ffe8800 	.word	0x1ffe8800
 8002210:	1ffe880c 	.word	0x1ffe880c
 8002214:	1ffe8840 	.word	0x1ffe8840
 8002218:	00015f8f 	.word	0x00015f8f

0800221c <__libc_init_array>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <__libc_init_array+0x3c>)
 8002220:	4c0e      	ldr	r4, [pc, #56]	; (800225c <__libc_init_array+0x40>)
 8002222:	1ae4      	subs	r4, r4, r3
 8002224:	10a4      	asrs	r4, r4, #2
 8002226:	2500      	movs	r5, #0
 8002228:	461e      	mov	r6, r3
 800222a:	42a5      	cmp	r5, r4
 800222c:	d004      	beq.n	8002238 <__libc_init_array+0x1c>
 800222e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002232:	4798      	blx	r3
 8002234:	3501      	adds	r5, #1
 8002236:	e7f8      	b.n	800222a <__libc_init_array+0xe>
 8002238:	f7ff fa48 	bl	80016cc <_init>
 800223c:	4c08      	ldr	r4, [pc, #32]	; (8002260 <__libc_init_array+0x44>)
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <__libc_init_array+0x48>)
 8002240:	1ae4      	subs	r4, r4, r3
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	2500      	movs	r5, #0
 8002246:	461e      	mov	r6, r3
 8002248:	42a5      	cmp	r5, r4
 800224a:	d004      	beq.n	8002256 <__libc_init_array+0x3a>
 800224c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002250:	4798      	blx	r3
 8002252:	3501      	adds	r5, #1
 8002254:	e7f8      	b.n	8002248 <__libc_init_array+0x2c>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	1ffe8810 	.word	0x1ffe8810
 800225c:	1ffe8810 	.word	0x1ffe8810
 8002260:	1ffe8810 	.word	0x1ffe8810
 8002264:	1ffe8810 	.word	0x1ffe8810

08002268 <I2C_MASTER_0_sda_pin_config>:
 8002268:	000000d0 00000001 00000000              ............

08002274 <I2C_MASTER_0_scl_pin_config>:
 8002274:	000000d0 00000001 00000000              ............

08002280 <I2C_MASTER_0_channel_config>:
 8002280:	00030d40 00000000                       @.......

08002288 <I2C_MASTER_0_config>:
 8002288:	08002280 08001ebd 08001e95 08001e71     ."..........q...
	...
 80022ac:	03030202 0000ffff 01010230 00010000     ........0.......
 80022bc:	00000000 00010000 01010102              ............
