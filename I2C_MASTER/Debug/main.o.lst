   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.I2C_MASTER_IsTxBusy,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	I2C_MASTER_IsTxBusy:
  25              	.LFB285:
  26              	 .file 1 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER/i2c_master.h"
   1:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @file i2c_master.h
   3:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @date 2021-01-08
   4:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * NOTE:
   6:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * regenerated.
   8:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
   9:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
  10:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @cond
  11:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  12:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER v4.1.34 Configures USIC channel to transmit & receive data using I2C protocol.
  13:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  14:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  15:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * All rights reserved.
  16:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  17:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * following conditions are met:
  19:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  20:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * disclaimer.
  22:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  23:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  26:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  29:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  37:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  40:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  41:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Change History
  42:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * --------------
  43:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  44:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-02-16:
  45:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Initial version<br>
  46:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  47:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-06-10:
  48:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  50:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-08-31:
  51:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - DMA support APIs added
  52:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-10-20:
  53:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Code snippets updated
  54:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2016-08-18:
  55:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2017-11-17:
  57:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added tx_irqn and rx_irqn to I2C_MASTER_CONFIG_t
  58:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2017-12-20:
  59:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_FlushTxFifo(), I2C_MASTER_FlushRxFifo(), I2C_MASTER_DisableOutputs(), I2C
  60:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  61:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2019-16-09:
  62:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_START_TRANSMIT_RETRIES to control the wait to see the START symbol in the
  63:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_STATUS_BUS_ERROR as possible return value from I2C_MASTER_StartTransmitIR
  64:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  65:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2021-01-08:
  66:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Modified check for minimum XMCLib version
  67:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  68:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcond
  69:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  70:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
  71:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  72:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifndef I2C_MASTER_H
  73:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_H
  74:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  75:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  76:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  77:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  78:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * HEADER FILES
  79:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  80:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "xmc_gpio.h"
  81:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "xmc_i2c.h"
  82:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "i2c_master_conf.h"
  83:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  84:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if(UC_FAMILY == XMC4)
  85:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  86:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  87:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  88:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  89:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  90:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "DAVE_Common.h"
  91:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  92:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  93:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  94:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  95:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  96:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * MACROS
  97:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  98:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_XMC_LIB_MAJOR_VERSION 2
  99:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_XMC_LIB_MINOR_VERSION 0
 100:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_XMC_LIB_PATCH_VERSION 0
 101:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 102:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if !((XMC_LIB_MAJOR_VERSION > I2C_MASTER_XMC_LIB_MAJOR_VERSION) ||\
 103:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > I2C_
 104:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == I2C
 105:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
 106:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 107:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 108:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifndef I2C_MASTER_START_TRANSMIT_RETRIES
 109:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_START_TRANSMIT_RETRIES (0x7fff)
 110:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 111:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 112:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 113:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * ENUMS
 114:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
 115:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 116:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
 117:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 118:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 119:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 120:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Initialization status.
 121:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 122:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_STATUS
 123:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 124:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 125:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 126:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 127:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U,  /*!< I2C_MASTER UNSUPPORTED MODE */
 128:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_BUS_ERROR = 4U          /*!< I2C_MASTER BUS_ERROR */
 129:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_STATUS_t;
 130:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 131:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 132:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Direction
 133:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 134:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 135:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 136:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 137:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 138:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 139:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 140:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 141:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 142:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 143:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 144:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 145:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 146:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 147:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 148:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 149:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 150:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @}
 151:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 152:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 153:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** * DATA STRUCTURES
 154:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** ***************************************************************************************************
 155:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 156:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 157:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 158:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 159:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 160:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 161:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Structure for DMA configuration.
 162:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 163:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 164:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 165:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 166:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 167:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 168:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 169:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 170:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 171:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 172:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 173:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 174:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 175:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 176:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 177:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 178:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 179:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                                    data transmission.*/
 180:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 181:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 182:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 183:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                                    data reception.*/
 184:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 185:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 186:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_enable_io;      /*!< Function pointer to enable SDA/SCL outpu
 187:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_disable_io;     /*!< Function pointer to disable SDA/SCL outp
 188:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 189:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 190:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when the transmission is complete
 191:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 192:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when the reception is complete*/
 193:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 194:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when nack is received*/
 195:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 196:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when arbitration lost is occured*
 197:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 198:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when error is detected.*/
 199:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 200:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 201:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 202:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 203:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 204:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 205:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 206:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 207:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    IRQn_Type tx_irqn;
 208:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    IRQn_Type rx_irqn; 
 209:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_CONFIG_t;
 210:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 211:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 212:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 213:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 214:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 215:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 216:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 217:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 218:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 219:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 220:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 221:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 222:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 223:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 224:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 225:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 226:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 227:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 228:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 229:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 230:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 231:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 232:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 233:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 234:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 235:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 236:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 237:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 238:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 239:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 240:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER
 241:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 242:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 243:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 244:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 245:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****    	                                               that can change at runtime*/
 246:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_t;
 247:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 248:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 249:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @}
 250:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 251:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 252:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifdef __cplusplus
 253:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** extern "C" {
 254:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 255:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 256:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 257:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 258:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 259:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 260:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 261:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 262:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 263:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * API PROTOTYPES
 264:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
 265:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 266:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 267:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 268:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 269:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description: </b><br>
 270:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The function can be used to check application software compatibility with a
 271:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * specific version of the APP.
 272:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 273:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 274:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 275:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 276:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 277:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 278:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 279:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_Init();
 280:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 281:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(version.major != 4U)
 282:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 283:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 284:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 285:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 286:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 287:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 288:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 289:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 290:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 291:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 292:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 293:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 294:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
 295:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 296:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description: </b><br>
 297:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 298:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * FIFO configuration etc are done in this API.
 299:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 300:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * function.
 301:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 302:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 303:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 304:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 305:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * #include "DAVE.h"
 306:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * int main(void)
 307:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * {
 308:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   // Initializing the modules and the multiplexer
 309:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 310:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1)
 311:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {}
 312:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 313:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 314:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 315:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 316:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 317:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 318:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 319:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 320:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 321:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 322:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 323:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 324:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 325:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address I2C slave device address.
 326:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data buffer to receive data.
 327:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 328:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 329:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 330:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 331:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 332:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 333:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 334:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 335:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 336:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).\n
 337:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 338:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 339:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 340:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 341:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 342:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 343:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_READ 10
 344:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 345:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 346:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 347:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 348:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 349:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 350:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 351:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
 352:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 353:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 354:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t data = 0x55;
 355:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_data;
 356:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 357:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 358:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 359:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 360:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   init_status = DAVE_Init();
 361:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 362:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 363:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 364:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
 365:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 366:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 367:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 368:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 369:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 370:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 371:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Read data from IO EXPANDER
 372:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 373:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 374:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 375:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 376:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 377:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 378:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1)
 379:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   { }
 380:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  return 0;
 381:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 382:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 383:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 384:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 385:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 386:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 387:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 388:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 389:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 390:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Transmits data to I2C slave device.
 391:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 392:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 393:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 394:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address I2C slave device address.
 395:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data buffer containing the data to transmit.
 396:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 397:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 398:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 399:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 400:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 401:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 402:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 403:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 404:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 405:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write). \n
 406:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 407:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 
 408:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 409:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 410:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 411:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 412:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 413:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 414:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 415:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 416:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 417:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
 418:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 419:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 420:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 421:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 422:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 423:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 424:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 425:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 426:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 427:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 428:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 429:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
 430:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 431:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 432:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 433:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 434:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 435:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 436:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 437:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 438:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 439:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 440:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 441:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 442:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 443:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 444:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 445:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 446:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 447:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 448:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 449:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Get the I2C flag status.
 450:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 451:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 452:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 453:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 454:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    multiple flags.
 455:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 456:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t Flag status.
 457:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 458:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 459:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 460:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 461:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 462:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 463:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 464:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 465:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 466:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 467:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 468:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 469:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 470:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 471:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 472:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 473:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 474:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
 475:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 476:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 477:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 478:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 479:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 480:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 481:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 482:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 483:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 484:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 485:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 486:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 487:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 488:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 489:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Clear the I2C flag status.
 490:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 491:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 492:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 493:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 494:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    multiple flags.
 495:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 496:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None <BR>
 497:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 498:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 499:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 500:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 501:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 502:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 503:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 504:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 505:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 506:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 507:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 508:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 509:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 510:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 511:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 512:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 513:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
 514:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 515:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 516:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 517:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 518:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 519:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 520:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 521:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 522:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 523:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 524:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 525:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 526:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 527:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 528:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 529:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 530:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 531:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 532:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 533:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 534:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * user can start a new transmission without delay.
 535:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 536:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 537:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 538:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 539:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 540:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 541:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 542:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 543:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 544:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 545:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 546:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 547:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 548:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 549:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 550:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 551:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 552:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 553:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 554:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 555:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 556:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 557:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 558:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
 559:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 560:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 561:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 562:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 563:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 564:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 565:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 566:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 567:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 568:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 569:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 570:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 571:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** * @brief Stops the active data reception request.
 572:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 573:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 574:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 575:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 576:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 577:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 578:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 579:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * a new receive request.
 580:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 581:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 582:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 583:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 584:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 585:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 586:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 587:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 588:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 589:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 590:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t rx_buf[25];
 591:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t tx_buf[2];
 592:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_STATUS_t init_status;
 593:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   init_status = DAVE_Init();
 594:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 595:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 596:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //send the address from which data to be transfered
 597:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     tx_buf[0] = 0;
 598:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 599:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 600:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 601:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 602:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 603:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 604:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 605:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 606:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 607:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 608:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1U)
 609:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 610:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 611:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 612:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 1U;
 613:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 614:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 615:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 616:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 617:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 618:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 619:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 620:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 621:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U) || defined(DOXYGEN)
 622:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 623:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 624:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 625:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 626:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  block_size size of the block
 627:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  addr    address\n
 628:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 629:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 630:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 631:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 632:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 633:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 634:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 635:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * request is registered.
 636:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 637:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 638:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 639:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 640:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * structure to store the status of transmission.
 641:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 642:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Actual data transmission happens through DMA channel.
 643:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 644:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 645:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 646:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 647:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the completion of data transmission.
 648:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 649:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * calls to this API.
 650:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 651:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 652:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 653:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 654:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 655:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 656:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 657:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 658:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 659:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 660:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 661:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 662:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 663:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 664:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 665:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 666:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 667:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 668:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 669:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 670:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 671:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 672:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 673:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 674:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 675:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 676:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 677:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
 678:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 679:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 680:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 681:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 682:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 683:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 684:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // trigger the DMA
 685:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 686:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 687:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 688:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 689:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 690:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 691:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 692:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 693:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 694:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 695:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 696:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 697:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 698:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 699:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 700:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 701:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 702:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 703:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U) || defined(DOXYGEN)
 704:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 705:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 706:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 707:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 708:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 709:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param block_size  size of the block
 710:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  addr  address \n
 711:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 712:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 713:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 714:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 715:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 716:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 717:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 718:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 719:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured callback function will be executed.
 720:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 721:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 722:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 723:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 724:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * are received.
 725:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 726:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 727:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 728:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 729:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 730:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 731:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 732:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 733:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 734:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 735:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 736:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 737:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 738:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 739:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Pre condition:
 740:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 741:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 742:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t ReadData[256];
 743:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 744:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 745:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 746:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 747:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 748:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 749:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 750:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 751:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 752:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 753:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 754:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 755:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 756:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
 757:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 758:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 759:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 760:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 761:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 762:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 763:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 764:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 765:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 766:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 767:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 768:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 769:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  
 770:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 771:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 772:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 773:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 774:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 775:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 776:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 777:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 778:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 779:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 780:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 781:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 782:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  @endcode
 783:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 784:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 785:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 786:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 787:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 788:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 789:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 790:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 791:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 792:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 793:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start flag to indicate the start condition
 794:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address slave address
 795:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data    pointer to buffer
 796:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size    number of bytes
 797:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 798:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 799:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 800:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 801:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 802:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 803:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 804:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 805:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * request is registered.
 806:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 807:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 808:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 809:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 810:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 811:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 812:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 813:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * in progress.
 814:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 815:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 816:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 817:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 818:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 819:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 820:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 821:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 822:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 823:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 824:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 825:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 826:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 827:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).
 828:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 829:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 830:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 831:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 832:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 833:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 834:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 835:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 836:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 837:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 838:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 839:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 840:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 841:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 842:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 843:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
 844:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 845:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 846:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 847:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 848:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 849:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 850:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 851:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 852:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 853:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 854:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 855:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 856:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 857:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 858:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 859:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 860:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 861:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 862:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 863:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 864:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 865:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 866:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 867:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 868:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 869:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start flag to indicate the start condition
 870:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address slave address
 871:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data    pointer to buffer
 872:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  count    number of bytes
 873:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 874:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 875:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 876:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 877:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 878:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 879:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 880:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 881:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 882:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 883:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 884:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 885:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 886:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 887:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 888:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 889:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 890:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 891:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 892:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 893:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 894:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 895:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 896:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).
 897:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 898:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 899:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 900:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
 901:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 902:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_buffer[64];
 903:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 904:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 905:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 906:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 907:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 908:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 909:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 910:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 911:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 912:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
 913:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 914:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 915:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 916:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 917:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 918:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 919:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 920:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 921:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 922:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 923:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 924:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 925:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 926:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 927:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 928:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 929:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 930:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 931:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 932:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 933:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 934:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 935:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 936:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 937:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 938:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                      their bit positions.\n
 939:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 940:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 941:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 942:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 943:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * buffer error flag before providing the value.
 944:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 945:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 946:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 947:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 948:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 949:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 950:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 951:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 952:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 953:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 954:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 955:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 956:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 957:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 958:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 959:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 960:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 961:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 962:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 963:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 964:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 965:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 966:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 967:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 968:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 969:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 970:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 971:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 972:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 973:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 974:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 975:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 976:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 977:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 978:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 979:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 980:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 981:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 982:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 983:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 984:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL));
 985:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 986:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
 987:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 988:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 989:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 990:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 991:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 992:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size   FIFO size
 993:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 994:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 995:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 996:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 997:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 998:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
 999:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1000:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1001:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1002:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1003:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * below the trigger limit.
1004:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1005:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1006:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1007:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1008:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1009:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1010:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1011:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
1012:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1013:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1014:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1015:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1016:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1017:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1018:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1019:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
1020:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1021:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
1022:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
1023:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1024:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1025:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1026:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1027:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1028:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1029:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1030:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1031:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1032:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1033:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1034:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1035:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1036:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1037:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1038:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                              const uint32_t limit)
1039:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1040:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL));
1041:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1042:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1043:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1044:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1045:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1046:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1047:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size   FIFO size
1048:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1049:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1050:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1051:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1052:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1053:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1054:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1055:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1056:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1057:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1058:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * above the trigger limit.
1059:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1060:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1061:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1062:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1063:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1064:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1065:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1066:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1067:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Rx_Data[256];
1068:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1069:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1070:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1071:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1072:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1073:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1074:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1075:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1076:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1077:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1078:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1079:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1080:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1081:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1082:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1083:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1084:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1085:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1086:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1087:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1088:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1089:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1090:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1091:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1092:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1093:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1094:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                              const uint32_t limit)
1095:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1096:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
1097:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1098:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1099:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1100:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1101:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1102:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1103:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1104:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1105:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1106:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1107:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1108:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1109:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1110:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * data to the transmit FIFO.
1111:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1112:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1113:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1114:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1115:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1116:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1117:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1118:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1119:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1120:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1121:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1122:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1123:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1124:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1125:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1126:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1127:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1128:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1129:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1130:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1131:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1132:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1133:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1134:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1135:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Wait when Tx FIFO is full
1136:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1137:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1138:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1139:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1140:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  while(1U)
1141:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1142:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1143:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
1144:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1145:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1146:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1147:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1148:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
1149:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1150:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1151:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1152:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1153:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1154:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1155:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1156:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1157:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1158:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1159:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1160:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1161:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1162:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1163:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1164:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1165:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1166:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1167:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1168:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1169:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1170:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1171:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1172:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1173:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1174:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1175:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1176:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1177:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1178:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1179:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1180:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1181:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1182:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1183:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1184:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1185:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1186:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1187:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1188:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1189:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1190:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1191:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1192:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1193:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1194:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1195:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1196:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1197:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1198:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1199:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1200:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1201:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1202:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1203:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1204:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1205:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1206:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1U)
1207:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
1208:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1209:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1210:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1211:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1212:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1213:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1214:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
1215:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1216:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1217:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1218:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1219:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1220:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1221:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1222:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1223:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1224:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1225:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1226:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1227:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * comparison using \a OR operation.
1228:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1229:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1230:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1231:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * event.
1232:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1233:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interest before checking the status.
1234:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1235:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1236:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1237:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1238:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1239:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1240:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t mem_address[2];
1241:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   int main(void)
1242:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
1243:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     DAVE_STATUS_t init_status;
1244:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1245:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     init_status = DAVE_Init();
1246:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1247:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1248:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1249:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1250:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1251:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1252:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1253:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1254:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1255:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1256:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1257:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1258:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1259:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     else
1260:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1261:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1262:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1263:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1264:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1265:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1266:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      return 1U;
1267:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1268:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1269:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1270:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1271:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1272:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1273:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL));
1274:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1275:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1276:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1277:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1278:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1279:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * transmit FIFO.
1280:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1281:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1282:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1283:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1284:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1285:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \a OR operation.
1286:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1287:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return    None
1288:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1289:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1290:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1291:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1292:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * appropriately masked.
1293:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1294:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1295:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1296:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1297:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1298:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1299:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1300:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1301:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1302:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1303:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1304:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1305:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1306:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1307:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1308:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1309:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1310:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1311:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1312:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1313:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1314:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1315:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1316:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1317:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1318:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1319:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1320:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1321:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1322:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1323:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1324:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1325:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1326:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1327:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1328:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1329:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1330:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1331:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1332:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL));
1333:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1334:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1335:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1336:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1337:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1338:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1339:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1340:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1341:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1342:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1343:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1344:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1345:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1346:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return    None
1347:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1348:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1349:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1350:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1351:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1352:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the function.
1353:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1354:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1355:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1356:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1357:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1358:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1359:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1360:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1361:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1362:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1363:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1364:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1365:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1366:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1367:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1368:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1369:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1370:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1371:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1372:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1373:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1374:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1375:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1376:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1377:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1378:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1379:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1380:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1381:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1382:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1383:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1384:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1385:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1386:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1387:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1388:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1389:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1390:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1391:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1392:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL));
1393:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1394:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1395:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1396:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1397:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Provides the received data from receive buffer.
1398:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1399:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1400:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1401:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1402:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1403:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1404:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1405:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1406:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1407:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1408:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1409:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1410:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1411:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1412:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1413:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1414:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[10];
1415:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1416:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1417:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1418:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1419:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1420:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1421:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1422:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1423:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1424:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1425:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1426:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1427:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1428:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1429:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1430:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1431:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1432:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1433:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1434:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1435:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1436:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        // wait for ACK
1437:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1438:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1439:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1440:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1441:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1442:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         index++;
1443:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1444:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1445:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1446:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1447:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1448:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1449:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1450:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1451:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1452:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1453:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1454:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1455:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1456:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1457:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1458:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1459:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1460:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1461:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1462:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1463:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1464:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1465:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
1466:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1467:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1468:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1469:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1470:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1471:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1472:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1473:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  byte data byte to transmit. \n
1474:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1475:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 
1476:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1477:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1478:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1479:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1480:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1481:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1482:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1483:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1484:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1485:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1486:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1487:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1488:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1489:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1490:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1491:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1492:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1493:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1494:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1495:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1496:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1497:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1498:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1499:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1500:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1501:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // wait for ACK
1502:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1503:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1504:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1505:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1506:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1507:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // wait for ACK
1508:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1509:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1510:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1511:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1512:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1513:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1514:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1515:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1516:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1517:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1518:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
1519:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
1520:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1521:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1522:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1523:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1524:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1525:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1526:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1527:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         combined using the bitwise OR operation.\n
1528:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1529:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1530:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1531:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1532:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1533:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1534:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * may not yield expected result.
1535:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1536:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1537:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1538:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1539:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1540:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1541:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1542:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1543:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1544:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1545:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1546:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1547:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1548:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1549:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1550:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1551:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1552:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1553:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1554:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1555:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1556:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1557:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1558:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1559:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1560:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1561:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1562:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1563:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1564:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1565:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL));
1566:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
1567:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1568:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1569:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1570:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1571:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1572:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1573:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1574:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         combined using the bitwise OR operation.\n
1575:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1576:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1577:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1578:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1579:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1580:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1581:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1582:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1583:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1584:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1585:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1586:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1587:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1588:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1589:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1590:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1591:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1592:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1593:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1594:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1595:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1596:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1597:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1598:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1599:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1600:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1601:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1602:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1603:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1604:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1605:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1606:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1607:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1608:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1609:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1610:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
1611:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
1612:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1613:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1614:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1615:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Receives the ACK from slave
1616:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1617:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1618:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1619:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1620:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1621:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1622:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1623:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1624:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1625:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1626:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1627:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1628:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1629:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1630:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1631:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1632:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1633:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1634:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1635:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1636:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1637:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1638:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1639:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1640:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1641:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1642:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1643:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1644:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1645:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1646:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1647:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1648:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1649:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1650:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1651:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1652:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1653:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1654:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1655:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1656:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1657:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1658:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1659:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1660:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1661:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1662:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1663:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1664:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1665:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1666:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1667:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1668:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1669:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1670:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1671:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1672:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1673:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1674:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1675:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1676:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1677:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1678:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1679:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1680:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
1681:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
1682:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1683:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1684:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Receives the NACK from slave
1685:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1686:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1687:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1688:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1689:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1690:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1691:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1692:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1693:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1694:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1695:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1696:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1697:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1698:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1699:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1700:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1701:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1702:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1703:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1704:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1705:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1706:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1707:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1708:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1709:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1710:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1711:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1712:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1713:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1714:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1715:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1716:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1717:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1718:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1719:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1720:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1721:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1722:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1723:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1724:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1725:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1726:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1727:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1728:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1729:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // only for the last byte
1730:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1731:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1732:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1733:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1734:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1735:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1736:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1737:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1738:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1739:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1740:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1741:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1742:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1743:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1744:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1745:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1746:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1747:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1748:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1749:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1750:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
1751:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
1752:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1753:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1754:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends stop command to slave
1755:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1756:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1757:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1758:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1759:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1760:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1761:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1762:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1763:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1764:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1765:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1766:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1767:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1768:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1769:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1770:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1771:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1772:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1773:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1774:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1775:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1776:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1777:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1778:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1779:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //send the address to which data to be transfered
1780:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1781:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1782:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1783:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1784:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1785:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1786:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1787:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1788:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1789:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1790:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1791:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1792:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1793:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1794:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1795:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1796:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1797:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1798:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1799:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1800:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1801:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
1802:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
1803:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
1804:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1805:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1806:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends start command to slave
1807:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1808:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param address slave address
1809:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param cmd     command
1810:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1811:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1812:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1813:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1814:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1815:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1816:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1817:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1818:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1819:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1820:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1821:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1822:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
1823:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1824:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1825:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1826:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1827:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1828:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1829:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1830:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1831:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1832:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1833:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1834:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1835:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1836:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1837:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //send the address to which data to be transfered
1838:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1839:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1840:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1841:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1842:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1843:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1844:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1845:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1846:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1847:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while(1U)
1848:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       {
1849:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       }
1850:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1851:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1852:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1853:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1854:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1855:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1856:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1857:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1858:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
1859:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
1860:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1861:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1862:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1863:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends repeated start command to slave
1864:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1865:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param address slave address
1866:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param cmd     command
1867:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1868:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1869:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1870:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1871:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1872:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1873:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1874:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1875:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1876:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1877:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1878:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1879:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1880:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1881:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1882:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1883:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1884:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rx_buf[256];
1885:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1886:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1887:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1888:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1889:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1890:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1891:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1892:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1893:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1894:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1895:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //send the address to which data to be transfered
1896:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1897:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1898:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1899:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1900:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1901:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1902:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1903:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1904:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1905:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1906:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1907:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1908:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 	   memset(rx_buf,0,16);
1909:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1910:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1911:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1912:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1913:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1914:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1915:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1916:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1917:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1918:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 1U;
1919:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1920:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1921:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1922:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1923:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1924:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1925:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
1926:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEI
1927:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
1928:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1929:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1930:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1931:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends the txbusy flag
1932:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1933:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool : status of txbusy flag
1934:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  
1935:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1936:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1937:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
1938:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1939:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
1940:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
1941:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
1942:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
1943:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
1944:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
1945:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1946:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
1947:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1948:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1949:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1950:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1951:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1952:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1953:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1954:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1955:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
1956:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
1957:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1958:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1959:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1960:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
1961:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1962:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1963:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
1964:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
1965:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1966:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
1967:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1968:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1969:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
1970:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1971:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1972:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
1973:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
  27              	 .loc 1 1973 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1974:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
1975:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return handle->runtime->tx_busy;
  43              	 .loc 1 1975 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B68     	 ldr r3,[r3,#8]
  46 000c 93F82630 	 ldrb r3,[r3,#38]
  47 0010 DBB2     	 uxtb r3,r3
1976:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
  48              	 .loc 1 1976 0
  49 0012 1846     	 mov r0,r3
  50 0014 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0016 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0018 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001c 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE285:
  65 001e 00BF     	 .section .text.I2C_MASTER_IsRxBusy,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	I2C_MASTER_IsRxBusy:
  71              	.LFB286:
1977:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1978:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1979:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends the rxbusy flag
1980:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1981:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool : status of rxbusy flag
1982:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1983:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1984:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include "DAVE.h"
1985:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1986:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_READ 10
1987:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
1988:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1989:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
1990:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
1991:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
1992:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
1993:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
1994:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
1995:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1996:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1997:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t data = 0x55;
1998:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_data;
1999:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2000:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
2001:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
2002:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
2003:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
2004:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
2005:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
2006:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
2007:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
2008:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
2009:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2010:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2011:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
2012:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2013:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2014:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Read data from IO EXPANDER
2015:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
2016:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2017:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2018:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
2019:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
2020:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
2021:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(1)
2022:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     { }
2023:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2024:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
2025:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
2026:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2027:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
2028:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2029:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
2030:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
2031:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** {
  72              	 .loc 1 2031 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
2032:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
2033:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h ****   return handle->runtime->rx_busy;
  88              	 .loc 1 2033 0
  89 0008 7B68     	 ldr r3,[r7,#4]
  90 000a 9B68     	 ldr r3,[r3,#8]
  91 000c 93F82730 	 ldrb r3,[r3,#39]
  92 0010 DBB2     	 uxtb r3,r3
2034:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER\i2c_master.h **** }
  93              	 .loc 1 2034 0
  94 0012 1846     	 mov r0,r3
  95 0014 0C37     	 adds r7,r7,#12
  96              	.LCFI9:
  97              	 .cfi_def_cfa_offset 4
  98 0016 BD46     	 mov sp,r7
  99              	.LCFI10:
 100              	 .cfi_def_cfa_register 13
 101              	 
 102 0018 5DF8047B 	 ldr r7,[sp],#4
 103              	.LCFI11:
 104              	 .cfi_restore 7
 105              	 .cfi_def_cfa_offset 0
 106 001c 7047     	 bx lr
 107              	 .cfi_endproc
 108              	.LFE286:
 110              	 .comm mem_address,2,4
 111              	 .global data
 112 001e 00BF     	 .section .data.data,"aw",%progbits
 115              	data:
 116 0000 55       	 .byte 85
 117              	 .comm rx_data,1,1
 118              	 .section .text.main,"ax",%progbits
 119              	 .align 2
 120              	 .global main
 121              	 .thumb
 122              	 .thumb_func
 124              	main:
 125              	.LFB291:
 126              	 .file 2 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2024 Aug 28 05:36:54
   5:../main.c     ****  *  Author: admin
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** 
   9:../main.c     **** 
  10:../main.c     **** 
  11:../main.c     **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
  12:../main.c     **** 
  13:../main.c     **** #define SLAVE_ADDRESS 0xA0
  14:../main.c     ****    #define BYTES_TO_READ 10
  15:../main.c     ****    #define BYTES_TO_TRANSMIT 10
  16:../main.c     **** 
  17:../main.c     ****    typedef enum PCA9502_REGADDR {
  18:../main.c     ****      IO_DIR    = 0xA << 3,
  19:../main.c     ****      IO_STATE  = 0xB << 3,
  20:../main.c     ****      IO_INTE   = 0xC << 3,
  21:../main.c     ****      IO_CTRL   = 0xE << 3
  22:../main.c     ****    } PCA9502_REGADDR_t;
  23:../main.c     **** 
  24:../main.c     ****    uint8_t mem_address[2];
  25:../main.c     ****    uint8_t data = 0x55;
  26:../main.c     ****    uint8_t rx_data;
  27:../main.c     **** /**
  28:../main.c     **** 
  29:../main.c     ****  * @brief main() - Application entry point
  30:../main.c     ****  *
  31:../main.c     ****  * <b>Details of function</b><br>
  32:../main.c     ****  * This routine is the application entry point. It is invoked by the device startup code. It is res
  33:../main.c     ****  * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder fo
  34:../main.c     ****  * code.
  35:../main.c     ****  */
  36:../main.c     **** 
  37:../main.c     **** int main(void)
  38:../main.c     **** {
 127              	 .loc 2 38 0
 128              	 .cfi_startproc
 129              	 
 130              	 
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI12:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 86B0     	 sub sp,sp,#24
 137              	.LCFI13:
 138              	 .cfi_def_cfa_offset 32
 139 0004 04AF     	 add r7,sp,#16
 140              	.LCFI14:
 141              	 .cfi_def_cfa 7,16
  39:../main.c     ****   DAVE_STATUS_t status;
  40:../main.c     **** 
  41:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 142              	 .loc 2 41 0
 143 0006 FFF7FEFF 	 bl DAVE_Init
 144 000a 0346     	 mov r3,r0
 145 000c FB70     	 strb r3,[r7,#3]
  42:../main.c     **** 
  43:../main.c     ****   if (status != DAVE_STATUS_SUCCESS)
 146              	 .loc 2 43 0
 147 000e FB78     	 ldrb r3,[r7,#3]
 148 0010 002B     	 cmp r3,#0
 149 0012 00D0     	 beq .L6
 150              	.L7:
  44:../main.c     ****   {
  45:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
  46:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
  47:../main.c     **** 
  48:../main.c     ****     while(1U)
  49:../main.c     ****     {
  50:../main.c     **** 
  51:../main.c     ****     }
 151              	 .loc 2 51 0 discriminator 1
 152 0014 FEE7     	 b .L7
 153              	.L6:
  52:../main.c     ****   }
  53:../main.c     **** 
  54:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
  55:../main.c     ****   while(1U)
  56:../main.c     ****   {
  57:../main.c     **** 	  mem_address[0] = IO_STATE;//memory which need to be read from slave
 154              	 .loc 2 57 0
 155 0016 2A4B     	 ldr r3,.L14
 156 0018 5822     	 movs r2,#88
 157 001a 1A70     	 strb r2,[r3]
  58:../main.c     **** 	  //Write data to IO EXPANDER
  59:../main.c     **** 	  I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 158              	 .loc 2 59 0
 159 001c 0123     	 movs r3,#1
 160 001e 0093     	 str r3,[sp]
 161 0020 0023     	 movs r3,#0
 162 0022 0193     	 str r3,[sp,#4]
 163 0024 2748     	 ldr r0,.L14+4
 164 0026 0121     	 movs r1,#1
 165 0028 A022     	 movs r2,#160
 166 002a 254B     	 ldr r3,.L14
 167 002c FFF7FEFF 	 bl I2C_MASTER_Transmit
  60:../main.c     **** 	  while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 168              	 .loc 2 60 0
 169 0030 00BF     	 nop
 170              	.L8:
 171              	 .loc 2 60 0 is_stmt 0 discriminator 1
 172 0032 2448     	 ldr r0,.L14+4
 173 0034 FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 174 0038 0346     	 mov r3,r0
 175 003a 002B     	 cmp r3,#0
 176 003c F9D1     	 bne .L8
  61:../main.c     **** 
  62:../main.c     **** 	  I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 177              	 .loc 2 62 0 is_stmt 1
 178 003e 0123     	 movs r3,#1
 179 0040 0093     	 str r3,[sp]
 180 0042 0123     	 movs r3,#1
 181 0044 0193     	 str r3,[sp,#4]
 182 0046 1F48     	 ldr r0,.L14+4
 183 0048 0021     	 movs r1,#0
 184 004a A022     	 movs r2,#160
 185 004c 1E4B     	 ldr r3,.L14+8
 186 004e FFF7FEFF 	 bl I2C_MASTER_Transmit
  63:../main.c     **** 	  while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 187              	 .loc 2 63 0
 188 0052 00BF     	 nop
 189              	.L9:
 190              	 .loc 2 63 0 is_stmt 0 discriminator 1
 191 0054 1B48     	 ldr r0,.L14+4
 192 0056 FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 193 005a 0346     	 mov r3,r0
 194 005c 002B     	 cmp r3,#0
 195 005e F9D1     	 bne .L9
  64:../main.c     **** 
  65:../main.c     **** 	  //Read data from IO EXPANDER
  66:../main.c     **** 	  I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 196              	 .loc 2 66 0 is_stmt 1
 197 0060 0123     	 movs r3,#1
 198 0062 0093     	 str r3,[sp]
 199 0064 0023     	 movs r3,#0
 200 0066 0193     	 str r3,[sp,#4]
 201 0068 1648     	 ldr r0,.L14+4
 202 006a 0121     	 movs r1,#1
 203 006c A022     	 movs r2,#160
 204 006e 144B     	 ldr r3,.L14
 205 0070 FFF7FEFF 	 bl I2C_MASTER_Transmit
  67:../main.c     **** 	  while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 206              	 .loc 2 67 0
 207 0074 00BF     	 nop
 208              	.L10:
 209              	 .loc 2 67 0 is_stmt 0 discriminator 1
 210 0076 1348     	 ldr r0,.L14+4
 211 0078 FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 212 007c 0346     	 mov r3,r0
 213 007e 002B     	 cmp r3,#0
 214 0080 F9D1     	 bne .L10
  68:../main.c     **** 
  69:../main.c     **** 	  I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 215              	 .loc 2 69 0 is_stmt 1
 216 0082 0123     	 movs r3,#1
 217 0084 0093     	 str r3,[sp]
 218 0086 0123     	 movs r3,#1
 219 0088 0193     	 str r3,[sp,#4]
 220 008a 0123     	 movs r3,#1
 221 008c 0293     	 str r3,[sp,#8]
 222 008e 0D48     	 ldr r0,.L14+4
 223 0090 0121     	 movs r1,#1
 224 0092 A022     	 movs r2,#160
 225 0094 0D4B     	 ldr r3,.L14+12
 226 0096 FFF7FEFF 	 bl I2C_MASTER_Receive
  70:../main.c     **** 	  while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 227              	 .loc 2 70 0
 228 009a 00BF     	 nop
 229              	.L11:
 230              	 .loc 2 70 0 is_stmt 0 discriminator 1
 231 009c 0948     	 ldr r0,.L14+4
 232 009e FFF7FEFF 	 bl I2C_MASTER_IsRxBusy
 233 00a2 0346     	 mov r3,r0
 234 00a4 002B     	 cmp r3,#0
 235 00a6 F9D1     	 bne .L11
 236              	.LBB2:
  71:../main.c     **** 	  for(int i=0;i<90000;i++);
 237              	 .loc 2 71 0 is_stmt 1
 238 00a8 0023     	 movs r3,#0
 239 00aa 7B60     	 str r3,[r7,#4]
 240 00ac 02E0     	 b .L12
 241              	.L13:
 242              	 .loc 2 71 0 is_stmt 0 discriminator 3
 243 00ae 7B68     	 ldr r3,[r7,#4]
 244 00b0 0133     	 adds r3,r3,#1
 245 00b2 7B60     	 str r3,[r7,#4]
 246              	.L12:
 247              	 .loc 2 71 0 discriminator 1
 248 00b4 7B68     	 ldr r3,[r7,#4]
 249 00b6 064A     	 ldr r2,.L14+16
 250 00b8 9342     	 cmp r3,r2
 251 00ba F8DD     	 ble .L13
 252              	.LBE2:
  72:../main.c     ****   }
 253              	 .loc 2 72 0 is_stmt 1
 254 00bc ABE7     	 b .L6
 255              	.L15:
 256 00be 00BF     	 .align 2
 257              	.L14:
 258 00c0 00000000 	 .word mem_address
 259 00c4 00000000 	 .word I2C_MASTER_0
 260 00c8 00000000 	 .word data
 261 00cc 00000000 	 .word rx_data
 262 00d0 8F5F0100 	 .word 89999
 263              	 .cfi_endproc
 264              	.LFE291:
 266              	 .text
 267              	.Letext0:
 268              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 269              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 270              	 .file 5 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 271              	 .file 6 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc/xmc_usic.h"
 272              	 .file 7 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc/xmc_i2c.h"
 273              	 .file 8 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/DAVE.h"
 274              	 .file 9 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Include/cmsis_gcc.h"
 275              	 .file 10 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Include/core_cm4.h"
 276              	 .file 11 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
 277              	 .file 12 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/I2C_MASTER/i2c_master_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.I2C_MASTER_IsTxBusy:00000000 $t
    {standard input}:24     .text.I2C_MASTER_IsTxBusy:00000000 I2C_MASTER_IsTxBusy
    {standard input}:66     .text.I2C_MASTER_IsRxBusy:00000000 $t
    {standard input}:70     .text.I2C_MASTER_IsRxBusy:00000000 I2C_MASTER_IsRxBusy
                            *COM*:00000002 mem_address
    {standard input}:115    .data.data:00000000 data
                            *COM*:00000001 rx_data
    {standard input}:119    .text.main:00000000 $t
    {standard input}:124    .text.main:00000000 main
    {standard input}:258    .text.main:000000c0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DAVE_Init
I2C_MASTER_Transmit
I2C_MASTER_Receive
I2C_MASTER_0
