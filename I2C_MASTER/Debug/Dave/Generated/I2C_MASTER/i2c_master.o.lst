   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "i2c_master.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_TXFIFO_IsFull,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_TXFIFO_IsFull:
  25              	.LFB190:
  26              	 .file 1 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  12:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  14:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  21:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  28:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  41:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  42:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  43:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  44:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  46:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  47:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  48:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  49:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  50:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  51:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  52:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  54:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  55:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  56:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  57:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  58:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  59:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  60:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  62:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  63:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  64:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  65:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  67:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  68:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  69:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  70:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  71:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  72:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  73:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  74:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  75:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  76:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  77:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  79:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  80:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  81:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  82:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  83:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  84:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  86:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  87:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  88:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  89:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  90:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  92:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  93:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  94:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-07-01:
  95:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Changed XMC_USIC_CH_SetBaudrateEx() input parameter types
  96:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-09-30:
  98:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_InvalidateReadData(), XMC_USIC_CH_EnableWordLengthControl() and XMC_USIC
  99:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 100:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-12-05:
 101:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_PutDataEx()
 102:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 103:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-04-30:
 104:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_SetTriggerLimit() and XMC_USIC_CH_RXFIFO_SetTriggerLimit()
 105:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 106:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-12-05:
 107:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S to XMC_USIC_CH_BRG_CLOCK_SOURCE_t
 108:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CTQSEL_t
 109:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateDivider()
 110:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 111:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
 112:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 113:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 114:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 115:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
 116:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
 117:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
 119:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 122:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 123:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 124:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 126:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 127:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 129:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 130:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 131:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 132:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 133:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 134:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 135:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 136:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 137:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 138:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 139:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 140:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 141:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 142:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 143:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 144:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 145:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 146:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 147:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 148:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 149:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 150:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 151:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 152:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 153:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 154:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 155:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 157:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 158:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 159:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 161:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 162:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 163:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 164:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 167:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 168:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 169:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 170:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 171:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 172:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 173:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 174:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 175:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 176:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 177:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 178:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 179:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 180:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 181:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 182:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 183:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 185:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc1_usic_map.h"
 186:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 187:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 188:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 189:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc4_usic_map.h"
 190:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 191:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 192:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 193:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 194:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 195:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 196:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 197:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 198:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 199:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 200:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 201:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 202:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 203:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 204:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 205:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 206:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 207:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 208:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 209:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 210:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 211:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 212:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 213:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 214:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 215:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 216:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 217:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 218:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 219:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 220:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 221:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 222:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 223:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 224:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 225:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 226:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 227:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 228:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 231:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 233:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 235:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 236:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 237:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 238:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 239:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 240:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 241:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 242:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 243:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 244:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 245:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 246:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 247:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 248:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 249:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 250:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 251:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 252:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 253:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 254:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 255:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 256:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 257:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 258:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 259:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 260:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 261:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 262:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 263:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 264:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 265:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 266:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 267:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 268:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 269:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 270:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 271:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 272:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 273:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 274:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 275:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 276:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 277:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 278:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 279:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 280:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 281:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 282:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 283:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 284:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 285:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 286:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 287:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 288:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 289:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 290:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 291:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 292:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 293:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 294:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 295:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 296:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 297:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 298:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 299:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 300:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 301:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 303:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 304:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 305:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 306:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 307:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 308:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 309:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 310:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 311:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 312:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 313:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 314:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 315:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 316:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 317:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 318:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 319:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 320:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 321:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 322:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 323:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 324:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 325:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 326:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 327:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 328:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 329:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 330:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 332:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 333:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 334:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 335:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 336:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 337:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 338:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 339:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 340:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 341:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 342:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 343:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 344:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 345:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 346:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 347:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 348:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 349:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 350:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 351:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 352:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 353:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 354:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 355:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 356:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 357:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 358:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 359:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 360:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 361:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 362:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 363:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 364:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 365:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 366:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 367:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 368:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 369:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 370:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 371:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 372:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 373:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 374:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 375:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 376:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 377:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 378:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 379:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 380:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 381:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 382:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 383:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 384:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 385:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 386:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 387:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 388:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 389:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 390:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 393:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 395:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 397:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 398:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 399:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 400:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 401:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 402:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 403:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 404:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 405:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 406:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 407:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 408:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 409:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 410:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 411:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 412:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 413:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 414:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 415:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 416:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 417:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 418:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 419:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 420:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 421:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 422:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 423:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 424:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 425:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 426:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 427:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 428:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 431:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 433:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 435:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos,  /**< Baudrate generator 
 436:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S    = 0x3UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 437:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 438:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 439:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 440:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel input selection for CTQ
 441:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 442:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CTQSEL
 443:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 444:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PDIV = 0x0UL, /**< fCTQIN = fPDIV */
 445:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PPP  = 0x1UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fPPP */
 446:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_SCLK = 0x2UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fSCLK */
 447:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_MCLK = 0x3UL << USIC_CH_BRG_CTQSEL_Pos  /**< fCTQIN = fMCLK */
 448:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CTQSEL_t;
 449:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 450:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 451:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 452:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 453:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 454:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 455:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 456:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 457:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 458:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 459:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 460:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 462:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 463:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 464:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 465:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 466:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 467:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 468:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 469:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 471:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 472:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 473:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 474:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 475:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 476:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 477:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 478:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 479:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 480:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 481:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 482:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 483:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 484:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 485:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 487:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 488:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 489:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 490:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 491:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 492:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 493:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
 494:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 495:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 496:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 497:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 498:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 499:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 500:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 501:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 502:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 503:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 504:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 505:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 506:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 507:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #pragma push
 508:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #pragma anon_unions
 509:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 510:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning 586
 511:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 512:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 514:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 515:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 516:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 517:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 518:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 519:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file,
 520:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 521:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 522:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 523:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 524:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 525:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 526:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 527:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 528:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 529:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 530:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 531:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 532:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 533:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 534:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 535:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 536:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 537:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   union
 539:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   {
 540:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 541:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 542:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 543:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 544:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 545:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   };
 546:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 547:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 548:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   union
 550:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   {
 551:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 552:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 553:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 554:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 555:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 556:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   };
 557:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 558:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 559:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 560:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 561:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 562:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 563:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 564:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 565:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 566:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 567:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 568:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 569:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 570:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 571:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 572:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 573:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 574:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 575:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 576:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 577:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 578:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 579:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 581:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 582:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 583:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #pragma pop
 584:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 585:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning restore
 586:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 587:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 588:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 589:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 590:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 591:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 592:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 593:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 594:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 595:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 596:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 597:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 598:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 599:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 600:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 601:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 602:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 603:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 604:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 605:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 606:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 607:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 608:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 609:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 610:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 611:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 612:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 613:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 614:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 615:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 616:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 617:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 618:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 619:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 620:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 621:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 622:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 624:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 625:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 626:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 627:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 628:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 629:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 630:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 631:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 632:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 634:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 635:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 636:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 637:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 639:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 640:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 641:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 642:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 643:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 644:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 645:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 646:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 647:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 648:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 649:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 650:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 651:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 652:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 654:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 655:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 656:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 657:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 658:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 659:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 660:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 661:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 662:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 663:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 664:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 665:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 666:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 667:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 668:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 669:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 670:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 674:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 675:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 677:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 678:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 679:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 681:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 682:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 683:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 684:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 685:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 686:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 687:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 688:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 689:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 690:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 691:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 692:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 693:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 694:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 695:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 698:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 699:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 700:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 701:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 703:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 704:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 706:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 707:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 708:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 709:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 710:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 711:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 712:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 713:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 714:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 715:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 716:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 717:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 719:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 720:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 721:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 722:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 723:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 726:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 728:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 732:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clksel Baudrate generator clock source.
 733:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pppen Enable 2:1 Divider for fPPP.
 734:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Divider Factor to generate fPDIV = fPPP / (pDIV + 1)
 735:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  ctqsel Input selection for CTQ.
 736:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pctq Pre-Divider for Time Quanta Counter. fCTQIN / (PCQT + 1)
 737:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  dctq Denominator for Time Quanta Counter. fTQ / (DCTQ + 1)
 738:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 739:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 741:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate generator of the USIC channel.
 742:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFractionalDivider() \n\n\n
 745:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetBaudrateDivider(XMC_USIC_CH_t *const channel, 
 747:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CLOCK_SOURCE_t clksel,
 748:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     bool pppen,
 749:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pdiv,
 750:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CTQSEL_t ctqsel,
 751:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pctq,
 752:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t dctq);
 753:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 757:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 758:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 759:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 760:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 761:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 762:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 763:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 765:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 766:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 767:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 768:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 769:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 770:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 771:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 772:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 773:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 774:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 775:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 776:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 777:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 778:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 780:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 781:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 783:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 784:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 785:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 786:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 787:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 788:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 789:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 790:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 791:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 792:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 793:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 795:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 796:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 797:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 798:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 799:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 800:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 801:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 802:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 803:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 804:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 805:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 806:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 807:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 808:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 809:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 813:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 814:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 815:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 816:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 817:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 818:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 819:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t pdiv,
 820:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t oversampling,
 821:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 822:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 823:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 824:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 825:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 826:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 827:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 828:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 829:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 830:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 831:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 832:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 833:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 834:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 835:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 836:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 837:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc.
 838:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 839:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 841:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 842:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 843:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 844:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 845:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 846:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                     ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 847:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 848:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 849:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 850:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 851:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 852:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 853:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 854:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 856:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 857:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 858:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 859:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 860:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 861:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 862:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 863:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 864:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_INSW_Msk;
 865:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 866:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 867:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 868:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 869:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 870:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 871:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 872:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 873:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 875:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 876:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 877:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 878:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 879:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 880:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 881:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 882:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 883:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 884:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 885:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 886:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 887:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 888:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 889:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 890:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 891:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 892:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 893:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 894:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 895:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 896:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 897:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 898:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 899:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 900:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 901:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 902:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 903:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 904:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 905:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 906:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 907:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 908:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 909:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 910:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 911:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 912:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 913:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 914:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 915:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 916:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 917:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 918:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 919:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 920:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 921:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 922:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 923:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 924:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 925:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 926:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 927:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 928:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 929:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 930:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 931:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 932:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 933:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 934:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 935:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 936:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 937:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 938:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 939:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 940:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 941:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 942:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 943:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 944:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 945:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 946:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 947:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 948:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 949:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 950:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 951:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 953:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 954:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 955:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 956:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 957:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &= (uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 958:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 959:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
 960:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 961:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 962:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 963:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 964:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 965:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 966:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 968:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 969:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 970:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 973:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 975:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 977:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 979:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 982:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 983:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 984:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 985:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 986:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 987:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 988:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 991:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 993:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 994:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 995:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 996:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 997:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 998:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 999:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1000:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1001:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1002:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1003:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1004:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
1005:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
1006:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
1007:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1008:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
1010:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1011:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
1012:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1013:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
1014:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1016:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1017:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1018:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1019:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1020:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
1024:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
1025:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1026:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1027:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
1028:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1029:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
1030:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1031:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DSEN_Msk;
1032:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1033:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1037:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1038:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
1039:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1040:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1041:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1042:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
1043:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1045:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1046:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1047:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
1048:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1049:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_freq)
1050:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1051:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
1052:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
1053:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1058:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1059:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1060:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1061:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1062:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1064:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1065:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1068:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1070:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1071:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
1072:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1074:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1075:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1081:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1082:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1083:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1084:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1085:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1086:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1087:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1088:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1089:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1090:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1091:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1092:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1093:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1098:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1099:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1100:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1101:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1102:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1103:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1104:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1106:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1107:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1108:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1109:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1110:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1111:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1112:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1113:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1114:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1115:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1116:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1117:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1118:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1119:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1120:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1121:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1122:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1123:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1124:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1125:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1126:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1129:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1130:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1131:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1132:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t transmit_control_information)
1133:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1134:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1135:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1136:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1137:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1138:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1139:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1140:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1141:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1142:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1143:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1144:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1146:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1147:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1148:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1149:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1150:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1151:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1152:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1153:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1154:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1155:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1156:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1157:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1158:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1159:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1161:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1162:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1163:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1164:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1165:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1166:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1167:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1168:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1169:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1170:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1171:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1172:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1173:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1174:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1175:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1176:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1177:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1178:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1179:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1180:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1181:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1182:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value
1183:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1184:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1185:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1186:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1187:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1188:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1189:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1190:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1191:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1192:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1193:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1194:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1195:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1196:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1197:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1198:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1199:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1200:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1201:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1202:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1203:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1204:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1205:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1206:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1207:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1208:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1209:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1210:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1211:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1216:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1217:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1218:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1219:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1220:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1221:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1222:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1223:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1224:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly.
1225:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1226:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1228:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1230:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1231:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1232:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1233:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1236:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1237:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1238:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1239:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1240:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1241:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1245:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1246:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1247:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1248:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1249:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1250:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1251:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1252:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1253:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1254:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1255:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1256:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1257:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1258:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1259:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1260:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1261:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1262:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1263:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1264:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1265:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1266:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1267:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1268:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1269:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1270:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1271:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1272:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
1273:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1274:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1275:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1276:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1277:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1278:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1279:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1280:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1281:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1282:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1283:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1284:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1285:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1286:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1287:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1288:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1290:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1291:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1292:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1293:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1294:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1295:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1296:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1297:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1298:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1299:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1300:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1301:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1302:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1303:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1304:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1305:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1306:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1307:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1309:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1310:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1311:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1312:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1313:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1314:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1315:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1316:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1317:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1318:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1319:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1320:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1321:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1322:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1323:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1324:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1327:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1328:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1329:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1330:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1331:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1332:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1333:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1334:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte.
1335:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1336:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1337:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1338:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1339:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1340:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1341:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1342:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1343:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1344:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1345:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1346:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1347:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1348:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1349:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1350:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1351:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1352:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1353:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1354:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1355:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1356:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1357:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1358:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1359:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1360:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1361:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1362:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1363:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1364:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1365:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_START_TRANSMISION_MODE_t start_transmision_mode)
1366:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1367:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1368:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1369:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1370:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1371:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1372:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1373:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1374:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1375:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1376:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1377:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1378:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1380:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1381:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1382:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1384:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1385:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1386:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
1387:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1388:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1389:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1390:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1391:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1392:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1393:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1394:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1395:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1396:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1398:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the
1399:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1400:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1401:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1402:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1403:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1405:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1406:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1407:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1408:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1409:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1410:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1411:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1412:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1413:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1414:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1415:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1416:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1417:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1418:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1419:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1420:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1421:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of word length. \n\n
1422:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of word length is enabled, word length is configured based on the
1423:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], word length is con
1424:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1425:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1426:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1427:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1428:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1429:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1430:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableWordLengthControl(XMC_USIC_CH_t *const channel)
1431:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1432:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1433:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1434:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1435:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1436:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_WLEMD_Msk;
1437:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1438:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1439:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1440:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1443:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1444:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1445:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1446:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1447:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1448:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1449:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1451:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1452:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1453:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1454:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1455:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1456:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1457:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1458:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1459:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1460:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1461:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1462:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1463:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of word length. \n\n
1464:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of word length is disabled, word length has to configured explicitly.
1465:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Word length remains fixed until it is changed again.
1466:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1467:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1468:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetWordLength() \n\n\n
1469:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1470:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableWordLengthControl(XMC_USIC_CH_t *const channel)
1471:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1472:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_WLEMD_Msk;
1473:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1474:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1475:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1476:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1477:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1478:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1480:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1482:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1483:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1484:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1485:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1486:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1487:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1488:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1489:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1490:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1491:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1492:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1493:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1494:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1495:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1496:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1497:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1498:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1499:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1500:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1501:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1502:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1503:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1504:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1505:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1506:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1507:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1508:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1509:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1510:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1511:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1512:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1513:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1514:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1515:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1516:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1517:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1518:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1519:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be
1520:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled.
1521:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1522:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1524:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1525:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1526:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1527:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1528:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1529:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1530:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1531:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1534:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1535:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1536:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1537:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1538:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1539:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1540:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1541:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1542:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1543:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1544:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buffer_status)
1545:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1546:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1547:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1548:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1549:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1550:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1553:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1554:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1557:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1558:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1559:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1560:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1561:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_InvalidateReadData(XMC_USIC_CH_t *const channel)
1562:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1563:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = USIC_CH_FMR_CRDV0_Msk | USIC_CH_FMR_CRDV1_Msk;
1564:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1565:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1566:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1567:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1568:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1569:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1570:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1571:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1572:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1573:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1574:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1575:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1576:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the
1577:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1578:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1579:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1580:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1581:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1582:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1583:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive_level)
1584:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1585:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1586:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1587:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1588:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1589:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1590:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1591:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1592:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1593:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1594:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1595:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1596:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1597:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1598:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1599:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1600:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1601:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1602:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1603:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1604:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1605:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1606:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1607:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1608:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1609:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1610:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1611:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1612:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1613:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1614:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1615:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1616:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1617:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1618:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1619:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1620:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1621:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1622:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1623:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1624:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1625:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1626:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() }
1627:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1628:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1629:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1630:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the
1631:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1632:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1633:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1635:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1637:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1638:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
1639:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1640:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1645:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
1646:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1647:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1648:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1649:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
1650:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1651:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1653:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1654:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
1655:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
1656:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR = (channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) | ((limit << USIC_CH_TBCTR
1658:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1661:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1662:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1663:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1666:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1667:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1668:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1669:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1670:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1671:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
1672:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1673:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1675:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1676:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1677:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1678:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1679:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1680:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1681:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1682:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1683:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1684:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1685:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1686:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1687:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1688:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1689:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1690:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1691:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1692:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1693:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1694:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
1695:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent().
1696:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1697:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1698:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1699:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1700:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1701:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1702:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1703:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1705:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1710:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1711:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1712:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1713:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1714:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1715:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1716:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1717:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1718:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1719:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1720:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1721:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1722:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1723:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1724:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1725:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1727:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1728:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1729:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1730:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1731:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1732:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
1733:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1734:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1735:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1736:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1737:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1738:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1739:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1740:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1741:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1742:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1743:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1744:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1745:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1746:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1747:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1748:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1749:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1750:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1751:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1752:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1753:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1754:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1759:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1760:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param loc Input location. \n
1761:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1762:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1763:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1764:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit data can be loaded to TBUF by software by writing to the transmit buffer input
1765:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * locations TBUFx (x = 00-31), consisting of 32 consecutive addresses. The data written
1766:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * to one of these input locations is stored in the transmit buffer TBUF. Additionally, the
1767:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * address of the written location is evaluated and can be used for additional control
1768:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * purposes. This 5-bit wide information (named Transmit Control Information TCI) can be
1769:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * used for different purposes in different protocols.
1770:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1771:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableWordLengthControl() \n
1773:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1774:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1775:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataEx(XMC_USIC_CH_t *const channel, const uint16_t data
1776:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1777:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[loc] = data;
1778:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1779:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1780:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1781:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1782:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1783:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1784:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1785:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1786:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1787:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1788:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1789:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1790:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1791:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1792:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1793:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_PutDataEx() \n
1796:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1797:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1798:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1799:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1800:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1801:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1802:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1803:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1804:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1805:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1806:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1809:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1810:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1811:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1812:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1813:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1814:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1815:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1816:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1817:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1818:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1819:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1820:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1821:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1822:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1823:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1824:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1825:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1826:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1827:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1828:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1829:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1830:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1833:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1834:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1835:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1836:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1837:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1838:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1839:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1840:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1841:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1842:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1843:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1844:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1845:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1846:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1847:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1848:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1849:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1850:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1851:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1852:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1853:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1854:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1855:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1856:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1857:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1858:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1859:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1860:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1861:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 1861 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1862:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
  43              	 .loc 1 1862 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F81431 	 ldr r3,[r3,#276]
  46 000e 03F48053 	 and r3,r3,#4096
  47 0012 002B     	 cmp r3,#0
  48 0014 14BF     	 ite ne
  49 0016 0123     	 movne r3,#1
  50 0018 0023     	 moveq r3,#0
  51 001a DBB2     	 uxtb r3,r3
1863:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
  52              	 .loc 1 1863 0
  53 001c 1846     	 mov r0,r3
  54 001e 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0020 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0022 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 0026 7047     	 bx lr
  66              	 .cfi_endproc
  67              	.LFE190:
  69              	 .section .text.XMC_USIC_CH_TXFIFO_IsEmpty,"ax",%progbits
  70              	 .align 2
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_USIC_CH_TXFIFO_IsEmpty:
  75              	.LFB191:
1864:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1865:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1866:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1867:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1868:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1869:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1870:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1871:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1872:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1873:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1874:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO,
1875:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1876:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1877:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1878:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1879:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1880:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1881:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
  76              	 .loc 1 1881 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81 0000 80B4     	 push {r7}
  82              	.LCFI6:
  83              	 .cfi_def_cfa_offset 4
  84              	 .cfi_offset 7,-4
  85 0002 83B0     	 sub sp,sp,#12
  86              	.LCFI7:
  87              	 .cfi_def_cfa_offset 16
  88 0004 00AF     	 add r7,sp,#0
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 7
  91 0006 7860     	 str r0,[r7,#4]
1882:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
  92              	 .loc 1 1882 0
  93 0008 7B68     	 ldr r3,[r7,#4]
  94 000a D3F81431 	 ldr r3,[r3,#276]
  95 000e 03F40063 	 and r3,r3,#2048
  96 0012 002B     	 cmp r3,#0
  97 0014 14BF     	 ite ne
  98 0016 0123     	 movne r3,#1
  99 0018 0023     	 moveq r3,#0
 100 001a DBB2     	 uxtb r3,r3
1883:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 101              	 .loc 1 1883 0
 102 001c 1846     	 mov r0,r3
 103 001e 0C37     	 adds r7,r7,#12
 104              	.LCFI9:
 105              	 .cfi_def_cfa_offset 4
 106 0020 BD46     	 mov sp,r7
 107              	.LCFI10:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 0022 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI11:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 0026 7047     	 bx lr
 115              	 .cfi_endproc
 116              	.LFE191:
 118              	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 119              	 .align 2
 120              	 .thumb
 121              	 .thumb_func
 123              	XMC_USIC_CH_RXFIFO_IsEmpty:
 124              	.LFB201:
1884:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1885:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1886:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1887:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1888:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n
1889:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1890:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1891:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1892:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1893:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1894:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1895:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1896:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1897:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1898:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1899:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1900:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1901:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1902:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1903:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1908:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1909:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1910:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1911:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1912:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1913:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1914:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1915:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1916:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1917:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1918:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1919:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1920:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1921:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1922:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1923:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1924:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_TBERI_Msk));
1925:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1931:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1932:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1933:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1934:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1936:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1937:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value.
1938:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1939:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of
1940:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1941:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1942:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1943:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1944:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1945:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1946:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t event)
1947:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1949:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
1950:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1951:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1952:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1953:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1954:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1955:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1956:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1957:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1958:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1959:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1960:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1961:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1962:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1963:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1964:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1965:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1966:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1967:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1968:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1969:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1970:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1971:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1972:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** */
1973:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1974:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1975:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1976:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1977:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1982:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1983:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1984:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1985:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1986:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_RXFIFO_SetTriggerLimit() }
1988:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1989:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1990:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1991:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the
1992:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1993:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1994:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1995:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1996:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1997:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1998:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1999:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
2000:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2001:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2002:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
2005:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
2006:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2007:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2008:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
2010:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2011:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() \n\n\n
2013:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2014:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
2015:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
2016:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
2017:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR = (channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) | ((limit << USIC_CH_RBCTR
2018:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
2019:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2020:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2021:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2022:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2023:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
2024:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2025:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2026:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2027:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
2028:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
2029:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
2030:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
2031:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2032:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
2033:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
2034:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2035:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2036:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
2037:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2038:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
2039:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
2040:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
2041:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
2042:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2043:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2044:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2045:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2046:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2047:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
2048:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
2049:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
2050:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2051:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2052:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2053:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
2054:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
2055:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent().
2056:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
2057:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
2058:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2059:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2060:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2061:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2062:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
2063:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
2064:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
2065:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
2066:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2067:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2068:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2069:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2070:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
2071:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
2072:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
2073:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
2074:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
2075:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2076:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2077:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2078:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
2079:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
2080:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
2081:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
2082:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
2083:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
2084:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
2085:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2086:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
2087:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2088:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2089:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2090:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2091:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
2092:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
2093:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
2094:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2095:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2096:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2097:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2098:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
2099:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
2100:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2101:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2102:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
2103:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
2104:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
2105:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
2106:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
2107:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2108:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2109:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
2110:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2111:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
2112:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
2113:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
2114:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
2115:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2116:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2117:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2118:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2119:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2120:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2121:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2122:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
2123:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
2124:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2125:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2126:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
2127:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2128:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
2129:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
2130:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
2131:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
2132:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2133:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2134:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
2137:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
2138:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2139:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2140:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
2141:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
2142:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
2143:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2144:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2145:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
2146:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2147:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
2148:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
2149:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
2150:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
2151:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** 
2152:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2153:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2154:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2155:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
2156:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
2157:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2158:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2159:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
2160:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
2161:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
2162:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
2163:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2164:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2165:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
2166:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2167:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
2168:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** {
 125              	 .loc 1 2168 0
 126              	 .cfi_startproc
 127              	 
 128              	 
 129              	 
 130 0000 80B4     	 push {r7}
 131              	.LCFI12:
 132              	 .cfi_def_cfa_offset 4
 133              	 .cfi_offset 7,-4
 134 0002 83B0     	 sub sp,sp,#12
 135              	.LCFI13:
 136              	 .cfi_def_cfa_offset 16
 137 0004 00AF     	 add r7,sp,#0
 138              	.LCFI14:
 139              	 .cfi_def_cfa_register 7
 140 0006 7860     	 str r0,[r7,#4]
2169:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 141              	 .loc 1 2169 0
 142 0008 7B68     	 ldr r3,[r7,#4]
 143 000a D3F81431 	 ldr r3,[r3,#276]
 144 000e 03F00803 	 and r3,r3,#8
 145 0012 002B     	 cmp r3,#0
 146 0014 14BF     	 ite ne
 147 0016 0123     	 movne r3,#1
 148 0018 0023     	 moveq r3,#0
 149 001a DBB2     	 uxtb r3,r3
2170:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_usic.h **** }
 150              	 .loc 1 2170 0
 151 001c 1846     	 mov r0,r3
 152 001e 0C37     	 adds r7,r7,#12
 153              	.LCFI15:
 154              	 .cfi_def_cfa_offset 4
 155 0020 BD46     	 mov sp,r7
 156              	.LCFI16:
 157              	 .cfi_def_cfa_register 13
 158              	 
 159 0022 5DF8047B 	 ldr r7,[sp],#4
 160              	.LCFI17:
 161              	 .cfi_restore 7
 162              	 .cfi_def_cfa_offset 0
 163 0026 7047     	 bx lr
 164              	 .cfi_endproc
 165              	.LFE201:
 167              	 .section .text.XMC_I2C_CH_GetStatusFlag,"ax",%progbits
 168              	 .align 2
 169              	 .thumb
 170              	 .thumb_func
 172              	XMC_I2C_CH_GetStatusFlag:
 173              	.LFB217:
 174              	 .file 2 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc/xmc_i2c.h"
   1:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  12:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  14:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  21:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  28:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  41:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Change History
  42:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * --------------
  43:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  44:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  46:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  47:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  48:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  49:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  50:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  51:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  52:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  53:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  54:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  55:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  56:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  57:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  58:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  59:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  60:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  61:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  62:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  63:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  64:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  65:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  66:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  68:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  69:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  70:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  71:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  72:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  73:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  74:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  75:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  76:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  77:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  78:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2017-10-25:
  79:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  80:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  81:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2019-05-07:
  82:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added normal_divider_mode to XMC_I2C_CH_CONFIG_t configuration structure.
  83:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  84:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetBaudrateEx()
  85:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  86:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2019-12-10:
  87:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetHoldDelay()
  88:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  89:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2020-12-05:
  90:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *    - Added XMC_I2C_CH_InitEx() that allows user select if automatic baudrate configuration shoul
  91:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  92:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @endcond
  93:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  94:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  95:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  96:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  97:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  98:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  99:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 100:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
 101:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 102:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 103:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
 104:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 105:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 106:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
 107:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 108:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 109:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 110:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 111:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
 112:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family.
 113:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 114:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
 115:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 116:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 117:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 118:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 119:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 120:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 121:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 122:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 123:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 124:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 125:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 126:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 127:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 128:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * MACROS
 129:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 130:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 131:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 132:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 133:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 134:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 135:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 136:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 137:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 138:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 139:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 140:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 141:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 142:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 143:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 144:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 145:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 146:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 147:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 148:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 149:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 150:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 151:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 152:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 153:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 154:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 155:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 156:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 157:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 158:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 159:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 160:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 161:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 162:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 163:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 164:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 165:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 166:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 167:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 168:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 169:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 170:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 171:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 172:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 173:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 174:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 175:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 176:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 177:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 178:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 179:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 180:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 181:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 182:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 183:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 184:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 185:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 186:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 187:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 188:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 189:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 190:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 191:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 192:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 193:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 194:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 195:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 196:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 197:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 198:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 199:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 200:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 201:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 202:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 203:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 204:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 205:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 206:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 207:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 208:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 209:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 210:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 211:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 212:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 213:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 214:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 215:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 216:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 217:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 218:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 219:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 220:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 221:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 222:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 223:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 224:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 225:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 226:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 227:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 228:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 229:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 230:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 231:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 232:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 233:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 234:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 235:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 236:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 237:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 238:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 239:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 240:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 241:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 242:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 243:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 244:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 245:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 246:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 247:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 248:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 249:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 250:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 251:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 252:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 253:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 254:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 255:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 256:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 257:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 258:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 259:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 260:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 261:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 262:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 263:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 264:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 265:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 266:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 267:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 268:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 269:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 270:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 271:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 272:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 273:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 274:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   bool normal_divider_mode; /**< Selects normal divider mode for baudrate generator instead of defa
 275:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address
 276:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 277:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 278:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 279:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 280:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 281:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 282:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 283:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 284:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 285:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** extern "C" {
 286:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 287:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 288:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 289:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 290:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 291:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param init_brg Selects if the baudrate generator should be configured automatically.
 292:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 293:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 294:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 295:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 296:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 297:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 298:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 299:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 300:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 301:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 302:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 303:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 304:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 305:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool 
 306:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 307:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 308:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 309:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 310:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 311:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 312:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 313:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 314:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 315:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 316:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 317:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 318:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 319:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 320:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 321:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 322:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 323:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const
 324:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 325:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_InitEx(channel, config, true);
 326:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 327:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 328:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 329:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 330:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 331:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 332:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 333:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 334:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 335:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 336:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 337:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 338:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 339:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 340:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 341:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 342:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 343:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 344:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 345:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 346:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 347:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 348:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 349:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 350:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 351:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 352:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 353:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 354:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 355:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 356:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 357:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 358:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 359:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 360:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 361:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool norm
 362:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 363:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 364:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 365:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 366:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 367:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 368:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 369:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 370:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 371:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 372:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 373:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 374:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 375:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 376:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 377:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 378:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 379:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 380:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 381:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 382:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 383:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 384:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 385:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 386:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 387:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 388:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 389:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 390:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 391:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 392:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 393:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 394:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 395:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 396:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 397:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 398:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 399:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 400:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 401:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 402:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 403:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 404:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 405:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 406:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 407:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 408:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 409:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 410:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 411:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 412:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 413:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 414:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 415:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 416:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 417:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****     const uint8_t service_request)
 418:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 419:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 420:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 421:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 422:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 423:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 424:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 425:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 426:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 427:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 428:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 429:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 430:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 431:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 432:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 433:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 434:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 435:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 436:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 437:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 438:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 439:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 440:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 441:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 442:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 443:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****     const XMC_I2C_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
 444:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****     const uint32_t service_request)
 445:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 446:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 447:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****                                       (uint32_t)service_request);
 448:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 449:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 450:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 451:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 452:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 453:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 454:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 455:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 456:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 457:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 458:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 459:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 460:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 461:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 462:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 463:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 464:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 465:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 466:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 467:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 468:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 469:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 470:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 471:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 472:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 473:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 474:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 475:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 476:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 477:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 478:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 479:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 480:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 481:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 482:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 483:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 484:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 485:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 486:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 487:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 488:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 489:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 490:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 491:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 492:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 493:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 494:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 495:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 496:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 497:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 498:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 499:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 500:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 501:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 502:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 503:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 504:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 505:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 506:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 507:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 508:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 509:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 510:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 511:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 512:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 513:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 514:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 515:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 516:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 517:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 518:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 519:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 520:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 521:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 522:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 523:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 524:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 525:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 526:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 527:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 528:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 529:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 530:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 531:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 532:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 533:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 534:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 535:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 536:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 537:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 538:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 539:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 540:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 541:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 542:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 543:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 544:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 545:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 546:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 547:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 548:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 549:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 550:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 551:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 552:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 553:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 554:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 555:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 556:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 557:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 558:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 559:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 560:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 561:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 562:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 563:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 564:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 565:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 566:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 567:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 568:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 569:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 570:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 571:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 572:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 573:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 574:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 575:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 576:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 577:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 578:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 579:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 580:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 581:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 582:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 583:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 584:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 585:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 586:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 587:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 588:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 589:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 590:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 591:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 592:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 593:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 594:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 595:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 596:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 597:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 598:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 599:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 600:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 601:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 602:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 603:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 604:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 605:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 606:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 607:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 608:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 609:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 610:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 611:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 612:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 613:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 614:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 615:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 616:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 617:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 618:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 619:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 620:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 621:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 622:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 623:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 624:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 625:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 626:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 627:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 628:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 629:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 630:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 631:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 632:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 633:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 634:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 635:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 636:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 637:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 638:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 639:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 640:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 641:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 642:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 643:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 644:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 645:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 646:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 647:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 648:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 649:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 650:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 651:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 652:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 653:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 654:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 655:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 656:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 657:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 658:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 659:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 660:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 661:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 662:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 663:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 664:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 665:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 666:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 667:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 668:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 669:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 670:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 671:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 672:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 673:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 674:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 675:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 676:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   return ((uint8_t)((channel->RBUF) >> 8U));
 677:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 678:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 679:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 680:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 681:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 682:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 683:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 684:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 685:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 686:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 687:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 688:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 689:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 690:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 691:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 692:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 693:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 694:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 695:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 696:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 697:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 698:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 699:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 700:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 701:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 702:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 703:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 704:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 705:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 706:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 707:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 708:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 709:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 710:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 711:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 712:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 713:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 714:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 715:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 716:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 175              	 .loc 2 716 0
 176              	 .cfi_startproc
 177              	 
 178              	 
 179              	 
 180 0000 80B4     	 push {r7}
 181              	.LCFI18:
 182              	 .cfi_def_cfa_offset 4
 183              	 .cfi_offset 7,-4
 184 0002 83B0     	 sub sp,sp,#12
 185              	.LCFI19:
 186              	 .cfi_def_cfa_offset 16
 187 0004 00AF     	 add r7,sp,#0
 188              	.LCFI20:
 189              	 .cfi_def_cfa_register 7
 190 0006 7860     	 str r0,[r7,#4]
 717:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 191              	 .loc 2 717 0
 192 0008 7B68     	 ldr r3,[r7,#4]
 193 000a 9B6C     	 ldr r3,[r3,#72]
 718:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 194              	 .loc 2 718 0
 195 000c 1846     	 mov r0,r3
 196 000e 0C37     	 adds r7,r7,#12
 197              	.LCFI21:
 198              	 .cfi_def_cfa_offset 4
 199 0010 BD46     	 mov sp,r7
 200              	.LCFI22:
 201              	 .cfi_def_cfa_register 13
 202              	 
 203 0012 5DF8047B 	 ldr r7,[sp],#4
 204              	.LCFI23:
 205              	 .cfi_restore 7
 206              	 .cfi_def_cfa_offset 0
 207 0016 7047     	 bx lr
 208              	 .cfi_endproc
 209              	.LFE217:
 211              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 212              	 .align 2
 213              	 .thumb
 214              	 .thumb_func
 216              	XMC_I2C_CH_ClearStatusFlag:
 217              	.LFB218:
 719:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 720:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 721:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 722:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 723:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 724:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 725:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 726:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 727:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 728:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 729:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 730:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 731:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 732:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 218              	 .loc 2 732 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222              	 
 223 0000 80B4     	 push {r7}
 224              	.LCFI24:
 225              	 .cfi_def_cfa_offset 4
 226              	 .cfi_offset 7,-4
 227 0002 83B0     	 sub sp,sp,#12
 228              	.LCFI25:
 229              	 .cfi_def_cfa_offset 16
 230 0004 00AF     	 add r7,sp,#0
 231              	.LCFI26:
 232              	 .cfi_def_cfa_register 7
 233 0006 7860     	 str r0,[r7,#4]
 234 0008 3960     	 str r1,[r7]
 733:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 235              	 .loc 2 733 0
 236 000a 7B68     	 ldr r3,[r7,#4]
 237 000c DA6C     	 ldr r2,[r3,#76]
 238 000e 3B68     	 ldr r3,[r7]
 239 0010 1A43     	 orrs r2,r2,r3
 240 0012 7B68     	 ldr r3,[r7,#4]
 241 0014 DA64     	 str r2,[r3,#76]
 734:C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 242              	 .loc 2 734 0
 243 0016 0C37     	 adds r7,r7,#12
 244              	.LCFI27:
 245              	 .cfi_def_cfa_offset 4
 246 0018 BD46     	 mov sp,r7
 247              	.LCFI28:
 248              	 .cfi_def_cfa_register 13
 249              	 
 250 001a 5DF8047B 	 ldr r7,[sp],#4
 251              	.LCFI29:
 252              	 .cfi_restore 7
 253              	 .cfi_def_cfa_offset 0
 254 001e 7047     	 bx lr
 255              	 .cfi_endproc
 256              	.LFE218:
 258              	 .section .text.I2C_MASTER_IsTXFIFOFull,"ax",%progbits
 259              	 .align 2
 260              	 .thumb
 261              	 .thumb_func
 263              	I2C_MASTER_IsTXFIFOFull:
 264              	.LFB230:
 265              	 .file 3 "../Dave/Generated/I2C_MASTER/i2c_master.h"
   1:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @file i2c_master.h
   3:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @date 2021-01-08
   4:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * regenerated.
   8:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
   9:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
  10:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @cond
  11:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  12:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER v4.1.34 Configures USIC channel to transmit & receive data using I2C protocol.
  13:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  14:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  15:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * All rights reserved.
  16:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  17:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following conditions are met:
  19:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  20:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * disclaimer.
  22:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  23:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  26:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  29:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  37:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  40:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  41:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Change History
  42:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * --------------
  43:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  44:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-02-16:
  45:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Initial version<br>
  46:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  47:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-06-10:
  48:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  50:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-08-31:
  51:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - DMA support APIs added
  52:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-10-20:
  53:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Code snippets updated
  54:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2016-08-18:
  55:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2017-11-17:
  57:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added tx_irqn and rx_irqn to I2C_MASTER_CONFIG_t
  58:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2017-12-20:
  59:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_FlushTxFifo(), I2C_MASTER_FlushRxFifo(), I2C_MASTER_DisableOutputs(), I2C
  60:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  61:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2019-16-09:
  62:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_START_TRANSMIT_RETRIES to control the wait to see the START symbol in the
  63:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_STATUS_BUS_ERROR as possible return value from I2C_MASTER_StartTransmitIR
  64:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  65:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2021-01-08:
  66:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Modified check for minimum XMCLib version
  67:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  68:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcond
  69:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  70:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
  71:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  72:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifndef I2C_MASTER_H
  73:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_H
  74:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  75:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  76:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  77:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  78:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * HEADER FILES
  79:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  80:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "xmc_gpio.h"
  81:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "xmc_i2c.h"
  82:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "i2c_master_conf.h"
  83:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  84:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if(UC_FAMILY == XMC4)
  85:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  86:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  87:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  88:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  89:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  90:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "DAVE_Common.h"
  91:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  92:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  93:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  94:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  95:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  96:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * MACROS
  97:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  98:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_XMC_LIB_MAJOR_VERSION 2
  99:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_XMC_LIB_MINOR_VERSION 0
 100:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_XMC_LIB_PATCH_VERSION 0
 101:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 102:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if !((XMC_LIB_MAJOR_VERSION > I2C_MASTER_XMC_LIB_MAJOR_VERSION) ||\
 103:../Dave/Generated/I2C_MASTER/i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > I2C_
 104:../Dave/Generated/I2C_MASTER/i2c_master.h ****       ((XMC_LIB_MAJOR_VERSION == I2C_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == I2C
 105:../Dave/Generated/I2C_MASTER/i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
 106:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 107:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 108:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifndef I2C_MASTER_START_TRANSMIT_RETRIES
 109:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_START_TRANSMIT_RETRIES (0x7fff)
 110:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 111:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 112:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 113:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * ENUMS
 114:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 115:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
 117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 118:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 119:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 120:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Initialization status.
 121:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 122:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_STATUS
 123:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 124:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 125:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 126:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 127:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U,  /*!< I2C_MASTER UNSUPPORTED MODE */
 128:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_BUS_ERROR = 4U          /*!< I2C_MASTER BUS_ERROR */
 129:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_STATUS_t;
 130:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 131:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 132:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Direction
 133:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 134:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 135:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 136:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 137:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 138:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 139:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 140:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 143:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 144:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 145:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 146:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 147:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 148:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 149:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 150:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 151:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 152:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 153:../Dave/Generated/I2C_MASTER/i2c_master.h **** * DATA STRUCTURES
 154:../Dave/Generated/I2C_MASTER/i2c_master.h **** ***************************************************************************************************
 155:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 156:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 158:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 159:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 160:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 161:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure for DMA configuration.
 162:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 163:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 164:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 165:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 166:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 167:../Dave/Generated/I2C_MASTER/i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 168:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 169:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 170:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 171:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 172:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 173:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 174:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 175:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 176:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 177:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 178:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 179:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data transmission.*/
 180:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 181:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 182:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 183:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data reception.*/
 184:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 185:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 186:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_enable_io;      /*!< Function pointer to enable SDA/SCL outpu
 187:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_disable_io;     /*!< Function pointer to disable SDA/SCL outp
 188:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 189:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 190:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the transmission is complete
 191:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 192:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the reception is complete*/
 193:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 194:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when nack is received*/
 195:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 196:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when arbitration lost is occured*
 197:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 198:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when error is detected.*/
 199:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 200:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 201:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 202:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 203:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 204:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 205:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 206:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 207:../Dave/Generated/I2C_MASTER/i2c_master.h ****    IRQn_Type tx_irqn;
 208:../Dave/Generated/I2C_MASTER/i2c_master.h ****    IRQn_Type rx_irqn; 
 209:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_CONFIG_t;
 210:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 211:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 212:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 213:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 214:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 215:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 216:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 217:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 218:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 219:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 220:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 221:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 222:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 223:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 224:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 225:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 226:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 227:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 228:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 229:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 230:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 231:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 232:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 233:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 234:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 235:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 236:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 237:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 239:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 240:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER
 241:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 242:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 243:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 244:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 245:../Dave/Generated/I2C_MASTER/i2c_master.h ****    	                                               that can change at runtime*/
 246:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_t;
 247:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 248:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 249:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 251:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 252:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifdef __cplusplus
 253:../Dave/Generated/I2C_MASTER/i2c_master.h **** extern "C" {
 254:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 255:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 256:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 257:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 261:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 262:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * API PROTOTYPES
 264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 265:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function can be used to check application software compatibility with a
 271:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * specific version of the APP.
 272:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 273:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 274:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 275:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 276:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 277:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_Init();
 280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(version.major != 4U)
 282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 290:../Dave/Generated/I2C_MASTER/i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 291:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
 295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * FIFO configuration etc are done in this API.
 299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function.
 301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 304:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 305:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * #include "DAVE.h"
 306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * int main(void)
 307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * {
 308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   // Initializing the modules and the multiplexer
 309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {}
 312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 317:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 318:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 319:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 320:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 321:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer to receive data.
 327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 330:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 331:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 332:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 333:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 334:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 335:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 336:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).\n
 337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_READ 10
 344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 352:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t data = 0x55;
 355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_data;
 356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 370:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Read data from IO EXPANDER
 372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   { }
 380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  return 0;
 381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 386:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 387:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 388:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 389:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 390:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits data to I2C slave device.
 391:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 392:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 393:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 394:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 395:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer containing the data to transmit.
 396:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write). \n
 406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
 408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 422:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 438:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 445:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 446:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 447:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 448:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get the I2C flag status.
 450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t Flag status.
 457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 462:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 463:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 464:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 465:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 466:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 467:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 468:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 469:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 486:../Dave/Generated/I2C_MASTER/i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 487:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 488:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Clear the I2C flag status.
 490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None <BR>
 497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 500:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 501:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 516:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 517:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 518:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 519:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 520:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 521:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 525:../Dave/Generated/I2C_MASTER/i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 526:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 527:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * user can start a new transmission without delay.
 535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 542:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 545:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 552:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
 559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 563:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 564:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 565:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 566:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 567:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 568:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 569:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 570:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 571:../Dave/Generated/I2C_MASTER/i2c_master.h **** * @brief Stops the active data reception request.
 572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * a new receive request.
 580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t rx_buf[25];
 591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t tx_buf[2];
 592:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;
 593:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 594:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 595:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 596:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address from which data to be transfered
 597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     tx_buf[0] = 0;
 598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 608:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
 609:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 610:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 611:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 612:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
 613:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 614:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 618:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 619:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 620:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 621:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U) || defined(DOXYGEN)
 622:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  block_size size of the block
 627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr    address\n
 628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure to store the status of transmission.
 641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens through DMA channel.
 643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the completion of data transmission.
 648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * calls to this API.
 650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 677:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 678:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 679:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 680:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 681:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 682:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 683:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // trigger the DMA
 685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 700:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 701:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 702:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 703:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U) || defined(DOXYGEN)
 704:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param block_size  size of the block
 710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr  address \n
 711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed.
 720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * are received.
 725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Pre condition:
 740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t ReadData[256];
 743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 747:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 748:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 749:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 750:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 751:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 752:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 753:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 759:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 769:../Dave/Generated/I2C_MASTER/i2c_master.h ****  
 770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 772:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 773:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  @endcode
 783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 785:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 786:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 787:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 788:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 789:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size    number of bytes
 797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 798:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 799:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 800:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 801:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 802:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 803:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 804:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 805:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * in progress.
 814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 833:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 834:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 836:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 838:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 843:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 844:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 845:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 846:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 852:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 854:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 855:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 856:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 857:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 858:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 859:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 860:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 861:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 862:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 863:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 864:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count    number of bytes
 873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 894:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
 901:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 902:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_buffer[64];
 903:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 904:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 905:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 906:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 907:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 908:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 909:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 910:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 911:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 912:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 913:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 914:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 915:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 916:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 917:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 918:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 919:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 920:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 921:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 922:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 923:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 924:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 925:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 926:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 927:../Dave/Generated/I2C_MASTER/i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 928:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 929:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 930:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 931:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 932:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 933:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 934:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 935:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 936:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 937:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 938:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      their bit positions.\n
 939:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 940:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 941:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 942:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 943:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * buffer error flag before providing the value.
 944:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 945:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 946:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 947:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 948:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 949:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 950:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 951:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 952:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 953:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 954:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 955:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 956:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 957:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 958:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 959:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 960:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 961:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 962:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 963:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 964:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 965:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 966:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 967:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 968:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 969:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 970:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 971:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 972:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 973:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 974:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 975:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 976:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 977:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 978:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 979:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 980:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 981:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 982:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 983:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 984:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL));
 985:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 986:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 987:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 988:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 989:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 990:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 991:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 992:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
 993:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 994:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 995:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 996:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 997:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 998:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
 999:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1000:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1001:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1002:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1003:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * below the trigger limit.
1004:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1005:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1006:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1007:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1008:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1009:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1010:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1011:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
1012:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1013:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1014:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1015:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1016:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1017:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1018:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1019:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
1020:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1021:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
1022:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
1023:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1024:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1025:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1026:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1027:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1028:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1029:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1030:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1031:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1032:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1033:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1034:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1035:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1036:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1037:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1038:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1039:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1040:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL));
1041:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1042:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1043:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1044:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1045:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1046:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1047:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
1048:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1049:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1050:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1051:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1052:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1053:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1054:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1055:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1056:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1057:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1058:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * above the trigger limit.
1059:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1060:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1061:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1062:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1063:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1064:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1065:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1066:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1067:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Rx_Data[256];
1068:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1069:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1070:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1071:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1072:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1073:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1074:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1075:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1076:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1077:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1078:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1079:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1080:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1081:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1082:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1083:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1084:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1085:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1086:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1087:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1088:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1089:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1090:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1091:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1092:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1093:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1094:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1095:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1096:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
1097:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1098:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1099:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1100:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1101:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1102:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1103:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1104:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1105:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1106:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1107:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1108:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1109:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1110:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * data to the transmit FIFO.
1111:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1112:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1113:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1114:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1115:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1118:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1119:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1120:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1121:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1122:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1123:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1124:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1125:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1126:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1127:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1128:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1129:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1130:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1131:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1132:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1133:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1134:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1135:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Wait when Tx FIFO is full
1136:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1137:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1138:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1139:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1140:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(1U)
1141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1143:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
1144:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1145:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1146:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1147:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 266              	 .loc 3 1147 0
 267              	 .cfi_startproc
 268              	 
 269              	 
 270 0000 80B5     	 push {r7,lr}
 271              	.LCFI30:
 272              	 .cfi_def_cfa_offset 8
 273              	 .cfi_offset 7,-8
 274              	 .cfi_offset 14,-4
 275 0002 82B0     	 sub sp,sp,#8
 276              	.LCFI31:
 277              	 .cfi_def_cfa_offset 16
 278 0004 00AF     	 add r7,sp,#0
 279              	.LCFI32:
 280              	 .cfi_def_cfa_register 7
 281 0006 7860     	 str r0,[r7,#4]
1148:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
1149:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 282              	 .loc 3 1149 0
 283 0008 7B68     	 ldr r3,[r7,#4]
 284 000a 1B68     	 ldr r3,[r3]
 285 000c 1846     	 mov r0,r3
 286 000e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsFull
 287 0012 0346     	 mov r3,r0
1150:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 288              	 .loc 3 1150 0
 289 0014 1846     	 mov r0,r3
 290 0016 0837     	 adds r7,r7,#8
 291              	.LCFI33:
 292              	 .cfi_def_cfa_offset 8
 293 0018 BD46     	 mov sp,r7
 294              	.LCFI34:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 001a 80BD     	 pop {r7,pc}
 298              	 .cfi_endproc
 299              	.LFE230:
 301              	 .section .text.I2C_MASTER_IsRXFIFOEmpty,"ax",%progbits
 302              	 .align 2
 303              	 .thumb
 304              	 .thumb_func
 306              	I2C_MASTER_IsRXFIFOEmpty:
 307              	.LFB231:
1151:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1152:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1153:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1154:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1155:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1156:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1158:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1159:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1160:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1161:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1162:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1163:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1164:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1165:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1166:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1167:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1168:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1169:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1170:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1171:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1172:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1173:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1174:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1175:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1176:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1177:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1178:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1179:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1180:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1181:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1182:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1183:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1184:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1185:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1186:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1187:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1188:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1189:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1190:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1191:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1192:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1193:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1194:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1195:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1196:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1197:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1198:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1199:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1200:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1201:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1202:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1203:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1204:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1205:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1206:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
1207:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1208:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1209:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1210:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1211:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1212:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1213:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 308              	 .loc 3 1213 0
 309              	 .cfi_startproc
 310              	 
 311              	 
 312 0000 80B5     	 push {r7,lr}
 313              	.LCFI35:
 314              	 .cfi_def_cfa_offset 8
 315              	 .cfi_offset 7,-8
 316              	 .cfi_offset 14,-4
 317 0002 82B0     	 sub sp,sp,#8
 318              	.LCFI36:
 319              	 .cfi_def_cfa_offset 16
 320 0004 00AF     	 add r7,sp,#0
 321              	.LCFI37:
 322              	 .cfi_def_cfa_register 7
 323 0006 7860     	 str r0,[r7,#4]
1214:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
1215:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 324              	 .loc 3 1215 0
 325 0008 7B68     	 ldr r3,[r7,#4]
 326 000a 1B68     	 ldr r3,[r3]
 327 000c 1846     	 mov r0,r3
 328 000e FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 329 0012 0346     	 mov r3,r0
1216:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 330              	 .loc 3 1216 0
 331 0014 1846     	 mov r0,r3
 332 0016 0837     	 adds r7,r7,#8
 333              	.LCFI38:
 334              	 .cfi_def_cfa_offset 8
 335 0018 BD46     	 mov sp,r7
 336              	.LCFI39:
 337              	 .cfi_def_cfa_register 13
 338              	 
 339 001a 80BD     	 pop {r7,pc}
 340              	 .cfi_endproc
 341              	.LFE231:
 343              	 .section .text.I2C_MASTER_GetReceivedByte,"ax",%progbits
 344              	 .align 2
 345              	 .thumb
 346              	 .thumb_func
 348              	I2C_MASTER_GetReceivedByte:
 349              	.LFB235:
1217:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1218:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1219:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1220:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1221:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1222:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1223:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1224:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1225:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1226:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1227:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * comparison using \a OR operation.
1228:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1229:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1230:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1231:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * event.
1232:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1233:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interest before checking the status.
1234:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1235:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1236:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1237:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1239:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1240:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t mem_address[2];
1241:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   int main(void)
1242:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1243:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     DAVE_STATUS_t init_status;
1244:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1245:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     init_status = DAVE_Init();
1246:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1247:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1248:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1249:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1251:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1252:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1253:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1254:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1255:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1256:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1257:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     else
1260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1261:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1262:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1265:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      return 1U;
1267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1271:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1272:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1273:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL));
1274:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1275:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1276:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1277:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * transmit FIFO.
1280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \a OR operation.
1286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1290:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1291:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * appropriately masked.
1293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1304:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1305:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1317:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1318:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1319:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1320:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1321:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1330:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1331:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1332:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL));
1333:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1334:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1335:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1336:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1352:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the function.
1353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1370:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1386:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1387:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1388:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1389:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1390:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1391:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1392:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL));
1393:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1394:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1395:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1396:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Provides the received data from receive buffer.
1398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[10];
1415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1422:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        // wait for ACK
1437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1438:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         index++;
1443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1445:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1446:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1447:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1448:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1462:../Dave/Generated/I2C_MASTER/i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1463:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1464:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 350              	 .loc 3 1464 0
 351              	 .cfi_startproc
 352              	 
 353              	 
 354 0000 80B5     	 push {r7,lr}
 355              	.LCFI40:
 356              	 .cfi_def_cfa_offset 8
 357              	 .cfi_offset 7,-8
 358              	 .cfi_offset 14,-4
 359 0002 82B0     	 sub sp,sp,#8
 360              	.LCFI41:
 361              	 .cfi_def_cfa_offset 16
 362 0004 00AF     	 add r7,sp,#0
 363              	.LCFI42:
 364              	 .cfi_def_cfa_register 7
 365 0006 7860     	 str r0,[r7,#4]
1465:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
1466:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 366              	 .loc 3 1466 0
 367 0008 7B68     	 ldr r3,[r7,#4]
 368 000a 1B68     	 ldr r3,[r3]
 369 000c 1846     	 mov r0,r3
 370 000e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 371 0012 0346     	 mov r3,r0
1467:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 372              	 .loc 3 1467 0
 373 0014 1846     	 mov r0,r3
 374 0016 0837     	 adds r7,r7,#8
 375              	.LCFI43:
 376              	 .cfi_def_cfa_offset 8
 377 0018 BD46     	 mov sp,r7
 378              	.LCFI44:
 379              	 .cfi_def_cfa_register 13
 380              	 
 381 001a 80BD     	 pop {r7,pc}
 382              	 .cfi_endproc
 383              	.LFE235:
 385              	 .section .text.I2C_MASTER_TransmitByte,"ax",%progbits
 386              	 .align 2
 387              	 .thumb
 388              	 .thumb_func
 390              	I2C_MASTER_TransmitByte:
 391              	.LFB236:
1468:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1469:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  byte data byte to transmit. \n
1474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
1476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1486:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1487:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1488:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1500:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1501:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1516:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1517:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 392              	 .loc 3 1517 0
 393              	 .cfi_startproc
 394              	 
 395              	 
 396 0000 80B5     	 push {r7,lr}
 397              	.LCFI45:
 398              	 .cfi_def_cfa_offset 8
 399              	 .cfi_offset 7,-8
 400              	 .cfi_offset 14,-4
 401 0002 82B0     	 sub sp,sp,#8
 402              	.LCFI46:
 403              	 .cfi_def_cfa_offset 16
 404 0004 00AF     	 add r7,sp,#0
 405              	.LCFI47:
 406              	 .cfi_def_cfa_register 7
 407 0006 7860     	 str r0,[r7,#4]
 408 0008 0B46     	 mov r3,r1
 409 000a FB70     	 strb r3,[r7,#3]
1518:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
1519:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 410              	 .loc 3 1519 0
 411 000c 7B68     	 ldr r3,[r7,#4]
 412 000e 1A68     	 ldr r2,[r3]
 413 0010 FB78     	 ldrb r3,[r7,#3]
 414 0012 1046     	 mov r0,r2
 415 0014 1946     	 mov r1,r3
 416 0016 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
1520:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 417              	 .loc 3 1520 0
 418 001a 0837     	 adds r7,r7,#8
 419              	.LCFI48:
 420              	 .cfi_def_cfa_offset 8
 421 001c BD46     	 mov sp,r7
 422              	.LCFI49:
 423              	 .cfi_def_cfa_register 13
 424              	 
 425 001e 80BD     	 pop {r7,pc}
 426              	 .cfi_endproc
 427              	.LFE236:
 429              	 .section .text.I2C_MASTER_ReceiveACK,"ax",%progbits
 430              	 .align 2
 431              	 .thumb
 432              	 .thumb_func
 434              	I2C_MASTER_ReceiveACK:
 435              	.LFB239:
1521:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1525:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1526:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1527:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * may not yield expected result.
1535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1542:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1545:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1552:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1563:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1564:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1565:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL));
1566:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
1567:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1568:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1569:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1570:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1571:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1592:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1593:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1594:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1595:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1596:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1608:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1609:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1610:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
1611:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
1612:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1613:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1614:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the ACK from slave
1616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1618:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1619:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1620:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1621:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1622:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1677:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1678:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1679:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 436              	 .loc 3 1679 0
 437              	 .cfi_startproc
 438              	 
 439              	 
 440 0000 80B5     	 push {r7,lr}
 441              	.LCFI50:
 442              	 .cfi_def_cfa_offset 8
 443              	 .cfi_offset 7,-8
 444              	 .cfi_offset 14,-4
 445 0002 82B0     	 sub sp,sp,#8
 446              	.LCFI51:
 447              	 .cfi_def_cfa_offset 16
 448 0004 00AF     	 add r7,sp,#0
 449              	.LCFI52:
 450              	 .cfi_def_cfa_register 7
 451 0006 7860     	 str r0,[r7,#4]
1680:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
1681:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
 452              	 .loc 3 1681 0
 453 0008 7B68     	 ldr r3,[r7,#4]
 454 000a 1B68     	 ldr r3,[r3]
 455 000c 1846     	 mov r0,r3
 456 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
1682:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 457              	 .loc 3 1682 0
 458 0012 0837     	 adds r7,r7,#8
 459              	.LCFI53:
 460              	 .cfi_def_cfa_offset 8
 461 0014 BD46     	 mov sp,r7
 462              	.LCFI54:
 463              	 .cfi_def_cfa_register 13
 464              	 
 465 0016 80BD     	 pop {r7,pc}
 466              	 .cfi_endproc
 467              	.LFE239:
 469              	 .section .text.I2C_MASTER_ReceiveNACK,"ax",%progbits
 470              	 .align 2
 471              	 .thumb
 472              	 .thumb_func
 474              	I2C_MASTER_ReceiveNACK:
 475              	.LFB240:
1683:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the NACK from slave
1685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1700:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1701:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1702:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1703:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1704:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // only for the last byte
1730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1747:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1748:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1749:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 476              	 .loc 3 1749 0
 477              	 .cfi_startproc
 478              	 
 479              	 
 480 0000 80B5     	 push {r7,lr}
 481              	.LCFI55:
 482              	 .cfi_def_cfa_offset 8
 483              	 .cfi_offset 7,-8
 484              	 .cfi_offset 14,-4
 485 0002 82B0     	 sub sp,sp,#8
 486              	.LCFI56:
 487              	 .cfi_def_cfa_offset 16
 488 0004 00AF     	 add r7,sp,#0
 489              	.LCFI57:
 490              	 .cfi_def_cfa_register 7
 491 0006 7860     	 str r0,[r7,#4]
1750:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
1751:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
 492              	 .loc 3 1751 0
 493 0008 7B68     	 ldr r3,[r7,#4]
 494 000a 1B68     	 ldr r3,[r3]
 495 000c 1846     	 mov r0,r3
 496 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
1752:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 497              	 .loc 3 1752 0
 498 0012 0837     	 adds r7,r7,#8
 499              	.LCFI58:
 500              	 .cfi_def_cfa_offset 8
 501 0014 BD46     	 mov sp,r7
 502              	.LCFI59:
 503              	 .cfi_def_cfa_register 13
 504              	 
 505 0016 80BD     	 pop {r7,pc}
 506              	 .cfi_endproc
 507              	.LFE240:
 509              	 .section .text.I2C_MASTER_SendStop,"ax",%progbits
 510              	 .align 2
 511              	 .thumb
 512              	 .thumb_func
 514              	I2C_MASTER_SendStop:
 515              	.LFB241:
1753:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends stop command to slave
1755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1759:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1769:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1772:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1773:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1785:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1786:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1787:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1788:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1789:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1798:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1799:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1800:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 516              	 .loc 3 1800 0
 517              	 .cfi_startproc
 518              	 
 519              	 
 520 0000 80B5     	 push {r7,lr}
 521              	.LCFI60:
 522              	 .cfi_def_cfa_offset 8
 523              	 .cfi_offset 7,-8
 524              	 .cfi_offset 14,-4
 525 0002 82B0     	 sub sp,sp,#8
 526              	.LCFI61:
 527              	 .cfi_def_cfa_offset 16
 528 0004 00AF     	 add r7,sp,#0
 529              	.LCFI62:
 530              	 .cfi_def_cfa_register 7
 531 0006 7860     	 str r0,[r7,#4]
1801:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
1802:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 532              	 .loc 3 1802 0
 533 0008 7B68     	 ldr r3,[r7,#4]
 534 000a 1B68     	 ldr r3,[r3]
 535 000c 1846     	 mov r0,r3
 536 000e 1021     	 movs r1,#16
 537 0010 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1803:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
 538              	 .loc 3 1803 0
 539 0014 7B68     	 ldr r3,[r7,#4]
 540 0016 1B68     	 ldr r3,[r3]
 541 0018 1846     	 mov r0,r3
 542 001a FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
1804:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 543              	 .loc 3 1804 0
 544 001e 0837     	 adds r7,r7,#8
 545              	.LCFI63:
 546              	 .cfi_def_cfa_offset 8
 547 0020 BD46     	 mov sp,r7
 548              	.LCFI64:
 549              	 .cfi_def_cfa_register 13
 550              	 
 551 0022 80BD     	 pop {r7,pc}
 552              	 .cfi_endproc
 553              	.LFE241:
 555              	 .section .text.I2C_MASTER_SendStart,"ax",%progbits
 556              	 .align 2
 557              	 .thumb
 558              	 .thumb_func
 560              	I2C_MASTER_SendStart:
 561              	.LFB242:
1805:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends start command to slave
1807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"
1823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1833:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1834:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1836:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1838:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1843:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1844:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1845:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1846:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(1U)
1848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       {
1849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       }
1850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1852:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1854:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1855:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1856:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1857:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 562              	 .loc 3 1857 0
 563              	 .cfi_startproc
 564              	 
 565              	 
 566 0000 80B5     	 push {r7,lr}
 567              	.LCFI65:
 568              	 .cfi_def_cfa_offset 8
 569              	 .cfi_offset 7,-8
 570              	 .cfi_offset 14,-4
 571 0002 84B0     	 sub sp,sp,#16
 572              	.LCFI66:
 573              	 .cfi_def_cfa_offset 24
 574 0004 00AF     	 add r7,sp,#0
 575              	.LCFI67:
 576              	 .cfi_def_cfa_register 7
 577 0006 F860     	 str r0,[r7,#12]
 578 0008 B960     	 str r1,[r7,#8]
 579 000a 1346     	 mov r3,r2
 580 000c FB71     	 strb r3,[r7,#7]
1858:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
1859:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 581              	 .loc 3 1859 0
 582 000e FB68     	 ldr r3,[r7,#12]
 583 0010 1B68     	 ldr r3,[r3]
 584 0012 1846     	 mov r0,r3
 585 0014 0421     	 movs r1,#4
 586 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1860:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 587              	 .loc 3 1860 0
 588 001a FB68     	 ldr r3,[r7,#12]
 589 001c 1968     	 ldr r1,[r3]
 590 001e BB68     	 ldr r3,[r7,#8]
 591 0020 9AB2     	 uxth r2,r3
 592 0022 FB79     	 ldrb r3,[r7,#7]
 593 0024 0846     	 mov r0,r1
 594 0026 1146     	 mov r1,r2
 595 0028 1A46     	 mov r2,r3
 596 002a FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
1861:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 597              	 .loc 3 1861 0
 598 002e 1037     	 adds r7,r7,#16
 599              	.LCFI68:
 600              	 .cfi_def_cfa_offset 8
 601 0030 BD46     	 mov sp,r7
 602              	.LCFI69:
 603              	 .cfi_def_cfa_register 13
 604              	 
 605 0032 80BD     	 pop {r7,pc}
 606              	 .cfi_endproc
 607              	.LFE242:
 609              	 .section .text.I2C_MASTER_SendRepeatedStart,"ax",%progbits
 610              	 .align 2
 611              	 .thumb
 612              	 .thumb_func
 614              	I2C_MASTER_SendRepeatedStart:
 615              	.LFB243:
1862:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1863:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends repeated start command to slave
1864:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rx_buf[256];
1885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1894:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address to which data to be transfered
1896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1901:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1902:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1903:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1904:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1905:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1906:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1907:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1908:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 	   memset(rx_buf,0,16);
1909:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1910:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1911:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1912:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1913:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1914:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1915:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1916:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1917:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1918:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
1919:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1920:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1921:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1922:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1923:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1924:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 616              	 .loc 3 1924 0
 617              	 .cfi_startproc
 618              	 
 619              	 
 620 0000 80B5     	 push {r7,lr}
 621              	.LCFI70:
 622              	 .cfi_def_cfa_offset 8
 623              	 .cfi_offset 7,-8
 624              	 .cfi_offset 14,-4
 625 0002 84B0     	 sub sp,sp,#16
 626              	.LCFI71:
 627              	 .cfi_def_cfa_offset 24
 628 0004 00AF     	 add r7,sp,#0
 629              	.LCFI72:
 630              	 .cfi_def_cfa_register 7
 631 0006 F860     	 str r0,[r7,#12]
 632 0008 B960     	 str r1,[r7,#8]
 633 000a 1346     	 mov r3,r2
 634 000c FB71     	 strb r3,[r7,#7]
1925:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
1926:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEI
 635              	 .loc 3 1926 0
 636 000e FB68     	 ldr r3,[r7,#12]
 637 0010 1B68     	 ldr r3,[r3]
 638 0012 1846     	 mov r0,r3
 639 0014 0821     	 movs r1,#8
 640 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1927:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 641              	 .loc 3 1927 0
 642 001a FB68     	 ldr r3,[r7,#12]
 643 001c 1968     	 ldr r1,[r3]
 644 001e BB68     	 ldr r3,[r7,#8]
 645 0020 9AB2     	 uxth r2,r3
 646 0022 FB79     	 ldrb r3,[r7,#7]
 647 0024 0846     	 mov r0,r1
 648 0026 1146     	 mov r1,r2
 649 0028 1A46     	 mov r2,r3
 650 002a FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
1928:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 651              	 .loc 3 1928 0
 652 002e 1037     	 adds r7,r7,#16
 653              	.LCFI73:
 654              	 .cfi_def_cfa_offset 8
 655 0030 BD46     	 mov sp,r7
 656              	.LCFI74:
 657              	 .cfi_def_cfa_register 13
 658              	 
 659 0032 80BD     	 pop {r7,pc}
 660              	 .cfi_endproc
 661              	.LFE243:
 663              	 .section .text.I2C_MASTER_GetAppVersion,"ax",%progbits
 664              	 .align 2
 665              	 .global I2C_MASTER_GetAppVersion
 666              	 .thumb
 667              	 .thumb_func
 669              	I2C_MASTER_GetAppVersion:
 670              	.LFB250:
 671              	 .file 4 "../Dave/Generated/I2C_MASTER/i2c_master.c"
   1:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @file i2c_master.c
   3:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @date 2019-09-16
   4:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
   8:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   9:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @cond
  10:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  11:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER v4.1.34 Configures USIC channel to transmit & receive data using I2C protocol.
  12:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  13:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  14:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * All rights reserved.
  15:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  16:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * following conditions are met:
  18:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  19:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   disclaimer.
  21:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  22:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  25:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  28:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  36:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  39:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  40:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Change History
  41:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * --------------
  42:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  43:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-02-16:
  44:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Initial version<br>
  45:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  46:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-06-10:
  47:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  48:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  49:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-07-31:
  50:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - DMA support APIs added
  51:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  52:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-01-19:
  53:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Avoid unintended interrupts when filling FIFO
  54:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  55:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-11-17:
  56:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Use tx_irqn of channel config structure in the call of NVIC_ClearPendingIRQ()
  57:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  58:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-12-20:
  59:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Fix TX DMA issues
  60:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  61:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2019-06-24:
  62:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - I2C_MASTER_lStartTransmitPolling() handling of non ack     
  63:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  64:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2019-09-23:
  65:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Fixed return status of I2C_MASTER_lStartReceivePolling()
  66:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  67:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2020-09-16
  68:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - I2C_MASTER_StartTransmitIRQ() returns an error if START symbol was not transmitted into th
  69:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  70:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @endcond
  71:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  72:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
  73:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  74:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * HEADER FILES
  75:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  76:../Dave/Generated/I2C_MASTER/i2c_master.c **** #include "i2c_master.h"
  77:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  78:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  79:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * MACROS
  80:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  81:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_ACK             (0x0200U)
  82:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_NACK       (3U << 8U)
  83:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_DST_TR_WIDTH_MASK   (0x7EU)
  84:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_MASK       (0x600U)
  85:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_POS        (9U)
  86:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_TRANSFER_WIDTH_POS  (4U)
  87:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_DST_TRANSFER_WIDTH_POS  (1U)
  88:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  89:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_DMA_MAX_BLOCK_SIZE (4095U)
  90:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  91:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  92:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL DATA
  93:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  94:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  95:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  96:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL ROUTINES
  97:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  98:../Dave/Generated/I2C_MASTER/i2c_master.c ****  /*
  99:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function monitors the configured protocol interrupt flags. It is called from the protocol interr
 100:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * service handler.
 101:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function reads the status of the USIC channel and checks for configured flags in the app UI.
 102:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If any callback function is provided in the app UI, it will be called when the selected flag is 
 103:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 104:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER_t * pointer to the I2C_MASTER APP instance handle
 105:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 106:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 107:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);
 108:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 109:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 110:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
 111:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 112:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t result;
 113:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 114:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (a < b)
 115:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 116:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = a;
 117:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 118:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 119:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 120:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = b;
 121:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 122:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (result);
 123:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 124:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 125:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 126:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 127:../Dave/Generated/I2C_MASTER/i2c_master.c ****     (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 128:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle, const uint32_t address,
 129:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                const XMC_I2C_CH_CMD_t cmd);
 130:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 131:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 132:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 133:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle);
 134:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 135:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 136:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if(I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 137:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle);
 138:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 139:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 140:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 141:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle);
 142:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size);
 143:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 144:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 145:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                          const uint32_t count);
 146:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 147:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 148:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle);
 149:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 150:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 151:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 152:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 153:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_s
 154:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         const uint32_t slave_address, uint8_t *data
 155:../Dave/Generated/I2C_MASTER/i2c_master.c ****                               bool send_stop);
 156:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 157:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if I2C_MASTER_DIRECT_RX_ENABLED
 158:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_st
 159:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        uint8_t *data, uint32_t count, bool send_sto
 160:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                bool send_nack);
 161:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 162:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 163:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortTransmitDMA(const I2C_MASTER_t *const handle);
 164:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 165:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 166:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveDMA(const I2C_MASTER_t *const handle);
 167:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 168:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 169:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1) && (I2C_MASTER_DMA_RX_ENABLED == 1)
 170:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* DMA buffer to send the ACK */
 171:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t ack_buf[1];
 172:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t nack_buf[1];
 173:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 174:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 175:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 176:../Dave/Generated/I2C_MASTER/i2c_master.c **** * API IMPLEMENTATION
 177:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 178:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 179:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 180:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief API to retrieve the version of the I2C_MASTER APP.
 181:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 182:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return DAVE_APP_VERSION_t Structure containing major version, minor version
 183:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *         and patch version.
 184:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 185:../Dave/Generated/I2C_MASTER/i2c_master.c **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void)
 186:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 672              	 .loc 4 186 0
 673              	 .cfi_startproc
 674              	 
 675              	 
 676              	 
 677 0000 80B4     	 push {r7}
 678              	.LCFI75:
 679              	 .cfi_def_cfa_offset 4
 680              	 .cfi_offset 7,-4
 681 0002 83B0     	 sub sp,sp,#12
 682              	.LCFI76:
 683              	 .cfi_def_cfa_offset 16
 684 0004 00AF     	 add r7,sp,#0
 685              	.LCFI77:
 686              	 .cfi_def_cfa_register 7
 187:../Dave/Generated/I2C_MASTER/i2c_master.c ****   DAVE_APP_VERSION_t version;
 188:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 189:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.major = I2C_MASTER_MAJOR_VERSION;
 687              	 .loc 4 189 0
 688 0006 0423     	 movs r3,#4
 689 0008 3B70     	 strb r3,[r7]
 190:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.minor = I2C_MASTER_MINOR_VERSION;
 690              	 .loc 4 190 0
 691 000a 0123     	 movs r3,#1
 692 000c 7B70     	 strb r3,[r7,#1]
 191:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.patch = I2C_MASTER_PATCH_VERSION;
 693              	 .loc 4 191 0
 694 000e 2223     	 movs r3,#34
 695 0010 BB70     	 strb r3,[r7,#2]
 192:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 193:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (version);
 696              	 .loc 4 193 0
 697 0012 3B1D     	 adds r3,r7,#4
 698 0014 3A46     	 mov r2,r7
 699 0016 1268     	 ldr r2,[r2]
 700 0018 1146     	 mov r1,r2
 701 001a 1980     	 strh r1,[r3]
 702 001c 0233     	 adds r3,r3,#2
 703 001e 120C     	 lsrs r2,r2,#16
 704 0020 1A70     	 strb r2,[r3]
 705 0022 0023     	 movs r3,#0
 706 0024 3A79     	 ldrb r2,[r7,#4]
 707 0026 62F30703 	 bfi r3,r2,#0,#8
 708 002a 7A79     	 ldrb r2,[r7,#5]
 709 002c 62F30F23 	 bfi r3,r2,#8,#8
 710 0030 BA79     	 ldrb r2,[r7,#6]
 711 0032 62F31743 	 bfi r3,r2,#16,#8
 194:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 712              	 .loc 4 194 0
 713 0036 1846     	 mov r0,r3
 714 0038 0C37     	 adds r7,r7,#12
 715              	.LCFI78:
 716              	 .cfi_def_cfa_offset 4
 717 003a BD46     	 mov sp,r7
 718              	.LCFI79:
 719              	 .cfi_def_cfa_register 13
 720              	 
 721 003c 5DF8047B 	 ldr r7,[sp],#4
 722              	.LCFI80:
 723              	 .cfi_restore 7
 724              	 .cfi_def_cfa_offset 0
 725 0040 7047     	 bx lr
 726              	 .cfi_endproc
 727              	.LFE250:
 729 0042 00BF     	 .section .text.I2C_MASTER_Init,"ax",%progbits
 730              	 .align 2
 731              	 .global I2C_MASTER_Init
 732              	 .thumb
 733              	 .thumb_func
 735              	I2C_MASTER_Init:
 736              	.LFB251:
 195:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 196:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to initialize the USIC Channel with GUI configured values.*/
 197:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
 198:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 737              	 .loc 4 198 0
 738              	 .cfi_startproc
 739              	 
 740              	 
 741 0000 80B5     	 push {r7,lr}
 742              	.LCFI81:
 743              	 .cfi_def_cfa_offset 8
 744              	 .cfi_offset 7,-8
 745              	 .cfi_offset 14,-4
 746 0002 84B0     	 sub sp,sp,#16
 747              	.LCFI82:
 748              	 .cfi_def_cfa_offset 24
 749 0004 00AF     	 add r7,sp,#0
 750              	.LCFI83:
 751              	 .cfi_def_cfa_register 7
 752 0006 7860     	 str r0,[r7,#4]
 199:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 200:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 201:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle != NULL)
 753              	 .loc 4 201 0
 754 0008 7B68     	 ldr r3,[r7,#4]
 755 000a 002B     	 cmp r3,#0
 756 000c 06D0     	 beq .L25
 202:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 203:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Initialize the multiplexers required for I2C_MASTER configuration*/
 204:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->fptr_i2c_config();
 757              	 .loc 4 204 0
 758 000e 7B68     	 ldr r3,[r7,#4]
 759 0010 5B68     	 ldr r3,[r3,#4]
 760 0012 5B68     	 ldr r3,[r3,#4]
 761 0014 9847     	 blx r3
 205:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 206:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 762              	 .loc 4 206 0
 763 0016 0023     	 movs r3,#0
 764 0018 FB73     	 strb r3,[r7,#15]
 765 001a 01E0     	 b .L26
 766              	.L25:
 207:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 208:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 210:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 767              	 .loc 4 210 0
 768 001c 0123     	 movs r3,#1
 769 001e FB73     	 strb r3,[r7,#15]
 770              	.L26:
 211:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 212:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 771              	 .loc 4 212 0
 772 0020 FB7B     	 ldrb r3,[r7,#15]
 213:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 773              	 .loc 4 213 0
 774 0022 1846     	 mov r0,r3
 775 0024 1037     	 adds r7,r7,#16
 776              	.LCFI84:
 777              	 .cfi_def_cfa_offset 8
 778 0026 BD46     	 mov sp,r7
 779              	.LCFI85:
 780              	 .cfi_def_cfa_register 13
 781              	 
 782 0028 80BD     	 pop {r7,pc}
 783              	 .cfi_endproc
 784              	.LFE251:
 786 002a 00BF     	 .section .text.I2C_MASTER_GetFlagStatus,"ax",%progbits
 787              	 .align 2
 788              	 .global I2C_MASTER_GetFlagStatus
 789              	 .thumb
 790              	 .thumb_func
 792              	I2C_MASTER_GetFlagStatus:
 793              	.LFB252:
 214:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 215:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to get flag status of the requested parameter */
 216:../Dave/Generated/I2C_MASTER/i2c_master.c **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
 217:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 794              	 .loc 4 217 0
 795              	 .cfi_startproc
 796              	 
 797              	 
 798 0000 80B5     	 push {r7,lr}
 799              	.LCFI86:
 800              	 .cfi_def_cfa_offset 8
 801              	 .cfi_offset 7,-8
 802              	 .cfi_offset 14,-4
 803 0002 84B0     	 sub sp,sp,#16
 804              	.LCFI87:
 805              	 .cfi_def_cfa_offset 24
 806 0004 00AF     	 add r7,sp,#0
 807              	.LCFI88:
 808              	 .cfi_def_cfa_register 7
 809 0006 7860     	 str r0,[r7,#4]
 810 0008 3960     	 str r1,[r7]
 218:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t status;
 219:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 220:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 811              	 .loc 4 220 0
 812 000a 7B68     	 ldr r3,[r7,#4]
 813 000c 1B68     	 ldr r3,[r3]
 814 000e 1846     	 mov r0,r3
 815 0010 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 816 0014 F860     	 str r0,[r7,#12]
 221:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 222:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status & flagtype);
 817              	 .loc 4 222 0
 818 0016 FA68     	 ldr r2,[r7,#12]
 819 0018 3B68     	 ldr r3,[r7]
 820 001a 1340     	 ands r3,r3,r2
 223:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 821              	 .loc 4 223 0
 822 001c 1846     	 mov r0,r3
 823 001e 1037     	 adds r7,r7,#16
 824              	.LCFI89:
 825              	 .cfi_def_cfa_offset 8
 826 0020 BD46     	 mov sp,r7
 827              	.LCFI90:
 828              	 .cfi_def_cfa_register 13
 829              	 
 830 0022 80BD     	 pop {r7,pc}
 831              	 .cfi_endproc
 832              	.LFE252:
 834              	 .section .text.I2C_MASTER_ClearFlag,"ax",%progbits
 835              	 .align 2
 836              	 .global I2C_MASTER_ClearFlag
 837              	 .thumb
 838              	 .thumb_func
 840              	I2C_MASTER_ClearFlag:
 841              	.LFB253:
 224:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 225:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to clear flag status of the requested parameter */
 226:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
 227:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 842              	 .loc 4 227 0
 843              	 .cfi_startproc
 844              	 
 845              	 
 846 0000 80B5     	 push {r7,lr}
 847              	.LCFI91:
 848              	 .cfi_def_cfa_offset 8
 849              	 .cfi_offset 7,-8
 850              	 .cfi_offset 14,-4
 851 0002 82B0     	 sub sp,sp,#8
 852              	.LCFI92:
 853              	 .cfi_def_cfa_offset 16
 854 0004 00AF     	 add r7,sp,#0
 855              	.LCFI93:
 856              	 .cfi_def_cfa_register 7
 857 0006 7860     	 str r0,[r7,#4]
 858 0008 3960     	 str r1,[r7]
 228:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 859              	 .loc 4 228 0
 860 000a 7B68     	 ldr r3,[r7,#4]
 861 000c 1B68     	 ldr r3,[r3]
 862 000e 1846     	 mov r0,r3
 863 0010 3968     	 ldr r1,[r7]
 864 0012 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 229:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 865              	 .loc 4 229 0
 866 0016 0837     	 adds r7,r7,#8
 867              	.LCFI94:
 868              	 .cfi_def_cfa_offset 8
 869 0018 BD46     	 mov sp,r7
 870              	.LCFI95:
 871              	 .cfi_def_cfa_register 13
 872              	 
 873 001a 80BD     	 pop {r7,pc}
 874              	 .cfi_endproc
 875              	.LFE253:
 877              	 .section .text.I2C_MASTER_Transmit,"ax",%progbits
 878              	 .align 2
 879              	 .global I2C_MASTER_Transmit
 880              	 .thumb
 881              	 .thumb_func
 883              	I2C_MASTER_Transmit:
 884              	.LFB254:
 230:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 231:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to transmit the data to slave device */
 232:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 233:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         uint8_t *data, const uint32_t size, bool send_stop)
 234:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 885              	 .loc 4 234 0
 886              	 .cfi_startproc
 887              	 
 888              	 
 889 0000 80B5     	 push {r7,lr}
 890              	.LCFI96:
 891              	 .cfi_def_cfa_offset 8
 892              	 .cfi_offset 7,-8
 893              	 .cfi_offset 14,-4
 894 0002 88B0     	 sub sp,sp,#32
 895              	.LCFI97:
 896              	 .cfi_def_cfa_offset 40
 897 0004 02AF     	 add r7,sp,#8
 898              	.LCFI98:
 899              	 .cfi_def_cfa 7,32
 900 0006 F860     	 str r0,[r7,#12]
 901 0008 7A60     	 str r2,[r7,#4]
 902 000a 3B60     	 str r3,[r7]
 903 000c 0B46     	 mov r3,r1
 904 000e FB72     	 strb r3,[r7,#11]
 235:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 236:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 905              	 .loc 4 237 0
 906 0010 0223     	 movs r3,#2
 907 0012 FB75     	 strb r3,[r7,#23]
 238:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 239:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 908              	 .loc 4 239 0
 909 0014 FB68     	 ldr r3,[r7,#12]
 910 0016 5B68     	 ldr r3,[r3,#4]
 911 0018 93F82430 	 ldrb r3,[r3,#36]
 912 001c 002B     	 cmp r3,#0
 913 001e 13D0     	 beq .L32
 240:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 241:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 242:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 243:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 244:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 245:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 914              	 .loc 4 245 0
 915 0020 FB68     	 ldr r3,[r7,#12]
 916 0022 5B68     	 ldr r3,[r3,#4]
 917 0024 93F82430 	 ldrb r3,[r3,#36]
 918 0028 012B     	 cmp r3,#1
 919 002a 0DD0     	 beq .L32
 246:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 247:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 248:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 249:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 250:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 251:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 252:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 253:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 254:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 920              	 .loc 4 254 0
 921 002c FA7A     	 ldrb r2,[r7,#11]
 922 002e 3B6A     	 ldr r3,[r7,#32]
 923 0030 0093     	 str r3,[sp]
 924 0032 97F82430 	 ldrb r3,[r7,#36]
 925 0036 0193     	 str r3,[sp,#4]
 926 0038 F868     	 ldr r0,[r7,#12]
 927 003a 1146     	 mov r1,r2
 928 003c 7A68     	 ldr r2,[r7,#4]
 929 003e 3B68     	 ldr r3,[r7]
 930 0040 FFF7FEFF 	 bl I2C_MASTER_lStartTransmitPolling
 931 0044 0346     	 mov r3,r0
 932 0046 FB75     	 strb r3,[r7,#23]
 933              	.L32:
 255:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 256:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 257:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 258:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 934              	 .loc 4 258 0
 935 0048 FB7D     	 ldrb r3,[r7,#23]
 259:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 936              	 .loc 4 259 0
 937 004a 1846     	 mov r0,r3
 938 004c 1837     	 adds r7,r7,#24
 939              	.LCFI99:
 940              	 .cfi_def_cfa_offset 8
 941 004e BD46     	 mov sp,r7
 942              	.LCFI100:
 943              	 .cfi_def_cfa_register 13
 944              	 
 945 0050 80BD     	 pop {r7,pc}
 946              	 .cfi_endproc
 947              	.LFE254:
 949 0052 00BF     	 .section .text.I2C_MASTER_Receive,"ax",%progbits
 950              	 .align 2
 951              	 .global I2C_MASTER_Receive
 952              	 .thumb
 953              	 .thumb_func
 955              	I2C_MASTER_Receive:
 956              	.LFB255:
 260:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 261:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 262:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 263:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Transmit interrupt handler for the APP.
 264:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function called for different instances of the APP.
 265:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 266:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 267:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 268:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @return void
 269:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 270:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
 271:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 272:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 273:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 274:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 275:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 276:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_min = 0U;
 277:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 278:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* check if any error flag is set */
 279:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 280:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
 281:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
 282:../Dave/Generated/I2C_MASTER/i2c_master.c ****                     (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 283:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 284:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* Disable the transmit events */
 285:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 286:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 287:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 288:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ProtocolHandler(handle);
 289:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 290:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 291:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 292:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 293:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Transmit, Tx FIFO enabled
 294:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 295:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 296:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 297:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 298:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 299:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 300:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 301:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 302:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 303:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Fill the transmit FIFO */
 304:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 305:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 306:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* transmit each byte till index reaches to the last byte */
 307:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 308:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 309:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
 310:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_inde
 311:../Dave/Generated/I2C_MASTER/i2c_master.c ****             ptr_runtime->tx_data_index++;
 312:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 313:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 314:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 315:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 316:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 317:../Dave/Generated/I2C_MASTER/i2c_master.c ****         } /* end of while */
 318:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 319:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 320:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 321:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send
 322:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 323:../Dave/Generated/I2C_MASTER/i2c_master.c ****       NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 324:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 325:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*make sure data is transmitted in FIFO*/
 326:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 327:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 328:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->bus_acquired == true)
 329:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 330:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 331:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 332:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 333:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of  if(handle->config->txFIFO_size > 0) */
 334:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 335:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Direction = transmit and Tx FIFO disabled
 336:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 337:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 338:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 339:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* transmit each byte till the last byte */
 340:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 341:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 342:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 343:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 344:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 345:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 346:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 347:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
 348:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
 349:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 350:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 351:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 352:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 353:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 354:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if(ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT) */
 355:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 356:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 357:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 358:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Receive, Tx, Rx FIFO enabled.
 359:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
 360:../Dave/Generated/I2C_MASTER/i2c_master.c ****   If Rx FIFO is not enabled, default size of 2 is considered.
 361:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 362:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 363:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 364:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if ((handle->config->rxFIFO_size > 0))
 365:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 366:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_
 367:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size
 368:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 369:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 370:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 371:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
 372:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = 2U;
 373:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 374:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 375:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 376:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 377:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* fill the FIFO */
 378:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 379:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 380:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 381:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 382:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* check for last byte and send_nack is set to true */
 383:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 384:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 385:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 386:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 387:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 388:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 389:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 390:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 391:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 392:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 393:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*if index reaches fifo size - break*/
 394:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if ((ptr_runtime->tx_data_index) >= fifo_min)
 395:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 396:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 397:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 398:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 399:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 400:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 401:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 402:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 403:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 404:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if(handle->config->txFIFO_size > 0) */
 405:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 406:../Dave/Generated/I2C_MASTER/i2c_master.c ****    Direction = Receive, Tx FIFO disabled
 407:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 408:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 409:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 410:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* check for last byte and send_nack is set to true */
 411:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 412:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 413:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 414:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 415:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 416:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 417:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 418:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 419:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 420:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 421:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 422:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 423:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If last byte, then disable ACK event
 424:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 425:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 426:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
 427:../Dave/Generated/I2C_MASTER/i2c_master.c ****        I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 428:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
 429:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 430:../Dave/Generated/I2C_MASTER/i2c_master.c ****  } /* end of else */
 431:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 432:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 433:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to callback routine */
 434:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
 435:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 436:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 437:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 438:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 439:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 440:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 441:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 442:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
 443:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 444:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
 445:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 446:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 447:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 448:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 449:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 450:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*All data is transmitted*/
 451:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
 452:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 453:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->tx_cbhandler != NULL)
 454:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 455:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of transmission' callback function*/
 456:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->tx_cbhandler();
 457:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 458:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 459:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 460:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 461:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 462:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief This function registers the receive request by configuring the I2C_MASTER
 463:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * receive FIFO/Standard buffer (depending on the user configuration). The data
 464:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is received asynchronously. When the requested number of data bytes are received,
 465:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * optionally, the user configured callback function will be executed. If a callback
 466:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * function is not configured on the APP UI, the user has to poll for the status of
 467:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * rx_busy variable of the APP handle structure.
 468:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 469:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Note: In FIFO mode, FIFO trigger limit should be adjusted manually to
 470:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * read required amount of data from FIFO buffer.
 471:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 472:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 473:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
 474:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_start
 475:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  slave address
 476:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint8_t*  Pointer to data array
 477:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  Total no of bytes to be read.
 478:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_stop
 479:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_nack
 480:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 481:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return  I2C_MASTER_STATUS_t I2C_MASTER_STATUS_SUCCESS if the request is accepted.
 482:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *                              I2C_MASTER_STATUS_BUSY if a reception is in progress.
 483:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 484:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 485:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * request is registered.
 486:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 487:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 488:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 489:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 490:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                    const uint32_t count, bool send_stop, bool send_nack)
 491:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 957              	 .loc 4 491 0
 958              	 .cfi_startproc
 959              	 
 960              	 
 961 0000 80B5     	 push {r7,lr}
 962              	.LCFI101:
 963              	 .cfi_def_cfa_offset 8
 964              	 .cfi_offset 7,-8
 965              	 .cfi_offset 14,-4
 966 0002 8AB0     	 sub sp,sp,#40
 967              	.LCFI102:
 968              	 .cfi_def_cfa_offset 48
 969 0004 04AF     	 add r7,sp,#16
 970              	.LCFI103:
 971              	 .cfi_def_cfa 7,32
 972 0006 F860     	 str r0,[r7,#12]
 973 0008 7A60     	 str r2,[r7,#4]
 974 000a 3B60     	 str r3,[r7]
 975 000c 0B46     	 mov r3,r1
 976 000e FB72     	 strb r3,[r7,#11]
 492:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 493:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 494:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 977              	 .loc 4 494 0
 978 0010 0223     	 movs r3,#2
 979 0012 FB75     	 strb r3,[r7,#23]
 495:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 496:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 980              	 .loc 4 496 0
 981 0014 FB68     	 ldr r3,[r7,#12]
 982 0016 5B68     	 ldr r3,[r3,#4]
 983 0018 93F82530 	 ldrb r3,[r3,#37]
 984 001c 002B     	 cmp r3,#0
 985 001e 16D0     	 beq .L35
 497:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 498:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 499:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nac
 500:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 501:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 502:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 986              	 .loc 4 502 0
 987 0020 FB68     	 ldr r3,[r7,#12]
 988 0022 5B68     	 ldr r3,[r3,#4]
 989 0024 93F82530 	 ldrb r3,[r3,#37]
 990 0028 012B     	 cmp r3,#1
 991 002a 10D0     	 beq .L35
 503:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 504:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 505:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 506:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 507:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 508:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 509:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 510:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
 511:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, s
 992              	 .loc 4 511 0
 993 002c FA7A     	 ldrb r2,[r7,#11]
 994 002e 3B6A     	 ldr r3,[r7,#32]
 995 0030 0093     	 str r3,[sp]
 996 0032 97F82430 	 ldrb r3,[r7,#36]
 997 0036 0193     	 str r3,[sp,#4]
 998 0038 97F82830 	 ldrb r3,[r7,#40]
 999 003c 0293     	 str r3,[sp,#8]
 1000 003e F868     	 ldr r0,[r7,#12]
 1001 0040 1146     	 mov r1,r2
 1002 0042 7A68     	 ldr r2,[r7,#4]
 1003 0044 3B68     	 ldr r3,[r7]
 1004 0046 FFF7FEFF 	 bl I2C_MASTER_lStartReceivePolling
 1005 004a 0346     	 mov r3,r0
 1006 004c FB75     	 strb r3,[r7,#23]
 1007              	.L35:
 512:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 513:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 514:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 515:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1008              	 .loc 4 515 0
 1009 004e FB7D     	 ldrb r3,[r7,#23]
 516:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1010              	 .loc 4 516 0
 1011 0050 1846     	 mov r0,r3
 1012 0052 1837     	 adds r7,r7,#24
 1013              	.LCFI104:
 1014              	 .cfi_def_cfa_offset 8
 1015 0054 BD46     	 mov sp,r7
 1016              	.LCFI105:
 1017              	 .cfi_def_cfa_register 13
 1018              	 
 1019 0056 80BD     	 pop {r7,pc}
 1020              	 .cfi_endproc
 1021              	.LFE255:
 1023              	 .section .text.I2C_MASTER_lSendStart_Or_RepeatedStart,"ax",%progbits
 1024              	 .align 2
 1025              	 .thumb
 1026              	 .thumb_func
 1028              	I2C_MASTER_lSendStart_Or_RepeatedStart:
 1029              	.LFB256:
 517:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 518:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 519:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 520:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO data
 521:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 522:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 523:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      const uint32_t count)
 524:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 525:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 526:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 527:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 528:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 529:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Clear the receive FIFO, configure the trigger lime
 530:../Dave/Generated/I2C_MASTER/i2c_master.c ****    * and enable the receive events*/
 531:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 532:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 533:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Configure the FIFO trigger limit based on the required data size*/
 534:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_lReconfigureRxFIFO(handle, count);
 535:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 536:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 537:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                 (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 538:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 539:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 540:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 541:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 542:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 543:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 544:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 545:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 546:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 547:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 548:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 549:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED)
 550:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 551:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 552:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nac
 553:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 554:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveNACK(handle);
 555:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 556:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 557:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 558:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveACK(handle);
 559:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 560:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 561:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 562:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 563:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 564:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 565:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 566:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 567:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Fill the transmit FIFO */
 568:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 569:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 570:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 571:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 572:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send
 573:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 574:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 575:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 576:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 577:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 578:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 579:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 580:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 581:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 582:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 583:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 584:../Dave/Generated/I2C_MASTER/i2c_master.c ****         break;
 585:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 586:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of while */
 587:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 588:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 589:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 590:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if it is last byte and send_nack true */
 591:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 592:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 593:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveNACK(handle);
 594:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 595:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 596:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 597:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveACK(handle);
 598:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 599:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 600:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 601:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
 602:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if (send_start == true) */
 603:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 604:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 605:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* if Tx FIFO enabled */
 606:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 607:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 608:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 609:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 610:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 611:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 612:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 613:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 614:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 615:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 616:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (ptr_runtime->send_nack == true))
 617:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 618:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 619:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 620:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 621:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 622:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 623:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 624:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 625:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 626:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 627:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 628:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 629:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 630:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 631:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 632:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else  /* Tx FIFO disabled and Rx FIFO enabled */
 633:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 634:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 635:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 636:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 637:../Dave/Generated/I2C_MASTER/i2c_master.c ****              (ptr_runtime->send_nack == true))
 638:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 639:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 640:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 641:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 642:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 643:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVE
 644:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDI
 645:../Dave/Generated/I2C_MASTER/i2c_master.c ****                           (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
 646:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 647:../Dave/Generated/I2C_MASTER/i2c_master.c ****                           (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
 648:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 649:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 650:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 651:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 652:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 653:../Dave/Generated/I2C_MASTER/i2c_master.c ****    } /* end of  if(send_start == false) */
 654:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 655:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 656:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Standard receive mode
 657:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 658:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 659:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 660:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 661:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 662:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 663:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 664:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE 
 665:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                       (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEI
 666:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 667:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 668:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 669:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 670:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 671:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 672:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 673:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 674:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 675:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 676:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 677:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 678:../Dave/Generated/I2C_MASTER/i2c_master.c ****         (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 679:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 680:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nac
 681:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 682:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 683:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 684:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 685:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 686:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveACK(handle);
 687:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 688:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 689:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 690:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 691:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 692:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 693:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 694:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is disabled
 695:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 696:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size == 0)
 697:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 698:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 699:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 700:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 701:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 702:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 703:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 704:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 705:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 706:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 707:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 708:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 709:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 710:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is enabled
 711:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 712:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 713:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 714:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 715:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 716:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 717:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 718:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 719:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 720:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 721:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 722:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 723:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 724:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 725:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 726:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 727:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 728:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 729:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 730:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 731:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 732:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 733:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 734:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 735:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 736:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 737:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 738:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 739:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 740:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 741:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 742:../Dave/Generated/I2C_MASTER/i2c_master.c ****     (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 743:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Start/Repeated Start command */
 744:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
 745:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                const XMC_I2C_CH_CMD_t cmd)
 746:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1030              	 .loc 4 746 0
 1031              	 .cfi_startproc
 1032              	 
 1033              	 
 1034 0000 80B5     	 push {r7,lr}
 1035              	.LCFI106:
 1036              	 .cfi_def_cfa_offset 8
 1037              	 .cfi_offset 7,-8
 1038              	 .cfi_offset 14,-4
 1039 0002 84B0     	 sub sp,sp,#16
 1040              	.LCFI107:
 1041              	 .cfi_def_cfa_offset 24
 1042 0004 00AF     	 add r7,sp,#0
 1043              	.LCFI108:
 1044              	 .cfi_def_cfa_register 7
 1045 0006 F860     	 str r0,[r7,#12]
 1046 0008 B960     	 str r1,[r7,#8]
 1047 000a 1346     	 mov r3,r2
 1048 000c FB71     	 strb r3,[r7,#7]
 747:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC
 1049              	 .loc 4 747 0
 1050 000e FB68     	 ldr r3,[r7,#12]
 1051 0010 1B68     	 ldr r3,[r3]
 1052 0012 1846     	 mov r0,r3
 1053 0014 0C21     	 movs r1,#12
 1054 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 748:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 749:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->runtime->bus_acquired == true)
 1055              	 .loc 4 749 0
 1056 001a FB68     	 ldr r3,[r7,#12]
 1057 001c 9B68     	 ldr r3,[r3,#8]
 1058 001e 93F82830 	 ldrb r3,[r3,#40]
 1059 0022 DBB2     	 uxtb r3,r3
 1060 0024 002B     	 cmp r3,#0
 1061 0026 09D0     	 beq .L38
 750:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 751:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 1062              	 .loc 4 751 0
 1063 0028 BB68     	 ldr r3,[r7,#8]
 1064 002a 9BB2     	 uxth r3,r3
 1065 002c 1A46     	 mov r2,r3
 1066 002e FB79     	 ldrb r3,[r7,#7]
 1067 0030 F868     	 ldr r0,[r7,#12]
 1068 0032 1146     	 mov r1,r2
 1069 0034 1A46     	 mov r2,r3
 1070 0036 FFF7FEFF 	 bl I2C_MASTER_SendRepeatedStart
 1071 003a 0DE0     	 b .L37
 1072              	.L38:
 752:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 753:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 754:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 755:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->bus_acquired = true;
 1073              	 .loc 4 755 0
 1074 003c FB68     	 ldr r3,[r7,#12]
 1075 003e 9B68     	 ldr r3,[r3,#8]
 1076 0040 0122     	 movs r2,#1
 1077 0042 83F82820 	 strb r2,[r3,#40]
 756:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 1078              	 .loc 4 756 0
 1079 0046 BB68     	 ldr r3,[r7,#8]
 1080 0048 9BB2     	 uxth r3,r3
 1081 004a 1A46     	 mov r2,r3
 1082 004c FB79     	 ldrb r3,[r7,#7]
 1083 004e F868     	 ldr r0,[r7,#12]
 1084 0050 1146     	 mov r1,r2
 1085 0052 1A46     	 mov r2,r3
 1086 0054 FFF7FEFF 	 bl I2C_MASTER_SendStart
 1087              	.L37:
 757:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 758:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1088              	 .loc 4 758 0
 1089 0058 1037     	 adds r7,r7,#16
 1090              	.LCFI109:
 1091              	 .cfi_def_cfa_offset 8
 1092 005a BD46     	 mov sp,r7
 1093              	.LCFI110:
 1094              	 .cfi_def_cfa_register 13
 1095              	 
 1096 005c 80BD     	 pop {r7,pc}
 1097              	 .cfi_endproc
 1098              	.LFE256:
 1100 005e 00BF     	 .section .text.I2C_MASTER_ProtocolHandler,"ax",%progbits
 1101              	 .align 2
 1102              	 .global I2C_MASTER_ProtocolHandler
 1103              	 .thumb
 1104              	 .thumb_func
 1106              	I2C_MASTER_ProtocolHandler:
 1107              	.LFB257:
 759:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 760:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 761:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 762:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 763:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 764:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 765:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 766:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 767:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 768:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 769:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 770:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 771:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
 772:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
 773:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (siz
 774:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 775:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 776:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 777:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 778:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 779:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 780:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 781:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->tx_busy == false)
 782:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 783:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*If there is no transmission in progress, obtain the address of data, size of data*/
 784:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data = data;
 785:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_count = size;
 786:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 787:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Initialize to first index and set the busy flag*/
 788:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index = 0U;
 789:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_busy = true;
 790:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->send_stop = send_stop;
 791:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 792:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* Enable ACK event */
 793:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 794:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 795:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 796:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (send_start == true)
 797:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 798:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WR
 799:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 800:../Dave/Generated/I2C_MASTER/i2c_master.c ****         // Detect problems in multi master environments
 801:../Dave/Generated/I2C_MASTER/i2c_master.c ****         uint32_t retries = I2C_MASTER_START_TRANSMIT_RETRIES;
 802:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (((XMC_I2C_CH_GetStatusFlag(handle->channel) & (XMC_I2C_CH_STATUS_FLAG_START_CONDITIO
 803:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (retries == 0)
 804:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 805:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	  status = I2C_MASTER_STATUS_BUS_ERROR;
 806:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 807:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 808:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 809:../Dave/Generated/I2C_MASTER/i2c_master.c ****           status = I2C_MASTER_STATUS_SUCCESS;
 810:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 811:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 812:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 813:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 814:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Trigger the Ack interrupt*/
 815:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 816:../Dave/Generated/I2C_MASTER/i2c_master.c ****         status = I2C_MASTER_STATUS_SUCCESS;
 817:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 818:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 819:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 820:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 821:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 822:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 823:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
 824:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 825:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
 826:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_data = NULL;
 827:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
 828:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 829:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Disable the transmit interrupts*/
 830:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 831:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 832:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Disable the transmit FIFO event*/
 833:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 834:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 835:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 836:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 837:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 838:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 839:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 840:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 841:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_
 842:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                uint8_t * data, const uint32_t count, bool send_stop
 843:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 844:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 845:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 846:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 847:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 848:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 849:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 850:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (
 851:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (count == 0U)))
 852:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 853:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 854:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 855:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 856:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 857:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->rx_busy == false)
 858:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 859:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 860:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 861:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* If no active reception in progress, obtain the address of data buffer and number of data b
 862:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data = data;
 863:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data_count = count;
 864:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data = data;
 865:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_count = count;
 866:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_busy = true;
 867:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_busy = true;
 868:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_stop = send_stop;
 869:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_nack = send_nack;
 870:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data_index = 0U;
 871:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index = 0U;
 872:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 873:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 874:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 875:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 876:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 877:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 878:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 879:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lReceive_StdData(handle, send_start, address);
 880:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 881:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 882:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 883:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 884:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 885:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 886:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 887:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 888:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Receive interrupt handler for the APP.
 889:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function for different instances of the I2C_MASTER APP.
 890:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 891:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 892:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 893:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
 894:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 895:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
 896:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 897:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 898:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_lindex;
 899:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 900:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 901:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 902:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_lindex = 0U;
 903:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 904:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->rx_busy == true)
 905:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 906:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 907:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 908:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /********************************************************************************************
 909:../Dave/Generated/I2C_MASTER/i2c_master.c ****        Rx FIFO enabled
 910:../Dave/Generated/I2C_MASTER/i2c_master.c ****       *********************************************************************************************
 911:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 912:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 913:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Read all the content of Receive FIFO */
 914:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(hand
 915:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data_index++;
 916:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 917:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 918:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 919:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Reception complete*/
 920:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->rx_busy = false;
 921:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 922:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /*Disable both standard receive and alternative receive FIFO events*/
 923:../Dave/Generated/I2C_MASTER/i2c_master.c ****             XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 924:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                           (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDA
 925:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                      (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERN
 926:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 927:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 928:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 929:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/
 930:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 931:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Set the trigger limit if data still to be received*/
 932:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 933:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 934:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->r
 935:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 936:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if ((handle->config->txFIFO_size > 0))
 937:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 938:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIF
 939:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     ((uint32_t)1 << (uint32_t)handle->config->rxFIF
 940:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 941:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 942:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 943:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = 2U;
 944:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 945:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 946:../Dave/Generated/I2C_MASTER/i2c_master.c ****          Rx and Tx FIFO enabled
 947:../Dave/Generated/I2C_MASTER/i2c_master.c ****         *******************************************************************************************
 948:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (handle->config->txFIFO_size > 0)
 949:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 950:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Fill the transmit FIFO */
 951:../Dave/Generated/I2C_MASTER/i2c_master.c ****           while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 952:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 953:../Dave/Generated/I2C_MASTER/i2c_master.c ****             if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 954:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 955:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime
 956:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 957:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveNACK(handle);
 958:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 959:../Dave/Generated/I2C_MASTER/i2c_master.c ****               else
 960:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 961:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveACK(handle);
 962:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 963:../Dave/Generated/I2C_MASTER/i2c_master.c ****               ptr_runtime->tx_data_index++;
 964:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 965:../Dave/Generated/I2C_MASTER/i2c_master.c ****               /* if fifo size- break */
 966:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if ((++fifo_lindex) >= fifo_min)
 967:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 968:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 fifo_lindex = 0U;
 969:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 break;
 970:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 971:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
 972:../Dave/Generated/I2C_MASTER/i2c_master.c ****             else
 973:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 974:../Dave/Generated/I2C_MASTER/i2c_master.c ****               break;
 975:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }
 976:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 977:../Dave/Generated/I2C_MASTER/i2c_master.c ****        } /* end of  if((handle->config->txFIFO_size > 0)) */
 978:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 979:../Dave/Generated/I2C_MASTER/i2c_master.c ****           Rx FIFO is enabled, Tx FIFO disabled
 980:../Dave/Generated/I2C_MASTER/i2c_master.c ****        ********************************************************************************************
 981:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 982:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 983:../Dave/Generated/I2C_MASTER/i2c_master.c ****          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->sen
 984:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 985:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveNACK(handle);
 986:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 987:../Dave/Generated/I2C_MASTER/i2c_master.c ****          else
 988:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 989:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveACK(handle);
 990:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 991:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 992:../Dave/Generated/I2C_MASTER/i2c_master.c ****          ptr_runtime->tx_data_index++;
 993:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 994:../Dave/Generated/I2C_MASTER/i2c_master.c ****      } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
 995:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 996:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if last byte to receive then disable receive events and jump to callback routine
 997:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 998:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 999:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
1000:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Clear both standard receive and alternative receive FIFO events*/
1001:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVE
1002:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVE
1003:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1004:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Disable both standard receive and alternative receive events*/
1005:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE
1006:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RE
1007:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1008:../Dave/Generated/I2C_MASTER/i2c_master.c ****        if (ptr_runtime->bus_acquired == true)
1009:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
1010:../Dave/Generated/I2C_MASTER/i2c_master.c ****          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1011:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
1012:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
1013:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /*  end of if(handle->config->rxFIFO_size > 0) */
1014:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1015:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO disabled
1016:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
1017:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
1018:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1019:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle
1020:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data_index++;
1021:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1022:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1023:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1024:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1025:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1026:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise A
1027:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->
1028:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1029:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
1030:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1031:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
1032:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1033:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
1034:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1035:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
1036:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1037:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1038:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1039:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1040:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Disable both standard receive and alternative receive events*/
1041:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIV
1042:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                              (uint32_t)XMC_USIC_CH_EVENT_STANDARD_R
1043:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
1044:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1045:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1046:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1047:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1048:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1049:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of  if(ptr_runtime->rx_busy == true)*/
1050:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1051:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1052:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to receive callback routine */
1053:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
1054:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1055:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
1056:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1057:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
1058:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1059:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
1060:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1061:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1062:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1063:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
1064:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1065:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
1066:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1067:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1068:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1069:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1070:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reception complete */
1071:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->rx_busy = false;
1072:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
1073:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1074:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rx_cbhandler != NULL)
1075:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1076:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of reception' callback function*/
1077:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->rx_cbhandler();
1078:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1079:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1080:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1081:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1082:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
1083:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1084:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reset the user buffer pointer to null */
1085:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_busy = false;
1086:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
1087:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_data = NULL;
1088:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1089:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
1090:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1091:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Disable the receive interrupts */
1092:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1093:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1094:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_
1095:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNA
1096:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1097:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1098:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1099:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEI
1100:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                  (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1101:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1102:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
1103:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1104:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1105:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1106:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1107:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Protocol interrupt handling function.
1108:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * The function is common for different instances of the I2C_MASTER APP.
1109:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1110:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
1111:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1112:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
1113:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1114:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
1115:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1108              	 .loc 4 1115 0
 1109              	 .cfi_startproc
 1110              	 
 1111              	 
 1112 0000 80B5     	 push {r7,lr}
 1113              	.LCFI111:
 1114              	 .cfi_def_cfa_offset 8
 1115              	 .cfi_offset 7,-8
 1116              	 .cfi_offset 14,-4
 1117 0002 84B0     	 sub sp,sp,#16
 1118              	.LCFI112:
 1119              	 .cfi_def_cfa_offset 24
 1120 0004 00AF     	 add r7,sp,#0
 1121              	.LCFI113:
 1122              	 .cfi_def_cfa_register 7
 1123 0006 7860     	 str r0,[r7,#4]
1116:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t psr_status;
1117:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1118:../Dave/Generated/I2C_MASTER/i2c_master.c ****   psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 1124              	 .loc 4 1118 0
 1125 0008 7B68     	 ldr r3,[r7,#4]
 1126 000a 1B68     	 ldr r3,[r3]
 1127 000c 1846     	 mov r0,r3
 1128 000e FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 1129 0012 F860     	 str r0,[r7,#12]
1119:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1120:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for nack event */
1121:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NA
 1130              	 .loc 4 1121 0
 1131 0014 7B68     	 ldr r3,[r7,#4]
 1132 0016 5B68     	 ldr r3,[r3,#4]
 1133 0018 9B69     	 ldr r3,[r3,#24]
 1134 001a 002B     	 cmp r3,#0
 1135 001c 0CD0     	 beq .L41
 1136              	 .loc 4 1121 0 is_stmt 0 discriminator 1
 1137 001e FB68     	 ldr r3,[r7,#12]
 1138 0020 03F02003 	 and r3,r3,#32
 1139 0024 002B     	 cmp r3,#0
 1140 0026 07D0     	 beq .L41
1122:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1123:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 1141              	 .loc 4 1123 0 is_stmt 1
 1142 0028 7868     	 ldr r0,[r7,#4]
 1143 002a 2021     	 movs r1,#32
 1144 002c FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1124:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->nack_cbhandler();
 1145              	 .loc 4 1124 0
 1146 0030 7B68     	 ldr r3,[r7,#4]
 1147 0032 5B68     	 ldr r3,[r3,#4]
 1148 0034 9B69     	 ldr r3,[r3,#24]
 1149 0036 9847     	 blx r3
 1150              	.L41:
1125:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1126:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1127:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for arbitration lost */
1128:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_
 1151              	 .loc 4 1128 0
 1152 0038 7B68     	 ldr r3,[r7,#4]
 1153 003a 5B68     	 ldr r3,[r3,#4]
 1154 003c DB69     	 ldr r3,[r3,#28]
 1155 003e 002B     	 cmp r3,#0
 1156 0040 0CD0     	 beq .L42
 1157              	 .loc 4 1128 0 is_stmt 0 discriminator 1
 1158 0042 FB68     	 ldr r3,[r7,#12]
 1159 0044 03F04003 	 and r3,r3,#64
 1160 0048 002B     	 cmp r3,#0
 1161 004a 07D0     	 beq .L42
1129:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1130:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 1162              	 .loc 4 1130 0 is_stmt 1
 1163 004c 7868     	 ldr r0,[r7,#4]
 1164 004e 4021     	 movs r1,#64
 1165 0050 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1131:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->arbitration_cbhandler();
 1166              	 .loc 4 1131 0
 1167 0054 7B68     	 ldr r3,[r7,#4]
 1168 0056 5B68     	 ldr r3,[r3,#4]
 1169 0058 DB69     	 ldr r3,[r3,#28]
 1170 005a 9847     	 blx r3
 1171              	.L42:
1132:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1133:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1134:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for error detected */
1135:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_
 1172              	 .loc 4 1135 0
 1173 005c 7B68     	 ldr r3,[r7,#4]
 1174 005e 5B68     	 ldr r3,[r3,#4]
 1175 0060 1B6A     	 ldr r3,[r3,#32]
 1176 0062 002B     	 cmp r3,#0
 1177 0064 0DD0     	 beq .L40
 1178              	 .loc 4 1135 0 is_stmt 0 discriminator 1
 1179 0066 FB68     	 ldr r3,[r7,#12]
 1180 0068 03F48173 	 and r3,r3,#258
 1181 006c 002B     	 cmp r3,#0
 1182 006e 08D0     	 beq .L40
1136:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1137:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 1183              	 .loc 4 1137 0 is_stmt 1
 1184 0070 7868     	 ldr r0,[r7,#4]
 1185 0072 4FF48071 	 mov r1,#256
 1186 0076 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1138:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->error_cbhandler();
 1187              	 .loc 4 1138 0
 1188 007a 7B68     	 ldr r3,[r7,#4]
 1189 007c 5B68     	 ldr r3,[r3,#4]
 1190 007e 1B6A     	 ldr r3,[r3,#32]
 1191 0080 9847     	 blx r3
 1192              	.L40:
1139:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1140:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1193              	 .loc 4 1140 0
 1194 0082 1037     	 adds r7,r7,#16
 1195              	.LCFI114:
 1196              	 .cfi_def_cfa_offset 8
 1197 0084 BD46     	 mov sp,r7
 1198              	.LCFI115:
 1199              	 .cfi_def_cfa_register 13
 1200              	 
 1201 0086 80BD     	 pop {r7,pc}
 1202              	 .cfi_endproc
 1203              	.LFE257:
 1205              	 .section .text.I2C_MASTER_AbortTransmit,"ax",%progbits
 1206              	 .align 2
 1207              	 .global I2C_MASTER_AbortTransmit
 1208              	 .thumb
 1209              	 .thumb_func
 1211              	I2C_MASTER_AbortTransmit:
 1212              	.LFB258:
1141:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1142:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1143:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1144:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief A local function to reconfigure Receive FIFO with the given size and trigger limit.
1145:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Size is needed because the FIFO should be disabled before changing the trigger limit by
1146:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * clearing the FIFO size.
1147:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1148:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t * pointer to the I2C_MASTER APP handle
1149:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param uint32_t  number of bytes to be received.
1150:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1151:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void.
1152:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1153:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1154:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
1155:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1156:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t minfifo_value;
1157:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_fifo_size;
1158:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t rx_fifo_size;
1159:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_limit;
1160:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1161:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1162:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1163:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->txFIFO_size > 0))
1164:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1165:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
1166:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1167:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1168:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1169:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = 1U;
1170:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1171:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1172:../Dave/Generated/I2C_MASTER/i2c_master.c ****   minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size))
1173:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1174:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
1175:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1176:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Set the limit value */
1177:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)
1178:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1179:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1180:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1181:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1182:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data transmission.
1183:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t*  I2C_MASTER APP handle pointer of type I2C_MASTER_t
1184:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1185:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1186:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1187:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
1188:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * the existing data will be flushed. After the transmission is stopped, user can start
1189:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new transmission without delay.
1190:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1191:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
1192:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1213              	 .loc 4 1192 0
 1214              	 .cfi_startproc
 1215              	 
 1216              	 
 1217              	 
 1218 0000 80B4     	 push {r7}
 1219              	.LCFI116:
 1220              	 .cfi_def_cfa_offset 4
 1221              	 .cfi_offset 7,-4
 1222 0002 85B0     	 sub sp,sp,#20
 1223              	.LCFI117:
 1224              	 .cfi_def_cfa_offset 24
 1225 0004 00AF     	 add r7,sp,#0
 1226              	.LCFI118:
 1227              	 .cfi_def_cfa_register 7
 1228 0006 7860     	 str r0,[r7,#4]
1193:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1194:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1195:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 1229              	 .loc 4 1195 0
 1230 0008 0023     	 movs r3,#0
 1231 000a FB73     	 strb r3,[r7,#15]
1196:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1197:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1232              	 .loc 4 1197 0
 1233 000c 7B68     	 ldr r3,[r7,#4]
 1234 000e 5B68     	 ldr r3,[r3,#4]
 1235 0010 93F82430 	 ldrb r3,[r3,#36]
 1236 0014 002B     	 cmp r3,#0
 1237 0016 07D0     	 beq .L45
1198:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1199:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
1200:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_AbortTransmitIRQ(handle);
1201:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1202:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1203:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 1238              	 .loc 4 1203 0
 1239 0018 7B68     	 ldr r3,[r7,#4]
 1240 001a 5B68     	 ldr r3,[r3,#4]
 1241 001c 93F82430 	 ldrb r3,[r3,#36]
 1242 0020 012B     	 cmp r3,#1
 1243 0022 01D0     	 beq .L45
1204:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1205:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1206:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortTransmitDMA(handle);
1207:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1208:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1210:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1211:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1244              	 .loc 4 1211 0
 1245 0024 0123     	 movs r3,#1
 1246 0026 FB73     	 strb r3,[r7,#15]
 1247              	.L45:
1212:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1213:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 1248              	 .loc 4 1213 0
 1249 0028 7B68     	 ldr r3,[r7,#4]
 1250 002a 1B68     	 ldr r3,[r3]
 1251 002c 7A68     	 ldr r2,[r7,#4]
 1252 002e 1268     	 ldr r2,[r2]
 1253 0030 D26C     	 ldr r2,[r2,#76]
 1254 0032 42F00202 	 orr r2,r2,#2
 1255 0036 DA64     	 str r2,[r3,#76]
1214:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->FMR = 0x00000002U;/*clear TDV*/
 1256              	 .loc 4 1214 0
 1257 0038 7B68     	 ldr r3,[r7,#4]
 1258 003a 1B68     	 ldr r3,[r3]
 1259 003c 0222     	 movs r2,#2
 1260 003e 9A66     	 str r2,[r3,#104]
1215:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1216:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1261              	 .loc 4 1216 0
 1262 0040 FB7B     	 ldrb r3,[r7,#15]
1217:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1263              	 .loc 4 1217 0
 1264 0042 1846     	 mov r0,r3
 1265 0044 1437     	 adds r7,r7,#20
 1266              	.LCFI119:
 1267              	 .cfi_def_cfa_offset 4
 1268 0046 BD46     	 mov sp,r7
 1269              	.LCFI120:
 1270              	 .cfi_def_cfa_register 13
 1271              	 
 1272 0048 5DF8047B 	 ldr r7,[sp],#4
 1273              	.LCFI121:
 1274              	 .cfi_restore 7
 1275              	 .cfi_def_cfa_offset 0
 1276 004c 7047     	 bx lr
 1277              	 .cfi_endproc
 1278              	.LFE258:
 1280 004e 00BF     	 .section .text.I2C_MASTER_AbortReceive,"ax",%progbits
 1281              	 .align 2
 1282              	 .global I2C_MASTER_AbortReceive
 1283              	 .thumb
 1284              	 .thumb_func
 1286              	I2C_MASTER_AbortReceive:
 1287              	.LFB259:
1218:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1219:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1220:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data reception.
1221:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
1222:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1223:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1224:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1225:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If a reception is in progress, it will be stopped. When a reception request
1226:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is active, user will not be able to place a new receive request till the active
1227:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * reception is complete. This API can stop the progressing reception to make
1228:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new receive request.
1229:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1230:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
1231:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1288              	 .loc 4 1231 0
 1289              	 .cfi_startproc
 1290              	 
 1291              	 
 1292              	 
 1293 0000 80B4     	 push {r7}
 1294              	.LCFI122:
 1295              	 .cfi_def_cfa_offset 4
 1296              	 .cfi_offset 7,-4
 1297 0002 85B0     	 sub sp,sp,#20
 1298              	.LCFI123:
 1299              	 .cfi_def_cfa_offset 24
 1300 0004 00AF     	 add r7,sp,#0
 1301              	.LCFI124:
 1302              	 .cfi_def_cfa_register 7
 1303 0006 7860     	 str r0,[r7,#4]
1232:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1233:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1234:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 1304              	 .loc 4 1234 0
 1305 0008 0023     	 movs r3,#0
 1306 000a FB73     	 strb r3,[r7,#15]
1235:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1236:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1307              	 .loc 4 1236 0
 1308 000c 7B68     	 ldr r3,[r7,#4]
 1309 000e 5B68     	 ldr r3,[r3,#4]
 1310 0010 93F82530 	 ldrb r3,[r3,#37]
 1311 0014 002B     	 cmp r3,#0
 1312 0016 07D0     	 beq .L48
1237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1238:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1239:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveIRQ(handle);
1240:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1241:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1242:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 1313              	 .loc 4 1242 0
 1314 0018 7B68     	 ldr r3,[r7,#4]
 1315 001a 5B68     	 ldr r3,[r3,#4]
 1316 001c 93F82530 	 ldrb r3,[r3,#37]
 1317 0020 012B     	 cmp r3,#1
 1318 0022 01D0     	 beq .L48
1243:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1244:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
1245:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveDMA(handle);
1246:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1247:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1248:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1249:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1250:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1319              	 .loc 4 1250 0
 1320 0024 0123     	 movs r3,#1
 1321 0026 FB73     	 strb r3,[r7,#15]
 1322              	.L48:
1251:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1252:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1253:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1323              	 .loc 4 1253 0
 1324 0028 FB7B     	 ldrb r3,[r7,#15]
1254:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1325              	 .loc 4 1254 0
 1326 002a 1846     	 mov r0,r3
 1327 002c 1437     	 adds r7,r7,#20
 1328              	.LCFI125:
 1329              	 .cfi_def_cfa_offset 4
 1330 002e BD46     	 mov sp,r7
 1331              	.LCFI126:
 1332              	 .cfi_def_cfa_register 13
 1333              	 
 1334 0030 5DF8047B 	 ldr r7,[sp],#4
 1335              	.LCFI127:
 1336              	 .cfi_restore 7
 1337              	 .cfi_def_cfa_offset 0
 1338 0034 7047     	 bx lr
 1339              	 .cfi_endproc
 1340              	.LFE259:
 1342 0036 00BF     	 .section .text.I2C_MASTER_lStartTransmitPolling,"ax",%progbits
 1343              	 .align 2
 1344              	 .thumb
 1345              	 .thumb_func
 1347              	I2C_MASTER_lStartTransmitPolling:
 1348              	.LFB260:
1255:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1256:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
1257:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t data_coun
1258:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1259:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1260:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *rx_dma_config;
1261:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *rx_dma_config_global;
1262:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1263:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1264:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1265:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1266:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_ch_num;
1267:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_ch_num = 0U;
1268:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1269:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1270:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1271:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1272:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
1273:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config = handle->config->receive_dma_config;
1274:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config_global = handle->config->receive_dma_config->global_dma;
1275:../Dave/Generated/I2C_MASTER/i2c_master.c ****   
1276:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((addr == NULL) || (data_count > I2C_DMA_MAX_BLOCK_SIZE) || (data_count == 0U))
1277:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1278:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
1279:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1280:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1281:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1282:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->runtime->rx_busy == false)
1283:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1284:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->rx_busy = true;
1285:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
1286:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->rx_dma_data_count = data_count;
1287:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1288:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_EnableEvent(handle->channel, ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
1289:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1290:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1291:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetBlockSize(rx_dma_config_global->dma, rx_dma_config->dma_channel, data_count);
1292:../Dave/Generated/I2C_MASTER/i2c_master.c **** #else
1293:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetBlockSize(rx_dma_config_global->dma, rx_dma_config->dma_channel, 1);
1294:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1295:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetSourceAddress(rx_dma_config_global->dma, rx_dma_config->dma_channel, (uint32_t)&h
1296:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetDestinationAddress(rx_dma_config_global->dma, rx_dma_config->dma_channel, (uint32
1297:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1298:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1299:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1300:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1301:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* ACK TDF value */
1302:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ack_buf[0] = (uint16_t)I2C_MASTER_TDF_RECEIVE_ACK;
1303:../Dave/Generated/I2C_MASTER/i2c_master.c ****       nack_buf[0] = (uint16_t)I2C_MASTER_TDF_RECEIVE_NACK;
1304:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
1305:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* need to make source reload for tx, transfer width for tx= 2 bytes */
1306:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_ch_num = handle->config->transmit_dma_config->dma_channel;
1307:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* clear the bits */
1308:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_dma_config_global->dma->CH[tx_ch_num].CTLL &= ~((uint32_t)I2C_MASTER_DMA_SRC_DST_TR_WIDTH_MA
1309:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         (uint32_t)I2C_MASTER_DMA_SRC_ADDR_INC_MASK)
1310:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1311:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* set the src and dest transf width as XMC_DMA_CH_TRANSFER_WIDTH_16 */
1312:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= (((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_16 <<
1313:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         (uint32_t)I2C_MASTER_DMA_DST_TRANSFER_WIDTH
1314:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        ((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_16 <<
1315:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                       (uint32_t)I2C_MASTER_DMA_SRC_TRANSFER_WIDTH_P
1316:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1317:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* set the tx channel src address inc mode to XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE */
1318:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CH
1319:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        (uint32_t)I2C_MASTER_DMA_SRC_ADDR_INC_POS);
1320:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1321:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1322:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1323:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_RECEIVE_START);
1324:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1325:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1326:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1327:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if(data_count == 1U)
1328:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1329:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetSourceAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (uint3
1330:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetBlockSize(tx_dma_config_global->dma, tx_dma_config->dma_channel, 1);
1331:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1332:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1333:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1334:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetSourceAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (uint3
1335:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetBlockSize(tx_dma_config_global->dma, tx_dma_config->dma_channel, data_count
1336:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1337:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetDestinationAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel,
1338:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      (uint32_t)&handle->channel->TBUF[0]);
1339:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1340:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1341:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1342:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1343:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_Enable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1344:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1345:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1346:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1347:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1348:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (data_count > 1U)
1349:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1350:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK((I2C_MASTER_t * const)handle);
1351:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1352:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1353:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1354:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveNACK((I2C_MASTER_t * const)handle);
1355:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1356:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1357:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1358:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_Enable(rx_dma_config_global->dma, rx_dma_config->dma_channel);
1359:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1360:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
1361:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1362:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if(handle->runtime->rx_busy == false) */
1363:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
1364:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1365:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
1366:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1367:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1368:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data reception.
1369:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
1370:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return None
1371:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1372:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1373:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If a reception is in progress, it will be stopped. When a reception request
1374:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is active, user will not be able to place a new receive request till the active
1375:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * reception is complete. This API can stop the progressing reception to make
1376:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new receive request.
1377:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1378:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveDMA(const I2C_MASTER_t *const handle)
1379:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1380:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *rx_dma_config;
1381:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *rx_dma_config_global;
1382:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1383:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1384:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1385:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1386:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1387:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config = handle->config->receive_dma_config;
1388:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config_global = handle->config->receive_dma_config->global_dma;
1389:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1390:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1391:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1392:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1393:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1394:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reset the user buffer pointer to null */
1395:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_busy = false;
1396:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_dma_data_index = 0U;
1397:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1398:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (XMC_DMA_CH_IsEnabled(rx_dma_config_global->dma, rx_dma_config->dma_channel))
1399:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1400:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_Disable(rx_dma_config_global->dma, rx_dma_config->dma_channel);
1401:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1402:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1403:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1404:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1405:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel))
1406:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1407:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_DMA_CH_Disable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1408:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1409:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel) == 1U){}
1410:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1411:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1412:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1413:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_DMA_CH_IsEnabled(rx_dma_config_global->dma, rx_dma_config->dma_channel) == 1U){}
1414:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1415:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1416:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_DisableEvent(handle->channel, ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
1417:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                              (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1418:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1419:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1420:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1421:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1422:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
1423:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1424:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1425:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1426:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1427:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_ch_num;
1428:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1429:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
1430:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1431:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1432:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1433:../Dave/Generated/I2C_MASTER/i2c_master.c ****   
1434:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_ch_num = 0U;
1435:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1436:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((addr == NULL) || (block_size > I2C_DMA_MAX_BLOCK_SIZE) || (!block_size))
1437:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1438:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
1439:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1440:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1441:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1442:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->runtime->tx_busy == false)
1443:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1444:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_ch_num = handle->config->transmit_dma_config->dma_channel;
1445:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* clear the bits */
1446:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_dma_config_global->dma->CH[tx_ch_num].CTLL &= ~((uint32_t)I2C_MASTER_DMA_SRC_DST_TR_WIDTH_
1447:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* set the src and dest transf width as XMC_DMA_CH_TRANSFER_WIDTH_8 */
1448:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= (((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_8 << (
1449:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         ((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_8 << (
1450:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* set the tx channel src address inc mode to XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT */
1451:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INC
1452:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1453:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_DMA_ClearRequestLine(tx_dma_config_global->dma, handle->config->transmit_dma_config->dma_
1454:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_EnableEvent((I2C_MASTER_t * const)handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
1455:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1456:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
1457:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->tx_busy = true;
1458:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1459:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_I2C_CH_MasterTransmit(handle->channel,*addr);
1460:../Dave/Generated/I2C_MASTER/i2c_master.c ****       block_size--;
1461:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1462:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if(block_size)
1463:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1464:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetBlockSize(tx_dma_config_global->dma, tx_dma_config->dma_channel, block_size);
1465:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetSourceAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (uint32_
1466:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetDestinationAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (ui
1467:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1468:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_Enable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1469:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1470:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1471:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1472:../Dave/Generated/I2C_MASTER/i2c_master.c ****         handle->runtime->tx_busy = false;
1473:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if(handle->config->tx_cbhandler)
1474:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1475:../Dave/Generated/I2C_MASTER/i2c_master.c ****           handle->config->tx_cbhandler();
1476:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1477:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1478:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1479:../Dave/Generated/I2C_MASTER/i2c_master.c ****       status = I2C_MASTER_STATUS_SUCCESS;
1480:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1481:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1482:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1483:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
1484:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1485:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1486:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1487:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data transmission.
1488:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t*  I2C_MASTER APP handle pointer of type I2C_MASTER_t
1489:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return None
1490:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1491:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1492:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
1493:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * the existing data will be flushed. After the transmission is stopped, user can start
1494:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new transmission without delay.
1495:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1496:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortTransmitDMA(const I2C_MASTER_t *const handle)
1497:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1498:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1499:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1500:../Dave/Generated/I2C_MASTER/i2c_master.c ****   
1501:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1502:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1503:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1504:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
1505:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1506:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel))
1507:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1508:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_Disable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1509:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1510:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1511:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel) == 1U){}
1512:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1513:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
1514:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1515:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1516:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1517:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1518:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
1519:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_s
1520:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         const uint32_t slave_address, uint8_t *data
1521:../Dave/Generated/I2C_MASTER/i2c_master.c ****                               bool send_stop)
1522:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1349              	 .loc 4 1522 0
 1350              	 .cfi_startproc
 1351              	 
 1352              	 
 1353 0000 80B5     	 push {r7,lr}
 1354              	.LCFI128:
 1355              	 .cfi_def_cfa_offset 8
 1356              	 .cfi_offset 7,-8
 1357              	 .cfi_offset 14,-4
 1358 0002 86B0     	 sub sp,sp,#24
 1359              	.LCFI129:
 1360              	 .cfi_def_cfa_offset 32
 1361 0004 00AF     	 add r7,sp,#0
 1362              	.LCFI130:
 1363              	 .cfi_def_cfa_register 7
 1364 0006 F860     	 str r0,[r7,#12]
 1365 0008 7A60     	 str r2,[r7,#4]
 1366 000a 3B60     	 str r3,[r7]
 1367 000c 0B46     	 mov r3,r1
 1368 000e FB72     	 strb r3,[r7,#11]
1523:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t buffer_index;
1524:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1525:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1526:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1369              	 .loc 4 1526 0
 1370 0010 0223     	 movs r3,#2
 1371 0012 FB74     	 strb r3,[r7,#19]
1527:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1528:../Dave/Generated/I2C_MASTER/i2c_master.c ****   buffer_index = 0U;
 1372              	 .loc 4 1528 0
 1373 0014 0023     	 movs r3,#0
 1374 0016 7B61     	 str r3,[r7,#20]
1529:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1530:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (si
 1375              	 .loc 4 1530 0
 1376 0018 FB7A     	 ldrb r3,[r7,#11]
 1377 001a 83F00103 	 eor r3,r3,#1
 1378 001e DBB2     	 uxtb r3,r3
 1379 0020 002B     	 cmp r3,#0
 1380 0022 09D0     	 beq .L51
 1381              	 .loc 4 1530 0 is_stmt 0 discriminator 1
 1382 0024 FB68     	 ldr r3,[r7,#12]
 1383 0026 9B68     	 ldr r3,[r3,#8]
 1384 0028 93F82830 	 ldrb r3,[r3,#40]
 1385 002c DBB2     	 uxtb r3,r3
 1386 002e 83F00103 	 eor r3,r3,#1
 1387 0032 DBB2     	 uxtb r3,r3
 1388 0034 002B     	 cmp r3,#0
 1389 0036 05D1     	 bne .L52
 1390              	.L51:
 1391              	 .loc 4 1530 0 discriminator 3
 1392 0038 3B68     	 ldr r3,[r7]
 1393 003a 002B     	 cmp r3,#0
 1394 003c 02D0     	 beq .L52
 1395              	 .loc 4 1530 0 discriminator 4
 1396 003e 3B6A     	 ldr r3,[r7,#32]
 1397 0040 002B     	 cmp r3,#0
 1398 0042 02D1     	 bne .L53
 1399              	.L52:
1531:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1532:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1400              	 .loc 4 1532 0 is_stmt 1
 1401 0044 0123     	 movs r3,#1
 1402 0046 FB74     	 strb r3,[r7,#19]
 1403 0048 9EE0     	 b .L54
 1404              	.L53:
1533:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1534:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1535:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1536:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_start == true)
 1405              	 .loc 4 1536 0
 1406 004a FB7A     	 ldrb r3,[r7,#11]
 1407 004c 002B     	 cmp r3,#0
 1408 004e 2CD0     	 beq .L55
1537:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1538:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (handle->runtime->bus_acquired == false)
 1409              	 .loc 4 1538 0
 1410 0050 FB68     	 ldr r3,[r7,#12]
 1411 0052 9B68     	 ldr r3,[r3,#8]
 1412 0054 93F82830 	 ldrb r3,[r3,#40]
 1413 0058 DBB2     	 uxtb r3,r3
 1414 005a 83F00103 	 eor r3,r3,#1
 1415 005e DBB2     	 uxtb r3,r3
 1416 0060 002B     	 cmp r3,#0
 1417 0062 22D0     	 beq .L55
1539:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1540:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 1418              	 .loc 4 1540 0
 1419 0064 F868     	 ldr r0,[r7,#12]
 1420 0066 7968     	 ldr r1,[r7,#4]
 1421 0068 0022     	 movs r2,#0
 1422 006a FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
1541:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_ST
 1423              	 .loc 4 1541 0
 1424 006e 00BF     	 nop
 1425              	.L56:
 1426              	 .loc 4 1541 0 is_stmt 0 discriminator 1
 1427 0070 F868     	 ldr r0,[r7,#12]
 1428 0072 4FF40871 	 mov r1,#544
 1429 0076 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1430 007a 0346     	 mov r3,r0
 1431 007c 002B     	 cmp r3,#0
 1432 007e F7D0     	 beq .L56
1542:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 1433              	 .loc 4 1542 0 is_stmt 1
 1434 0080 F868     	 ldr r0,[r7,#12]
 1435 0082 2021     	 movs r1,#32
 1436 0084 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1437 0088 0346     	 mov r3,r0
 1438 008a 002B     	 cmp r3,#0
 1439 008c 08D0     	 beq .L57
1543:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1544:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 1440              	 .loc 4 1544 0
 1441 008e F868     	 ldr r0,[r7,#12]
 1442 0090 2021     	 movs r1,#32
 1443 0092 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1545:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_AbortTransmit(handle);
 1444              	 .loc 4 1545 0
 1445 0096 F868     	 ldr r0,[r7,#12]
 1446 0098 FFF7FEFF 	 bl I2C_MASTER_AbortTransmit
1546:../Dave/Generated/I2C_MASTER/i2c_master.c ****           return I2C_MASTER_STATUS_FAILURE;
 1447              	 .loc 4 1546 0
 1448 009c 0123     	 movs r3,#1
 1449 009e 74E0     	 b .L58
 1450              	.L57:
1547:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1548:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1549:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1550:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1451              	 .loc 4 1550 0
 1452 00a0 F868     	 ldr r0,[r7,#12]
 1453 00a2 4FF40071 	 mov r1,#512
 1454 00a6 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
 1455              	.L55:
1551:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1552:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1553:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1554:../Dave/Generated/I2C_MASTER/i2c_master.c ****       
1555:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 1456              	 .loc 4 1555 0
 1457 00aa FB68     	 ldr r3,[r7,#12]
 1458 00ac 5B68     	 ldr r3,[r3,#4]
 1459 00ae 93F82630 	 ldrb r3,[r3,#38]
 1460 00b2 002B     	 cmp r3,#0
 1461 00b4 2ED1     	 bne .L59
1556:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1557:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* send data, byte by byte */
1558:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (buffer_index < size)
 1462              	 .loc 4 1558 0
 1463 00b6 28E0     	 b .L60
 1464              	.L63:
1559:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1560:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 1465              	 .loc 4 1560 0
 1466 00b8 3A68     	 ldr r2,[r7]
 1467 00ba 7B69     	 ldr r3,[r7,#20]
 1468 00bc 1344     	 add r3,r3,r2
 1469 00be 1B78     	 ldrb r3,[r3]
 1470 00c0 F868     	 ldr r0,[r7,#12]
 1471 00c2 1946     	 mov r1,r3
 1472 00c4 FFF7FEFF 	 bl I2C_MASTER_TransmitByte
1561:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_ST
 1473              	 .loc 4 1561 0
 1474 00c8 00BF     	 nop
 1475              	.L61:
 1476              	 .loc 4 1561 0 is_stmt 0 discriminator 1
 1477 00ca F868     	 ldr r0,[r7,#12]
 1478 00cc 4FF40871 	 mov r1,#544
 1479 00d0 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1480 00d4 0346     	 mov r3,r0
 1481 00d6 002B     	 cmp r3,#0
 1482 00d8 F7D0     	 beq .L61
1562:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 1483              	 .loc 4 1562 0 is_stmt 1
 1484 00da F868     	 ldr r0,[r7,#12]
 1485 00dc 2021     	 movs r1,#32
 1486 00de FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1487 00e2 0346     	 mov r3,r0
 1488 00e4 002B     	 cmp r3,#0
 1489 00e6 08D0     	 beq .L62
1563:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1564:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 1490              	 .loc 4 1564 0
 1491 00e8 F868     	 ldr r0,[r7,#12]
 1492 00ea 2021     	 movs r1,#32
 1493 00ec FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1565:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_AbortTransmit(handle);
 1494              	 .loc 4 1565 0
 1495 00f0 F868     	 ldr r0,[r7,#12]
 1496 00f2 FFF7FEFF 	 bl I2C_MASTER_AbortTransmit
1566:../Dave/Generated/I2C_MASTER/i2c_master.c ****           return I2C_MASTER_STATUS_FAILURE;
 1497              	 .loc 4 1566 0
 1498 00f6 0123     	 movs r3,#1
 1499 00f8 47E0     	 b .L58
 1500              	.L62:
1567:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1568:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1569:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1570:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1501              	 .loc 4 1570 0
 1502 00fa F868     	 ldr r0,[r7,#12]
 1503 00fc 4FF40071 	 mov r1,#512
 1504 0100 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1571:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1572:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1573:../Dave/Generated/I2C_MASTER/i2c_master.c ****         buffer_index++;
 1505              	 .loc 4 1573 0
 1506 0104 7B69     	 ldr r3,[r7,#20]
 1507 0106 0133     	 adds r3,r3,#1
 1508 0108 7B61     	 str r3,[r7,#20]
 1509              	.L60:
1558:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 1510              	 .loc 4 1558 0
 1511 010a 7A69     	 ldr r2,[r7,#20]
 1512 010c 3B6A     	 ldr r3,[r7,#32]
 1513 010e 9A42     	 cmp r2,r3
 1514 0110 D2D3     	 bcc .L63
 1515 0112 2BE0     	 b .L64
 1516              	.L59:
1574:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1575:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1576:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
1577:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1578:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (buffer_index < size)
 1517              	 .loc 4 1578 0
 1518 0114 1AE0     	 b .L65
 1519              	.L69:
1579:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1580:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* Fill the transmit FIFO */
1581:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1520              	 .loc 4 1581 0
 1521 0116 10E0     	 b .L66
 1522              	.L68:
1582:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1583:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* transmit each byte till index reaches to the last byte */
1584:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (buffer_index < size)
 1523              	 .loc 4 1584 0
 1524 0118 7A69     	 ldr r2,[r7,#20]
 1525 011a 3B6A     	 ldr r3,[r7,#32]
 1526 011c 9A42     	 cmp r2,r3
 1527 011e 0BD2     	 bcs .L67
1585:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1586:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
1587:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 1528              	 .loc 4 1587 0
 1529 0120 3A68     	 ldr r2,[r7]
 1530 0122 7B69     	 ldr r3,[r7,#20]
 1531 0124 1344     	 add r3,r3,r2
 1532 0126 1B78     	 ldrb r3,[r3]
 1533 0128 F868     	 ldr r0,[r7,#12]
 1534 012a 1946     	 mov r1,r3
 1535 012c FFF7FEFF 	 bl I2C_MASTER_TransmitByte
1588:../Dave/Generated/I2C_MASTER/i2c_master.c ****             buffer_index++;
 1536              	 .loc 4 1588 0
 1537 0130 7B69     	 ldr r3,[r7,#20]
 1538 0132 0133     	 adds r3,r3,#1
 1539 0134 7B61     	 str r3,[r7,#20]
 1540 0136 00E0     	 b .L66
 1541              	.L67:
1589:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1590:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
1591:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1592:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 1542              	 .loc 4 1592 0
 1543 0138 08E0     	 b .L65
 1544              	.L66:
1581:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 1545              	 .loc 4 1581 0
 1546 013a F868     	 ldr r0,[r7,#12]
 1547 013c FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1548 0140 0346     	 mov r3,r0
 1549 0142 83F00103 	 eor r3,r3,#1
 1550 0146 DBB2     	 uxtb r3,r3
 1551 0148 002B     	 cmp r3,#0
 1552 014a E5D1     	 bne .L68
 1553              	.L65:
1578:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 1554              	 .loc 4 1578 0
 1555 014c 7A69     	 ldr r2,[r7,#20]
 1556 014e 3B6A     	 ldr r3,[r7,#32]
 1557 0150 9A42     	 cmp r2,r3
 1558 0152 E0D3     	 bcc .L69
1593:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1594:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1595:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1596:../Dave/Generated/I2C_MASTER/i2c_master.c ****       
1597:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*make sure data is transmitted from FIFO*/
1598:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 1559              	 .loc 4 1598 0
 1560 0154 00BF     	 nop
 1561              	.L70:
 1562              	 .loc 4 1598 0 is_stmt 0 discriminator 1
 1563 0156 FB68     	 ldr r3,[r7,#12]
 1564 0158 1B68     	 ldr r3,[r3]
 1565 015a 1846     	 mov r0,r3
 1566 015c FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsEmpty
 1567 0160 0346     	 mov r3,r0
 1568 0162 83F00103 	 eor r3,r3,#1
 1569 0166 DBB2     	 uxtb r3,r3
 1570 0168 002B     	 cmp r3,#0
 1571 016a F4D1     	 bne .L70
 1572              	.L64:
1599:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1600:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1601:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if(send_stop == true)
 1573              	 .loc 4 1601 0 is_stmt 1
 1574 016c 97F82430 	 ldrb r3,[r7,#36]
 1575 0170 002B     	 cmp r3,#0
 1576 0172 07D0     	 beq .L71
1602:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1603:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->bus_acquired = false;
 1577              	 .loc 4 1603 0
 1578 0174 FB68     	 ldr r3,[r7,#12]
 1579 0176 9B68     	 ldr r3,[r3,#8]
 1580 0178 0022     	 movs r2,#0
 1581 017a 83F82820 	 strb r2,[r3,#40]
1604:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_SendStop(handle);
 1582              	 .loc 4 1604 0
 1583 017e F868     	 ldr r0,[r7,#12]
 1584 0180 FFF7FEFF 	 bl I2C_MASTER_SendStop
 1585              	.L71:
1605:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1606:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1607:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 1586              	 .loc 4 1607 0
 1587 0184 0023     	 movs r3,#0
 1588 0186 FB74     	 strb r3,[r7,#19]
 1589              	.L54:
1608:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1609:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1610:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1590              	 .loc 4 1610 0
 1591 0188 FB7C     	 ldrb r3,[r7,#19]
 1592              	.L58:
1611:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1593              	 .loc 4 1611 0
 1594 018a 1846     	 mov r0,r3
 1595 018c 1837     	 adds r7,r7,#24
 1596              	.LCFI131:
 1597              	 .cfi_def_cfa_offset 8
 1598 018e BD46     	 mov sp,r7
 1599              	.LCFI132:
 1600              	 .cfi_def_cfa_register 13
 1601              	 
 1602 0190 80BD     	 pop {r7,pc}
 1603              	 .cfi_endproc
 1604              	.LFE260:
 1606 0192 00BF     	 .section .text.I2C_MASTER_lStartReceivePolling,"ax",%progbits
 1607              	 .align 2
 1608              	 .thumb
 1609              	 .thumb_func
 1611              	I2C_MASTER_lStartReceivePolling:
 1612              	.LFB261:
1612:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1613:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1614:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
1615:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_st
1616:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        uint32_t slave_address, uint8_t *data, uint3
1617:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                bool send_stop, bool send_nack)
1618:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1613              	 .loc 4 1618 0
 1614              	 .cfi_startproc
 1615              	 
 1616              	 
 1617 0000 90B5     	 push {r4,r7,lr}
 1618              	.LCFI133:
 1619              	 .cfi_def_cfa_offset 12
 1620              	 .cfi_offset 4,-12
 1621              	 .cfi_offset 7,-8
 1622              	 .cfi_offset 14,-4
 1623 0002 89B0     	 sub sp,sp,#36
 1624              	.LCFI134:
 1625              	 .cfi_def_cfa_offset 48
 1626 0004 00AF     	 add r7,sp,#0
 1627              	.LCFI135:
 1628              	 .cfi_def_cfa_register 7
 1629 0006 F860     	 str r0,[r7,#12]
 1630 0008 7A60     	 str r2,[r7,#4]
 1631 000a 3B60     	 str r3,[r7]
 1632 000c 0B46     	 mov r3,r1
 1633 000e FB72     	 strb r3,[r7,#11]
1619:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1620:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t buffer_index;
1621:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t temp_index;
1622:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1623:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1634              	 .loc 4 1623 0
 1635 0010 0223     	 movs r3,#2
 1636 0012 FB77     	 strb r3,[r7,#31]
1624:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (co
 1637              	 .loc 4 1624 0
 1638 0014 FB7A     	 ldrb r3,[r7,#11]
 1639 0016 83F00103 	 eor r3,r3,#1
 1640 001a DBB2     	 uxtb r3,r3
 1641 001c 002B     	 cmp r3,#0
 1642 001e 09D0     	 beq .L73
 1643              	 .loc 4 1624 0 is_stmt 0 discriminator 1
 1644 0020 FB68     	 ldr r3,[r7,#12]
 1645 0022 9B68     	 ldr r3,[r3,#8]
 1646 0024 93F82830 	 ldrb r3,[r3,#40]
 1647 0028 DBB2     	 uxtb r3,r3
 1648 002a 83F00103 	 eor r3,r3,#1
 1649 002e DBB2     	 uxtb r3,r3
 1650 0030 002B     	 cmp r3,#0
 1651 0032 05D1     	 bne .L74
 1652              	.L73:
 1653              	 .loc 4 1624 0 discriminator 3
 1654 0034 3B68     	 ldr r3,[r7]
 1655 0036 002B     	 cmp r3,#0
 1656 0038 02D0     	 beq .L74
 1657              	 .loc 4 1624 0 discriminator 4
 1658 003a 3B6B     	 ldr r3,[r7,#48]
 1659 003c 002B     	 cmp r3,#0
 1660 003e 02D1     	 bne .L75
 1661              	.L74:
1625:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1626:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1662              	 .loc 4 1626 0 is_stmt 1
 1663 0040 0123     	 movs r3,#1
 1664 0042 FB77     	 strb r3,[r7,#31]
 1665 0044 B8E0     	 b .L76
 1666              	.L75:
1627:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1628:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1629:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1630:../Dave/Generated/I2C_MASTER/i2c_master.c ****     buffer_index = 0U;
 1667              	 .loc 4 1630 0
 1668 0046 0023     	 movs r3,#0
 1669 0048 BB61     	 str r3,[r7,#24]
1631:../Dave/Generated/I2C_MASTER/i2c_master.c ****     temp_index = 0U;
 1670              	 .loc 4 1631 0
 1671 004a 0023     	 movs r3,#0
 1672 004c 7B61     	 str r3,[r7,#20]
1632:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_start == true)
 1673              	 .loc 4 1632 0
 1674 004e FB7A     	 ldrb r3,[r7,#11]
 1675 0050 002B     	 cmp r3,#0
 1676 0052 22D0     	 beq .L77
1633:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1634:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 1677              	 .loc 4 1634 0
 1678 0054 F868     	 ldr r0,[r7,#12]
 1679 0056 7968     	 ldr r1,[r7,#4]
 1680 0058 0122     	 movs r2,#1
 1681 005a FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
1635:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STAT
 1682              	 .loc 4 1635 0
 1683 005e 00BF     	 nop
 1684              	.L78:
 1685              	 .loc 4 1635 0 is_stmt 0 discriminator 1
 1686 0060 F868     	 ldr r0,[r7,#12]
 1687 0062 4FF40871 	 mov r1,#544
 1688 0066 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1689 006a 0346     	 mov r3,r0
 1690 006c 002B     	 cmp r3,#0
 1691 006e F7D0     	 beq .L78
1636:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 1692              	 .loc 4 1636 0 is_stmt 1
 1693 0070 F868     	 ldr r0,[r7,#12]
 1694 0072 2021     	 movs r1,#32
 1695 0074 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1696 0078 0346     	 mov r3,r0
 1697 007a 002B     	 cmp r3,#0
 1698 007c 08D0     	 beq .L79
1637:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1638:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 1699              	 .loc 4 1638 0
 1700 007e F868     	 ldr r0,[r7,#12]
 1701 0080 2021     	 movs r1,#32
 1702 0082 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1639:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_AbortTransmit(handle);
 1703              	 .loc 4 1639 0
 1704 0086 F868     	 ldr r0,[r7,#12]
 1705 0088 FFF7FEFF 	 bl I2C_MASTER_AbortTransmit
1640:../Dave/Generated/I2C_MASTER/i2c_master.c ****         return I2C_MASTER_STATUS_FAILURE;
 1706              	 .loc 4 1640 0
 1707 008c 0123     	 movs r3,#1
 1708 008e 94E0     	 b .L80
 1709              	.L79:
1641:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1642:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1643:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1644:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1710              	 .loc 4 1644 0
 1711 0090 F868     	 ldr r0,[r7,#12]
 1712 0092 4FF40071 	 mov r1,#512
 1713 0096 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
 1714              	.L77:
1645:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1646:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1647:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1648:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 1715              	 .loc 4 1648 0
 1716 009a FB68     	 ldr r3,[r7,#12]
 1717 009c 5B68     	 ldr r3,[r3,#4]
 1718 009e 93F82630 	 ldrb r3,[r3,#38]
 1719 00a2 002B     	 cmp r3,#0
 1720 00a4 3AD1     	 bne .L81
1649:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1650:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (buffer_index < count)
 1721              	 .loc 4 1650 0
 1722 00a6 34E0     	 b .L82
 1723              	.L87:
1651:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1652:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((buffer_index + 1U) == count) && (send_nack == true))
 1724              	 .loc 4 1652 0
 1725 00a8 BB69     	 ldr r3,[r7,#24]
 1726 00aa 5A1C     	 adds r2,r3,#1
 1727 00ac 3B6B     	 ldr r3,[r7,#48]
 1728 00ae 9A42     	 cmp r2,r3
 1729 00b0 07D1     	 bne .L83
 1730              	 .loc 4 1652 0 is_stmt 0 discriminator 1
 1731 00b2 97F83830 	 ldrb r3,[r7,#56]
 1732 00b6 002B     	 cmp r3,#0
 1733 00b8 03D0     	 beq .L83
1653:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1654:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 1734              	 .loc 4 1654 0 is_stmt 1
 1735 00ba F868     	 ldr r0,[r7,#12]
 1736 00bc FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1737 00c0 02E0     	 b .L84
 1738              	.L83:
1655:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1656:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1657:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1658:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 1739              	 .loc 4 1658 0
 1740 00c2 F868     	 ldr r0,[r7,#12]
 1741 00c4 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1742              	.L84:
1659:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1660:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1661:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEI
 1743              	 .loc 4 1661 0
 1744 00c8 00BF     	 nop
 1745              	.L86:
 1746              	 .loc 4 1661 0 is_stmt 0 discriminator 2
 1747 00ca F868     	 ldr r0,[r7,#12]
 1748 00cc 4FF40041 	 mov r1,#32768
 1749 00d0 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1750 00d4 0346     	 mov r3,r0
 1751 00d6 002B     	 cmp r3,#0
 1752 00d8 07D1     	 bne .L85
1662:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATIO
 1753              	 .loc 4 1662 0 is_stmt 1 discriminator 1
 1754 00da F868     	 ldr r0,[r7,#12]
 1755 00dc 4FF48041 	 mov r1,#16384
 1756 00e0 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1757 00e4 0346     	 mov r3,r0
1661:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATIO
 1758              	 .loc 4 1661 0 discriminator 1
 1759 00e6 002B     	 cmp r3,#0
 1760 00e8 EFD0     	 beq .L86
 1761              	.L85:
1663:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1664:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* wait for RSI */
1665:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1666:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1667:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATIO
 1762              	 .loc 4 1667 0
 1763 00ea F868     	 ldr r0,[r7,#12]
 1764 00ec 4FF40041 	 mov r1,#32768
 1765 00f0 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1668:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 1766              	 .loc 4 1668 0
 1767 00f4 F868     	 ldr r0,[r7,#12]
 1768 00f6 4FF48041 	 mov r1,#16384
 1769 00fa FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1669:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1670:../Dave/Generated/I2C_MASTER/i2c_master.c ****         data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 1770              	 .loc 4 1670 0
 1771 00fe BB69     	 ldr r3,[r7,#24]
 1772 0100 5A1C     	 adds r2,r3,#1
 1773 0102 BA61     	 str r2,[r7,#24]
 1774 0104 3A68     	 ldr r2,[r7]
 1775 0106 D418     	 adds r4,r2,r3
 1776 0108 F868     	 ldr r0,[r7,#12]
 1777 010a FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 1778 010e 0346     	 mov r3,r0
 1779 0110 2370     	 strb r3,[r4]
 1780              	.L82:
1650:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 1781              	 .loc 4 1650 0
 1782 0112 BA69     	 ldr r2,[r7,#24]
 1783 0114 3B6B     	 ldr r3,[r7,#48]
 1784 0116 9A42     	 cmp r2,r3
 1785 0118 C6D3     	 bcc .L87
 1786 011a 3FE0     	 b .L88
 1787              	.L81:
1671:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1672:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
1673:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
1674:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1675:../Dave/Generated/I2C_MASTER/i2c_master.c ****       temp_index = buffer_index;
 1788              	 .loc 4 1675 0
 1789 011c BB69     	 ldr r3,[r7,#24]
 1790 011e 7B61     	 str r3,[r7,#20]
1676:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (temp_index < count)
 1791              	 .loc 4 1676 0
 1792 0120 38E0     	 b .L89
 1793              	.L99:
1677:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1678:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1794              	 .loc 4 1678 0
 1795 0122 18E0     	 b .L90
 1796              	.L95:
1679:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1680:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* transmit each byte till index reaches to the last byte */
1681:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (temp_index < count)
 1797              	 .loc 4 1681 0
 1798 0124 7A69     	 ldr r2,[r7,#20]
 1799 0126 3B6B     	 ldr r3,[r7,#48]
 1800 0128 9A42     	 cmp r2,r3
 1801 012a 13D2     	 bcs .L91
1682:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1683:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
1684:../Dave/Generated/I2C_MASTER/i2c_master.c ****             if (((temp_index + 1U) == count) && (send_nack == true))
 1802              	 .loc 4 1684 0
 1803 012c 7B69     	 ldr r3,[r7,#20]
 1804 012e 5A1C     	 adds r2,r3,#1
 1805 0130 3B6B     	 ldr r3,[r7,#48]
 1806 0132 9A42     	 cmp r2,r3
 1807 0134 07D1     	 bne .L92
 1808              	 .loc 4 1684 0 is_stmt 0 discriminator 1
 1809 0136 97F83830 	 ldrb r3,[r7,#56]
 1810 013a 002B     	 cmp r3,#0
 1811 013c 03D0     	 beq .L92
1685:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
1686:../Dave/Generated/I2C_MASTER/i2c_master.c ****               I2C_MASTER_ReceiveNACK(handle);
 1812              	 .loc 4 1686 0 is_stmt 1
 1813 013e F868     	 ldr r0,[r7,#12]
 1814 0140 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1815 0144 02E0     	 b .L93
 1816              	.L92:
1687:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }
1688:../Dave/Generated/I2C_MASTER/i2c_master.c ****             else
1689:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
1690:../Dave/Generated/I2C_MASTER/i2c_master.c ****               I2C_MASTER_ReceiveACK(handle);
 1817              	 .loc 4 1690 0
 1818 0146 F868     	 ldr r0,[r7,#12]
 1819 0148 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1820              	.L93:
1691:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }
1692:../Dave/Generated/I2C_MASTER/i2c_master.c ****             temp_index++;
 1821              	 .loc 4 1692 0
 1822 014c 7B69     	 ldr r3,[r7,#20]
 1823 014e 0133     	 adds r3,r3,#1
 1824 0150 7B61     	 str r3,[r7,#20]
 1825 0152 00E0     	 b .L90
 1826              	.L91:
1693:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1694:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
1695:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1696:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 1827              	 .loc 4 1696 0
 1828 0154 08E0     	 b .L94
 1829              	.L90:
1678:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 1830              	 .loc 4 1678 0
 1831 0156 F868     	 ldr r0,[r7,#12]
 1832 0158 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1833 015c 0346     	 mov r3,r0
 1834 015e 83F00103 	 eor r3,r3,#1
 1835 0162 DBB2     	 uxtb r3,r3
 1836 0164 002B     	 cmp r3,#0
 1837 0166 DDD1     	 bne .L95
 1838              	.L94:
1697:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1698:../Dave/Generated/I2C_MASTER/i2c_master.c ****         } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */
1699:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1700:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (buffer_index < temp_index)
 1839              	 .loc 4 1700 0 discriminator 1
 1840 0168 10E0     	 b .L96
 1841              	.L98:
1701:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1702:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* wait for data to come in RX fifo */
1703:../Dave/Generated/I2C_MASTER/i2c_master.c ****           while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 1842              	 .loc 4 1703 0
 1843 016a 00BF     	 nop
 1844              	.L97:
 1845              	 .loc 4 1703 0 is_stmt 0 discriminator 1
 1846 016c F868     	 ldr r0,[r7,#12]
 1847 016e FFF7FEFF 	 bl I2C_MASTER_IsRXFIFOEmpty
 1848 0172 0346     	 mov r3,r0
 1849 0174 002B     	 cmp r3,#0
 1850 0176 F9D1     	 bne .L97
1704:../Dave/Generated/I2C_MASTER/i2c_master.c ****           data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 1851              	 .loc 4 1704 0 is_stmt 1
 1852 0178 BB69     	 ldr r3,[r7,#24]
 1853 017a 5A1C     	 adds r2,r3,#1
 1854 017c BA61     	 str r2,[r7,#24]
 1855 017e 3A68     	 ldr r2,[r7]
 1856 0180 D418     	 adds r4,r2,r3
 1857 0182 F868     	 ldr r0,[r7,#12]
 1858 0184 FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 1859 0188 0346     	 mov r3,r0
 1860 018a 2370     	 strb r3,[r4]
 1861              	.L96:
1700:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 1862              	 .loc 4 1700 0
 1863 018c BA69     	 ldr r2,[r7,#24]
 1864 018e 7B69     	 ldr r3,[r7,#20]
 1865 0190 9A42     	 cmp r2,r3
 1866 0192 EAD3     	 bcc .L98
 1867              	.L89:
1676:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 1868              	 .loc 4 1676 0
 1869 0194 7A69     	 ldr r2,[r7,#20]
 1870 0196 3B6B     	 ldr r3,[r7,#48]
 1871 0198 9A42     	 cmp r2,r3
 1872 019a C2D3     	 bcc .L99
 1873              	.L88:
1705:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1706:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while (temp_index < count) */
1707:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
1708:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1709:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_stop == true)
 1874              	 .loc 4 1709 0
 1875 019c 97F83430 	 ldrb r3,[r7,#52]
 1876 01a0 002B     	 cmp r3,#0
 1877 01a2 07D0     	 beq .L100
1710:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1711:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->bus_acquired = false;
 1878              	 .loc 4 1711 0
 1879 01a4 FB68     	 ldr r3,[r7,#12]
 1880 01a6 9B68     	 ldr r3,[r3,#8]
 1881 01a8 0022     	 movs r2,#0
 1882 01aa 83F82820 	 strb r2,[r3,#40]
1712:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_SendStop(handle);
 1883              	 .loc 4 1712 0
 1884 01ae F868     	 ldr r0,[r7,#12]
 1885 01b0 FFF7FEFF 	 bl I2C_MASTER_SendStop
 1886              	.L100:
1713:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1714:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1715:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 1887              	 .loc 4 1715 0
 1888 01b4 0023     	 movs r3,#0
 1889 01b6 FB77     	 strb r3,[r7,#31]
 1890              	.L76:
1716:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1717:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1718:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1891              	 .loc 4 1718 0
 1892 01b8 FB7F     	 ldrb r3,[r7,#31]
 1893              	.L80:
1719:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1894              	 .loc 4 1719 0
 1895 01ba 1846     	 mov r0,r3
 1896 01bc 2437     	 adds r7,r7,#36
 1897              	.LCFI136:
 1898              	 .cfi_def_cfa_offset 12
 1899 01be BD46     	 mov sp,r7
 1900              	.LCFI137:
 1901              	 .cfi_def_cfa_register 13
 1902              	 
 1903 01c0 90BD     	 pop {r4,r7,pc}
 1904              	 .cfi_endproc
 1905              	.LFE261:
 1907 01c2 00BF     	 .text
 1908              	.Letext0:
 1909              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1910              	 .file 6 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1911              	 .file 7 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 1912              	 .file 8 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Dave/Generated/DAVE_Common.h"
 1913              	 .file 9 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Include/cmsis_gcc.h"
 1914              	 .file 10 "C:/work_mari/XMC4800/common-tasks/I2C_MASTER/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_master.c
    {standard input}:20     .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 XMC_USIC_CH_TXFIFO_IsFull
    {standard input}:70     .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 $t
    {standard input}:74     .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 XMC_USIC_CH_TXFIFO_IsEmpty
    {standard input}:119    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:123    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:168    .text.XMC_I2C_CH_GetStatusFlag:00000000 $t
    {standard input}:172    .text.XMC_I2C_CH_GetStatusFlag:00000000 XMC_I2C_CH_GetStatusFlag
    {standard input}:212    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:216    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:259    .text.I2C_MASTER_IsTXFIFOFull:00000000 $t
    {standard input}:263    .text.I2C_MASTER_IsTXFIFOFull:00000000 I2C_MASTER_IsTXFIFOFull
    {standard input}:302    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 $t
    {standard input}:306    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 I2C_MASTER_IsRXFIFOEmpty
    {standard input}:344    .text.I2C_MASTER_GetReceivedByte:00000000 $t
    {standard input}:348    .text.I2C_MASTER_GetReceivedByte:00000000 I2C_MASTER_GetReceivedByte
    {standard input}:386    .text.I2C_MASTER_TransmitByte:00000000 $t
    {standard input}:390    .text.I2C_MASTER_TransmitByte:00000000 I2C_MASTER_TransmitByte
    {standard input}:430    .text.I2C_MASTER_ReceiveACK:00000000 $t
    {standard input}:434    .text.I2C_MASTER_ReceiveACK:00000000 I2C_MASTER_ReceiveACK
    {standard input}:470    .text.I2C_MASTER_ReceiveNACK:00000000 $t
    {standard input}:474    .text.I2C_MASTER_ReceiveNACK:00000000 I2C_MASTER_ReceiveNACK
    {standard input}:510    .text.I2C_MASTER_SendStop:00000000 $t
    {standard input}:514    .text.I2C_MASTER_SendStop:00000000 I2C_MASTER_SendStop
    {standard input}:556    .text.I2C_MASTER_SendStart:00000000 $t
    {standard input}:560    .text.I2C_MASTER_SendStart:00000000 I2C_MASTER_SendStart
    {standard input}:610    .text.I2C_MASTER_SendRepeatedStart:00000000 $t
    {standard input}:614    .text.I2C_MASTER_SendRepeatedStart:00000000 I2C_MASTER_SendRepeatedStart
    {standard input}:664    .text.I2C_MASTER_GetAppVersion:00000000 $t
    {standard input}:669    .text.I2C_MASTER_GetAppVersion:00000000 I2C_MASTER_GetAppVersion
    {standard input}:730    .text.I2C_MASTER_Init:00000000 $t
    {standard input}:735    .text.I2C_MASTER_Init:00000000 I2C_MASTER_Init
    {standard input}:787    .text.I2C_MASTER_GetFlagStatus:00000000 $t
    {standard input}:792    .text.I2C_MASTER_GetFlagStatus:00000000 I2C_MASTER_GetFlagStatus
    {standard input}:835    .text.I2C_MASTER_ClearFlag:00000000 $t
    {standard input}:840    .text.I2C_MASTER_ClearFlag:00000000 I2C_MASTER_ClearFlag
    {standard input}:878    .text.I2C_MASTER_Transmit:00000000 $t
    {standard input}:883    .text.I2C_MASTER_Transmit:00000000 I2C_MASTER_Transmit
    {standard input}:1347   .text.I2C_MASTER_lStartTransmitPolling:00000000 I2C_MASTER_lStartTransmitPolling
    {standard input}:950    .text.I2C_MASTER_Receive:00000000 $t
    {standard input}:955    .text.I2C_MASTER_Receive:00000000 I2C_MASTER_Receive
    {standard input}:1611   .text.I2C_MASTER_lStartReceivePolling:00000000 I2C_MASTER_lStartReceivePolling
    {standard input}:1024   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 $t
    {standard input}:1028   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 I2C_MASTER_lSendStart_Or_RepeatedStart
    {standard input}:1101   .text.I2C_MASTER_ProtocolHandler:00000000 $t
    {standard input}:1106   .text.I2C_MASTER_ProtocolHandler:00000000 I2C_MASTER_ProtocolHandler
    {standard input}:1206   .text.I2C_MASTER_AbortTransmit:00000000 $t
    {standard input}:1211   .text.I2C_MASTER_AbortTransmit:00000000 I2C_MASTER_AbortTransmit
    {standard input}:1281   .text.I2C_MASTER_AbortReceive:00000000 $t
    {standard input}:1286   .text.I2C_MASTER_AbortReceive:00000000 I2C_MASTER_AbortReceive
    {standard input}:1343   .text.I2C_MASTER_lStartTransmitPolling:00000000 $t
    {standard input}:1607   .text.I2C_MASTER_lStartReceivePolling:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_I2C_CH_GetReceivedData
XMC_I2C_CH_MasterTransmit
XMC_I2C_CH_MasterReceiveAck
XMC_I2C_CH_MasterReceiveNack
XMC_I2C_CH_MasterStop
XMC_I2C_CH_MasterStart
XMC_I2C_CH_MasterRepeatedStart
