   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "i2c_slave.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_GetTransmitBufferStatus:
  25              	.LFB209:
  26              	 .file 1 "C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  12:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  14:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  21:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  28:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  41:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  42:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  43:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  44:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  46:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  47:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  48:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  49:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  50:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  51:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  52:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  54:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  55:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  56:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  57:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  58:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  59:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  60:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  62:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  63:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  64:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  65:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  67:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  68:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  69:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  70:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  71:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  72:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  73:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  74:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  75:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  76:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  77:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  79:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  80:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  81:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  82:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  83:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  84:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  86:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  87:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  88:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  89:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  90:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  92:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  93:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  94:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-07-01:
  95:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Changed XMC_USIC_CH_SetBaudrateEx() input parameter types
  96:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-09-30:
  98:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_InvalidateReadData(), XMC_USIC_CH_EnableWordLengthControl() and XMC_USIC
  99:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 100:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-12-05:
 101:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_PutDataEx()
 102:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 103:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-04-30:
 104:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_SetTriggerLimit() and XMC_USIC_CH_RXFIFO_SetTriggerLimit()
 105:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 106:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-12-05:
 107:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S to XMC_USIC_CH_BRG_CLOCK_SOURCE_t
 108:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CTQSEL_t
 109:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateDivider()
 110:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 111:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
 112:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 113:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 114:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 115:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
 116:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
 117:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
 119:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 122:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 123:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 124:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 126:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 127:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 129:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 130:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 131:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 132:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 133:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 134:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 135:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 136:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 137:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 138:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 139:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 140:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 141:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 142:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 143:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 144:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 145:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 146:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 147:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 148:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 149:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 150:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 151:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 152:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 153:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 154:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 155:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 157:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 158:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 159:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 161:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 162:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 163:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 164:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 167:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 168:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 169:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 170:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 171:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 172:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 173:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 174:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 175:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 176:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 177:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 178:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 179:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 180:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 181:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 182:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 183:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 185:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc1_usic_map.h"
 186:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 187:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 188:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 189:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc4_usic_map.h"
 190:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 191:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 192:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 193:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 194:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 195:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 196:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 197:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 198:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 199:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 200:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 201:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 202:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 203:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 204:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 205:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 206:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 207:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 208:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 209:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 210:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 211:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 212:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 213:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 214:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 215:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 216:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 217:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 218:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 219:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 220:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 221:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 222:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 223:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 224:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 225:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 226:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 227:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 228:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 231:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 233:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 235:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 236:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 237:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 238:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 239:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 240:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 241:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 242:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 243:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 244:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 245:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 246:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 247:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 248:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 249:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 250:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 251:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 252:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 253:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 254:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 255:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 256:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 257:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 258:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 259:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 260:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 261:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 262:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 263:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 264:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 265:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 266:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 267:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 268:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 269:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 270:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 271:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 272:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 273:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 274:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 275:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 276:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 277:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 278:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 279:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 280:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 281:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 282:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 283:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 284:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 285:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 286:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 287:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 288:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 289:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 290:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 291:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 292:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 293:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 294:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 295:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 296:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 297:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 298:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 299:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 300:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 301:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 303:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 304:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 305:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 306:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 307:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 308:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 309:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 310:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 311:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 312:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 313:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 314:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 315:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 316:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 317:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 318:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 319:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 320:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 321:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 322:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 323:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 324:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 325:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 326:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 327:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 328:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 329:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 330:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 332:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 333:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 334:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 335:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 336:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 337:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 338:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 339:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 340:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 341:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 342:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 343:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 344:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 345:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 346:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 347:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 348:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 349:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 350:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 351:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 352:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 353:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 354:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 355:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 356:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 357:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 358:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 359:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 360:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 361:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 362:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 363:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 364:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 365:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 366:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 367:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 368:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 369:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 370:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 371:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 372:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 373:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 374:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 375:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 376:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 377:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 378:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 379:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 380:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 381:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 382:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 383:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 384:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 385:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 386:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 387:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 388:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 389:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 390:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 393:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 395:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 397:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 398:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 399:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 400:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 401:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 402:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 403:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 404:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 405:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 406:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 407:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 408:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 409:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 410:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 411:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 412:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 413:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 414:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 415:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 416:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 417:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 418:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 419:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 420:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 421:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 422:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 423:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 424:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 425:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 426:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 427:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 428:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 431:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 433:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 435:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos,  /**< Baudrate generator 
 436:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S    = 0x3UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 437:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 438:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 439:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 440:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel input selection for CTQ
 441:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 442:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CTQSEL
 443:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 444:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PDIV = 0x0UL, /**< fCTQIN = fPDIV */
 445:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PPP  = 0x1UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fPPP */
 446:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_SCLK = 0x2UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fSCLK */
 447:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_MCLK = 0x3UL << USIC_CH_BRG_CTQSEL_Pos  /**< fCTQIN = fMCLK */
 448:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CTQSEL_t;
 449:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 450:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 451:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 452:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 453:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 454:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 455:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 456:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 457:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 458:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 459:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 460:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 462:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 463:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 464:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 465:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 466:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 467:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 468:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 469:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 471:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 472:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 473:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 474:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 475:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 476:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 477:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 478:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 479:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 480:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 481:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 482:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 483:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 484:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 485:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 487:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 488:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 489:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 490:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 491:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 492:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 493:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
 494:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 495:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 496:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 497:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 498:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 499:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 500:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 501:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 502:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 503:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 504:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 505:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 506:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 507:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #pragma push
 508:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #pragma anon_unions
 509:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 510:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning 586
 511:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 512:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 514:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 515:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 516:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 517:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 518:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 519:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file,
 520:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 521:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 522:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 523:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 524:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 525:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 526:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 527:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 528:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 529:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 530:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 531:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 532:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 533:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 534:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 535:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 536:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 537:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   union
 539:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   {
 540:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 541:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 542:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 543:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 544:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 545:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   };
 546:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 547:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 548:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   union
 550:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   {
 551:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 552:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 553:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 554:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 555:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 556:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   };
 557:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 558:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 559:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 560:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 561:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 562:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 563:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 564:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 565:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 566:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 567:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 568:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 569:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 570:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 571:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 572:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 573:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 574:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 575:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 576:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 577:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 578:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 579:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 581:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 582:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 583:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #pragma pop
 584:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 585:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning restore
 586:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 587:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 588:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 589:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 590:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 591:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 592:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 593:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 594:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 595:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 596:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 597:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 598:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 599:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 600:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 601:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 602:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 603:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 604:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 605:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 606:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 607:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 608:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 609:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 610:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 611:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 612:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 613:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 614:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 615:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 616:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 617:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 618:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 619:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 620:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 621:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 622:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 624:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 625:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 626:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 627:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 628:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 629:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 630:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 631:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 632:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 634:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 635:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 636:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 637:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 639:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 640:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 641:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 642:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 643:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 644:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 645:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 646:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 647:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 648:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 649:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 650:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 651:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 652:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 654:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 655:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 656:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 657:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 658:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 659:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 660:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 661:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 662:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 663:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 664:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 665:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 666:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 667:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 668:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 669:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 670:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 674:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 675:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 677:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 678:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 679:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 681:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 682:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 683:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 684:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 685:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 686:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 687:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 688:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 689:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 690:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 691:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 692:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 693:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 694:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 695:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 698:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 699:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 700:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 701:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 703:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 704:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 706:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 707:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 708:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 709:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 710:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 711:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 712:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 713:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 714:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 715:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 716:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 717:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 719:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 720:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 721:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 722:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 723:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 726:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 728:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 732:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clksel Baudrate generator clock source.
 733:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pppen Enable 2:1 Divider for fPPP.
 734:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Divider Factor to generate fPDIV = fPPP / (pDIV + 1)
 735:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  ctqsel Input selection for CTQ.
 736:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pctq Pre-Divider for Time Quanta Counter. fCTQIN / (PCQT + 1)
 737:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  dctq Denominator for Time Quanta Counter. fTQ / (DCTQ + 1)
 738:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 739:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 741:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate generator of the USIC channel.
 742:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFractionalDivider() \n\n\n
 745:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetBaudrateDivider(XMC_USIC_CH_t *const channel, 
 747:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CLOCK_SOURCE_t clksel,
 748:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     bool pppen,
 749:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pdiv,
 750:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CTQSEL_t ctqsel,
 751:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pctq,
 752:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t dctq);
 753:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 757:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 758:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 759:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 760:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 761:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 762:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 763:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 765:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 766:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 767:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 768:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 769:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 770:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 771:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 772:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 773:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 774:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 775:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 776:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 777:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 778:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 780:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 781:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 783:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 784:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 785:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 786:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 787:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 788:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 789:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 790:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 791:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 792:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 793:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 795:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 796:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 797:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 798:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 799:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 800:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 801:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 802:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 803:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 804:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 805:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 806:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 807:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 808:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 809:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 813:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 814:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 815:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 816:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 817:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 818:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 819:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t pdiv,
 820:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t oversampling,
 821:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 822:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 823:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 824:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 825:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 826:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 827:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 828:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 829:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 830:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 831:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 832:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 833:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 834:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 835:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 836:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 837:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc.
 838:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 839:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 841:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 842:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 843:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 844:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 845:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 846:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                     ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 847:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 848:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 849:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 850:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 851:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 852:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 853:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 854:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 856:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 857:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 858:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 859:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 860:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 861:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 862:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 863:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 864:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_INSW_Msk;
 865:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 866:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 867:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 868:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 869:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 870:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 871:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 872:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 873:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 875:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 876:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 877:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 878:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 879:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 880:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 881:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 882:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 883:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 884:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 885:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 886:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 887:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 888:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 889:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 890:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 891:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 892:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 893:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 894:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 895:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 896:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 897:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 898:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 899:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 900:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 901:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 902:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 903:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 904:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 905:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 906:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 907:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 908:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 909:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 910:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 911:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 912:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 913:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 914:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 915:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 916:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 917:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 918:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 919:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 920:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 921:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 922:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 923:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 924:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 925:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 926:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 927:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 928:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 929:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 930:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 931:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 932:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 933:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 934:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 935:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 936:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 937:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 938:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 939:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 940:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 941:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 942:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 943:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 944:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 945:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 946:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 947:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 948:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 949:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 950:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 951:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 953:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 954:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 955:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 956:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 957:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &= (uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 958:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 959:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
 960:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 961:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 962:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 963:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 964:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 965:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 966:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 968:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 969:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 970:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 973:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 975:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 977:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 979:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 982:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 983:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 984:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 985:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 986:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 987:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 988:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 991:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 993:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 994:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 995:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 996:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
 997:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 998:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 999:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1000:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1001:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1002:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1003:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1004:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
1005:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
1006:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
1007:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1008:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
1010:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1011:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
1012:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1013:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
1014:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1016:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1017:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1018:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1019:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1020:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
1024:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
1025:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1026:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1027:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
1028:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1029:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
1030:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1031:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DSEN_Msk;
1032:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1033:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1037:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1038:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
1039:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1040:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1041:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1042:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
1043:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1045:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1046:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1047:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
1048:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1049:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_freq)
1050:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1051:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
1052:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
1053:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1058:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1059:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1060:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1061:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1062:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1064:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1065:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1068:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1070:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1071:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
1072:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1074:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1075:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1081:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1082:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1083:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1084:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1085:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1086:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1087:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1088:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1089:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1090:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1091:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1092:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1093:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1098:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1099:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1100:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1101:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1102:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1103:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1104:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1106:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1107:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1108:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1109:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1110:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1111:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1112:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1113:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1114:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1115:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1116:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1117:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1118:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1119:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1120:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1121:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1122:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1123:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1124:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1125:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1126:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1129:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1130:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1131:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1132:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t transmit_control_information)
1133:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1134:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1135:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1136:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1137:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1138:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1139:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1140:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1141:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1142:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1143:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1144:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1146:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1147:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1148:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1149:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1150:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1151:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1152:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1153:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1154:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1155:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1156:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1157:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1158:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1159:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1161:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1162:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1163:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1164:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1165:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1166:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1167:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1168:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1169:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1170:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1171:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1172:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1173:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1174:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1175:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1176:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1177:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1178:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1179:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1180:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1181:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1182:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value
1183:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1184:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1185:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1186:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1187:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1188:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1189:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1190:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1191:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1192:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1193:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1194:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1195:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1196:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1197:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1198:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1199:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1200:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1201:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1202:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1203:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1204:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1205:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1206:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1207:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1208:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1209:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1210:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1211:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1216:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1217:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1218:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1219:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1220:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1221:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1222:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1223:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1224:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly.
1225:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1226:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1228:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1230:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1231:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1232:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1233:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1236:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1237:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1238:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1239:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1240:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1241:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1245:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1246:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1247:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1248:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1249:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1250:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1251:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1252:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1253:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1254:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1255:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1256:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1257:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1258:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1259:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1260:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1261:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1262:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1263:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1264:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1265:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1266:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1267:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1268:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1269:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1270:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1271:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1272:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
1273:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1274:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1275:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1276:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1277:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1278:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1279:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1280:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1281:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1282:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1283:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1284:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1285:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1286:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1287:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1288:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1290:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1291:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1292:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1293:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1294:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1295:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1296:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1297:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1298:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1299:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1300:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1301:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1302:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1303:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1304:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1305:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1306:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1307:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1309:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1310:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1311:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1312:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1313:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1314:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1315:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1316:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1317:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1318:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 1318 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1319:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  43              	 .loc 1 1319 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B6B     	 ldr r3,[r3,#56]
  46 000c DBB2     	 uxtb r3,r3
  47 000e 23F07F03 	 bic r3,r3,#127
  48 0012 DBB2     	 uxtb r3,r3
1320:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
  49              	 .loc 1 1320 0
  50 0014 1846     	 mov r0,r3
  51 0016 0C37     	 adds r7,r7,#12
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 0018 BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 001a 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 001e 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE209:
  66              	 .section .text.XMC_USIC_CH_SetTransmitBufferStatus,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_USIC_CH_SetTransmitBufferStatus:
  72              	.LFB220:
1321:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1322:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1323:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1324:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1327:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1328:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1329:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1330:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1331:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1332:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1333:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1334:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte.
1335:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1336:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1337:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1338:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1339:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1340:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1341:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1342:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1343:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1344:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1345:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1346:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1347:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1348:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1349:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1350:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1351:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1352:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1353:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1354:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1355:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1356:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1357:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1358:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1359:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1360:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1361:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1362:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1363:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1364:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1365:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_START_TRANSMISION_MODE_t start_transmision_mode)
1366:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1367:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1368:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1369:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1370:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1371:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1372:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1373:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1374:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1375:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1376:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1377:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1378:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1380:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1381:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1382:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1384:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1385:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1386:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
1387:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1388:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1389:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1390:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1391:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1392:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1393:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1394:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1395:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1396:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1398:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the
1399:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1400:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1401:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1402:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1403:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1405:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1406:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1407:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1408:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1409:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1410:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1411:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1412:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1413:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1414:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1415:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1416:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1417:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1418:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1419:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1420:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1421:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of word length. \n\n
1422:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of word length is enabled, word length is configured based on the
1423:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], word length is con
1424:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1425:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1426:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1427:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1428:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1429:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1430:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableWordLengthControl(XMC_USIC_CH_t *const channel)
1431:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1432:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1433:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1434:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1435:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1436:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_WLEMD_Msk;
1437:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1438:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1439:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1440:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1443:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1444:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1445:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1446:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1447:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1448:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1449:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1451:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1452:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1453:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1454:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1455:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1456:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1457:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1458:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1459:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1460:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1461:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1462:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1463:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of word length. \n\n
1464:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of word length is disabled, word length has to configured explicitly.
1465:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Word length remains fixed until it is changed again.
1466:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1467:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1468:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetWordLength() \n\n\n
1469:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1470:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableWordLengthControl(XMC_USIC_CH_t *const channel)
1471:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1472:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_WLEMD_Msk;
1473:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1474:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1475:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1476:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1477:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1478:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1480:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1482:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1483:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1484:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1485:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1486:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1487:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1488:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1489:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1490:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1491:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1492:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1493:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1494:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1495:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1496:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1497:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1498:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1499:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1500:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1501:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1502:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1503:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1504:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1505:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1506:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1507:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1508:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1509:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1510:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1511:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1512:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1513:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1514:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1515:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1516:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1517:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1518:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1519:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be
1520:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled.
1521:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1522:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1524:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1525:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1526:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1527:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1528:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1529:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1530:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1531:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1534:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1535:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1536:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1537:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1538:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1539:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1540:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1541:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1542:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1543:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1544:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buffer_status)
1545:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
  73              	 .loc 1 1545 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 83B0     	 sub sp,sp,#12
  83              	.LCFI7:
  84              	 .cfi_def_cfa_offset 16
  85 0004 00AF     	 add r7,sp,#0
  86              	.LCFI8:
  87              	 .cfi_def_cfa_register 7
  88 0006 7860     	 str r0,[r7,#4]
  89 0008 0B46     	 mov r3,r1
  90 000a FB70     	 strb r3,[r7,#3]
1546:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
  91              	 .loc 1 1546 0
  92 000c FA78     	 ldrb r2,[r7,#3]
  93 000e 7B68     	 ldr r3,[r7,#4]
  94 0010 9A66     	 str r2,[r3,#104]
1547:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
  95              	 .loc 1 1547 0
  96 0012 0C37     	 adds r7,r7,#12
  97              	.LCFI9:
  98              	 .cfi_def_cfa_offset 4
  99 0014 BD46     	 mov sp,r7
 100              	.LCFI10:
 101              	 .cfi_def_cfa_register 13
 102              	 
 103 0016 5DF8047B 	 ldr r7,[sp],#4
 104              	.LCFI11:
 105              	 .cfi_restore 7
 106              	 .cfi_def_cfa_offset 0
 107 001a 7047     	 bx lr
 108              	 .cfi_endproc
 109              	.LFE220:
 111              	 .section .text.XMC_USIC_CH_TXFIFO_Flush,"ax",%progbits
 112              	 .align 2
 113              	 .thumb
 114              	 .thumb_func
 116              	XMC_USIC_CH_TXFIFO_Flush:
 117              	.LFB230:
1548:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1549:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1550:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1553:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1554:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1557:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1558:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1559:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1560:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1561:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_InvalidateReadData(XMC_USIC_CH_t *const channel)
1562:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1563:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = USIC_CH_FMR_CRDV0_Msk | USIC_CH_FMR_CRDV1_Msk;
1564:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1565:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1566:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1567:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1568:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1569:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1570:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1571:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1572:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1573:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1574:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1575:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1576:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the
1577:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1578:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1579:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1580:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1581:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1582:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1583:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive_level)
1584:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1585:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1586:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1587:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1588:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1589:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1590:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1591:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1592:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1593:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1594:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1595:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1596:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1597:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1598:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1599:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1600:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1601:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1602:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1603:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1604:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1605:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1606:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1607:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1608:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1609:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1610:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1611:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1612:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1613:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1614:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1615:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1616:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1617:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1618:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1619:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1620:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1621:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1622:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1623:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1624:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1625:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1626:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() }
1627:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1628:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1629:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1630:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the
1631:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1632:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1633:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1635:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1637:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1638:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
1639:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1640:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1645:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
1646:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1647:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1648:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1649:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
1650:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1651:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1653:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1654:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
1655:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
1656:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR = (channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) | ((limit << USIC_CH_TBCTR
1658:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1661:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1662:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1663:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1666:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1667:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1668:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1669:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1670:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1671:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
1672:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1673:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1675:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1676:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1677:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1678:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1679:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1680:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1681:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1682:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1683:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1684:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1685:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1686:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1687:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1688:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1689:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1690:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1691:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1692:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1693:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1694:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
1695:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent().
1696:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1697:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1698:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1699:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1700:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1701:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1702:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1703:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1705:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1710:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1711:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1712:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1713:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1714:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1715:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1716:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1717:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1718:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1719:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1720:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1721:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1722:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1723:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1724:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1725:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1727:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1728:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1729:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1730:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1731:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1732:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
1733:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1734:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1735:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1736:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1737:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1738:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1739:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1740:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1741:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1742:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1743:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1744:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1745:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1746:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1747:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1748:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1749:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1750:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1751:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1752:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1753:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1754:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1759:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1760:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param loc Input location. \n
1761:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1762:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1763:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1764:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit data can be loaded to TBUF by software by writing to the transmit buffer input
1765:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * locations TBUFx (x = 00-31), consisting of 32 consecutive addresses. The data written
1766:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * to one of these input locations is stored in the transmit buffer TBUF. Additionally, the
1767:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * address of the written location is evaluated and can be used for additional control
1768:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * purposes. This 5-bit wide information (named Transmit Control Information TCI) can be
1769:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * used for different purposes in different protocols.
1770:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1771:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableWordLengthControl() \n
1773:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1774:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1775:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataEx(XMC_USIC_CH_t *const channel, const uint16_t data
1776:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1777:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[loc] = data;
1778:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1779:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1780:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1781:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1782:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1783:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1784:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1785:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1786:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1787:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1788:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1789:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1790:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1791:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1792:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1793:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_PutDataEx() \n
1796:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1797:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1798:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1799:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1800:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1801:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1802:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1803:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1804:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1805:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1806:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1809:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1810:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1811:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1812:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1813:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1814:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1815:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1816:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1817:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1818:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1819:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1820:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1821:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1822:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1823:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1824:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1825:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1826:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1827:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1828:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1829:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1830:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1833:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1834:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1835:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1836:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1837:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1838:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1839:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1840:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1841:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1842:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 118              	 .loc 1 1842 0
 119              	 .cfi_startproc
 120              	 
 121              	 
 122              	 
 123 0000 80B4     	 push {r7}
 124              	.LCFI12:
 125              	 .cfi_def_cfa_offset 4
 126              	 .cfi_offset 7,-4
 127 0002 83B0     	 sub sp,sp,#12
 128              	.LCFI13:
 129              	 .cfi_def_cfa_offset 16
 130 0004 00AF     	 add r7,sp,#0
 131              	.LCFI14:
 132              	 .cfi_def_cfa_register 7
 133 0006 7860     	 str r0,[r7,#4]
1843:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 134              	 .loc 1 1843 0
 135 0008 7B68     	 ldr r3,[r7,#4]
 136 000a 4FF40042 	 mov r2,#32768
 137 000e C3F81821 	 str r2,[r3,#280]
1844:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 138              	 .loc 1 1844 0
 139 0012 0C37     	 adds r7,r7,#12
 140              	.LCFI15:
 141              	 .cfi_def_cfa_offset 4
 142 0014 BD46     	 mov sp,r7
 143              	.LCFI16:
 144              	 .cfi_def_cfa_register 13
 145              	 
 146 0016 5DF8047B 	 ldr r7,[sp],#4
 147              	.LCFI17:
 148              	 .cfi_restore 7
 149              	 .cfi_def_cfa_offset 0
 150 001a 7047     	 bx lr
 151              	 .cfi_endproc
 152              	.LFE230:
 154              	 .section .text.XMC_USIC_CH_TXFIFO_IsFull,"ax",%progbits
 155              	 .align 2
 156              	 .thumb
 157              	 .thumb_func
 159              	XMC_USIC_CH_TXFIFO_IsFull:
 160              	.LFB231:
1845:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1846:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1847:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1848:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1849:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1850:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1851:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1852:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1853:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1854:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1855:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1856:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1857:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1858:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1859:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1860:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1861:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 161              	 .loc 1 1861 0
 162              	 .cfi_startproc
 163              	 
 164              	 
 165              	 
 166 0000 80B4     	 push {r7}
 167              	.LCFI18:
 168              	 .cfi_def_cfa_offset 4
 169              	 .cfi_offset 7,-4
 170 0002 83B0     	 sub sp,sp,#12
 171              	.LCFI19:
 172              	 .cfi_def_cfa_offset 16
 173 0004 00AF     	 add r7,sp,#0
 174              	.LCFI20:
 175              	 .cfi_def_cfa_register 7
 176 0006 7860     	 str r0,[r7,#4]
1862:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 177              	 .loc 1 1862 0
 178 0008 7B68     	 ldr r3,[r7,#4]
 179 000a D3F81431 	 ldr r3,[r3,#276]
 180 000e 03F48053 	 and r3,r3,#4096
 181 0012 002B     	 cmp r3,#0
 182 0014 14BF     	 ite ne
 183 0016 0123     	 movne r3,#1
 184 0018 0023     	 moveq r3,#0
 185 001a DBB2     	 uxtb r3,r3
1863:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 186              	 .loc 1 1863 0
 187 001c 1846     	 mov r0,r3
 188 001e 0C37     	 adds r7,r7,#12
 189              	.LCFI21:
 190              	 .cfi_def_cfa_offset 4
 191 0020 BD46     	 mov sp,r7
 192              	.LCFI22:
 193              	 .cfi_def_cfa_register 13
 194              	 
 195 0022 5DF8047B 	 ldr r7,[sp],#4
 196              	.LCFI23:
 197              	 .cfi_restore 7
 198              	 .cfi_def_cfa_offset 0
 199 0026 7047     	 bx lr
 200              	 .cfi_endproc
 201              	.LFE231:
 203              	 .section .text.XMC_USIC_CH_TXFIFO_IsEmpty,"ax",%progbits
 204              	 .align 2
 205              	 .thumb
 206              	 .thumb_func
 208              	XMC_USIC_CH_TXFIFO_IsEmpty:
 209              	.LFB232:
1864:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1865:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1866:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1867:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1868:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1869:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1870:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1871:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1872:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1873:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1874:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO,
1875:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1876:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1877:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1878:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1879:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1880:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1881:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 210              	 .loc 1 1881 0
 211              	 .cfi_startproc
 212              	 
 213              	 
 214              	 
 215 0000 80B4     	 push {r7}
 216              	.LCFI24:
 217              	 .cfi_def_cfa_offset 4
 218              	 .cfi_offset 7,-4
 219 0002 83B0     	 sub sp,sp,#12
 220              	.LCFI25:
 221              	 .cfi_def_cfa_offset 16
 222 0004 00AF     	 add r7,sp,#0
 223              	.LCFI26:
 224              	 .cfi_def_cfa_register 7
 225 0006 7860     	 str r0,[r7,#4]
1882:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 226              	 .loc 1 1882 0
 227 0008 7B68     	 ldr r3,[r7,#4]
 228 000a D3F81431 	 ldr r3,[r3,#276]
 229 000e 03F40063 	 and r3,r3,#2048
 230 0012 002B     	 cmp r3,#0
 231 0014 14BF     	 ite ne
 232 0016 0123     	 movne r3,#1
 233 0018 0023     	 moveq r3,#0
 234 001a DBB2     	 uxtb r3,r3
1883:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 235              	 .loc 1 1883 0
 236 001c 1846     	 mov r0,r3
 237 001e 0C37     	 adds r7,r7,#12
 238              	.LCFI27:
 239              	 .cfi_def_cfa_offset 4
 240 0020 BD46     	 mov sp,r7
 241              	.LCFI28:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0022 5DF8047B 	 ldr r7,[sp],#4
 245              	.LCFI29:
 246              	 .cfi_restore 7
 247              	 .cfi_def_cfa_offset 0
 248 0026 7047     	 bx lr
 249              	 .cfi_endproc
 250              	.LFE232:
 252              	 .section .text.XMC_USIC_CH_RXFIFO_Flush,"ax",%progbits
 253              	 .align 2
 254              	 .thumb
 255              	 .thumb_func
 257              	XMC_USIC_CH_RXFIFO_Flush:
 258              	.LFB240:
1884:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1885:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1886:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1887:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1888:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n
1889:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1890:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1891:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1892:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1893:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1894:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1895:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1896:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1897:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1898:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1899:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1900:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1901:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1902:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1903:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1908:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1909:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1910:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1911:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1912:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1913:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1914:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1915:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1916:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1917:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1918:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1919:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1920:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1921:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1922:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1923:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1924:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_TBERI_Msk));
1925:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1931:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1932:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1933:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1934:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1936:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1937:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value.
1938:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1939:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of
1940:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1941:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1942:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1943:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1944:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1945:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1946:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t event)
1947:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1949:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
1950:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1951:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1952:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1953:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1954:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1955:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1956:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1957:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1958:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1959:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1960:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1961:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1962:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1963:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1964:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1965:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1966:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1967:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1968:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1969:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1970:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1971:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1972:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** */
1973:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1974:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1975:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1976:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1977:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1982:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1983:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1984:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1985:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1986:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_RXFIFO_SetTriggerLimit() }
1988:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1989:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1990:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1991:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the
1992:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1993:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
1994:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1995:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1996:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
1997:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1998:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1999:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
2000:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2001:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2002:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
2005:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
2006:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2007:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2008:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
2010:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2011:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() \n\n\n
2013:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2014:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
2015:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
2016:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
2017:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR = (channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) | ((limit << USIC_CH_RBCTR
2018:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
2019:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2020:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2021:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2022:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2023:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
2024:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2025:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2026:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2027:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
2028:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
2029:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
2030:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
2031:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2032:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
2033:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
2034:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2035:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2036:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
2037:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2038:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
2039:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
2040:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
2041:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
2042:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2043:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2044:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2045:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2046:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2047:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
2048:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
2049:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
2050:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2051:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2052:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2053:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
2054:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
2055:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent().
2056:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
2057:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
2058:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2059:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2060:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2061:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2062:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
2063:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
2064:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
2065:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
2066:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2067:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2068:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2069:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2070:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
2071:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
2072:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
2073:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
2074:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
2075:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2076:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2077:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2078:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
2079:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
2080:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
2081:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
2082:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
2083:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
2084:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
2085:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2086:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
2087:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2088:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2089:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2090:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2091:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
2092:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
2093:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
2094:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2095:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2096:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2097:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2098:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
2099:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
2100:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2101:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2102:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
2103:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
2104:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
2105:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
2106:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
2107:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2108:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2109:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
2110:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2111:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
2112:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
2113:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
2114:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
2115:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2116:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2117:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2118:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2119:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2120:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2121:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2122:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
2123:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
2124:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2125:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2126:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
2127:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2128:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
2129:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 259              	 .loc 1 2129 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	 
 264 0000 80B4     	 push {r7}
 265              	.LCFI30:
 266              	 .cfi_def_cfa_offset 4
 267              	 .cfi_offset 7,-4
 268 0002 83B0     	 sub sp,sp,#12
 269              	.LCFI31:
 270              	 .cfi_def_cfa_offset 16
 271 0004 00AF     	 add r7,sp,#0
 272              	.LCFI32:
 273              	 .cfi_def_cfa_register 7
 274 0006 7860     	 str r0,[r7,#4]
2130:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 275              	 .loc 1 2130 0
 276 0008 7B68     	 ldr r3,[r7,#4]
 277 000a 4FF48042 	 mov r2,#16384
 278 000e C3F81821 	 str r2,[r3,#280]
2131:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 279              	 .loc 1 2131 0
 280 0012 0C37     	 adds r7,r7,#12
 281              	.LCFI33:
 282              	 .cfi_def_cfa_offset 4
 283 0014 BD46     	 mov sp,r7
 284              	.LCFI34:
 285              	 .cfi_def_cfa_register 13
 286              	 
 287 0016 5DF8047B 	 ldr r7,[sp],#4
 288              	.LCFI35:
 289              	 .cfi_restore 7
 290              	 .cfi_def_cfa_offset 0
 291 001a 7047     	 bx lr
 292              	 .cfi_endproc
 293              	.LFE240:
 295              	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 296              	 .align 2
 297              	 .thumb
 298              	 .thumb_func
 300              	XMC_USIC_CH_RXFIFO_IsEmpty:
 301              	.LFB242:
2132:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2133:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2134:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
2137:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
2138:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2139:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2140:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
2141:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
2142:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
2143:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2144:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2145:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
2146:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2147:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
2148:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
2149:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
2150:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
2151:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** 
2152:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** /**
2153:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2154:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2155:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
2156:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
2157:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2158:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2159:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
2160:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
2161:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
2162:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
2163:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  *
2164:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2165:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
2166:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****  */
2167:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
2168:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** {
 302              	 .loc 1 2168 0
 303              	 .cfi_startproc
 304              	 
 305              	 
 306              	 
 307 0000 80B4     	 push {r7}
 308              	.LCFI36:
 309              	 .cfi_def_cfa_offset 4
 310              	 .cfi_offset 7,-4
 311 0002 83B0     	 sub sp,sp,#12
 312              	.LCFI37:
 313              	 .cfi_def_cfa_offset 16
 314 0004 00AF     	 add r7,sp,#0
 315              	.LCFI38:
 316              	 .cfi_def_cfa_register 7
 317 0006 7860     	 str r0,[r7,#4]
2169:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 318              	 .loc 1 2169 0
 319 0008 7B68     	 ldr r3,[r7,#4]
 320 000a D3F81431 	 ldr r3,[r3,#276]
 321 000e 03F00803 	 and r3,r3,#8
 322 0012 002B     	 cmp r3,#0
 323 0014 14BF     	 ite ne
 324 0016 0123     	 movne r3,#1
 325 0018 0023     	 moveq r3,#0
 326 001a DBB2     	 uxtb r3,r3
2170:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_usic.h **** }
 327              	 .loc 1 2170 0
 328 001c 1846     	 mov r0,r3
 329 001e 0C37     	 adds r7,r7,#12
 330              	.LCFI39:
 331              	 .cfi_def_cfa_offset 4
 332 0020 BD46     	 mov sp,r7
 333              	.LCFI40:
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 0022 5DF8047B 	 ldr r7,[sp],#4
 337              	.LCFI41:
 338              	 .cfi_restore 7
 339              	 .cfi_def_cfa_offset 0
 340 0026 7047     	 bx lr
 341              	 .cfi_endproc
 342              	.LFE242:
 344              	 .section .text.XMC_I2C_CH_GetStatusFlag,"ax",%progbits
 345              	 .align 2
 346              	 .thumb
 347              	 .thumb_func
 349              	XMC_I2C_CH_GetStatusFlag:
 350              	.LFB258:
 351              	 .file 2 "C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc/xmc_i2c.h"
   1:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  12:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  14:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  21:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  28:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  41:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Change History
  42:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * --------------
  43:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  44:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  46:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  47:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  48:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  49:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  50:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  51:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  52:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  53:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  54:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  55:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  56:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  57:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  58:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  59:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  60:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  61:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  62:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  63:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  64:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  65:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  66:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  68:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  69:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  70:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  71:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  72:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  73:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  74:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  75:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  76:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  77:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  78:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2017-10-25:
  79:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  80:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  81:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2019-05-07:
  82:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added normal_divider_mode to XMC_I2C_CH_CONFIG_t configuration structure.
  83:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  84:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetBaudrateEx()
  85:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  86:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2019-12-10:
  87:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetHoldDelay()
  88:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  89:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2020-12-05:
  90:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *    - Added XMC_I2C_CH_InitEx() that allows user select if automatic baudrate configuration shoul
  91:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  92:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @endcond
  93:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  94:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  95:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
  96:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  97:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  98:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
  99:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 100:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
 101:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 102:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 103:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
 104:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 105:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 106:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
 107:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 108:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 109:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 110:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 111:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
 112:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family.
 113:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 114:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
 115:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 116:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 117:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 118:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 119:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 120:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 121:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 122:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 123:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 124:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 125:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 126:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 127:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 128:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * MACROS
 129:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 130:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 131:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 132:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 133:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 134:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 135:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 136:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 137:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 138:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 139:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 140:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 141:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 142:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 143:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 144:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 145:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 146:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 147:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 148:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 149:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 150:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 151:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 152:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 153:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 154:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 155:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 156:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 157:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 158:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 159:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 160:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 161:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 162:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 163:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 164:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 165:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 166:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 167:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 168:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 169:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 170:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 171:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 172:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 173:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 174:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 175:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 176:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 177:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 178:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 179:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 180:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 181:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 182:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 183:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 184:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 185:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 186:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 187:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 188:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 189:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 190:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 191:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 192:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 193:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 194:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 195:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 196:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 197:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 198:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 199:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 200:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 201:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 202:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 203:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 204:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 205:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 206:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 207:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 208:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 209:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 210:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 211:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 212:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 213:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 214:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 215:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 216:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 217:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 218:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 219:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 220:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 221:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 222:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 223:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 224:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 225:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 226:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 227:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 228:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 229:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 230:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 231:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 232:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 233:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 234:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 235:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 236:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 237:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 238:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 239:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 240:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 241:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 242:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 243:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 244:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 245:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 246:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 247:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 248:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 249:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 250:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 251:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 252:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 253:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 254:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 255:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 256:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 257:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 258:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 259:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 260:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 261:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 262:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 263:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 264:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 265:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 266:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 267:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 268:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 269:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 270:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 271:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 272:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 273:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 274:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   bool normal_divider_mode; /**< Selects normal divider mode for baudrate generator instead of defa
 275:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address
 276:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 277:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 278:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 279:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 280:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 281:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 282:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 283:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 284:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 285:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** extern "C" {
 286:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 287:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 288:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 289:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 290:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 291:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param init_brg Selects if the baudrate generator should be configured automatically.
 292:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 293:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 294:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 295:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 296:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 297:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 298:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 299:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 300:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 301:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 302:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 303:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 304:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 305:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool 
 306:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 307:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 308:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 309:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 310:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 311:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 312:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 313:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 314:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 315:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 316:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 317:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 318:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 319:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 320:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 321:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 322:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 323:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const
 324:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 325:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_InitEx(channel, config, true);
 326:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 327:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 328:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 329:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 330:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 331:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 332:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 333:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 334:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 335:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 336:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 337:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 338:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 339:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 340:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 341:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 342:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 343:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 344:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 345:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 346:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 347:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 348:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 349:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 350:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 351:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 352:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 353:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 354:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 355:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 356:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 357:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 358:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 359:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 360:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 361:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool norm
 362:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 363:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 364:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 365:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 366:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 367:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 368:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 369:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 370:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 371:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 372:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 373:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 374:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 375:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 376:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 377:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 378:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 379:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 380:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 381:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 382:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 383:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 384:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 385:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 386:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 387:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 388:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 389:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 390:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 391:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 392:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 393:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 394:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 395:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 396:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 397:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 398:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 399:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 400:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 401:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 402:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 403:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 404:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 405:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 406:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 407:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 408:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 409:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 410:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 411:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 412:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 413:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 414:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 415:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 416:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 417:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****     const uint8_t service_request)
 418:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 419:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 420:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 421:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 422:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 423:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 424:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 425:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 426:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 427:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 428:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 429:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 430:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 431:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 432:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 433:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 434:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 435:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 436:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 437:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 438:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 439:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 440:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 441:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 442:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 443:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****     const XMC_I2C_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
 444:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****     const uint32_t service_request)
 445:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 446:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 447:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****                                       (uint32_t)service_request);
 448:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 449:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 450:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 451:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 452:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 453:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 454:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 455:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 456:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 457:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 458:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 459:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 460:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 461:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 462:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 463:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 464:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 465:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 466:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 467:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 468:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 469:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 470:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 471:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 472:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 473:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 474:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 475:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 476:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 477:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 478:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 479:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 480:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 481:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 482:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 483:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 484:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 485:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 486:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 487:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 488:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 489:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 490:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 491:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 492:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 493:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 494:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 495:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 496:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 497:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 498:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 499:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 500:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 501:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 502:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 503:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 504:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 505:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 506:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 507:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 508:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 509:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 510:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 511:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 512:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 513:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 514:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 515:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 516:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 517:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 518:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 519:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 520:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 521:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 522:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 523:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 524:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 525:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 526:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 527:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 528:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 529:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 530:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 531:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 532:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 533:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 534:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 535:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 536:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 537:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 538:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 539:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 540:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 541:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 542:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 543:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 544:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 545:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 546:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 547:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 548:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 549:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 550:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 551:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 552:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 553:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 554:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 555:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 556:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 557:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 558:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 559:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 560:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 561:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 562:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 563:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 564:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 565:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 566:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 567:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 568:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 569:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 570:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 571:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 572:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 573:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 574:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 575:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 576:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 577:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 578:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 579:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 580:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 581:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 582:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 583:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 584:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 585:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 586:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 587:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 588:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 589:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 590:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 591:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 592:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 593:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 594:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 595:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 596:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 597:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 598:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 599:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 600:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 601:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 602:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 603:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 604:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 605:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 606:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 607:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 608:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 609:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 610:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 611:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 612:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 613:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 614:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 615:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 616:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 617:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 618:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 619:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 620:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 621:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 622:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 623:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 624:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 625:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 626:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 627:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 628:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 629:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 630:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 631:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 632:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 633:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 634:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 635:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 636:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 637:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 638:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 639:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 640:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 641:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 642:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 643:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 644:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 645:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 646:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 647:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 648:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 649:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 650:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 651:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 652:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 653:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 654:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 655:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 656:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 657:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 658:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 659:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 660:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 661:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 662:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 663:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 664:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 665:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 666:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 667:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 668:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 669:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 670:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 671:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 672:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 673:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 674:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 675:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 676:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   return ((uint8_t)((channel->RBUF) >> 8U));
 677:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 678:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 679:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 680:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 681:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 682:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 683:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 684:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 685:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 686:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 687:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 688:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 689:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 690:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 691:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 692:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 693:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 694:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 695:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 696:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 697:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 698:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 699:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 700:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 701:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 702:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 703:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 704:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 705:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 706:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 707:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 708:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 709:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 710:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 711:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 712:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 713:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 714:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 715:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 716:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 352              	 .loc 2 716 0
 353              	 .cfi_startproc
 354              	 
 355              	 
 356              	 
 357 0000 80B4     	 push {r7}
 358              	.LCFI42:
 359              	 .cfi_def_cfa_offset 4
 360              	 .cfi_offset 7,-4
 361 0002 83B0     	 sub sp,sp,#12
 362              	.LCFI43:
 363              	 .cfi_def_cfa_offset 16
 364 0004 00AF     	 add r7,sp,#0
 365              	.LCFI44:
 366              	 .cfi_def_cfa_register 7
 367 0006 7860     	 str r0,[r7,#4]
 717:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 368              	 .loc 2 717 0
 369 0008 7B68     	 ldr r3,[r7,#4]
 370 000a 9B6C     	 ldr r3,[r3,#72]
 718:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 371              	 .loc 2 718 0
 372 000c 1846     	 mov r0,r3
 373 000e 0C37     	 adds r7,r7,#12
 374              	.LCFI45:
 375              	 .cfi_def_cfa_offset 4
 376 0010 BD46     	 mov sp,r7
 377              	.LCFI46:
 378              	 .cfi_def_cfa_register 13
 379              	 
 380 0012 5DF8047B 	 ldr r7,[sp],#4
 381              	.LCFI47:
 382              	 .cfi_restore 7
 383              	 .cfi_def_cfa_offset 0
 384 0016 7047     	 bx lr
 385              	 .cfi_endproc
 386              	.LFE258:
 388              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 389              	 .align 2
 390              	 .thumb
 391              	 .thumb_func
 393              	XMC_I2C_CH_ClearStatusFlag:
 394              	.LFB259:
 719:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** 
 720:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 721:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 722:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 723:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 724:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 725:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 726:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 727:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 728:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 729:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 730:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 731:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 732:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** {
 395              	 .loc 2 732 0
 396              	 .cfi_startproc
 397              	 
 398              	 
 399              	 
 400 0000 80B4     	 push {r7}
 401              	.LCFI48:
 402              	 .cfi_def_cfa_offset 4
 403              	 .cfi_offset 7,-4
 404 0002 83B0     	 sub sp,sp,#12
 405              	.LCFI49:
 406              	 .cfi_def_cfa_offset 16
 407 0004 00AF     	 add r7,sp,#0
 408              	.LCFI50:
 409              	 .cfi_def_cfa_register 7
 410 0006 7860     	 str r0,[r7,#4]
 411 0008 3960     	 str r1,[r7]
 733:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 412              	 .loc 2 733 0
 413 000a 7B68     	 ldr r3,[r7,#4]
 414 000c DA6C     	 ldr r2,[r3,#76]
 415 000e 3B68     	 ldr r3,[r7]
 416 0010 1A43     	 orrs r2,r2,r3
 417 0012 7B68     	 ldr r3,[r7,#4]
 418 0014 DA64     	 str r2,[r3,#76]
 734:C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/XMCLib/inc\xmc_i2c.h **** }
 419              	 .loc 2 734 0
 420 0016 0C37     	 adds r7,r7,#12
 421              	.LCFI51:
 422              	 .cfi_def_cfa_offset 4
 423 0018 BD46     	 mov sp,r7
 424              	.LCFI52:
 425              	 .cfi_def_cfa_register 13
 426              	 
 427 001a 5DF8047B 	 ldr r7,[sp],#4
 428              	.LCFI53:
 429              	 .cfi_restore 7
 430              	 .cfi_def_cfa_offset 0
 431 001e 7047     	 bx lr
 432              	 .cfi_endproc
 433              	.LFE259:
 435              	 .section .text.I2C_SLAVE_GetAppVersion,"ax",%progbits
 436              	 .align 2
 437              	 .global I2C_SLAVE_GetAppVersion
 438              	 .thumb
 439              	 .thumb_func
 441              	I2C_SLAVE_GetAppVersion:
 442              	.LFB288:
 443              	 .file 3 "../Dave/Generated/I2C_SLAVE/i2c_slave.c"
   1:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /**
   2:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @file i2c_slave.c
   3:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @date 2018-01-24
   4:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
   5:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * NOTE:
   6:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
   8:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @cond
   9:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  10:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * I2C_SLAVE v4.0.20 - Configures a USIC channel to implement I2C slave functionality.
  11:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  12:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * All rights reserved.
  14:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  15:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * following conditions are met:
  17:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  18:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *   disclaimer.
  20:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  21:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  24:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  27:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  35:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  38:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  39:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * Change History
  40:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * --------------
  41:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  42:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * 2015-08-27:
  43:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *     - Initial version for DAVEv4
  44:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  45:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * 2016-07-08:
  46:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *     - Fixed incorrect case for an included header.<br>
  47:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  48:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * 2018-01-24:
  49:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *     - Modified I2C_SLAVE_AbortTransmit() invalidating the internal transmit buffer TBUF
  50:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * 
  51:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @endcond
  52:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  53:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  */
  54:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
  55:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /**************************************************************************************************
  56:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * HEADER FILES
  57:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  58:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #include "i2c_slave.h"
  59:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
  60:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /**************************************************************************************************
  61:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * MACROS
  62:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  63:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
  64:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /**************************************************************************************************
  65:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * LOCAL DATA
  66:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  67:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
  68:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /**************************************************************************************************
  69:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * LOCAL ROUTINES
  70:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  71:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_IRQ_USED
  72:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** void I2C_SLAVE_lTransmitHandler(const I2C_SLAVE_t * const handle);
  73:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
  74:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_IRQ_USED
  75:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** void I2C_SLAVE_lReceiveHandler(const I2C_SLAVE_t * const handle);
  76:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
  77:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_ERR_IRQ_USED
  78:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** void I2C_SLAVE_lProtocolHandler(const I2C_SLAVE_t * const handle);
  79:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
  80:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_IRQ_USED
  81:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** static void I2C_SLAVE_lReconfigureRxFIFO(const I2C_SLAVE_t * const handle, uint32_t count);
  82:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
  83:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_DIRECT_USED
  84:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** static I2C_SLAVE_STATUS_t I2C_SLAVE_lStartTransmitPolling(const I2C_SLAVE_t * const handle, uint8_t
  85:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
  86:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_DIRECT_USED
  87:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** static I2C_SLAVE_STATUS_t I2C_SLAVE_lStartReceivePolling(const I2C_SLAVE_t * const handle, uint8_t 
  88:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
  89:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /**************************************************************************************************
  90:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * API IMPLEMENTATION
  91:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  **************************************************************************************************
  92:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
  93:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*
  94:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @brief API to retrieve the version of the I2C_SLAVE APP.
  95:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
  96:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @return DAVE_APP_VERSION_t Structure containing major version, minor version
  97:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *         and patch version.
  98:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  */
  99:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** DAVE_APP_VERSION_t I2C_SLAVE_GetAppVersion()
 100:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 444              	 .loc 3 100 0
 445              	 .cfi_startproc
 446              	 
 447              	 
 448              	 
 449 0000 80B4     	 push {r7}
 450              	.LCFI54:
 451              	 .cfi_def_cfa_offset 4
 452              	 .cfi_offset 7,-4
 453 0002 83B0     	 sub sp,sp,#12
 454              	.LCFI55:
 455              	 .cfi_def_cfa_offset 16
 456 0004 00AF     	 add r7,sp,#0
 457              	.LCFI56:
 458              	 .cfi_def_cfa_register 7
 101:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   DAVE_APP_VERSION_t version;
 102:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 103:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   version.major = I2C_SLAVE_MAJOR_VERSION;
 459              	 .loc 3 103 0
 460 0006 0423     	 movs r3,#4
 461 0008 3B70     	 strb r3,[r7]
 104:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   version.minor = I2C_SLAVE_MINOR_VERSION;
 462              	 .loc 3 104 0
 463 000a 0023     	 movs r3,#0
 464 000c 7B70     	 strb r3,[r7,#1]
 105:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   version.patch = I2C_SLAVE_PATCH_VERSION;
 465              	 .loc 3 105 0
 466 000e 1423     	 movs r3,#20
 467 0010 BB70     	 strb r3,[r7,#2]
 106:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 107:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return version;
 468              	 .loc 3 107 0
 469 0012 3B1D     	 adds r3,r7,#4
 470 0014 3A46     	 mov r2,r7
 471 0016 1268     	 ldr r2,[r2]
 472 0018 1146     	 mov r1,r2
 473 001a 1980     	 strh r1,[r3]
 474 001c 0233     	 adds r3,r3,#2
 475 001e 120C     	 lsrs r2,r2,#16
 476 0020 1A70     	 strb r2,[r3]
 477 0022 0023     	 movs r3,#0
 478 0024 3A79     	 ldrb r2,[r7,#4]
 479 0026 62F30703 	 bfi r3,r2,#0,#8
 480 002a 7A79     	 ldrb r2,[r7,#5]
 481 002c 62F30F23 	 bfi r3,r2,#8,#8
 482 0030 BA79     	 ldrb r2,[r7,#6]
 483 0032 62F31743 	 bfi r3,r2,#16,#8
 108:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 484              	 .loc 3 108 0
 485 0036 1846     	 mov r0,r3
 486 0038 0C37     	 adds r7,r7,#12
 487              	.LCFI57:
 488              	 .cfi_def_cfa_offset 4
 489 003a BD46     	 mov sp,r7
 490              	.LCFI58:
 491              	 .cfi_def_cfa_register 13
 492              	 
 493 003c 5DF8047B 	 ldr r7,[sp],#4
 494              	.LCFI59:
 495              	 .cfi_restore 7
 496              	 .cfi_def_cfa_offset 0
 497 0040 7047     	 bx lr
 498              	 .cfi_endproc
 499              	.LFE288:
 501 0042 00BF     	 .section .text.I2C_SLAVE_Init,"ax",%progbits
 502              	 .align 2
 503              	 .global I2C_SLAVE_Init
 504              	 .thumb
 505              	 .thumb_func
 507              	I2C_SLAVE_Init:
 508              	.LFB289:
 109:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 110:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*
 111:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @brief Function to initialize the USIC Channel with GUI configured values.
 112:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
 113:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @param[in]  handle I2C_SLAVE APP handle pointer of type I2C_SLAVE_t*
 114:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
 115:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  * @return  I2C_SLAVE_STATUS_t
 116:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *          I2C_SLAVE_SUCCESS: for successful I2C_SLAVE initialization.<BR>
 117:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *          I2C_SLAVE_STATUS_FAILURE  : If I2C_SLAVE initialization fails.<BR>
 118:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  *
 119:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****  */
 120:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_Init(const I2C_SLAVE_t *const handle)
 121:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 509              	 .loc 3 121 0
 510              	 .cfi_startproc
 511              	 
 512              	 
 513 0000 80B5     	 push {r7,lr}
 514              	.LCFI60:
 515              	 .cfi_def_cfa_offset 8
 516              	 .cfi_offset 7,-8
 517              	 .cfi_offset 14,-4
 518 0002 84B0     	 sub sp,sp,#16
 519              	.LCFI61:
 520              	 .cfi_def_cfa_offset 24
 521 0004 00AF     	 add r7,sp,#0
 522              	.LCFI62:
 523              	 .cfi_def_cfa_register 7
 524 0006 7860     	 str r0,[r7,#4]
 122:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_SUCCESS;
 525              	 .loc 3 122 0
 526 0008 0023     	 movs r3,#0
 527 000a FB73     	 strb r3,[r7,#15]
 123:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_Init : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 124:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (handle->config != NULL)) &&((handle->config->fptr_i2c_slave_config != NULL)&&
 125:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (handle->runtime != NULL))));
 126:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   /*Initialize the multiplexers required for I2C_SLAVE configuration*/
 127:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if (status == I2C_SLAVE_STATUS_SUCCESS)
 528              	 .loc 3 127 0
 529 000c FB7B     	 ldrb r3,[r7,#15]
 530 000e 002B     	 cmp r3,#0
 531 0010 05D1     	 bne .L18
 128:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 129:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = handle->config->fptr_i2c_slave_config();
 532              	 .loc 3 129 0
 533 0012 7B68     	 ldr r3,[r7,#4]
 534 0014 5B68     	 ldr r3,[r3,#4]
 535 0016 5B68     	 ldr r3,[r3,#4]
 536 0018 9847     	 blx r3
 537 001a 0346     	 mov r3,r0
 538 001c FB73     	 strb r3,[r7,#15]
 539              	.L18:
 130:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 131:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 132:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 540              	 .loc 3 132 0
 541 001e FB7B     	 ldrb r3,[r7,#15]
 133:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 542              	 .loc 3 133 0
 543 0020 1846     	 mov r0,r3
 544 0022 1037     	 adds r7,r7,#16
 545              	.LCFI63:
 546              	 .cfi_def_cfa_offset 8
 547 0024 BD46     	 mov sp,r7
 548              	.LCFI64:
 549              	 .cfi_def_cfa_register 13
 550              	 
 551 0026 80BD     	 pop {r7,pc}
 552              	 .cfi_endproc
 553              	.LFE289:
 555              	 .section .text.I2C_SLAVE_Transmit,"ax",%progbits
 556              	 .align 2
 557              	 .global I2C_SLAVE_Transmit
 558              	 .thumb
 559              	 .thumb_func
 561              	I2C_SLAVE_Transmit:
 562              	.LFB290:
 134:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 135:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /* Function to transmit the data as a slave device */
 136:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_Transmit(const I2C_SLAVE_t * const handle, uint8_t *data, const uint32
 137:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 563              	 .loc 3 137 0
 564              	 .cfi_startproc
 565              	 
 566              	 
 567 0000 80B5     	 push {r7,lr}
 568              	.LCFI65:
 569              	 .cfi_def_cfa_offset 8
 570              	 .cfi_offset 7,-8
 571              	 .cfi_offset 14,-4
 572 0002 86B0     	 sub sp,sp,#24
 573              	.LCFI66:
 574              	 .cfi_def_cfa_offset 32
 575 0004 00AF     	 add r7,sp,#0
 576              	.LCFI67:
 577              	 .cfi_def_cfa_register 7
 578 0006 F860     	 str r0,[r7,#12]
 579 0008 B960     	 str r1,[r7,#8]
 580 000a 7A60     	 str r2,[r7,#4]
 138:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 581              	 .loc 3 138 0
 582 000c 0423     	 movs r3,#4
 583 000e FB75     	 strb r3,[r7,#23]
 139:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 140:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   switch(handle->config->transmit_mode)
 584              	 .loc 3 140 0
 585 0010 FB68     	 ldr r3,[r7,#12]
 586 0012 5B68     	 ldr r3,[r3,#4]
 587 0014 93F82030 	 ldrb r3,[r3,#32]
 588 0018 022B     	 cmp r3,#2
 589 001a 00D0     	 beq .L22
 141:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 142:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_IRQ_USED
 143:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_INTERRUPT:
 144:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_StartTransmitIRQ(handle, data, count);
 145:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 146:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 147:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_DMA_USED
 148:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_DMA:
 149:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_StartTransmitDMA(handle, data, count);
 150:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 151:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 152:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_DIRECT_USED
 153:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_DIRECT:
 154:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 155:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL)&&(count > 0U))
 156:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 157:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       status = I2C_SLAVE_STATUS_BUSY;
 158:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(handle->runtime->tx_busy == false)
 159:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 160:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         status = I2C_SLAVE_lStartTransmitPolling(handle, data, count);
 161:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 162:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 163:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 164:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 165:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   default:
 166:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 590              	 .loc 3 166 0
 591 001c 1BE0     	 b .L24
 592              	.L22:
 154:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL)&&(count > 0U))
 593              	 .loc 3 154 0
 594 001e 0323     	 movs r3,#3
 595 0020 FB75     	 strb r3,[r7,#23]
 155:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 596              	 .loc 3 155 0
 597 0022 BB68     	 ldr r3,[r7,#8]
 598 0024 002B     	 cmp r3,#0
 599 0026 15D0     	 beq .L23
 155:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 600              	 .loc 3 155 0 is_stmt 0 discriminator 1
 601 0028 7B68     	 ldr r3,[r7,#4]
 602 002a 002B     	 cmp r3,#0
 603 002c 12D0     	 beq .L23
 157:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(handle->runtime->tx_busy == false)
 604              	 .loc 3 157 0 is_stmt 1
 605 002e 0223     	 movs r3,#2
 606 0030 FB75     	 strb r3,[r7,#23]
 158:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 607              	 .loc 3 158 0
 608 0032 FB68     	 ldr r3,[r7,#12]
 609 0034 9B68     	 ldr r3,[r3,#8]
 610 0036 1B7E     	 ldrb r3,[r3,#24]
 611 0038 DBB2     	 uxtb r3,r3
 612 003a 83F00103 	 eor r3,r3,#1
 613 003e DBB2     	 uxtb r3,r3
 614 0040 002B     	 cmp r3,#0
 615 0042 07D0     	 beq .L23
 160:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 616              	 .loc 3 160 0
 617 0044 F868     	 ldr r0,[r7,#12]
 618 0046 B968     	 ldr r1,[r7,#8]
 619 0048 7A68     	 ldr r2,[r7,#4]
 620 004a FFF7FEFF 	 bl I2C_SLAVE_lStartTransmitPolling
 621 004e 0346     	 mov r3,r0
 622 0050 FB75     	 strb r3,[r7,#23]
 163:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 623              	 .loc 3 163 0
 624 0052 FFE7     	 b .L26
 625              	.L23:
 626              	.L26:
 627 0054 00BF     	 nop
 628              	.L24:
 167:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 168:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 169:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return (status);
 629              	 .loc 3 169 0
 630 0056 FB7D     	 ldrb r3,[r7,#23]
 170:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** } /* end of function */
 631              	 .loc 3 170 0
 632 0058 1846     	 mov r0,r3
 633 005a 1837     	 adds r7,r7,#24
 634              	.LCFI68:
 635              	 .cfi_def_cfa_offset 8
 636 005c BD46     	 mov sp,r7
 637              	.LCFI69:
 638              	 .cfi_def_cfa_register 13
 639              	 
 640 005e 80BD     	 pop {r7,pc}
 641              	 .cfi_endproc
 642              	.LFE290:
 644              	 .section .text.I2C_SLAVE_Receive,"ax",%progbits
 645              	 .align 2
 646              	 .global I2C_SLAVE_Receive
 647              	 .thumb
 648              	 .thumb_func
 650              	I2C_SLAVE_Receive:
 651              	.LFB291:
 171:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 172:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 173:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*Function to receive data from a master device*/
 174:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_Receive(const I2C_SLAVE_t * const handle, uint8_t * data, uint32_t cou
 175:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 652              	 .loc 3 175 0
 653              	 .cfi_startproc
 654              	 
 655              	 
 656 0000 80B5     	 push {r7,lr}
 657              	.LCFI70:
 658              	 .cfi_def_cfa_offset 8
 659              	 .cfi_offset 7,-8
 660              	 .cfi_offset 14,-4
 661 0002 86B0     	 sub sp,sp,#24
 662              	.LCFI71:
 663              	 .cfi_def_cfa_offset 32
 664 0004 00AF     	 add r7,sp,#0
 665              	.LCFI72:
 666              	 .cfi_def_cfa_register 7
 667 0006 F860     	 str r0,[r7,#12]
 668 0008 B960     	 str r1,[r7,#8]
 669 000a 7A60     	 str r2,[r7,#4]
 176:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 670              	 .loc 3 176 0
 671 000c 0423     	 movs r3,#4
 672 000e FB75     	 strb r3,[r7,#23]
 177:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 178:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   switch(handle->config->receive_mode)
 673              	 .loc 3 178 0
 674 0010 FB68     	 ldr r3,[r7,#12]
 675 0012 5B68     	 ldr r3,[r3,#4]
 676 0014 93F82130 	 ldrb r3,[r3,#33]
 677 0018 022B     	 cmp r3,#2
 678 001a 00D0     	 beq .L29
 179:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 180:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_IRQ_USED
 181:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_INTERRUPT:
 182:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_StartReceiveIRQ(handle, data, count);
 183:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 184:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 185:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_DMA_USED
 186:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_DMA:
 187:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_StartReceiveDMA(handle, data, count);
 188:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 189:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 190:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_DIRECT_USED
 191:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_DIRECT:
 192:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 193:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL)&&(count > 0U))
 194:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 195:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       status = I2C_SLAVE_STATUS_BUSY;
 196:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(handle->runtime->rx_busy == false)
 197:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 198:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         status = I2C_SLAVE_lStartReceivePolling(handle, data, count);
 199:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 200:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 201:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 202:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 203:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   default:
 204:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 679              	 .loc 3 204 0
 680 001c 1BE0     	 b .L31
 681              	.L29:
 192:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL)&&(count > 0U))
 682              	 .loc 3 192 0
 683 001e 0323     	 movs r3,#3
 684 0020 FB75     	 strb r3,[r7,#23]
 193:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 685              	 .loc 3 193 0
 686 0022 BB68     	 ldr r3,[r7,#8]
 687 0024 002B     	 cmp r3,#0
 688 0026 15D0     	 beq .L30
 193:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 689              	 .loc 3 193 0 is_stmt 0 discriminator 1
 690 0028 7B68     	 ldr r3,[r7,#4]
 691 002a 002B     	 cmp r3,#0
 692 002c 12D0     	 beq .L30
 195:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(handle->runtime->rx_busy == false)
 693              	 .loc 3 195 0 is_stmt 1
 694 002e 0223     	 movs r3,#2
 695 0030 FB75     	 strb r3,[r7,#23]
 196:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 696              	 .loc 3 196 0
 697 0032 FB68     	 ldr r3,[r7,#12]
 698 0034 9B68     	 ldr r3,[r3,#8]
 699 0036 5B7E     	 ldrb r3,[r3,#25]
 700 0038 DBB2     	 uxtb r3,r3
 701 003a 83F00103 	 eor r3,r3,#1
 702 003e DBB2     	 uxtb r3,r3
 703 0040 002B     	 cmp r3,#0
 704 0042 07D0     	 beq .L30
 198:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 705              	 .loc 3 198 0
 706 0044 F868     	 ldr r0,[r7,#12]
 707 0046 B968     	 ldr r1,[r7,#8]
 708 0048 7A68     	 ldr r2,[r7,#4]
 709 004a FFF7FEFF 	 bl I2C_SLAVE_lStartReceivePolling
 710 004e 0346     	 mov r3,r0
 711 0050 FB75     	 strb r3,[r7,#23]
 201:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 712              	 .loc 3 201 0
 713 0052 FFE7     	 b .L33
 714              	.L30:
 715              	.L33:
 716 0054 00BF     	 nop
 717              	.L31:
 205:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 206:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 207:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return (status);
 718              	 .loc 3 207 0
 719 0056 FB7D     	 ldrb r3,[r7,#23]
 208:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 720              	 .loc 3 208 0
 721 0058 1846     	 mov r0,r3
 722 005a 1837     	 adds r7,r7,#24
 723              	.LCFI73:
 724              	 .cfi_def_cfa_offset 8
 725 005c BD46     	 mov sp,r7
 726              	.LCFI74:
 727              	 .cfi_def_cfa_register 13
 728              	 
 729 005e 80BD     	 pop {r7,pc}
 730              	 .cfi_endproc
 731              	.LFE291:
 733              	 .section .text.I2C_SLAVE_AbortTransmit,"ax",%progbits
 734              	 .align 2
 735              	 .global I2C_SLAVE_AbortTransmit
 736              	 .thumb
 737              	 .thumb_func
 739              	I2C_SLAVE_AbortTransmit:
 740              	.LFB292:
 209:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 210:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_IRQ_USED
 211:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*Interrupt based data transmit function*/
 212:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_StartTransmitIRQ(const I2C_SLAVE_t * const handle, uint8_t *data, cons
 213:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 214:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 215:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 216:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_CONFIG_t * ptr_config = handle->config;
 217:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 218:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_StartTransmitIRQ : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 219:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (ptr_config != NULL)) && (ptr_runtime != NULL)));
 220:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 221:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->transmit_mode == I2C_SLAVE_TRANSFER_MODE_INTERRUPT)
 222:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 223:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 224:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL) && (size > 0U))
 225:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 226:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       status = I2C_SLAVE_STATUS_BUSY;
 227:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(ptr_runtime->tx_busy == false)
 228:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 229:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         if(ptr_config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 230:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         {
 231:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 232:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_S
 233:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         }
 234:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         else
 235:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         {
 236:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_I2C_CH_EnableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_TRANSMIT_BUFFER);
 237:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         }
 238:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->tx_busy = true;
 239:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->tx_data = data;
 240:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->tx_data_count = size;
 241:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->tx_data_index = 0U;
 242:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_config->tx_sr);
 243:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 244:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 245:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 246:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 247:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 248:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 249:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 250:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_IRQ_USED
 251:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*Interrupt based data reception function*/
 252:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_StartReceiveIRQ(const I2C_SLAVE_t * const handle, uint8_t *data, const
 253:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 254:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 255:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 256:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_CONFIG_t * ptr_config = handle->config;
 257:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 258:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_StartReceiveIRQ : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 259:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (ptr_config != NULL)) && (ptr_runtime != NULL)));
 260:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 261:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->receive_mode == I2C_SLAVE_TRANSFER_MODE_INTERRUPT)
 262:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 263:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 264:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL) && (size > 0U))
 265:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 266:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       status = I2C_SLAVE_STATUS_BUSY;
 267:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(ptr_runtime->rx_busy == false)
 268:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 269:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->rx_busy = true;
 270:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->rx_data = data;
 271:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->rx_data_count = size;
 272:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->rx_data_index = 0U;
 273:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 274:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         /*Flush receive buffer*/
 275:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         (void)XMC_I2C_CH_GetReceivedData(handle->channel);
 276:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         (void)XMC_I2C_CH_GetReceivedData(handle->channel);
 277:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 278:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         if(ptr_config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 279:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         {
 280:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 281:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           I2C_SLAVE_lReconfigureRxFIFO(handle, size);
 282:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel, ((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_
 283:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         }
 284:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         else
 285:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         {
 286:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_I2C_CH_EnableEvent(handle->channel, ((uint32_t)XMC_I2C_CH_EVENT_STANDARD_RECEIVE | (u
 287:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         }
 288:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 289:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 290:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 291:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 292:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 293:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 294:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** static void I2C_SLAVE_lReconfigureRxFIFO(const I2C_SLAVE_t * const handle, uint32_t count)
 295:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 296:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   uint32_t fifo_size;
 297:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   uint32_t ret_limit_val = 0U;
 298:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 299:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   /*Get FIFO size in bytes*/
 300:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rxFIFO_size));
 301:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   /*If data size is more than FIFO size, configure the limit to the FIFO size*/
 302:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if (count < fifo_size)
 303:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 304:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ret_limit_val = (uint32_t)(count - 1U);
 305:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 306:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   else
 307:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 308:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ret_limit_val = (uint32_t)(fifo_size - 1U);
 309:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 310:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   /*Set the limit value*/
 311:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 312:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         handle->config->rxFIFO_size, ret_limit_val);
 313:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 314:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 315:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 316:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_DMA_USED
 317:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_StartTransmitDMA(const I2C_SLAVE_t * const handle, uint8_t *data, cons
 318:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 319:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 320:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 321:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const GLOBAL_DMA_t * ptr_dma_config = handle->config->global_dma;
 322:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_DMA_CONFIG_t * ptr_tx_dma_config = handle->config->transmit_dma_config;
 323:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 324:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_StartTransmitDMA : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 325:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (ptr_dma_config != NULL) && (ptr_tx_dma_config != NULL)) && (ptr_runtime != NULL)));
 326:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 327:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(handle->config->transmit_mode == I2C_SLAVE_TRANSFER_MODE_DMA)
 328:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 329:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 330:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL) && (size > 0U) && (size <= I2C_SLAVE_DMA_MAXCOUNT))
 331:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 332:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       status = I2C_SLAVE_STATUS_BUSY;
 333:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(ptr_runtime->tx_busy == false)
 334:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 335:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_USIC_CH_SetTransmitBufferStatus(handle->channel, XMC_USIC_CH_TBUF_STATUS_SET_IDLE);
 336:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         if(size > 1U)
 337:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         {
 338:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           ptr_runtime->tx_busy = true;
 339:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           /*Set the address of second byte*/
 340:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_DMA_CH_SetSourceAddress((XMC_DMA_t *)ptr_dma_config->dma, ptr_tx_dma_config->dma_chan
 341:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_DMA_CH_SetDestinationAddress((XMC_DMA_t *)ptr_dma_config->dma, ptr_tx_dma_config->dma
 342:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_DMA_CH_SetBlockSize((XMC_DMA_t *)ptr_dma_config->dma, ptr_tx_dma_config->dma_channel,
 343:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_I2C_CH_EnableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_TRANSMIT_BUFFER);
 344:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           XMC_DMA_CH_Enable((XMC_DMA_t *)ptr_dma_config->dma, ptr_tx_dma_config->dma_channel);
 345:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         }
 346:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         /*Transmit first byte separately and set the TDF code*/
 347:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         I2C_SLAVE_TransmitByte(handle, data[0U]);
 348:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 349:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         /*Excute callback function if size is 1*/
 350:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         if((size == 1U) && (handle->config->tx_cbhandler != NULL))
 351:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         {
 352:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           handle->config->tx_cbhandler();
 353:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         }
 354:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         status = I2C_SLAVE_STATUS_SUCCESS;
 355:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 356:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 357:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 358:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 359:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 360:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 361:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 362:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_DMA_USED
 363:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_StartReceiveDMA(const I2C_SLAVE_t * const handle, uint8_t *data, const
 364:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 365:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 366:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 367:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const GLOBAL_DMA_t * ptr_dma_config = handle->config->global_dma;
 368:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_DMA_CONFIG_t * ptr_rx_dma_config = handle->config->receive_dma_config;
 369:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 370:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_StartReceiveDMA : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 371:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (ptr_dma_config != NULL) && (ptr_rx_dma_config != NULL)) && (ptr_runtime != NULL)));
 372:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 373:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(handle->config->receive_mode == I2C_SLAVE_TRANSFER_MODE_DMA)
 374:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 375:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 376:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if((data != NULL) && (size > 0U) && (size <= I2C_SLAVE_DMA_MAXCOUNT))
 377:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 378:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       status = I2C_SLAVE_STATUS_BUSY;
 379:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       if(ptr_runtime->rx_busy == false)
 380:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 381:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_DMA_CH_SetSourceAddress((XMC_DMA_t *)ptr_dma_config->dma, ptr_rx_dma_config->dma_channe
 382:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_DMA_CH_SetDestinationAddress((XMC_DMA_t *)ptr_dma_config->dma, ptr_rx_dma_config->dma_c
 383:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_DMA_CH_SetBlockSize((XMC_DMA_t *)ptr_dma_config->dma, ptr_rx_dma_config->dma_channel, s
 384:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ptr_runtime->rx_busy = true;
 385:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_I2C_CH_EnableEvent(handle->channel, ((uint32_t)XMC_I2C_CH_EVENT_STANDARD_RECEIVE | (uin
 386:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         XMC_DMA_CH_Enable((XMC_DMA_t *)ptr_dma_config->dma, ptr_rx_dma_config->dma_channel);
 387:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         status = I2C_SLAVE_STATUS_SUCCESS;
 388:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 389:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 390:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 391:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 392:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 393:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 394:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 395:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*API for aborting transmission*/
 396:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_AbortTransmit(const I2C_SLAVE_t * const handle)
 397:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 741              	 .loc 3 397 0
 742              	 .cfi_startproc
 743              	 
 744              	 
 745              	 
 746 0000 80B4     	 push {r7}
 747              	.LCFI75:
 748              	 .cfi_def_cfa_offset 4
 749              	 .cfi_offset 7,-4
 750 0002 87B0     	 sub sp,sp,#28
 751              	.LCFI76:
 752              	 .cfi_def_cfa_offset 32
 753 0004 00AF     	 add r7,sp,#0
 754              	.LCFI77:
 755              	 .cfi_def_cfa_register 7
 756 0006 7860     	 str r0,[r7,#4]
 398:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 757              	 .loc 3 398 0
 758 0008 0423     	 movs r3,#4
 759 000a FB75     	 strb r3,[r7,#23]
 399:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 760              	 .loc 3 399 0
 761 000c 7B68     	 ldr r3,[r7,#4]
 762 000e 9B68     	 ldr r3,[r3,#8]
 763 0010 3B61     	 str r3,[r7,#16]
 400:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_CONFIG_t * ptr_config = handle->config;
 764              	 .loc 3 400 0
 765 0012 7B68     	 ldr r3,[r7,#4]
 766 0014 5B68     	 ldr r3,[r3,#4]
 767 0016 FB60     	 str r3,[r7,#12]
 401:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_AbortTransmit : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 402:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (ptr_config != NULL)) && (handle->runtime != NULL)));
 403:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 404:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   switch(ptr_config->transmit_mode)
 405:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 406:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_IRQ_USED
 407:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_INTERRUPT:
 408:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if(ptr_config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 409:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 410:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 411:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 412:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     else
 413:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 414:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       XMC_I2C_CH_DisableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_TRANSMIT_BUFFER);
 415:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 416:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 417:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 418:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_DMA_USED
 419:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_DMA:
 420:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     /*Disable DMA channel*/
 421:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_DMA_CH_Disable(ptr_config->global_dma->dma, ptr_config->transmit_dma_config->dma_channel);
 422:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_I2C_CH_DisableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_TRANSMIT_BUFFER);
 423:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 424:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 425:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   default:
 426:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 768              	 .loc 3 426 0
 769 0018 00BF     	 nop
 427:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 428:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 429:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->transmit_mode != I2C_SLAVE_TRANSFER_MODE_DIRECT)
 770              	 .loc 3 429 0
 771 001a FB68     	 ldr r3,[r7,#12]
 772 001c 93F82030 	 ldrb r3,[r3,#32]
 773 0020 022B     	 cmp r3,#2
 774 0022 0DD0     	 beq .L35
 430:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 431:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->tx_busy = false;
 775              	 .loc 3 431 0
 776 0024 3B69     	 ldr r3,[r7,#16]
 777 0026 0022     	 movs r2,#0
 778 0028 1A76     	 strb r2,[r3,#24]
 432:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->tx_data = NULL;
 779              	 .loc 3 432 0
 780 002a 3B69     	 ldr r3,[r7,#16]
 781 002c 0022     	 movs r2,#0
 782 002e 1A60     	 str r2,[r3]
 433:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->tx_data_count = 0U;
 783              	 .loc 3 433 0
 784 0030 3B69     	 ldr r3,[r7,#16]
 785 0032 0022     	 movs r2,#0
 786 0034 9A60     	 str r2,[r3,#8]
 434:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->tx_data_index = 0U;
 787              	 .loc 3 434 0
 788 0036 3B69     	 ldr r3,[r7,#16]
 789 0038 0022     	 movs r2,#0
 790 003a DA60     	 str r2,[r3,#12]
 435:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_SUCCESS;
 791              	 .loc 3 435 0
 792 003c 0023     	 movs r3,#0
 793 003e FB75     	 strb r3,[r7,#23]
 794              	.L35:
 436:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 437:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 438:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 795              	 .loc 3 438 0
 796 0040 7B68     	 ldr r3,[r7,#4]
 797 0042 1B68     	 ldr r3,[r3]
 798 0044 7A68     	 ldr r2,[r7,#4]
 799 0046 1268     	 ldr r2,[r2]
 800 0048 D26C     	 ldr r2,[r2,#76]
 801 004a 42F00202 	 orr r2,r2,#2
 802 004e DA64     	 str r2,[r3,#76]
 439:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   handle->channel->FMR = 0x00000002U;/*clear TDV*/
 803              	 .loc 3 439 0
 804 0050 7B68     	 ldr r3,[r7,#4]
 805 0052 1B68     	 ldr r3,[r3]
 806 0054 0222     	 movs r2,#2
 807 0056 9A66     	 str r2,[r3,#104]
 440:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 441:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 808              	 .loc 3 441 0
 809 0058 FB7D     	 ldrb r3,[r7,#23]
 442:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 810              	 .loc 3 442 0
 811 005a 1846     	 mov r0,r3
 812 005c 1C37     	 adds r7,r7,#28
 813              	.LCFI78:
 814              	 .cfi_def_cfa_offset 4
 815 005e BD46     	 mov sp,r7
 816              	.LCFI79:
 817              	 .cfi_def_cfa_register 13
 818              	 
 819 0060 5DF8047B 	 ldr r7,[sp],#4
 820              	.LCFI80:
 821              	 .cfi_restore 7
 822              	 .cfi_def_cfa_offset 0
 823 0064 7047     	 bx lr
 824              	 .cfi_endproc
 825              	.LFE292:
 827 0066 00BF     	 .section .text.I2C_SLAVE_AbortReceive,"ax",%progbits
 828              	 .align 2
 829              	 .global I2C_SLAVE_AbortReceive
 830              	 .thumb
 831              	 .thumb_func
 833              	I2C_SLAVE_AbortReceive:
 834              	.LFB293:
 443:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 444:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** /*API for aborting transmission*/
 445:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** I2C_SLAVE_STATUS_t I2C_SLAVE_AbortReceive(const I2C_SLAVE_t * const handle)
 446:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 835              	 .loc 3 446 0
 836              	 .cfi_startproc
 837              	 
 838              	 
 839              	 
 840 0000 80B4     	 push {r7}
 841              	.LCFI81:
 842              	 .cfi_def_cfa_offset 4
 843              	 .cfi_offset 7,-4
 844 0002 87B0     	 sub sp,sp,#28
 845              	.LCFI82:
 846              	 .cfi_def_cfa_offset 32
 847 0004 00AF     	 add r7,sp,#0
 848              	.LCFI83:
 849              	 .cfi_def_cfa_register 7
 850 0006 7860     	 str r0,[r7,#4]
 447:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_MODE_MISMATCH;
 851              	 .loc 3 447 0
 852 0008 0423     	 movs r3,#4
 853 000a FB75     	 strb r3,[r7,#23]
 448:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 854              	 .loc 3 448 0
 855 000c 7B68     	 ldr r3,[r7,#4]
 856 000e 9B68     	 ldr r3,[r3,#8]
 857 0010 3B61     	 str r3,[r7,#16]
 449:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_CONFIG_t * ptr_config = handle->config;
 858              	 .loc 3 449 0
 859 0012 7B68     	 ldr r3,[r7,#4]
 860 0014 5B68     	 ldr r3,[r3,#4]
 861 0016 FB60     	 str r3,[r7,#12]
 450:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_ASSERT("I2C_SLAVE_AbortReceive : I2C_SLAVE APP handle invalid", (((handle != NULL)&&
 451:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       (ptr_config != NULL)) && (handle->runtime != NULL)));
 452:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 453:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   switch(ptr_config->receive_mode)
 454:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 455:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_IRQ_USED
 456:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_INTERRUPT:
 457:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if(ptr_config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 458:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 459:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 460:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD | (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF
 461:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 462:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     else
 463:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 464:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       XMC_I2C_CH_DisableEvent(handle->channel,
 465:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****               ((uint32_t)XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_I2C_CH_EVENT_STANDARD
 466:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 467:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 468:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 469:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_DMA_USED
 470:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   case I2C_SLAVE_TRANSFER_MODE_DMA:
 471:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     /*Disable DMA channel*/
 472:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_DMA_CH_Disable(ptr_config->global_dma->dma, ptr_config->receive_dma_config->dma_channel);
 473:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_I2C_CH_DisableEvent(handle->channel,
 474:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****             ((uint32_t)XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_I2C_CH_EVENT_STANDARD_R
 475:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 476:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 477:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   default:
 478:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     break;
 862              	 .loc 3 478 0
 863 0018 00BF     	 nop
 479:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 480:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 481:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->receive_mode != I2C_SLAVE_TRANSFER_MODE_DIRECT)
 864              	 .loc 3 481 0
 865 001a FB68     	 ldr r3,[r7,#12]
 866 001c 93F82130 	 ldrb r3,[r3,#33]
 867 0020 022B     	 cmp r3,#2
 868 0022 0DD0     	 beq .L38
 482:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 483:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->rx_busy = false;
 869              	 .loc 3 483 0
 870 0024 3B69     	 ldr r3,[r7,#16]
 871 0026 0022     	 movs r2,#0
 872 0028 5A76     	 strb r2,[r3,#25]
 484:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->rx_data = NULL;
 873              	 .loc 3 484 0
 874 002a 3B69     	 ldr r3,[r7,#16]
 875 002c 0022     	 movs r2,#0
 876 002e 5A60     	 str r2,[r3,#4]
 485:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->rx_data_count = 0U;
 877              	 .loc 3 485 0
 878 0030 3B69     	 ldr r3,[r7,#16]
 879 0032 0022     	 movs r2,#0
 880 0034 1A61     	 str r2,[r3,#16]
 486:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->rx_data_index = 0U;
 881              	 .loc 3 486 0
 882 0036 3B69     	 ldr r3,[r7,#16]
 883 0038 0022     	 movs r2,#0
 884 003a 5A61     	 str r2,[r3,#20]
 487:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     status = I2C_SLAVE_STATUS_SUCCESS;
 885              	 .loc 3 487 0
 886 003c 0023     	 movs r3,#0
 887 003e FB75     	 strb r3,[r7,#23]
 888              	.L38:
 488:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 489:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 889              	 .loc 3 489 0
 890 0040 FB7D     	 ldrb r3,[r7,#23]
 490:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 891              	 .loc 3 490 0
 892 0042 1846     	 mov r0,r3
 893 0044 1C37     	 adds r7,r7,#28
 894              	.LCFI84:
 895              	 .cfi_def_cfa_offset 4
 896 0046 BD46     	 mov sp,r7
 897              	.LCFI85:
 898              	 .cfi_def_cfa_register 13
 899              	 
 900 0048 5DF8047B 	 ldr r7,[sp],#4
 901              	.LCFI86:
 902              	 .cfi_restore 7
 903              	 .cfi_def_cfa_offset 0
 904 004c 7047     	 bx lr
 905              	 .cfi_endproc
 906              	.LFE293:
 908 004e 00BF     	 .section .text.I2C_SLAVE_lStartTransmitPolling,"ax",%progbits
 909              	 .align 2
 910              	 .thumb
 911              	 .thumb_func
 913              	I2C_SLAVE_lStartTransmitPolling:
 914              	.LFB294:
 491:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 492:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_TX_DIRECT_USED
 493:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** static I2C_SLAVE_STATUS_t I2C_SLAVE_lStartTransmitPolling(const I2C_SLAVE_t * const handle, uint8_t
 494:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 915              	 .loc 3 494 0
 916              	 .cfi_startproc
 917              	 
 918              	 
 919 0000 80B5     	 push {r7,lr}
 920              	.LCFI87:
 921              	 .cfi_def_cfa_offset 8
 922              	 .cfi_offset 7,-8
 923              	 .cfi_offset 14,-4
 924 0002 88B0     	 sub sp,sp,#32
 925              	.LCFI88:
 926              	 .cfi_def_cfa_offset 40
 927 0004 00AF     	 add r7,sp,#0
 928              	.LCFI89:
 929              	 .cfi_def_cfa_register 7
 930 0006 F860     	 str r0,[r7,#12]
 931 0008 B960     	 str r1,[r7,#8]
 932 000a 7A60     	 str r2,[r7,#4]
 495:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 933              	 .loc 3 495 0
 934 000c 0323     	 movs r3,#3
 935 000e FB77     	 strb r3,[r7,#31]
 496:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 936              	 .loc 3 496 0
 937 0010 FB68     	 ldr r3,[r7,#12]
 938 0012 9B68     	 ldr r3,[r3,#8]
 939 0014 BB61     	 str r3,[r7,#24]
 497:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_CONFIG_t * ptr_config = handle->config;
 940              	 .loc 3 497 0
 941 0016 FB68     	 ldr r3,[r7,#12]
 942 0018 5B68     	 ldr r3,[r3,#4]
 943 001a 7B61     	 str r3,[r7,#20]
 498:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 499:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   /*Flush transmit buffer*/
 500:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->tx_data_index = 0U;
 944              	 .loc 3 500 0
 945 001c BB69     	 ldr r3,[r7,#24]
 946 001e 0022     	 movs r2,#0
 947 0020 DA60     	 str r2,[r3,#12]
 501:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->tx_data_count = size;
 948              	 .loc 3 501 0
 949 0022 BB69     	 ldr r3,[r7,#24]
 950 0024 7A68     	 ldr r2,[r7,#4]
 951 0026 9A60     	 str r2,[r3,#8]
 502:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->tx_data = data;
 952              	 .loc 3 502 0
 953 0028 BB69     	 ldr r3,[r7,#24]
 954 002a BA68     	 ldr r2,[r7,#8]
 955 002c 1A60     	 str r2,[r3]
 503:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 504:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_USIC_CH_SetTransmitBufferStatus(handle->channel, XMC_USIC_CH_TBUF_STATUS_SET_IDLE);
 956              	 .loc 3 504 0
 957 002e FB68     	 ldr r3,[r7,#12]
 958 0030 1B68     	 ldr r3,[r3]
 959 0032 1846     	 mov r0,r3
 960 0034 0221     	 movs r1,#2
 961 0036 FFF7FEFF 	 bl XMC_USIC_CH_SetTransmitBufferStatus
 505:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 962              	 .loc 3 505 0
 963 003a 7B69     	 ldr r3,[r7,#20]
 964 003c 93F82230 	 ldrb r3,[r3,#34]
 965 0040 002B     	 cmp r3,#0
 966 0042 04D0     	 beq .L41
 506:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 507:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 967              	 .loc 3 507 0
 968 0044 FB68     	 ldr r3,[r7,#12]
 969 0046 1B68     	 ldr r3,[r3]
 970 0048 1846     	 mov r0,r3
 971 004a FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Flush
 972              	.L41:
 508:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 509:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 510:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   XMC_I2C_CH_SlaveTransmit(handle->channel, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 973              	 .loc 3 510 0
 974 004e FB68     	 ldr r3,[r7,#12]
 975 0050 1968     	 ldr r1,[r3]
 976 0052 BB69     	 ldr r3,[r7,#24]
 977 0054 1A68     	 ldr r2,[r3]
 978 0056 BB69     	 ldr r3,[r7,#24]
 979 0058 DB68     	 ldr r3,[r3,#12]
 980 005a 1344     	 add r3,r3,r2
 981 005c 1B78     	 ldrb r3,[r3]
 982 005e 0846     	 mov r0,r1
 983 0060 1946     	 mov r1,r3
 984 0062 FFF7FEFF 	 bl XMC_I2C_CH_SlaveTransmit
 511:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->tx_data_index++;
 985              	 .loc 3 511 0
 986 0066 BB69     	 ldr r3,[r7,#24]
 987 0068 DB68     	 ldr r3,[r3,#12]
 988 006a 5A1C     	 adds r2,r3,#1
 989 006c BB69     	 ldr r3,[r7,#24]
 990 006e DA60     	 str r2,[r3,#12]
 512:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   while(ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 991              	 .loc 3 512 0
 992 0070 1EE0     	 b .L42
 993              	.L45:
 513:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 514:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if(ptr_config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 994              	 .loc 3 514 0
 995 0072 7B69     	 ldr r3,[r7,#20]
 996 0074 93F82230 	 ldrb r3,[r3,#34]
 997 0078 002B     	 cmp r3,#0
 998 007a 08D0     	 beq .L43
 515:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 516:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       while(XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 999              	 .loc 3 516 0
 1000 007c 00BF     	 nop
 1001              	.L44:
 1002              	 .loc 3 516 0 is_stmt 0 discriminator 1
 1003 007e FB68     	 ldr r3,[r7,#12]
 1004 0080 1B68     	 ldr r3,[r3]
 1005 0082 1846     	 mov r0,r3
 1006 0084 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsFull
 1007 0088 0346     	 mov r3,r0
 1008 008a 002B     	 cmp r3,#0
 1009 008c F7D1     	 bne .L44
 1010              	.L43:
 517:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 518:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 519:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 520:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_I2C_CH_SlaveTransmit(handle->channel, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 1011              	 .loc 3 520 0 is_stmt 1
 1012 008e FB68     	 ldr r3,[r7,#12]
 1013 0090 1968     	 ldr r1,[r3]
 1014 0092 BB69     	 ldr r3,[r7,#24]
 1015 0094 1A68     	 ldr r2,[r3]
 1016 0096 BB69     	 ldr r3,[r7,#24]
 1017 0098 DB68     	 ldr r3,[r3,#12]
 1018 009a 1344     	 add r3,r3,r2
 1019 009c 1B78     	 ldrb r3,[r3]
 1020 009e 0846     	 mov r0,r1
 1021 00a0 1946     	 mov r1,r3
 1022 00a2 FFF7FEFF 	 bl XMC_I2C_CH_SlaveTransmit
 521:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->tx_data_index++;
 1023              	 .loc 3 521 0
 1024 00a6 BB69     	 ldr r3,[r7,#24]
 1025 00a8 DB68     	 ldr r3,[r3,#12]
 1026 00aa 5A1C     	 adds r2,r3,#1
 1027 00ac BB69     	 ldr r3,[r7,#24]
 1028 00ae DA60     	 str r2,[r3,#12]
 1029              	.L42:
 512:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 1030              	 .loc 3 512 0
 1031 00b0 BB69     	 ldr r3,[r7,#24]
 1032 00b2 DA68     	 ldr r2,[r3,#12]
 1033 00b4 BB69     	 ldr r3,[r7,#24]
 1034 00b6 9B68     	 ldr r3,[r3,#8]
 1035 00b8 9A42     	 cmp r2,r3
 1036 00ba DAD3     	 bcc .L45
 522:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 523:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 1037              	 .loc 3 523 0
 1038 00bc 7B69     	 ldr r3,[r7,#20]
 1039 00be 93F82230 	 ldrb r3,[r3,#34]
 1040 00c2 002B     	 cmp r3,#0
 1041 00c4 0BD0     	 beq .L46
 524:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 525:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     while(XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 1042              	 .loc 3 525 0
 1043 00c6 00BF     	 nop
 1044              	.L47:
 1045              	 .loc 3 525 0 is_stmt 0 discriminator 1
 1046 00c8 FB68     	 ldr r3,[r7,#12]
 1047 00ca 1B68     	 ldr r3,[r3]
 1048 00cc 1846     	 mov r0,r3
 1049 00ce FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsEmpty
 1050 00d2 0346     	 mov r3,r0
 1051 00d4 83F00103 	 eor r3,r3,#1
 1052 00d8 DBB2     	 uxtb r3,r3
 1053 00da 002B     	 cmp r3,#0
 1054 00dc F4D1     	 bne .L47
 1055              	.L46:
 526:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 527:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 528:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 529:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   while(XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 1056              	 .loc 3 529 0 is_stmt 1
 1057 00de 00BF     	 nop
 1058              	.L48:
 1059              	 .loc 3 529 0 is_stmt 0 discriminator 1
 1060 00e0 FB68     	 ldr r3,[r7,#12]
 1061 00e2 1B68     	 ldr r3,[r3]
 1062 00e4 1846     	 mov r0,r3
 1063 00e6 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1064 00ea 0346     	 mov r3,r0
 1065 00ec 802B     	 cmp r3,#128
 1066 00ee F7D0     	 beq .L48
 530:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 531:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 532:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   status = I2C_SLAVE_STATUS_SUCCESS;
 1067              	 .loc 3 532 0 is_stmt 1
 1068 00f0 0023     	 movs r3,#0
 1069 00f2 FB77     	 strb r3,[r7,#31]
 533:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 1070              	 .loc 3 533 0
 1071 00f4 FB7F     	 ldrb r3,[r7,#31]
 534:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 1072              	 .loc 3 534 0
 1073 00f6 1846     	 mov r0,r3
 1074 00f8 2037     	 adds r7,r7,#32
 1075              	.LCFI90:
 1076              	 .cfi_def_cfa_offset 8
 1077 00fa BD46     	 mov sp,r7
 1078              	.LCFI91:
 1079              	 .cfi_def_cfa_register 13
 1080              	 
 1081 00fc 80BD     	 pop {r7,pc}
 1082              	 .cfi_endproc
 1083              	.LFE294:
 1085 00fe 00BF     	 .section .text.I2C_SLAVE_lStartReceivePolling,"ax",%progbits
 1086              	 .align 2
 1087              	 .thumb
 1088              	 .thumb_func
 1090              	I2C_SLAVE_lStartReceivePolling:
 1091              	.LFB295:
 535:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #endif
 536:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 537:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** #ifdef I2C_SLAVE_RX_DIRECT_USED
 538:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** static I2C_SLAVE_STATUS_t I2C_SLAVE_lStartReceivePolling(const I2C_SLAVE_t * const handle, uint8_t 
 539:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** {
 1092              	 .loc 3 539 0
 1093              	 .cfi_startproc
 1094              	 
 1095              	 
 1096 0000 90B5     	 push {r4,r7,lr}
 1097              	.LCFI92:
 1098              	 .cfi_def_cfa_offset 12
 1099              	 .cfi_offset 4,-12
 1100              	 .cfi_offset 7,-8
 1101              	 .cfi_offset 14,-4
 1102 0002 89B0     	 sub sp,sp,#36
 1103              	.LCFI93:
 1104              	 .cfi_def_cfa_offset 48
 1105 0004 00AF     	 add r7,sp,#0
 1106              	.LCFI94:
 1107              	 .cfi_def_cfa_register 7
 1108 0006 F860     	 str r0,[r7,#12]
 1109 0008 B960     	 str r1,[r7,#8]
 1110 000a 7A60     	 str r2,[r7,#4]
 540:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_STATUS_t status = I2C_SLAVE_STATUS_BUFFER_INVALID;
 1111              	 .loc 3 540 0
 1112 000c 0323     	 movs r3,#3
 1113 000e FB77     	 strb r3,[r7,#31]
 541:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   I2C_SLAVE_RUNTIME_t * ptr_runtime = handle->runtime;
 1114              	 .loc 3 541 0
 1115 0010 FB68     	 ldr r3,[r7,#12]
 1116 0012 9B68     	 ldr r3,[r3,#8]
 1117 0014 BB61     	 str r3,[r7,#24]
 542:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   const I2C_SLAVE_CONFIG_t * ptr_config = handle->config;
 1118              	 .loc 3 542 0
 1119 0016 FB68     	 ldr r3,[r7,#12]
 1120 0018 5B68     	 ldr r3,[r3,#4]
 1121 001a 7B61     	 str r3,[r7,#20]
 543:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 544:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->rx_data_index = 0U;
 1122              	 .loc 3 544 0
 1123 001c BB69     	 ldr r3,[r7,#24]
 1124 001e 0022     	 movs r2,#0
 1125 0020 5A61     	 str r2,[r3,#20]
 545:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->rx_data_count = size;
 1126              	 .loc 3 545 0
 1127 0022 BB69     	 ldr r3,[r7,#24]
 1128 0024 7A68     	 ldr r2,[r7,#4]
 1129 0026 1A61     	 str r2,[r3,#16]
 546:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   ptr_runtime->rx_data = data;
 1130              	 .loc 3 546 0
 1131 0028 BB69     	 ldr r3,[r7,#24]
 1132 002a BA68     	 ldr r2,[r7,#8]
 1133 002c 5A60     	 str r2,[r3,#4]
 547:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 548:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   /*Flush receive buffer*/
 549:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   (void)XMC_I2C_CH_GetReceivedData(handle->channel);
 1134              	 .loc 3 549 0
 1135 002e FB68     	 ldr r3,[r7,#12]
 1136 0030 1B68     	 ldr r3,[r3]
 1137 0032 1846     	 mov r0,r3
 1138 0034 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 550:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   (void)XMC_I2C_CH_GetReceivedData(handle->channel);
 1139              	 .loc 3 550 0
 1140 0038 FB68     	 ldr r3,[r7,#12]
 1141 003a 1B68     	 ldr r3,[r3]
 1142 003c 1846     	 mov r0,r3
 1143 003e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 551:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 552:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   if(ptr_config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 1144              	 .loc 3 552 0
 1145 0042 7B69     	 ldr r3,[r7,#20]
 1146 0044 93F82330 	 ldrb r3,[r3,#35]
 1147 0048 002B     	 cmp r3,#0
 1148 004a 05D0     	 beq .L51
 553:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 554:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 1149              	 .loc 3 554 0
 1150 004c FB68     	 ldr r3,[r7,#12]
 1151 004e 1B68     	 ldr r3,[r3]
 1152 0050 1846     	 mov r0,r3
 1153 0052 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Flush
 1154 0056 06E0     	 b .L52
 1155              	.L51:
 555:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 556:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   else
 557:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 558:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     XMC_I2C_CH_ClearStatusFlag(handle->channel,
 1156              	 .loc 3 558 0
 1157 0058 FB68     	 ldr r3,[r7,#12]
 1158 005a 1B68     	 ldr r3,[r3]
 1159 005c 1846     	 mov r0,r3
 1160 005e 4FF44041 	 mov r1,#49152
 1161 0062 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 1162              	.L52:
 559:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****         ((uint32_t)XMC_I2C_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_I2C_CH_EVENT_ALTERNATIVE_RECEI
 560:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 561:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** 
 562:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   while(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 1163              	 .loc 3 562 0
 1164 0066 31E0     	 b .L53
 1165              	.L58:
 563:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 564:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     if(ptr_config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 1166              	 .loc 3 564 0
 1167 0068 7B69     	 ldr r3,[r7,#20]
 1168 006a 93F82330 	 ldrb r3,[r3,#35]
 1169 006e 002B     	 cmp r3,#0
 1170 0070 09D0     	 beq .L54
 565:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 566:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 1171              	 .loc 3 566 0
 1172 0072 00BF     	 nop
 1173              	.L55:
 1174              	 .loc 3 566 0 is_stmt 0 discriminator 1
 1175 0074 FB68     	 ldr r3,[r7,#12]
 1176 0076 1B68     	 ldr r3,[r3]
 1177 0078 1846     	 mov r0,r3
 1178 007a FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 1179 007e 0346     	 mov r3,r0
 1180 0080 002B     	 cmp r3,#0
 1181 0082 F7D1     	 bne .L55
 1182 0084 11E0     	 b .L56
 1183              	.L54:
 567:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 568:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 569:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 570:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     else
 571:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     {
 572:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       while((XMC_I2C_CH_GetStatusFlag(handle->channel) &
 1184              	 .loc 3 572 0 is_stmt 1
 1185 0086 00BF     	 nop
 1186              	.L57:
 1187              	 .loc 3 572 0 is_stmt 0 discriminator 1
 1188 0088 FB68     	 ldr r3,[r7,#12]
 1189 008a 1B68     	 ldr r3,[r3]
 1190 008c 1846     	 mov r0,r3
 1191 008e FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 1192 0092 0346     	 mov r3,r0
 1193 0094 03F44043 	 and r3,r3,#49152
 1194 0098 002B     	 cmp r3,#0
 1195 009a F5D0     	 beq .L57
 573:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           ((uint32_t)XMC_I2C_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_I2C_CH_EVENT_ALTERNATIVE_REC
 574:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       {
 575:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       }
 576:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****       XMC_I2C_CH_ClearStatusFlag(handle->channel,
 1196              	 .loc 3 576 0 is_stmt 1
 1197 009c FB68     	 ldr r3,[r7,#12]
 1198 009e 1B68     	 ldr r3,[r3]
 1199 00a0 1846     	 mov r0,r3
 1200 00a2 4FF44041 	 mov r1,#49152
 1201 00a6 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 1202              	.L56:
 577:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****           ((uint32_t)XMC_I2C_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_I2C_CH_EVENT_ALTERNATIVE_REC
 578:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     }
 579:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->rx_data[ptr_runtime->rx_data_index] = XMC_I2C_CH_GetReceivedData(handle->channel);
 1203              	 .loc 3 579 0
 1204 00aa BB69     	 ldr r3,[r7,#24]
 1205 00ac 5A68     	 ldr r2,[r3,#4]
 1206 00ae BB69     	 ldr r3,[r7,#24]
 1207 00b0 5B69     	 ldr r3,[r3,#20]
 1208 00b2 D418     	 adds r4,r2,r3
 1209 00b4 FB68     	 ldr r3,[r7,#12]
 1210 00b6 1B68     	 ldr r3,[r3]
 1211 00b8 1846     	 mov r0,r3
 1212 00ba FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 1213 00be 0346     	 mov r3,r0
 1214 00c0 2370     	 strb r3,[r4]
 580:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****     ptr_runtime->rx_data_index++;
 1215              	 .loc 3 580 0
 1216 00c2 BB69     	 ldr r3,[r7,#24]
 1217 00c4 5B69     	 ldr r3,[r3,#20]
 1218 00c6 5A1C     	 adds r2,r3,#1
 1219 00c8 BB69     	 ldr r3,[r7,#24]
 1220 00ca 5A61     	 str r2,[r3,#20]
 1221              	.L53:
 562:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   {
 1222              	 .loc 3 562 0
 1223 00cc BB69     	 ldr r3,[r7,#24]
 1224 00ce 5A69     	 ldr r2,[r3,#20]
 1225 00d0 BB69     	 ldr r3,[r7,#24]
 1226 00d2 1B69     	 ldr r3,[r3,#16]
 1227 00d4 9A42     	 cmp r2,r3
 1228 00d6 C7D3     	 bcc .L58
 581:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   }
 582:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   status = I2C_SLAVE_STATUS_SUCCESS;
 1229              	 .loc 3 582 0
 1230 00d8 0023     	 movs r3,#0
 1231 00da FB77     	 strb r3,[r7,#31]
 583:../Dave/Generated/I2C_SLAVE/i2c_slave.c ****   return status;
 1232              	 .loc 3 583 0
 1233 00dc FB7F     	 ldrb r3,[r7,#31]
 584:../Dave/Generated/I2C_SLAVE/i2c_slave.c **** }
 1234              	 .loc 3 584 0
 1235 00de 1846     	 mov r0,r3
 1236 00e0 2437     	 adds r7,r7,#36
 1237              	.LCFI95:
 1238              	 .cfi_def_cfa_offset 12
 1239 00e2 BD46     	 mov sp,r7
 1240              	.LCFI96:
 1241              	 .cfi_def_cfa_register 13
 1242              	 
 1243 00e4 90BD     	 pop {r4,r7,pc}
 1244              	 .cfi_endproc
 1245              	.LFE295:
 1247 00e6 00BF     	 .text
 1248              	.Letext0:
 1249              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1250              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1251              	 .file 6 "C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Dave/Generated/DAVE_Common.h"
 1252              	 .file 7 "../Dave/Generated/I2C_SLAVE/i2c_slave.h"
 1253              	 .file 8 "C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/CMSIS/Include/cmsis_gcc.h"
 1254              	 .file 9 "C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/CMSIS/Include/core_cm4.h"
 1255              	 .file 10 "C:/work_mari/XMC4800/common-tasks/I2C_SLAVE/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_slave.c
    {standard input}:20     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:67     .text.XMC_USIC_CH_SetTransmitBufferStatus:00000000 $t
    {standard input}:71     .text.XMC_USIC_CH_SetTransmitBufferStatus:00000000 XMC_USIC_CH_SetTransmitBufferStatus
    {standard input}:112    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 $t
    {standard input}:116    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 XMC_USIC_CH_TXFIFO_Flush
    {standard input}:155    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 $t
    {standard input}:159    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 XMC_USIC_CH_TXFIFO_IsFull
    {standard input}:204    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 $t
    {standard input}:208    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 XMC_USIC_CH_TXFIFO_IsEmpty
    {standard input}:253    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 $t
    {standard input}:257    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 XMC_USIC_CH_RXFIFO_Flush
    {standard input}:296    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:300    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:345    .text.XMC_I2C_CH_GetStatusFlag:00000000 $t
    {standard input}:349    .text.XMC_I2C_CH_GetStatusFlag:00000000 XMC_I2C_CH_GetStatusFlag
    {standard input}:389    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:393    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:436    .text.I2C_SLAVE_GetAppVersion:00000000 $t
    {standard input}:441    .text.I2C_SLAVE_GetAppVersion:00000000 I2C_SLAVE_GetAppVersion
    {standard input}:502    .text.I2C_SLAVE_Init:00000000 $t
    {standard input}:507    .text.I2C_SLAVE_Init:00000000 I2C_SLAVE_Init
    {standard input}:556    .text.I2C_SLAVE_Transmit:00000000 $t
    {standard input}:561    .text.I2C_SLAVE_Transmit:00000000 I2C_SLAVE_Transmit
    {standard input}:913    .text.I2C_SLAVE_lStartTransmitPolling:00000000 I2C_SLAVE_lStartTransmitPolling
    {standard input}:645    .text.I2C_SLAVE_Receive:00000000 $t
    {standard input}:650    .text.I2C_SLAVE_Receive:00000000 I2C_SLAVE_Receive
    {standard input}:1090   .text.I2C_SLAVE_lStartReceivePolling:00000000 I2C_SLAVE_lStartReceivePolling
    {standard input}:734    .text.I2C_SLAVE_AbortTransmit:00000000 $t
    {standard input}:739    .text.I2C_SLAVE_AbortTransmit:00000000 I2C_SLAVE_AbortTransmit
    {standard input}:828    .text.I2C_SLAVE_AbortReceive:00000000 $t
    {standard input}:833    .text.I2C_SLAVE_AbortReceive:00000000 I2C_SLAVE_AbortReceive
    {standard input}:909    .text.I2C_SLAVE_lStartTransmitPolling:00000000 $t
    {standard input}:1086   .text.I2C_SLAVE_lStartReceivePolling:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_I2C_CH_SlaveTransmit
XMC_I2C_CH_GetReceivedData
