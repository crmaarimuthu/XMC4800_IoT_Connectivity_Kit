
led_blinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00010000  2**0
                  ALLOC
  2 .no_init      00000014  2003ffc0  2003ffc0  0000ffc0  2**2
                  ALLOC
  3 .debug_aranges 00000190  00000000  00000000  00008ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002b84  00000000  00000000  00008d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ade  00000000  00000000  0000b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000011bd  00000000  00000000  0000c392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003ec  00000000  00000000  0000d550  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000eec  00000000  00000000  0000d93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006e0  00000000  00000000  0000e828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  0000ef08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .build_attributes 0000020f  00000000  00000000  0000eff0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000b9c 	.word	0x0c000b9c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000000 	.word	0x00000000
 8000254:	0c000b9c 	.word	0x0c000b9c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8800 	.word	0x1ffe8800
 8000264:	00000000 	.word	0x00000000
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08000b29 	.word	0x08000b29
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08000a9d 	.word	0x08000a9d

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  {
    __NOP();
 80002aa:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba7      	ldr	r3, [pc, #668]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa4      	ldr	r2, [pc, #656]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000366:	4ba4      	ldr	r3, [pc, #656]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4ba1      	ldr	r3, [pc, #644]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9f      	ldr	r3, [pc, #636]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a9c      	ldr	r2, [pc, #624]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 800038c:	4b9b      	ldr	r3, [pc, #620]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a98      	ldr	r2, [pc, #608]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003a0:	4b97      	ldr	r3, [pc, #604]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a93      	ldr	r2, [pc, #588]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003b4:	4b92      	ldr	r3, [pc, #584]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b90      	ldr	r3, [pc, #576]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d026      	beq.n	800041c <SystemCoreClockSetup+0xc8>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8d      	ldr	r2, [pc, #564]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003d0:	4b8c      	ldr	r3, [pc, #560]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f9e3 	bl	80007a8 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b88      	ldr	r3, [pc, #544]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4984      	ldr	r1, [pc, #528]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003f2:	4a84      	ldr	r2, [pc, #528]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 = 0;
 80003fa:	4b81      	ldr	r3, [pc, #516]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000400:	4a7f      	ldr	r2, [pc, #508]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000402:	4b7f      	ldr	r3, [pc, #508]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800040a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800040c:	bf00      	nop
 800040e:	4b7c      	ldr	r3, [pc, #496]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000416:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800041a:	d1f8      	bne.n	800040e <SystemCoreClockSetup+0xba>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800041c:	4a78      	ldr	r2, [pc, #480]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800041e:	4b78      	ldr	r3, [pc, #480]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000428:	bf00      	nop
 800042a:	4b75      	ldr	r3, [pc, #468]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <SystemCoreClockSetup+0xd6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000436:	4a72      	ldr	r2, [pc, #456]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000438:	4b71      	ldr	r3, [pc, #452]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000442:	4b6f      	ldr	r3, [pc, #444]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000444:	4a71      	ldr	r2, [pc, #452]	; (800060c <SystemCoreClockSetup+0x2b8>)
 8000446:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000448:	4a6d      	ldr	r2, [pc, #436]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800044a:	4b6d      	ldr	r3, [pc, #436]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000452:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000454:	4a6a      	ldr	r2, [pc, #424]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000456:	4b6a      	ldr	r3, [pc, #424]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f023 0310 	bic.w	r3, r3, #16
 800045e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000460:	4a67      	ldr	r2, [pc, #412]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000462:	4b67      	ldr	r3, [pc, #412]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800046c:	bf00      	nop
 800046e:	4b64      	ldr	r3, [pc, #400]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f003 0304 	and.w	r3, r3, #4
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f9      	beq.n	800046e <SystemCoreClockSetup+0x11a>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800047a:	4a61      	ldr	r2, [pc, #388]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800047c:	4b60      	ldr	r3, [pc, #384]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f023 0301 	bic.w	r3, r3, #1
 8000484:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000486:	bf00      	nop
 8000488:	4b5d      	ldr	r3, [pc, #372]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1f9      	bne.n	8000488 <SystemCoreClockSetup+0x134>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 8000494:	4b5e      	ldr	r3, [pc, #376]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 8000496:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800049a:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 800049c:	4b5c      	ldr	r3, [pc, #368]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 800049e:	2200      	movs	r2, #0
 80004a0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 80004a2:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a8:	4b59      	ldr	r3, [pc, #356]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004ae:	4b58      	ldr	r3, [pc, #352]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004b4:	4b56      	ldr	r3, [pc, #344]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004b6:	2203      	movs	r2, #3
 80004b8:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004ba:	4b55      	ldr	r3, [pc, #340]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004bc:	4a55      	ldr	r2, [pc, #340]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004be:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004c0:	4b53      	ldr	r3, [pc, #332]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004c6:	4b52      	ldr	r3, [pc, #328]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004c8:	4a53      	ldr	r2, [pc, #332]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004ca:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004cc:	4a4c      	ldr	r2, [pc, #304]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004ce:	4b4c      	ldr	r3, [pc, #304]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004d6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004da:	4a50      	ldr	r2, [pc, #320]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004dc:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004de:	bf00      	nop
 80004e0:	4b47      	ldr	r3, [pc, #284]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0f9      	beq.n	80004e0 <SystemCoreClockSetup+0x18c>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_48MHZ);
 80004ec:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004f0:	f7ff fed4 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004f4:	4b42      	ldr	r3, [pc, #264]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004f6:	4a4a      	ldr	r2, [pc, #296]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 80004f8:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004fa:	bf00      	nop
 80004fc:	4b40      	ldr	r3, [pc, #256]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <SystemCoreClockSetup+0x1a8>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_72MHZ);
 8000508:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800050c:	f7ff fec6 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000512:	4a44      	ldr	r2, [pc, #272]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000514:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000516:	bf00      	nop
 8000518:	4b39      	ldr	r3, [pc, #228]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <SystemCoreClockSetup+0x1c4>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_96MHZ);
 8000524:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8000528:	f7ff feb8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800052c:	4b34      	ldr	r3, [pc, #208]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 8000530:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000532:	bf00      	nop
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0f9      	beq.n	8000534 <SystemCoreClockSetup+0x1e0>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_120MHZ);
 8000540:	f241 7070 	movw	r0, #6000	; 0x1770
 8000544:	f7ff feaa 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <SystemCoreClockSetup+0x2d8>)
 800054c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 800054e:	bf00      	nop
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0320 	and.w	r3, r3, #32
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f9      	beq.n	8000550 <SystemCoreClockSetup+0x1fc>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_144MHZ);
 800055c:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000560:	f7ff fe9c 	bl	800029c <delay>

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000564:	4b32      	ldr	r3, [pc, #200]	; (8000630 <SystemCoreClockSetup+0x2dc>)
 8000566:	2205      	movs	r2, #5
 8000568:	60da      	str	r2, [r3, #12]
#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800056a:	4a25      	ldr	r2, [pc, #148]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000574:	f023 0302 	bic.w	r3, r3, #2
 8000578:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000582:	2b00      	cmp	r3, #0
 8000584:	d031      	beq.n	80005ea <SystemCoreClockSetup+0x296>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <SystemCoreClockSetup+0x2e0>)
 800058c:	4013      	ands	r3, r2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d007      	beq.n	80005a2 <SystemCoreClockSetup+0x24e>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000592:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059c:	f023 0302 	bic.w	r3, r3, #2
 80005a0:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80005ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80005b0:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80005b2:	f000 f8f9 	bl	80007a8 <OSCHP_GetFrequency>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80005ba:	fba3 2302 	umull	r2, r3, r3, r2
 80005be:	0d1b      	lsrs	r3, r3, #20
 80005c0:	3b01      	subs	r3, #1
 80005c2:	041b      	lsls	r3, r3, #16
 80005c4:	490f      	ldr	r1, [pc, #60]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005c8:	6852      	ldr	r2, [r2, #4]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005d8:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80005da:	bf00      	nop
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80005e4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80005e8:	d1f8      	bne.n	80005dc <SystemCoreClockSetup+0x288>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	e01f      	b.n	8000638 <SystemCoreClockSetup+0x2e4>
 80005f8:	50004200 	.word	0x50004200
 80005fc:	50004400 	.word	0x50004400
 8000600:	50004710 	.word	0x50004710
 8000604:	50004700 	.word	0x50004700
 8000608:	6b5fca6b 	.word	0x6b5fca6b
 800060c:	010b2f00 	.word	0x010b2f00
 8000610:	50004600 	.word	0x50004600
 8000614:	00010005 	.word	0x00010005
 8000618:	01200003 	.word	0x01200003
 800061c:	01052f00 	.word	0x01052f00
 8000620:	01032f00 	.word	0x01032f00
 8000624:	01022f00 	.word	0x01022f00
 8000628:	01012f00 	.word	0x01012f00
 800062c:	01002f00 	.word	0x01002f00
 8000630:	50004160 	.word	0x50004160
 8000634:	00010002 	.word	0x00010002
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000638:	bf00      	nop
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <SystemCoreClockSetup+0x2e6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <SystemCoreClockSetup+0x374>)
 8000656:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000662:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f023 0310 	bic.w	r3, r3, #16
 800066e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800067c:	bf00      	nop
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <SystemCoreClockSetup+0x32a>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f023 0301 	bic.w	r3, r3, #1
 8000694:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000696:	bf00      	nop
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f9      	bne.n	8000698 <SystemCoreClockSetup+0x344>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <SystemCoreClockSetup+0x370>)
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <SystemCoreClockSetup+0x370>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ae:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemCoreClockSetup+0x378>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	60da      	str	r2, [r3, #12]
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <SystemCoreClockSetup+0x37c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80006bc:	f000 f80a 	bl	80006d4 <SystemCoreClockUpdate>
}
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	50004710 	.word	0x50004710
 80006c8:	02006300 	.word	0x02006300
 80006cc:	50004160 	.word	0x50004160
 80006d0:	50004600 	.word	0x50004600

080006d4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <SystemCoreClockUpdate+0xc4>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d03e      	beq.n	8000764 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <SystemCoreClockUpdate+0xc8>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <SystemCoreClockUpdate+0xcc>)
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e002      	b.n	80006fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80006f8:	f000 f856 	bl	80007a8 <OSCHP_GetFrequency>
 80006fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemCoreClockUpdate+0xc8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	2b00      	cmp	r3, #0
 8000708:	d020      	beq.n	800074c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <SystemCoreClockUpdate+0xc8>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	3301      	adds	r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemCoreClockUpdate+0xc8>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	3301      	adds	r3, #1
 8000724:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemCoreClockUpdate+0xc8>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	3301      	adds	r3, #1
 8000732:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	fb02 f303 	mul.w	r3, r2, r3
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e00d      	b.n	8000768 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemCoreClockUpdate+0xc8>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000754:	3301      	adds	r3, #1
 8000756:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e001      	b.n	8000768 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <SystemCoreClockUpdate+0xcc>)
 8000766:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <SystemCoreClockUpdate+0xc4>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3301      	adds	r3, #1
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <SystemCoreClockUpdate+0xc4>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	3301      	adds	r3, #1
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <SystemCoreClockUpdate+0xd0>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	50004600 	.word	0x50004600
 800079c:	50004710 	.word	0x50004710
 80007a0:	016e3600 	.word	0x016e3600
 80007a4:	2003ffc0 	.word	0x2003ffc0

080007a8 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <OSCHP_GetFrequency+0x10>)
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	00b71b00 	.word	0x00b71b00

080007bc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	460b      	mov	r3, r1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	089b      	lsrs	r3, r3, #2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	7afb      	ldrb	r3, [r7, #11]
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3204      	adds	r2, #4
 80007de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	4619      	mov	r1, r3
 80007ec:	23f8      	movs	r3, #248	; 0xf8
 80007ee:	408b      	lsls	r3, r1
 80007f0:	43db      	mvns	r3, r3
 80007f2:	ea02 0103 	and.w	r1, r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	1d02      	adds	r2, r0, #4
 80007fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4619      	mov	r1, r3
 8000808:	2303      	movs	r3, #3
 800080a:	408b      	lsls	r3, r1
 800080c:	43db      	mvns	r3, r3
 800080e:	401a      	ands	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <XMC_GPIO_Init+0x144>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d003      	beq.n	8000824 <XMC_GPIO_Init+0x68>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a39      	ldr	r2, [pc, #228]	; (8000904 <XMC_GPIO_Init+0x148>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d10a      	bne.n	800083a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000828:	7afb      	ldrb	r3, [r7, #11]
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	401a      	ands	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	661a      	str	r2, [r3, #96]	; 0x60
 8000838:	e042      	b.n	80008c0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	b25b      	sxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	da3c      	bge.n	80008c0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	409a      	lsls	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3210      	adds	r2, #16
 8000866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4619      	mov	r1, r3
 8000874:	2307      	movs	r3, #7
 8000876:	408b      	lsls	r3, r1
 8000878:	43db      	mvns	r3, r3
 800087a:	ea02 0103 	and.w	r1, r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f100 0210 	add.w	r2, r0, #16
 8000884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3210      	adds	r2, #16
 800089c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	4619      	mov	r1, r3
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	ea42 0103 	orr.w	r1, r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f100 0210 	add.w	r2, r0, #16
 80008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3204      	adds	r2, #4
 80008d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	7afb      	ldrb	r3, [r7, #11]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	ea42 0103 	orr.w	r1, r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	1d02      	adds	r2, r0, #4
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	48028e00 	.word	0x48028e00
 8000904:	48028f00 	.word	0x48028f00

08000908 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
 8000914:	4613      	mov	r3, r2
 8000916:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4619      	mov	r1, r3
 8000922:	2303      	movs	r3, #3
 8000924:	408b      	lsls	r3, r1
 8000926:	43db      	mvns	r3, r3
 8000928:	401a      	ands	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000932:	78bb      	ldrb	r3, [r7, #2]
 8000934:	78f9      	ldrb	r1, [r7, #3]
 8000936:	0049      	lsls	r1, r1, #1
 8000938:	408b      	lsls	r3, r1
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <_init>:
  }
}

/* Init */
void _init(void)
{}
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7c1a      	ldrb	r2, [r3, #16]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3304      	adds	r3, #4
 800096c:	4608      	mov	r0, r1
 800096e:	4611      	mov	r1, r2
 8000970:	461a      	mov	r2, r3
 8000972:	f7ff ff23 	bl	80007bc <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6819      	ldr	r1, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7c1a      	ldrb	r2, [r3, #16]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7c5b      	ldrb	r3, [r3, #17]
 8000982:	4608      	mov	r0, r1
 8000984:	4611      	mov	r1, r2
 8000986:	461a      	mov	r2, r3
 8000988:	f7ff ffbe 	bl	8000908 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop

08000998 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
  if (init_status == DAVE_STATUS_SUCCESS)
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <DAVE_Init+0x1a>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <DAVE_Init+0x34>)
 80009aa:	f7ff ffd5 	bl	8000958 <DIGITAL_IO_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d104      	bne.n	80009c2 <DAVE_Init+0x2a>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED2); 
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <DAVE_Init+0x38>)
 80009ba:	f7ff ffcd 	bl	8000958 <DIGITAL_IO_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	08000b74 	.word	0x08000b74
 80009d0:	08000b88 	.word	0x08000b88

080009d4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2201      	movs	r2, #1
 80009e4:	409a      	lsls	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	605a      	str	r2, [r3, #4]
}
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a06:	409a      	lsls	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	605a      	str	r2, [r3, #4]
}
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	605a      	str	r2, [r3, #4]
}
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7c1b      	ldrb	r3, [r3, #16]
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f7ff ffc0 	bl	80009d4 <XMC_GPIO_SetOutputHigh>
}
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop

08000a5c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7c1b      	ldrb	r3, [r3, #16]
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f7ff ffc0 	bl	80009f4 <XMC_GPIO_SetOutputLow>
}
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop

08000a7c <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7c1b      	ldrb	r3, [r3, #16]
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff ffc2 	bl	8000a18 <XMC_GPIO_ToggleOutput>
}
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop

08000a9c <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8000aa2:	f7ff ff79 	bl	8000998 <DAVE_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d000      	beq.n	8000ab2 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8000ab0:	e7fe      	b.n	8000ab0 <main+0x14>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  DIGITAL_IO_ToggleOutput(&LED1); //toggles : 1 -> 0 (if initial output level is logic 1)
 8000ab2:	481a      	ldr	r0, [pc, #104]	; (8000b1c <main+0x80>)
 8000ab4:	f7ff ffe2 	bl	8000a7c <DIGITAL_IO_ToggleOutput>
	  for(int i=0;i<9000000;i++);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e002      	b.n	8000ac4 <main+0x28>
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <main+0x84>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	ddf8      	ble.n	8000abe <main+0x22>

	  DIGITAL_IO_ToggleOutput(&LED1); //toggles : 0 -> 1
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <main+0x80>)
 8000ace:	f7ff ffd5 	bl	8000a7c <DIGITAL_IO_ToggleOutput>
	  for(int i=0;i<9000000;i++);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	e002      	b.n	8000ade <main+0x42>
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	3301      	adds	r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <main+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	ddf8      	ble.n	8000ad8 <main+0x3c>



	  DIGITAL_IO_SetOutputHigh(&LED2);
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <main+0x88>)
 8000ae8:	f7ff ffa8 	bl	8000a3c <DIGITAL_IO_SetOutputHigh>
	  for(int i=0;i<9000000;i++);
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e002      	b.n	8000af8 <main+0x5c>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <main+0x84>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	ddf8      	ble.n	8000af2 <main+0x56>

	  DIGITAL_IO_SetOutputLow(&LED2);
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <main+0x88>)
 8000b02:	f7ff ffab 	bl	8000a5c <DIGITAL_IO_SetOutputLow>
	  for(int i=0;i<9000000;i++);
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	e002      	b.n	8000b12 <main+0x76>
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	4a02      	ldr	r2, [pc, #8]	; (8000b20 <main+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	ddf8      	ble.n	8000b0c <main+0x70>

  }
 8000b1a:	e7ca      	b.n	8000ab2 <main+0x16>
 8000b1c:	08000b74 	.word	0x08000b74
 8000b20:	0089543f 	.word	0x0089543f
 8000b24:	08000b88 	.word	0x08000b88

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <__libc_init_array+0x3c>)
 8000b2c:	4c0e      	ldr	r4, [pc, #56]	; (8000b68 <__libc_init_array+0x40>)
 8000b2e:	1ae4      	subs	r4, r4, r3
 8000b30:	10a4      	asrs	r4, r4, #2
 8000b32:	2500      	movs	r5, #0
 8000b34:	461e      	mov	r6, r3
 8000b36:	42a5      	cmp	r5, r4
 8000b38:	d004      	beq.n	8000b44 <__libc_init_array+0x1c>
 8000b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b3e:	4798      	blx	r3
 8000b40:	3501      	adds	r5, #1
 8000b42:	e7f8      	b.n	8000b36 <__libc_init_array+0xe>
 8000b44:	f7ff ff02 	bl	800094c <_init>
 8000b48:	4c08      	ldr	r4, [pc, #32]	; (8000b6c <__libc_init_array+0x44>)
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <__libc_init_array+0x48>)
 8000b4c:	1ae4      	subs	r4, r4, r3
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	2500      	movs	r5, #0
 8000b52:	461e      	mov	r6, r3
 8000b54:	42a5      	cmp	r5, r4
 8000b56:	d004      	beq.n	8000b62 <__libc_init_array+0x3a>
 8000b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b5c:	4798      	blx	r3
 8000b5e:	3501      	adds	r5, #1
 8000b60:	e7f8      	b.n	8000b54 <__libc_init_array+0x2c>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	1ffe8800 	.word	0x1ffe8800
 8000b68:	1ffe8800 	.word	0x1ffe8800
 8000b6c:	1ffe8800 	.word	0x1ffe8800
 8000b70:	1ffe8800 	.word	0x1ffe8800

08000b74 <LED1>:
 8000b74:	48028400 00000080 00010000 00000000     ...H............
 8000b84:	00000000                                ....

08000b88 <LED2>:
 8000b88:	48028400 00000080 00010000 00000000     ...H............
 8000b98:	00000001                                ....
