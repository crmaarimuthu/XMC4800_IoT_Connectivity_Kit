
ADC_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c0c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         0000008c  1ffe8800  0c001c0c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  1ffe888c  0c001c98  0001088c  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000970  00000000  00000000  00010890  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001137a  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d49  00000000  00000000  0002257a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004124  00000000  00000000  000242c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000269c  00000000  00000000  000283e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000069e4  00000000  00000000  0002aa84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000509c  00000000  00000000  00031468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  00036504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000003fe  00000000  00000000  00036d2c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 8d 1a 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001c0c 	.word	0x0c001c0c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000008c 	.word	0x0000008c
 8000254:	0c001c0c 	.word	0x0c001c0c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe888c 	.word	0x1ffe888c
 8000264:	0000000c 	.word	0x0000000c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08001af1 	.word	0x08001af1
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001a75 	.word	0x08001a75

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f001 f919 	bl	80014e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f001 f995 	bl	80015e0 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 f960 	bl	80015a4 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_GetMirrorStatus+0x14>)
 80004e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	50004000 	.word	0x50004000

080004f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004fc:	f7ff fede 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <XMC_SCU_lDelay+0x3c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <XMC_SCU_lDelay+0x40>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0c9a      	lsrs	r2, r3, #18
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e003      	b.n	8000522 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800051a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f7      	bcc.n	800051a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2003ffc0 	.word	0x2003ffc0
 8000534:	431bde83 	.word	0x431bde83

08000538 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	50004074 	.word	0x50004074

08000550 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	50004074 	.word	0x50004074

0800056c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f891 	bl	800069c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800057a:	f000 fa73 	bl	8000a64 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000586:	f000 faab 	bl	8000ae0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800058a:	bf00      	nop
 800058c:	f000 fa96 	bl	8000abc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f7      	bne.n	800058c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a5b      	ldrb	r3, [r3, #9]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8f5 	bl	8000790 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005a6:	bf00      	nop
 80005a8:	f7ff ff98 	bl	80004dc <XMC_SCU_GetMirrorStatus>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1fa      	bne.n	80005a8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa2e 	bl	8000a18 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7c1b      	ldrb	r3, [r3, #16]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f903 	bl	80007cc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7c5b      	ldrb	r3, [r3, #17]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f926 	bl	800081c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7c9b      	ldrb	r3, [r3, #18]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f90d 	bl	80007f4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7cdb      	ldrb	r3, [r3, #19]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f930 	bl	8000844 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00a      	beq.n	8000602 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ec:	f000 fab0 	bl	8000b50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005f0:	bf00      	nop
 80005f2:	f000 fad5 	bl	8000ba0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d017      	beq.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000618:	f000 fae6 	bl	8000be8 <XMC_SCU_CLOCK_DisableSystemPll>
 800061c:	e014      	b.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800061e:	f000 fad3 	bl	8000bc8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8899      	ldrh	r1, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062e:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000634:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	462a      	mov	r2, r5
 8000642:	4623      	mov	r3, r4
 8000644:	f000 fae0 	bl	8000c08 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d103      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000652:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000656:	f000 f821 	bl	800069c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800065a:	f7ff fe2f 	bl	80002bc <SystemCoreClockUpdate>
}
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}

08000664 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	0f1b      	lsrs	r3, r3, #28
 8000670:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000678:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	461a      	mov	r2, r3
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000688:	4413      	add	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	50004414 	.word	0x50004414

0800069c <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	50004600 	.word	0x50004600

080006c4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006cc:	4906      	ldr	r1, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	50004600 	.word	0x50004600

080006ec <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	50004600 	.word	0x50004600

08000714 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d108      	bne.n	8000736 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	e007      	b.n	8000746 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	60d3      	str	r3, [r2, #12]
  }
}
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	50004710 	.word	0x50004710

08000754 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800075e:	bf00      	nop
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000762:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f8      	bne.n	8000760 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800076e:	4907      	ldr	r1, [pc, #28]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000778:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077a:	4313      	orrs	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	50004000 	.word	0x50004000
 800078c:	50004300 	.word	0x50004300

08000790 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079a:	bf00      	nop
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800079e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f8      	bne.n	800079c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004000 	.word	0x50004000
 80007c8:	50004300 	.word	0x50004300

080007cc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007d4:	4906      	ldr	r1, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	50004600 	.word	0x50004600

080007f4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080a:	4313      	orrs	r3, r2
 800080c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	50004600 	.word	0x50004600

0800081c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000832:	4313      	orrs	r3, r2
 8000834:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004600 	.word	0x50004600

08000844 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085a:	4313      	orrs	r3, r2
 800085c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	50004600 	.word	0x50004600

0800086c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000882:	4313      	orrs	r3, r2
 8000884:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	50004600 	.word	0x50004600

08000894 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	50004600 	.word	0x50004600

080008bc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d2:	4313      	orrs	r3, r2
 80008d4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	50004600 	.word	0x50004600

080008e4 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80008fa:	4313      	orrs	r3, r2
 80008fc:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	50004600 	.word	0x50004600

0800090c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0f1b      	lsrs	r3, r3, #28
 8000918:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000920:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	461a      	mov	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000930:	4413      	add	r3, r2
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	50004648 	.word	0x50004648

08000944 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000952:	f023 0302 	bic.w	r3, r3, #2
 8000956:	6153      	str	r3, [r2, #20]
}
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004710 	.word	0x50004710

08000964 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800096e:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800097a:	bf00      	nop
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0f9      	beq.n	800097c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000994:	491e      	ldr	r1, [pc, #120]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	3b01      	subs	r3, #1
 800099a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009a2:	4313      	orrs	r3, r2
 80009a4:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	f023 0310 	bic.w	r3, r3, #16
 80009bc:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009ca:	bf00      	nop
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0f9      	beq.n	80009cc <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80009e4:	bf00      	nop
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1f9      	bne.n	80009e6 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009f2:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009fc:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000a00:	2208      	movs	r2, #8
 8000a02:	60da      	str	r2, [r3, #12]
}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	50004710 	.word	0x50004710
 8000a14:	50004160 	.word	0x50004160

08000a18 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a2c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10e      	bne.n	8000a52 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a3e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f7ff fd57 	bl	80004f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a46:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a50:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f7ff fd4e 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	50004710 	.word	0x50004710

08000a64 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a7a:	bf00      	nop
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f9      	beq.n	8000a7c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00a      	beq.n	8000aaa <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a9c:	bf00      	nop
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f9      	bne.n	8000a9e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	50004200 	.word	0x50004200
 8000ab8:	50004400 	.word	0x50004400

08000abc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf0c      	ite	eq
 8000acc:	2301      	moveq	r3, #1
 8000ace:	2300      	movne	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	50004300 	.word	0x50004300

08000ae0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ae4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ae8:	f7ff fd32 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000af6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000af8:	bf00      	nop
 8000afa:	f7ff fd1d 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f8      	beq.n	8000afa <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b08:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b0c:	f7ff fd20 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b16:	bf00      	nop
 8000b18:	f7ff fd0e 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f8      	beq.n	8000b18 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b2a:	f7ff fd11 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b3a:	bf00      	nop
 8000b3c:	f7ff fcfc 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f8      	beq.n	8000b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	50004300 	.word	0x50004300

08000b50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b60:	4d0d      	ldr	r5, [pc, #52]	; (8000b98 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b6a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b6e:	f000 fd19 	bl	80015a4 <OSCHP_GetFrequency>
 8000b72:	4602      	mov	r2, r0
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b76:	fba3 2302 	umull	r2, r3, r3, r2
 8000b7a:	0d1b      	lsrs	r3, r3, #20
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b80:	4323      	orrs	r3, r4
 8000b82:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b8e:	6053      	str	r3, [r2, #4]
}
 8000b90:	bdb0      	pop	{r4, r5, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	50004710 	.word	0x50004710
 8000b98:	50004700 	.word	0x50004700
 8000b9c:	6b5fca6b 	.word	0x6b5fca6b

08000ba0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bac:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	2300      	movne	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	50004710 	.word	0x50004710

08000bc8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd6:	f023 0302 	bic.w	r3, r3, #2
 8000bda:	6053      	str	r3, [r2, #4]
}
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	50004710 	.word	0x50004710

08000be8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	6053      	str	r3, [r2, #4]
}
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	50004710 	.word	0x50004710

08000c08 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4603      	mov	r3, r0
 8000c14:	81fb      	strh	r3, [r7, #14]
 8000c16:	460b      	mov	r3, r1
 8000c18:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fd79 	bl	8000714 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c22:	7b7b      	ldrb	r3, [r7, #13]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	f040 808b 	bne.w	8000d40 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c30:	f000 fcb8 	bl	80015a4 <OSCHP_GetFrequency>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c38:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3c:	0c9b      	lsrs	r3, r3, #18
 8000c3e:	059b      	lsls	r3, r3, #22
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e002      	b.n	8000c4a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c44:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c48:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	fb02 f203 	mul.w	r2, r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	0d9b      	lsrs	r3, r3, #22
 8000c66:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c68:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c74:	bf00      	nop
 8000c76:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c82:	4a43      	ldr	r2, [pc, #268]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c84:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c8e:	4940      	ldr	r1, [pc, #256]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c90:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c96:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	0212      	lsls	r2, r2, #8
 8000c9e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ca6:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cb2:	4a37      	ldr	r2, [pc, #220]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb4:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cbe:	4a34      	ldr	r2, [pc, #208]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc0:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f023 0310 	bic.w	r3, r3, #16
 8000cc8:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000cca:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ccc:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cd6:	bf00      	nop
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f9      	beq.n	8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce4:	4a2a      	ldr	r2, [pc, #168]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f023 0301 	bic.w	r3, r3, #1
 8000cee:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cf0:	bf00      	nop
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f9      	bne.n	8000cf2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	0d9b      	lsrs	r3, r3, #22
 8000d0a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d0c:	6a3a      	ldr	r2, [r7, #32]
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d202      	bcs.n	8000d1a <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d14:	6938      	ldr	r0, [r7, #16]
 8000d16:	f000 f845 	bl	8000da4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	085b      	lsrs	r3, r3, #1
 8000d1e:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	0d9b      	lsrs	r3, r3, #22
 8000d28:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d2a:	6a3a      	ldr	r2, [r7, #32]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d202      	bcs.n	8000d38 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d32:	6938      	ldr	r0, [r7, #16]
 8000d34:	f000 f836 	bl	8000da4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d38:	6a38      	ldr	r0, [r7, #32]
 8000d3a:	f000 f833 	bl	8000da4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d3e:	e01c      	b.n	8000d7a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d40:	4913      	ldr	r1, [pc, #76]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d52:	bf00      	nop
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f9      	beq.n	8000d54 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d6c:	bf00      	nop
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	60da      	str	r2, [r3, #12]
}
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	431bde83 	.word	0x431bde83
 8000d8c:	aaaaaaab 	.word	0xaaaaaaab
 8000d90:	50004710 	.word	0x50004710
 8000d94:	f08080ff 	.word	0xf08080ff
 8000d98:	88888889 	.word	0x88888889
 8000d9c:	b60b60b7 	.word	0xb60b60b7
 8000da0:	50004160 	.word	0x50004160

08000da4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dac:	490b      	ldr	r1, [pc, #44]	; (8000ddc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000dc0:	bf00      	nop
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f9      	beq.n	8000dc2 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000dce:	2032      	movs	r0, #50	; 0x32
 8000dd0:	f7ff fb90 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	50004710 	.word	0x50004710

08000de0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
 8000dec:	4613      	mov	r3, r2
 8000dee:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	401a      	ands	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e0a:	78bb      	ldrb	r3, [r7, #2]
 8000e0c:	78f9      	ldrb	r1, [r7, #3]
 8000e0e:	0049      	lsls	r1, r1, #1
 8000e10:	408b      	lsls	r3, r1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8000e2e:	783b      	ldrb	r3, [r7, #0]
 8000e30:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8000e62:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	079b      	lsls	r3, r3, #30
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000eae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff fd0d 	bl	800090c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fbb6 	bl	8000664 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop

08000efc <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8000f06:	f7ff ffef 	bl	8000ee8 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop

08000f50 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f240 731f 	movw	r3, #1823	; 0x71f
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	6839      	ldr	r1, [r7, #0]
 8000f72:	3128      	adds	r1, #40	; 0x28
 8000f74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000f78:	e007      	b.n	8000f8a <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	3128      	adds	r1, #40	; 0x28
 8000f86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	071f0000 	.word	0x071f0000

08000f98 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e017      	b.n	8000fe6 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8000fce:	e000      	b.n	8000fd2 <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8000fd0:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f7      	bne.n	8000fd0 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d9e4      	bls.n	8000fb6 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	08001b3c 	.word	0x08001b3c

08000ffc <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d903      	bls.n	8001016 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	3b04      	subs	r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e001      	b.n	800101a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001020:	f023 020f 	bic.w	r2, r3, #15
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	2300      	movs	r3, #0
 8001058:	f000 f828 	bl	80010ac <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	6859      	ldr	r1, [r3, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	2300      	movs	r3, #0
 8001066:	f000 f821 	bl	80010ac <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	6899      	ldr	r1, [r3, #8]
 8001070:	2200      	movs	r2, #0
 8001072:	2301      	movs	r3, #1
 8001074:	f000 f81a 	bl	80010ac <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	6899      	ldr	r1, [r3, #8]
 800107e:	2201      	movs	r2, #1
 8001080:	2301      	movs	r3, #1
 8001082:	f000 f813 	bl	80010ac <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	f7ff fec0 	bl	8000e24 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop

080010ac <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08d      	sub	sp, #52	; 0x34
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d113      	bne.n	80010ea <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 80010c2:	2308      	movs	r3, #8
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 80010c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 80010d0:	231f      	movs	r3, #31
 80010d2:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 80010d4:	7a3b      	ldrb	r3, [r7, #8]
 80010d6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 80010de:	7a7b      	ldrb	r3, [r7, #9]
 80010e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	76fb      	strb	r3, [r7, #27]
 80010e8:	e013      	b.n	8001112 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 80010ea:	2318      	movs	r3, #24
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 80010ee:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 80010f4:	2310      	movs	r3, #16
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 80010f8:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80010fc:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80010fe:	7abb      	ldrb	r3, [r7, #10]
 8001100:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001104:	b2db      	uxtb	r3, r3
 8001106:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	3228      	adds	r2, #40	; 0x28
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	43db      	mvns	r3, r3
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001128:	7efa      	ldrb	r2, [r7, #27]
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	43db      	mvns	r3, r3
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	3228      	adds	r2, #40	; 0x28
 8001154:	6979      	ldr	r1, [r7, #20]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800115a:	3734      	adds	r7, #52	; 0x34
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001176:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	e009      	b.n	80011c0 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	4a39      	ldr	r2, [pc, #228]	; (8001294 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fe85 	bl	8000ec4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	3301      	adds	r3, #1
 80011be:	75fb      	strb	r3, [r7, #23]
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d9f2      	bls.n	80011ac <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 80011d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011dc:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]
 80011e2:	e021      	b.n	8001228 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	4a2b      	ldr	r2, [pc, #172]	; (8001294 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011f0:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011f8:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	3301      	adds	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d9da      	bls.n	80011e4 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d107      	bne.n	800126c <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
 8001270:	e009      	b.n	8001286 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe10 	bl	8000ea0 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	3301      	adds	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d9f2      	bls.n	8001272 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08001b3c 	.word	0x08001b3c

08001298 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7b1b      	ldrb	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b0:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2201      	movs	r2, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	4013      	ands	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7b5b      	ldrb	r3, [r3, #13]
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db29      	blt.n	8001336 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10a      	bne.n	8001302 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 80012ec:	2308      	movs	r3, #8
 80012ee:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80012f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001300:	e00c      	b.n	800131c <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001312:	f023 021f 	bic.w	r2, r3, #31
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	7b52      	ldrb	r2, [r2, #13]
 8001326:	b251      	sxtb	r1, r2
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	431a      	orrs	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	431a      	orrs	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	431a      	orrs	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	3280      	adds	r2, #128	; 0x80
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop

08001374 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3310      	adds	r3, #16
 8001394:	4619      	mov	r1, r3
 8001396:	2301      	movs	r3, #1
 8001398:	408b      	lsls	r3, r1
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d149      	bne.n	8001450 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fd98 	bl	8000efc <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e02f      	b.n	8001432 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4608      	mov	r0, r1
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fe2b 	bl	8001044 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	2103      	movs	r1, #3
 80013fc:	f7ff feb2 	bl	8001164 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	7a1b      	ldrb	r3, [r3, #8]
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	4618      	mov	r0, r3
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	f7ff ffb0 	bl	8001380 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	2200      	movs	r2, #0
 800142a:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d9cc      	bls.n	80013d2 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7e5b      	ldrb	r3, [r3, #25]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fda7 	bl	8000f98 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7c1a      	ldrb	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3304      	adds	r3, #4
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	f7fe ff8b 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7c1a      	ldrb	r2, [r3, #16]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7c5b      	ldrb	r3, [r3, #17]
 8001486:	4608      	mov	r0, r1
 8001488:	4611      	mov	r1, r2
 800148a:	461a      	mov	r2, r3
 800148c:	f7ff fca8 	bl	8000de0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff ffd6 	bl	800149c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <SystemCoreSetup+0x94>)
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <SystemCoreSetup+0x98>)
 80014f6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80014fc:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <SystemCoreSetup+0x94>)
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <SystemCoreSetup+0x94>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <SystemCoreSetup+0x9c>)
 8001510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001514:	3314      	adds	r3, #20
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f023 030f 	bic.w	r3, r3, #15
 8001520:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <SystemCoreSetup+0x9c>)
 800152c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001530:	3314      	adds	r3, #20
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <SystemCoreSetup+0x94>)
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <SystemCoreSetup+0x94>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f023 0310 	bic.w	r3, r3, #16
 8001540:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <SystemCoreSetup+0x94>)
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <SystemCoreSetup+0x94>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f023 0308 	bic.w	r3, r3, #8
 800154c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SystemCoreSetup+0x94>)
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <SystemCoreSetup+0x94>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <SystemCoreSetup+0x94>)
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemCoreSetup+0x94>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001564:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <SystemCoreSetup+0x94>)
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <SystemCoreSetup+0x94>)
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	08000000 	.word	0x08000000
 8001580:	58001000 	.word	0x58001000

08001584 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]

  return (status);
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <OSCHP_GetFrequency+0x10>)
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	00b71b00 	.word	0x00b71b00

080015b8 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 80015c0:	4906      	ldr	r1, [pc, #24]	; (80015dc <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	50004600 	.word	0x50004600

080015e0 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <SystemCoreClockSetup+0x60>)
 80015e8:	1d3c      	adds	r4, r7, #4
 80015ea:	461d      	mov	r5, r3
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffb8 	bl	800056c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff f8a9 	bl	8000754 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8001602:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001606:	f7ff f85d 	bl	80006c4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 800160a:	2006      	movs	r0, #6
 800160c:	f7ff f92e 	bl	800086c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8001610:	f7ff f998 	bl	8000944 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8001614:	2003      	movs	r0, #3
 8001616:	2164      	movs	r1, #100	; 0x64
 8001618:	f7ff f9a4 	bl	8000964 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ffcb 	bl	80015b8 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8001622:	2002      	movs	r0, #2
 8001624:	f7ff f95e 	bl	80008e4 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff f85f 	bl	80006ec <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff f944 	bl	80008bc <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff f92d 	bl	8000894 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bdb0      	pop	{r4, r5, r7, pc}
 8001640:	08001bdc 	.word	0x08001bdc

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001650:	0a1b      	lsrs	r3, r3, #8
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_EnableIRQ+0x34>)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	f002 021f 	and.w	r2, r2, #31
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	490d      	ldr	r1, [pc, #52]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	4909      	ldr	r1, [pc, #36]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
  }
}
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b06      	cmp	r3, #6
 8001708:	bf28      	it	cs
 800170a:	2306      	movcs	r3, #6
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3306      	adds	r3, #6
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b01      	subs	r3, #1
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2201      	movs	r2, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	1e59      	subs	r1, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001740:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800175e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	3260      	adds	r2, #96	; 0x60
 8001786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	ea42 0103 	orr.w	r1, r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	3260      	adds	r2, #96	; 0x60
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	32a0      	adds	r2, #160	; 0xa0
 80017c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	32c0      	adds	r2, #192	; 0xc0
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	b29b      	uxth	r3, r3
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
 8001800:	2b02      	cmp	r3, #2
 8001802:	f040 8099 	bne.w	8001938 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fdce 	bl	80013ac <GLOBAL_ADC_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4610      	mov	r0, r2
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	2300      	movs	r3, #0
 8001826:	f7ff fb93 	bl	8000f50 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fcb0 	bl	800119c <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e02e      	b.n	80018a0 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	7b5b      	ldrb	r3, [r3, #13]
 8001856:	4619      	mov	r1, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4610      	mov	r0, r2
 800185e:	461a      	mov	r2, r3
 8001860:	f7ff fd1a 	bl	8001298 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4619      	mov	r1, r3
                                indexed->res_handle);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800187a:	4610      	mov	r0, r2
 800187c:	461a      	mov	r2, r3
 800187e:	f7ff ff95 	bl	80017ac <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800188c:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001892:	4610      	mov	r0, r2
 8001894:	461a      	mov	r2, r3
 8001896:	f7ff ff6d 	bl	8001774 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	3301      	adds	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0cd      	beq.n	8001842 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d02c      	beq.n	8001910 <ADC_MEASUREMENT_Init+0x11c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d028      	beq.n	8001910 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b2dc      	uxtb	r4, r3
 80018c6:	f7ff febd 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80018ca:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80018d0:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff ff05 	bl	80016ec <NVIC_EncodePriority>
 80018e2:	4602      	mov	r2, r0
 80018e4:	b263      	sxtb	r3, r4
 80018e6:	4618      	mov	r0, r3
 80018e8:	4611      	mov	r1, r2
 80018ea:	f7ff fed5 	bl	8001698 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e5b      	ldrb	r3, [r3, #25]
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff fb7e 	bl	8000ffc <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	b25b      	sxtb	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fea8 	bl	8001660 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7e9b      	ldrb	r3, [r3, #26]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff0f 	bl	8001750 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7bba      	ldrb	r2, [r7, #14]
 8001936:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7e1b      	ldrb	r3, [r3, #24]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL));

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fefc 	bl	8001750 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop

08001960 <ADC_MEASUREMENT_GetResult>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	789b      	ldrb	r3, [r3, #2]
 8001972:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff ff28 	bl	80017d0 <XMC_VADC_GROUP_GetResult>
 8001980:	4603      	mov	r3, r0
 8001982:	81fb      	strh	r3, [r7, #14]

  return (result);
 8001984:	89fb      	ldrh	r3, [r7, #14]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop

08001990 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <DAVE_Init+0x50>)
 800199c:	f7ff fdf2 	bl	8001584 <CLOCK_XMC4_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <DAVE_Init+0x54>)
 80019ac:	f7ff ff22 	bl	80017f4 <ADC_MEASUREMENT_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d104      	bne.n	80019c4 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED0); 
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <DAVE_Init+0x58>)
 80019bc:	f7ff fd4e 	bl	800145c <DIGITAL_IO_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <DAVE_Init+0x5c>)
 80019cc:	f7ff fd46 	bl	800145c <DIGITAL_IO_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	1ffe888c 	.word	0x1ffe888c
 80019e4:	1ffe8870 	.word	0x1ffe8870
 80019e8:	08001bb4 	.word	0x08001bb4
 80019ec:	08001bc8 	.word	0x08001bc8

080019f0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2201      	movs	r2, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]
}
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a22:	409a      	lsls	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	605a      	str	r2, [r3, #4]
}
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7c1b      	ldrb	r3, [r3, #16]
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff ffd2 	bl	80019f0 <XMC_GPIO_SetOutputHigh>
}
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7c1b      	ldrb	r3, [r3, #16]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff ffd2 	bl	8001a10 <XMC_GPIO_SetOutputLow>
}
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop

08001a74 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */
XMC_VADC_RESULT_SIZE_t result;
int main(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8001a7a:	f7ff ff89 	bl	8001990 <DAVE_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d000      	beq.n	8001a8a <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8001a88:	e7fe      	b.n	8001a88 <main+0x14>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 8001a8a:	e7fe      	b.n	8001a8a <main+0x16>

08001a8c <VADC0_C0_2_IRQHandler>:
}

void Adc_Measurement_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 8001a90:	4812      	ldr	r0, [pc, #72]	; (8001adc <VADC0_C0_2_IRQHandler+0x50>)
 8001a92:	f7ff ff65 	bl	8001960 <ADC_MEASUREMENT_GetResult>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <VADC0_C0_2_IRQHandler+0x54>)
 8001a9c:	801a      	strh	r2, [r3, #0]

	if(result>1500)
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <VADC0_C0_2_IRQHandler+0x54>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d903      	bls.n	8001ab2 <VADC0_C0_2_IRQHandler+0x26>
	{
		DIGITAL_IO_SetOutputHigh(&LED0);
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <VADC0_C0_2_IRQHandler+0x58>)
 8001aac:	f7ff ffc2 	bl	8001a34 <DIGITAL_IO_SetOutputHigh>
 8001ab0:	e002      	b.n	8001ab8 <VADC0_C0_2_IRQHandler+0x2c>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&LED0 );
 8001ab2:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <VADC0_C0_2_IRQHandler+0x58>)
 8001ab4:	f7ff ffce 	bl	8001a54 <DIGITAL_IO_SetOutputLow>
	}
	if(result>2500)
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <VADC0_C0_2_IRQHandler+0x54>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d903      	bls.n	8001acc <VADC0_C0_2_IRQHandler+0x40>
	{
		DIGITAL_IO_SetOutputHigh(&LED1);
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <VADC0_C0_2_IRQHandler+0x5c>)
 8001ac6:	f7ff ffb5 	bl	8001a34 <DIGITAL_IO_SetOutputHigh>
 8001aca:	e002      	b.n	8001ad2 <VADC0_C0_2_IRQHandler+0x46>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&LED1);
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <VADC0_C0_2_IRQHandler+0x5c>)
 8001ace:	f7ff ffc1 	bl	8001a54 <DIGITAL_IO_SetOutputLow>
	}
	ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <VADC0_C0_2_IRQHandler+0x60>)
 8001ad4:	f7ff ff36 	bl	8001944 <ADC_MEASUREMENT_StartConversion>
}
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	1ffe885c 	.word	0x1ffe885c
 8001ae0:	1ffe8894 	.word	0x1ffe8894
 8001ae4:	08001bb4 	.word	0x08001bb4
 8001ae8:	08001bc8 	.word	0x08001bc8
 8001aec:	1ffe8870 	.word	0x1ffe8870

08001af0 <__libc_init_array>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <__libc_init_array+0x3c>)
 8001af4:	4c0e      	ldr	r4, [pc, #56]	; (8001b30 <__libc_init_array+0x40>)
 8001af6:	1ae4      	subs	r4, r4, r3
 8001af8:	10a4      	asrs	r4, r4, #2
 8001afa:	2500      	movs	r5, #0
 8001afc:	461e      	mov	r6, r3
 8001afe:	42a5      	cmp	r5, r4
 8001b00:	d004      	beq.n	8001b0c <__libc_init_array+0x1c>
 8001b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b06:	4798      	blx	r3
 8001b08:	3501      	adds	r5, #1
 8001b0a:	e7f8      	b.n	8001afe <__libc_init_array+0xe>
 8001b0c:	f7ff fc32 	bl	8001374 <_init>
 8001b10:	4c08      	ldr	r4, [pc, #32]	; (8001b34 <__libc_init_array+0x44>)
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <__libc_init_array+0x48>)
 8001b14:	1ae4      	subs	r4, r4, r3
 8001b16:	10a4      	asrs	r4, r4, #2
 8001b18:	2500      	movs	r5, #0
 8001b1a:	461e      	mov	r6, r3
 8001b1c:	42a5      	cmp	r5, r4
 8001b1e:	d004      	beq.n	8001b2a <__libc_init_array+0x3a>
 8001b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b24:	4798      	blx	r3
 8001b26:	3501      	adds	r5, #1
 8001b28:	e7f8      	b.n	8001b1c <__libc_init_array+0x2c>
 8001b2a:	bd70      	pop	{r4, r5, r6, pc}
 8001b2c:	1ffe888c 	.word	0x1ffe888c
 8001b30:	1ffe888c 	.word	0x1ffe888c
 8001b34:	1ffe888c 	.word	0x1ffe888c
 8001b38:	1ffe888c 	.word	0x1ffe888c

08001b3c <g_xmc_vadc_group_array>:
 8001b3c:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08001b4c <group_init_handle0>:
	...

08001b60 <group_init_handle1>:
	...

08001b74 <group_init_handle2>:
	...

08001b88 <group_init_handle3>:
	...

08001b9c <global_config>:
 8001b9c:	00000000 00000004 00000000 00000000     ................
	...

08001bb4 <LED0>:
 8001bb4:	48028400 00000080 00010000 00000000     ...H............
 8001bc4:	00000000                                ....

08001bc8 <LED1>:
 8001bc8:	48028400 00000080 00010000 00000000     ...H............
 8001bd8:	00000001 01010230 00010000 00000000     ....0...........
 8001be8:	00010000 01010102                       ........

08001bf0 <global_iclass_config>:
 8001bf0:	00000000                                ....

08001bf4 <backgnd_rs_intr_handle>:
 8001bf4:	00000010 0000003f 00000000              ....?.......

08001c00 <backgnd_config>:
 8001c00:	00000005 00000000 00000008              ............
