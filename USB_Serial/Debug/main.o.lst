   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm send_data,2,2
  20              	 .global usb_rx_buffer
  21              	 .section .bss.usb_rx_buffer,"aw",%nobits
  22              	 .align 2
  25              	usb_rx_buffer:
  26 0000 00000000 	 .space 256
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              	 .global CommandSeperator
  28              	 .section .rodata.CommandSeperator,"a",%progbits
  29              	 .align 2
  32              	CommandSeperator:
  33 0000 2000     	 .ascii " \000"
  34              	 .global rx_buffer
  35 0002 0000     	 .section .bss.rx_buffer,"aw",%nobits
  36              	 .align 2
  39              	rx_buffer:
  40 0000 00000000 	 .space 64
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              	 .global tx_buffer
  42              	 .section .bss.tx_buffer,"aw",%nobits
  43              	 .align 2
  46              	tx_buffer:
  47 0000 00000000 	 .space 64
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              	 .comm line_encoding_ptr,7,4
  49              	 .section .text.delay,"ax",%progbits
  50              	 .align 2
  51              	 .thumb
  52              	 .thumb_func
  54              	delay:
  55              	.LFB202:
  56              	 .file 1 "../main.c"
   1:../main.c     **** #include "DAVE.h"
   2:../main.c     **** #include <stdlib.h>
   3:../main.c     **** #include <stdio.h>
   4:../main.c     **** #include <string.h>
   5:../main.c     **** #include <stdarg.h>
   6:../main.c     **** #include <stdbool.h>
   7:../main.c     **** 
   8:../main.c     **** #define S(s) ((int8_t*)(s))
   9:../main.c     **** uint16_t send_data;
  10:../main.c     **** typedef enum USB_STATUS
  11:../main.c     **** {
  12:../main.c     **** 	USB_STATUS_SUCCESS = 0U, USB_STATUS_FAILURE
  13:../main.c     **** } USB_STATUS_t;
  14:../main.c     **** #define USBD_VCOM_BUFFSIZE (256)
  15:../main.c     **** 
  16:../main.c     **** int8_t usb_rx_buffer[USBD_VCOM_BUFFSIZE] ={ 0 };
  17:../main.c     **** const char CommandSeperator[] = " ";
  18:../main.c     ****   int8_t rx_buffer[64] = { 0 };
  19:../main.c     ****   int8_t tx_buffer[64] = { 0 };
  20:../main.c     ****   CDC_LineEncoding_t line_encoding_ptr;
  21:../main.c     ****   static void delay(uint32_t cycles);
  22:../main.c     **** 
  23:../main.c     ****   static void delay(uint32_t cycles)
  24:../main.c     ****   {
  57              	 .loc 1 24 0
  58              	 .cfi_startproc
  59              	 
  60              	 
  61              	 
  62 0000 80B4     	 push {r7}
  63              	.LCFI0:
  64              	 .cfi_def_cfa_offset 4
  65              	 .cfi_offset 7,-4
  66 0002 85B0     	 sub sp,sp,#20
  67              	.LCFI1:
  68              	 .cfi_def_cfa_offset 24
  69 0004 00AF     	 add r7,sp,#0
  70              	.LCFI2:
  71              	 .cfi_def_cfa_register 7
  72 0006 7860     	 str r0,[r7,#4]
  25:../main.c     ****     volatile uint32_t i;
  26:../main.c     **** 
  27:../main.c     ****     for(i = 0UL; i < cycles ;++i)
  73              	 .loc 1 27 0
  74 0008 0023     	 movs r3,#0
  75 000a FB60     	 str r3,[r7,#12]
  76 000c 03E0     	 b .L2
  77              	.L3:
  28:../main.c     ****     {
  29:../main.c     ****        __NOP();
  78              	 .loc 1 29 0 discriminator 3
  79              	
  80 000e 00BF     	 nop
  81              	
  27:../main.c     ****     {
  82              	 .loc 1 27 0 discriminator 3
  83              	 .thumb
  84 0010 FB68     	 ldr r3,[r7,#12]
  85 0012 0133     	 adds r3,r3,#1
  86 0014 FB60     	 str r3,[r7,#12]
  87              	.L2:
  27:../main.c     ****     {
  88              	 .loc 1 27 0 is_stmt 0 discriminator 1
  89 0016 FA68     	 ldr r2,[r7,#12]
  90 0018 7B68     	 ldr r3,[r7,#4]
  91 001a 9A42     	 cmp r2,r3
  92 001c F7D3     	 bcc .L3
  30:../main.c     ****     }
  31:../main.c     ****   }
  93              	 .loc 1 31 0 is_stmt 1
  94 001e 1437     	 adds r7,r7,#20
  95              	.LCFI3:
  96              	 .cfi_def_cfa_offset 4
  97 0020 BD46     	 mov sp,r7
  98              	.LCFI4:
  99              	 .cfi_def_cfa_register 13
 100              	 
 101 0022 5DF8047B 	 ldr r7,[sp],#4
 102              	.LCFI5:
 103              	 .cfi_restore 7
 104              	 .cfi_def_cfa_offset 0
 105 0026 7047     	 bx lr
 106              	 .cfi_endproc
 107              	.LFE202:
 109              	 .section .text.USB_printf,"ax",%progbits
 110              	 .align 2
 111              	 .global USB_printf
 112              	 .thumb
 113              	 .thumb_func
 115              	USB_printf:
 116              	.LFB203:
  32:../main.c     ****   USB_STATUS_t USB_printf(const char *format, ...)
  33:../main.c     ****   {
 117              	 .loc 1 33 0
 118              	 .cfi_startproc
 119              	 
 120              	 
 121 0000 0FB4     	 push {r0,r1,r2,r3}
 122              	.LCFI6:
 123              	 .cfi_def_cfa_offset 16
 124              	 .cfi_offset 0,-16
 125              	 .cfi_offset 1,-12
 126              	 .cfi_offset 2,-8
 127              	 .cfi_offset 3,-4
 128 0002 80B5     	 push {r7,lr}
 129              	.LCFI7:
 130              	 .cfi_def_cfa_offset 24
 131              	 .cfi_offset 7,-24
 132              	 .cfi_offset 14,-20
 133 0004 C2B0     	 sub sp,sp,#264
 134              	.LCFI8:
 135              	 .cfi_def_cfa_offset 288
 136 0006 00AF     	 add r7,sp,#0
 137              	.LCFI9:
 138              	 .cfi_def_cfa_register 7
  34:../main.c     ****   	char outPutString[USBD_VCOM_BUFFSIZE];
  35:../main.c     ****   	USB_STATUS_t result;
  36:../main.c     ****   	va_list args;
  37:../main.c     ****   	va_start(args, format);
 139              	 .loc 1 37 0
 140 0008 07F58A72 	 add r2,r7,#276
 141 000c 3B46     	 mov r3,r7
 142 000e 1A60     	 str r2,[r3]
  38:../main.c     **** 
  39:../main.c     ****   	vsnprintf(outPutString, USBD_VCOM_BUFFSIZE, format, args);
 143              	 .loc 1 39 0
 144 0010 3A1D     	 adds r2,r7,#4
 145 0012 3B46     	 mov r3,r7
 146 0014 1046     	 mov r0,r2
 147 0016 4FF48071 	 mov r1,#256
 148 001a D7F81021 	 ldr r2,[r7,#272]
 149 001e 1B68     	 ldr r3,[r3]
 150 0020 FFF7FEFF 	 bl vsnprintf
  40:../main.c     ****   	result = USBD_VCOM_SendString(S(outPutString));
 151              	 .loc 1 40 0
 152 0024 3B1D     	 adds r3,r7,#4
 153 0026 1846     	 mov r0,r3
 154 0028 FFF7FEFF 	 bl USBD_VCOM_SendString
 155 002c 0346     	 mov r3,r0
 156 002e 87F80731 	 strb r3,[r7,#263]
  41:../main.c     **** 
  42:../main.c     ****   	va_end(args);
  43:../main.c     ****   	return result;
 157              	 .loc 1 43 0
 158 0032 97F80731 	 ldrb r3,[r7,#263]
  44:../main.c     ****   }
 159              	 .loc 1 44 0
 160 0036 1846     	 mov r0,r3
 161 0038 07F58477 	 add r7,r7,#264
 162              	.LCFI10:
 163              	 .cfi_def_cfa_offset 24
 164 003c BD46     	 mov sp,r7
 165              	.LCFI11:
 166              	 .cfi_def_cfa_register 13
 167              	 
 168 003e BDE88040 	 pop {r7,lr}
 169              	.LCFI12:
 170              	 .cfi_restore 14
 171              	 .cfi_restore 7
 172              	 .cfi_def_cfa_offset 16
 173 0042 04B0     	 add sp,sp,#16
 174              	.LCFI13:
 175              	 .cfi_restore 3
 176              	 .cfi_restore 2
 177              	 .cfi_restore 1
 178              	 .cfi_restore 0
 179              	 .cfi_def_cfa_offset 0
 180 0044 7047     	 bx lr
 181              	 .cfi_endproc
 182              	.LFE203:
 184 0046 00BF     	 .section .rodata
 185              	 .align 2
 186              	.LC0:
 187 0000 0D0A2052 	 .ascii "\015\012 Return Data: %d \015\012\000"
 187      65747572 
 187      6E204461 
 187      74613A20 
 187      2564200D 
 188              	 .section .text.processRxCommand,"ax",%progbits
 189              	 .align 2
 190              	 .global processRxCommand
 191              	 .thumb
 192              	 .thumb_func
 194              	processRxCommand:
 195              	.LFB204:
  45:../main.c     **** 
  46:../main.c     ****   USB_STATUS_t processRxCommand(char* commandLine)
  47:../main.c     ****   {
 196              	 .loc 1 47 0
 197              	 .cfi_startproc
 198              	 
 199              	 
 200 0000 80B5     	 push {r7,lr}
 201              	.LCFI14:
 202              	 .cfi_def_cfa_offset 8
 203              	 .cfi_offset 7,-8
 204              	 .cfi_offset 14,-4
 205 0002 84B0     	 sub sp,sp,#16
 206              	.LCFI15:
 207              	 .cfi_def_cfa_offset 24
 208 0004 00AF     	 add r7,sp,#0
 209              	.LCFI16:
 210              	 .cfi_def_cfa_register 7
 211 0006 7860     	 str r0,[r7,#4]
  48:../main.c     ****   	char *token;
  49:../main.c     **** 
  50:../main.c     ****   	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 212              	 .loc 1 50 0
 213 0008 3B1D     	 adds r3,r7,#4
 214 000a 1846     	 mov r0,r3
 215 000c 1149     	 ldr r1,.L9
 216 000e FFF7FEFF 	 bl strsep
 217 0012 F860     	 str r0,[r7,#12]
 218 0014 FB68     	 ldr r3,[r7,#12]
 219 0016 002B     	 cmp r3,#0
 220 0018 16D0     	 beq .L7
  51:../main.c     ****   		{
  52:../main.c     ****   		send_data = strtoul(token, NULL, 0);
 221              	 .loc 1 52 0
 222 001a F868     	 ldr r0,[r7,#12]
 223 001c 0021     	 movs r1,#0
 224 001e 0022     	 movs r2,#0
 225 0020 FFF7FEFF 	 bl strtoul
 226 0024 0346     	 mov r3,r0
 227 0026 9AB2     	 uxth r2,r3
 228 0028 0B4B     	 ldr r3,.L9+4
 229 002a 1A80     	 strh r2,[r3]
  53:../main.c     **** 
  54:../main.c     ****   		send_data=send_data+10;
 230              	 .loc 1 54 0
 231 002c 0A4B     	 ldr r3,.L9+4
 232 002e 1B88     	 ldrh r3,[r3]
 233 0030 0A33     	 adds r3,r3,#10
 234 0032 9AB2     	 uxth r2,r3
 235 0034 084B     	 ldr r3,.L9+4
 236 0036 1A80     	 strh r2,[r3]
  55:../main.c     ****   		//return USB_CAN_STATUS_SUCCESS;
  56:../main.c     ****   		USB_printf("\r\n Return Data: %d \r\n",send_data);
 237              	 .loc 1 56 0
 238 0038 074B     	 ldr r3,.L9+4
 239 003a 1B88     	 ldrh r3,[r3]
 240 003c 0748     	 ldr r0,.L9+8
 241 003e 1946     	 mov r1,r3
 242 0040 FFF7FEFF 	 bl USB_printf
  57:../main.c     **** 
  58:../main.c     ****   		return USB_STATUS_SUCCESS;
 243              	 .loc 1 58 0
 244 0044 0023     	 movs r3,#0
 245 0046 00E0     	 b .L8
 246              	.L7:
  59:../main.c     **** 
  60:../main.c     ****   		}
  61:../main.c     ****   	else
  62:../main.c     ****   		{
  63:../main.c     ****   			return USB_STATUS_FAILURE;
 247              	 .loc 1 63 0
 248 0048 0123     	 movs r3,#1
 249              	.L8:
  64:../main.c     ****   		}
  65:../main.c     ****   }
 250              	 .loc 1 65 0
 251 004a 1846     	 mov r0,r3
 252 004c 1037     	 adds r7,r7,#16
 253              	.LCFI17:
 254              	 .cfi_def_cfa_offset 8
 255 004e BD46     	 mov sp,r7
 256              	.LCFI18:
 257              	 .cfi_def_cfa_register 13
 258              	 
 259 0050 80BD     	 pop {r7,pc}
 260              	.L10:
 261 0052 00BF     	 .align 2
 262              	.L9:
 263 0054 00000000 	 .word CommandSeperator
 264 0058 00000000 	 .word send_data
 265 005c 00000000 	 .word .LC0
 266              	 .cfi_endproc
 267              	.LFE204:
 269              	 .section .text.is_printable,"ax",%progbits
 270              	 .align 2
 271              	 .global is_printable
 272              	 .thumb
 273              	 .thumb_func
 275              	is_printable:
 276              	.LFB205:
  66:../main.c     **** 
  67:../main.c     **** 
  68:../main.c     ****   int is_printable(int8_t data_byte)
  69:../main.c     ****   {
 277              	 .loc 1 69 0
 278              	 .cfi_startproc
 279              	 
 280              	 
 281              	 
 282 0000 80B4     	 push {r7}
 283              	.LCFI19:
 284              	 .cfi_def_cfa_offset 4
 285              	 .cfi_offset 7,-4
 286 0002 83B0     	 sub sp,sp,#12
 287              	.LCFI20:
 288              	 .cfi_def_cfa_offset 16
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI21:
 291              	 .cfi_def_cfa_register 7
 292 0006 0346     	 mov r3,r0
 293 0008 FB71     	 strb r3,[r7,#7]
  70:../main.c     ****   	return (31 < data_byte) && (data_byte < 126);
 294              	 .loc 1 70 0
 295 000a 97F90730 	 ldrsb r3,[r7,#7]
 296 000e 1F2B     	 cmp r3,#31
 297 0010 05DD     	 ble .L12
 298              	 .loc 1 70 0 is_stmt 0 discriminator 1
 299 0012 97F90730 	 ldrsb r3,[r7,#7]
 300 0016 7D2B     	 cmp r3,#125
 301 0018 01DC     	 bgt .L12
 302              	 .loc 1 70 0 discriminator 3
 303 001a 0123     	 movs r3,#1
 304 001c 00E0     	 b .L13
 305              	.L12:
 306              	 .loc 1 70 0 discriminator 4
 307 001e 0023     	 movs r3,#0
 308              	.L13:
  71:../main.c     ****   }
 309              	 .loc 1 71 0 is_stmt 1 discriminator 6
 310 0020 1846     	 mov r0,r3
 311 0022 0C37     	 adds r7,r7,#12
 312              	.LCFI22:
 313              	 .cfi_def_cfa_offset 4
 314 0024 BD46     	 mov sp,r7
 315              	.LCFI23:
 316              	 .cfi_def_cfa_register 13
 317              	 
 318 0026 5DF8047B 	 ldr r7,[sp],#4
 319              	.LCFI24:
 320              	 .cfi_restore 7
 321              	 .cfi_def_cfa_offset 0
 322 002a 7047     	 bx lr
 323              	 .cfi_endproc
 324              	.LFE205:
 326              	 .section .rodata
 327 0016 0000     	 .align 2
 328              	.LC1:
 329 0018 0D3E2025 	 .ascii "\015> %s\000"
 329      7300
 330              	 .section .text.USBD_VCOM_SendPromt,"ax",%progbits
 331              	 .align 2
 332              	 .global USBD_VCOM_SendPromt
 333              	 .thumb
 334              	 .thumb_func
 336              	USBD_VCOM_SendPromt:
 337              	.LFB206:
  72:../main.c     **** 
  73:../main.c     **** 
  74:../main.c     ****   USBD_VCOM_STATUS_t USBD_VCOM_SendPromt(int8_t usb_rx_buffer[])
  75:../main.c     ****   {
 338              	 .loc 1 75 0
 339              	 .cfi_startproc
 340              	 
 341              	 
 342 0000 80B5     	 push {r7,lr}
 343              	.LCFI25:
 344              	 .cfi_def_cfa_offset 8
 345              	 .cfi_offset 7,-8
 346              	 .cfi_offset 14,-4
 347 0002 82B0     	 sub sp,sp,#8
 348              	.LCFI26:
 349              	 .cfi_def_cfa_offset 16
 350 0004 00AF     	 add r7,sp,#0
 351              	.LCFI27:
 352              	 .cfi_def_cfa_register 7
 353 0006 7860     	 str r0,[r7,#4]
  76:../main.c     ****   	return USB_printf("\r> %s", usb_rx_buffer);
 354              	 .loc 1 76 0
 355 0008 0448     	 ldr r0,.L17
 356 000a 7968     	 ldr r1,[r7,#4]
 357 000c FFF7FEFF 	 bl USB_printf
 358 0010 0346     	 mov r3,r0
  77:../main.c     ****   }
 359              	 .loc 1 77 0
 360 0012 1846     	 mov r0,r3
 361 0014 0837     	 adds r7,r7,#8
 362              	.LCFI28:
 363              	 .cfi_def_cfa_offset 8
 364 0016 BD46     	 mov sp,r7
 365              	.LCFI29:
 366              	 .cfi_def_cfa_register 13
 367              	 
 368 0018 80BD     	 pop {r7,pc}
 369              	.L18:
 370 001a 00BF     	 .align 2
 371              	.L17:
 372 001c 18000000 	 .word .LC1
 373              	 .cfi_endproc
 374              	.LFE206:
 376              	 .section .rodata
 377 001e 0000     	 .align 2
 378              	.LC2:
 379 0020 53656E64 	 .ascii "Send\000"
 379      00
 380 0025 000000   	 .align 2
 381              	.LC3:
 382 0028 0D0A556E 	 .ascii "\015\012Unknown command '%s'\015\012\000"
 382      6B6E6F77 
 382      6E20636F 
 382      6D6D616E 
 382      64202725 
 383 0041 000000   	 .align 2
 384              	.LC4:
 385 0044 0D0A5265 	 .ascii "\015\012Result: Success\015\012\000"
 385      73756C74 
 385      3A205375 
 385      63636573 
 385      730D0A00 
 386              	 .align 2
 387              	.LC5:
 388 0058 0D0A5265 	 .ascii "\015\012Result: Failure\015\012\000"
 388      73756C74 
 388      3A204661 
 388      696C7572 
 388      650D0A00 
 389              	 .section .text.processCommand,"ax",%progbits
 390              	 .align 2
 391              	 .global processCommand
 392              	 .thumb
 393              	 .thumb_func
 395              	processCommand:
 396              	.LFB207:
  78:../main.c     **** 
  79:../main.c     **** 
  80:../main.c     ****   USB_STATUS_t processCommand(int8_t usb_rx_buffer[])
  81:../main.c     ****   {
 397              	 .loc 1 81 0
 398              	 .cfi_startproc
 399              	 
 400              	 
 401 0000 80B5     	 push {r7,lr}
 402              	.LCFI30:
 403              	 .cfi_def_cfa_offset 8
 404              	 .cfi_offset 7,-8
 405              	 .cfi_offset 14,-4
 406 0002 86B0     	 sub sp,sp,#24
 407              	.LCFI31:
 408              	 .cfi_def_cfa_offset 32
 409 0004 00AF     	 add r7,sp,#0
 410              	.LCFI32:
 411              	 .cfi_def_cfa_register 7
 412 0006 7860     	 str r0,[r7,#4]
  82:../main.c     ****   	USB_STATUS_t result = USB_STATUS_FAILURE;
 413              	 .loc 1 82 0
 414 0008 0123     	 movs r3,#1
 415 000a FB75     	 strb r3,[r7,#23]
  83:../main.c     ****   	char* commandLine = (char*) usb_rx_buffer;
 416              	 .loc 1 83 0
 417 000c 7B68     	 ldr r3,[r7,#4]
 418 000e BB60     	 str r3,[r7,#8]
  84:../main.c     ****   	const char* cmd = NULL;
 419              	 .loc 1 84 0
 420 0010 0023     	 movs r3,#0
 421 0012 3B61     	 str r3,[r7,#16]
  85:../main.c     ****   	char *token;
  86:../main.c     **** 
  87:../main.c     ****   	if (usb_rx_buffer == NULL)
 422              	 .loc 1 87 0
 423 0014 7B68     	 ldr r3,[r7,#4]
 424 0016 002B     	 cmp r3,#0
 425 0018 01D1     	 bne .L20
  88:../main.c     ****   	{
  89:../main.c     ****   		return USB_STATUS_FAILURE;
 426              	 .loc 1 89 0
 427 001a 0123     	 movs r3,#1
 428 001c 28E0     	 b .L26
 429              	.L20:
  90:../main.c     ****   	}
  91:../main.c     **** 
  92:../main.c     ****   	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 430              	 .loc 1 92 0
 431 001e 07F10803 	 add r3,r7,#8
 432 0022 1846     	 mov r0,r3
 433 0024 1449     	 ldr r1,.L27
 434 0026 FFF7FEFF 	 bl strsep
 435 002a F860     	 str r0,[r7,#12]
 436 002c FB68     	 ldr r3,[r7,#12]
 437 002e 002B     	 cmp r3,#0
 438 0030 1DD0     	 beq .L22
  93:../main.c     ****   	{
  94:../main.c     ****   		cmd = token;
 439              	 .loc 1 94 0
 440 0032 FB68     	 ldr r3,[r7,#12]
 441 0034 3B61     	 str r3,[r7,#16]
  95:../main.c     ****   		if (!strcmp(cmd, "Send"))
 442              	 .loc 1 95 0
 443 0036 3869     	 ldr r0,[r7,#16]
 444 0038 1049     	 ldr r1,.L27+4
 445 003a FFF7FEFF 	 bl strcmp
 446 003e 0346     	 mov r3,r0
 447 0040 002B     	 cmp r3,#0
 448 0042 06D1     	 bne .L23
  96:../main.c     ****   		{
  97:../main.c     ****   			result = processRxCommand(commandLine);
 449              	 .loc 1 97 0
 450 0044 BB68     	 ldr r3,[r7,#8]
 451 0046 1846     	 mov r0,r3
 452 0048 FFF7FEFF 	 bl processRxCommand
 453 004c 0346     	 mov r3,r0
 454 004e FB75     	 strb r3,[r7,#23]
 455 0050 03E0     	 b .L24
 456              	.L23:
  98:../main.c     ****   		}
  99:../main.c     ****   		else
 100:../main.c     ****   		{
 101:../main.c     ****   			USB_printf("\r\nUnknown command '%s'\r\n", cmd);
 457              	 .loc 1 101 0
 458 0052 0B48     	 ldr r0,.L27+8
 459 0054 3969     	 ldr r1,[r7,#16]
 460 0056 FFF7FEFF 	 bl USB_printf
 461              	.L24:
 102:../main.c     ****   		}
 103:../main.c     **** 
 104:../main.c     ****   		if (result == USB_STATUS_SUCCESS)
 462              	 .loc 1 104 0
 463 005a FB7D     	 ldrb r3,[r7,#23]
 464 005c 002B     	 cmp r3,#0
 465 005e 03D1     	 bne .L25
 105:../main.c     ****   		{
 106:../main.c     ****   			USB_printf("\r\nResult: Success\r\n");
 466              	 .loc 1 106 0
 467 0060 0848     	 ldr r0,.L27+12
 468 0062 FFF7FEFF 	 bl USB_printf
 469 0066 02E0     	 b .L22
 470              	.L25:
 107:../main.c     ****   		}
 108:../main.c     ****   		else
 109:../main.c     ****   		{
 110:../main.c     ****   			USB_printf("\r\nResult: Failure\r\n");
 471              	 .loc 1 110 0
 472 0068 0748     	 ldr r0,.L27+16
 473 006a FFF7FEFF 	 bl USB_printf
 474              	.L22:
 111:../main.c     ****   		}
 112:../main.c     ****   	}
 113:../main.c     ****   	return result;
 475              	 .loc 1 113 0
 476 006e FB7D     	 ldrb r3,[r7,#23]
 477              	.L26:
 114:../main.c     ****   }
 478              	 .loc 1 114 0 discriminator 1
 479 0070 1846     	 mov r0,r3
 480 0072 1837     	 adds r7,r7,#24
 481              	.LCFI33:
 482              	 .cfi_def_cfa_offset 8
 483 0074 BD46     	 mov sp,r7
 484              	.LCFI34:
 485              	 .cfi_def_cfa_register 13
 486              	 
 487 0076 80BD     	 pop {r7,pc}
 488              	.L28:
 489              	 .align 2
 490              	.L27:
 491 0078 00000000 	 .word CommandSeperator
 492 007c 20000000 	 .word .LC2
 493 0080 28000000 	 .word .LC3
 494 0084 44000000 	 .word .LC4
 495 0088 58000000 	 .word .LC5
 496              	 .cfi_endproc
 497              	.LFE207:
 499              	 .section .text.main,"ax",%progbits
 500              	 .align 2
 501              	 .global main
 502              	 .thumb
 503              	 .thumb_func
 505              	main:
 506              	.LFB208:
 115:../main.c     **** 
 116:../main.c     ****   int main(void)
 117:../main.c     ****   {
 507              	 .loc 1 117 0
 508              	 .cfi_startproc
 509              	 
 510              	 
 511 0000 80B5     	 push {r7,lr}
 512              	.LCFI35:
 513              	 .cfi_def_cfa_offset 8
 514              	 .cfi_offset 7,-8
 515              	 .cfi_offset 14,-4
 516 0002 84B0     	 sub sp,sp,#16
 517              	.LCFI36:
 518              	 .cfi_def_cfa_offset 24
 519 0004 00AF     	 add r7,sp,#0
 520              	.LCFI37:
 521              	 .cfi_def_cfa_register 7
 118:../main.c     ****     DAVE_STATUS_t init_status;
 119:../main.c     ****     uint16_t bytes = 0;
 522              	 .loc 1 119 0
 523 0006 0023     	 movs r3,#0
 524 0008 7B81     	 strh r3,[r7,#10]
 120:../main.c     ****     init_status = DAVE_Init();
 525              	 .loc 1 120 0
 526 000a FFF7FEFF 	 bl DAVE_Init
 527 000e 0346     	 mov r3,r0
 528 0010 7B72     	 strb r3,[r7,#9]
 121:../main.c     **** 
 122:../main.c     ****     if (init_status == DAVE_STATUS_SUCCESS)
 529              	 .loc 1 122 0
 530 0012 7B7A     	 ldrb r3,[r7,#9]
 531 0014 002B     	 cmp r3,#0
 532 0016 72D1     	 bne .L30
 533              	.LBB2:
 123:../main.c     ****     {
 124:../main.c     **** 
 125:../main.c     ****       if (USBD_VCOM_Connect() != USBD_VCOM_STATUS_SUCCESS)
 534              	 .loc 1 125 0
 535 0018 FFF7FEFF 	 bl USBD_VCOM_Connect
 536 001c 0346     	 mov r3,r0
 537 001e 002B     	 cmp r3,#0
 538 0020 02D0     	 beq .L31
 126:../main.c     ****       {
 127:../main.c     ****        return -1;
 539              	 .loc 1 127 0
 540 0022 4FF0FF33 	 mov r3,#-1
 541 0026 6BE0     	 b .L42
 542              	.L31:
 128:../main.c     ****       }
 129:../main.c     **** 
 130:../main.c     ****       while (!USBD_VCOM_IsEnumDone());
 543              	 .loc 1 130 0
 544 0028 00BF     	 nop
 545              	.L33:
 546              	 .loc 1 130 0 is_stmt 0 discriminator 1
 547 002a FFF7FEFF 	 bl USBD_VCOM_IsEnumDone
 548 002e 0346     	 mov r3,r0
 549 0030 002B     	 cmp r3,#0
 550 0032 FAD0     	 beq .L33
 131:../main.c     ****       while(!cdc_event_flags.line_encoding_event_flag);
 551              	 .loc 1 131 0 is_stmt 1
 552 0034 00BF     	 nop
 553              	.L34:
 554              	 .loc 1 131 0 is_stmt 0 discriminator 1
 555 0036 344B     	 ldr r3,.L43
 556 0038 1B78     	 ldrb r3,[r3]
 557 003a DBB2     	 uxtb r3,r3
 558 003c 002B     	 cmp r3,#0
 559 003e FAD0     	 beq .L34
 132:../main.c     **** 
 133:../main.c     ****       delay(0xffff);//ensure the status of line encoding request is properly send to host.
 560              	 .loc 1 133 0 is_stmt 1
 561 0040 4FF6FF70 	 movw r0,#65535
 562 0044 FFF7FEFF 	 bl delay
 134:../main.c     ****       USBD_VCOM_GetLineEncoding(&line_encoding_ptr);
 563              	 .loc 1 134 0
 564 0048 3048     	 ldr r0,.L43+4
 565 004a FFF7FEFF 	 bl USBD_VCOM_GetLineEncoding
 135:../main.c     **** 
 136:../main.c     ****       int usb_rx_buffer_idx = 0;
 566              	 .loc 1 136 0
 567 004e 0023     	 movs r3,#0
 568 0050 FB60     	 str r3,[r7,#12]
 569              	.L41:
 137:../main.c     **** 
 138:../main.c     ****       while(1U)
 139:../main.c     ****       {
 140:../main.c     **** 
 141:../main.c     ****         bytes = USBD_VCOM_BytesReceived();
 570              	 .loc 1 141 0
 571 0052 FFF7FEFF 	 bl USBD_VCOM_BytesReceived
 572 0056 0346     	 mov r3,r0
 573 0058 7B81     	 strh r3,[r7,#10]
 142:../main.c     ****         if (bytes)
 574              	 .loc 1 142 0
 575 005a 7B89     	 ldrh r3,[r7,#10]
 576 005c 002B     	 cmp r3,#0
 577 005e 4AD0     	 beq .L35
 578              	.LBB3:
 143:../main.c     ****         {
 144:../main.c     **** 				USBD_VCOM_STATUS_t status;
 145:../main.c     **** 				int8_t data_byte = 0;
 579              	 .loc 1 145 0
 580 0060 0023     	 movs r3,#0
 581 0062 BB71     	 strb r3,[r7,#6]
 146:../main.c     **** 				const int8_t newLine = '\r';
 582              	 .loc 1 146 0
 583 0064 0D23     	 movs r3,#13
 584 0066 3B72     	 strb r3,[r7,#8]
 147:../main.c     **** 
 148:../main.c     **** 				status = USBD_VCOM_ReceiveByte(&data_byte);
 585              	 .loc 1 148 0
 586 0068 BB1D     	 adds r3,r7,#6
 587 006a 1846     	 mov r0,r3
 588 006c FFF7FEFF 	 bl USBD_VCOM_ReceiveByte
 589 0070 0346     	 mov r3,r0
 590 0072 FB71     	 strb r3,[r7,#7]
 149:../main.c     **** 
 150:../main.c     **** 				if (status == USBD_VCOM_STATUS_SUCCESS)
 591              	 .loc 1 150 0
 592 0074 FB79     	 ldrb r3,[r7,#7]
 593 0076 002B     	 cmp r3,#0
 594 0078 3DD1     	 bne .L35
 151:../main.c     **** 				{
 152:../main.c     **** 					if (data_byte == newLine)
 595              	 .loc 1 152 0
 596 007a BB79     	 ldrb r3,[r7,#6]
 597 007c 97F90820 	 ldrsb r2,[r7,#8]
 598 0080 5BB2     	 sxtb r3,r3
 599 0082 9A42     	 cmp r2,r3
 600 0084 0BD1     	 bne .L37
 153:../main.c     **** 					{
 154:../main.c     **** 						processCommand(usb_rx_buffer);
 601              	 .loc 1 154 0
 602 0086 2248     	 ldr r0,.L43+8
 603 0088 FFF7FEFF 	 bl processCommand
 155:../main.c     **** 
 156:../main.c     **** 						usb_rx_buffer_idx = 0;
 604              	 .loc 1 156 0
 605 008c 0023     	 movs r3,#0
 606 008e FB60     	 str r3,[r7,#12]
 157:../main.c     **** 						memset(usb_rx_buffer, 0, USBD_VCOM_BUFFSIZE);
 607              	 .loc 1 157 0
 608 0090 1F48     	 ldr r0,.L43+8
 609 0092 0021     	 movs r1,#0
 610 0094 4FF48072 	 mov r2,#256
 611 0098 FFF7FEFF 	 bl memset
 612 009c 28E0     	 b .L38
 613              	.L37:
 158:../main.c     **** 					}
 159:../main.c     **** 					else if (data_byte == '\177')
 614              	 .loc 1 159 0
 615 009e BB79     	 ldrb r3,[r7,#6]
 616 00a0 5BB2     	 sxtb r3,r3
 617 00a2 7F2B     	 cmp r3,#127
 618 00a4 13D1     	 bne .L39
 160:../main.c     **** 					{
 161:../main.c     **** 						if (usb_rx_buffer_idx > 0)
 619              	 .loc 1 161 0
 620 00a6 FB68     	 ldr r3,[r7,#12]
 621 00a8 002B     	 cmp r3,#0
 622 00aa 21DD     	 ble .L38
 162:../main.c     **** 						{
 163:../main.c     **** 							usb_rx_buffer_idx--;
 623              	 .loc 1 163 0
 624 00ac FB68     	 ldr r3,[r7,#12]
 625 00ae 013B     	 subs r3,r3,#1
 626 00b0 FB60     	 str r3,[r7,#12]
 164:../main.c     **** 							usb_rx_buffer[usb_rx_buffer_idx] = ' ';
 627              	 .loc 1 164 0
 628 00b2 174A     	 ldr r2,.L43+8
 629 00b4 FB68     	 ldr r3,[r7,#12]
 630 00b6 1344     	 add r3,r3,r2
 631 00b8 2022     	 movs r2,#32
 632 00ba 1A70     	 strb r2,[r3]
 165:../main.c     **** 							USBD_VCOM_SendPromt(usb_rx_buffer);
 633              	 .loc 1 165 0
 634 00bc 1448     	 ldr r0,.L43+8
 635 00be FFF7FEFF 	 bl USBD_VCOM_SendPromt
 166:../main.c     **** 							usb_rx_buffer[usb_rx_buffer_idx] = 0;
 636              	 .loc 1 166 0
 637 00c2 134A     	 ldr r2,.L43+8
 638 00c4 FB68     	 ldr r3,[r7,#12]
 639 00c6 1344     	 add r3,r3,r2
 640 00c8 0022     	 movs r2,#0
 641 00ca 1A70     	 strb r2,[r3]
 642 00cc 10E0     	 b .L38
 643              	.L39:
 167:../main.c     **** 						}
 168:../main.c     **** 					}
 169:../main.c     **** 					else if (is_printable(data_byte)
 644              	 .loc 1 169 0
 645 00ce BB79     	 ldrb r3,[r7,#6]
 646 00d0 5BB2     	 sxtb r3,r3
 647 00d2 1846     	 mov r0,r3
 648 00d4 FFF7FEFF 	 bl is_printable
 649 00d8 0346     	 mov r3,r0
 650 00da 002B     	 cmp r3,#0
 651 00dc 08D0     	 beq .L38
 170:../main.c     **** 							&& (usb_rx_buffer_idx < (USBD_VCOM_BUFFSIZE - 1)))
 652              	 .loc 1 170 0
 653 00de FB68     	 ldr r3,[r7,#12]
 654 00e0 FE2B     	 cmp r3,#254
 655 00e2 05DC     	 bgt .L38
 171:../main.c     **** 					{
 172:../main.c     **** 						usb_rx_buffer[usb_rx_buffer_idx++] = data_byte;
 656              	 .loc 1 172 0
 657 00e4 FB68     	 ldr r3,[r7,#12]
 658 00e6 5A1C     	 adds r2,r3,#1
 659 00e8 FA60     	 str r2,[r7,#12]
 660 00ea B979     	 ldrb r1,[r7,#6]
 661 00ec 084A     	 ldr r2,.L43+8
 662 00ee D154     	 strb r1,[r2,r3]
 663              	.L38:
 173:../main.c     **** 					}
 174:../main.c     **** 					USBD_VCOM_SendPromt(usb_rx_buffer);
 664              	 .loc 1 174 0
 665 00f0 0748     	 ldr r0,.L43+8
 666 00f2 FFF7FEFF 	 bl USBD_VCOM_SendPromt
 667              	.L35:
 668              	.LBE3:
 175:../main.c     **** 				}
 176:../main.c     **** 			}
 177:../main.c     **** 
 178:../main.c     ****         CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 669              	 .loc 1 178 0
 670 00f6 0748     	 ldr r0,.L43+12
 671 00f8 FFF7FEFF 	 bl CDC_Device_USBTask
 179:../main.c     ****       }
 672              	 .loc 1 179 0
 673 00fc A9E7     	 b .L41
 674              	.L30:
 675              	.LBE2:
 180:../main.c     ****     }
 181:../main.c     ****     else
 182:../main.c     ****     {
 183:../main.c     ****       XMC_DEBUG("main: Application initialization failed");
 184:../main.c     ****       while(1U)
 185:../main.c     ****       {
 186:../main.c     ****       }
 676              	 .loc 1 186 0 discriminator 1
 677 00fe FEE7     	 b .L30
 678              	.L42:
 187:../main.c     ****     }
 188:../main.c     **** 
 189:../main.c     ****     return 1U;
 190:../main.c     ****   }
 679              	 .loc 1 190 0
 680 0100 1846     	 mov r0,r3
 681 0102 1037     	 adds r7,r7,#16
 682              	.LCFI38:
 683              	 .cfi_def_cfa_offset 8
 684 0104 BD46     	 mov sp,r7
 685              	.LCFI39:
 686              	 .cfi_def_cfa_register 13
 687              	 
 688 0106 80BD     	 pop {r7,pc}
 689              	.L44:
 690              	 .align 2
 691              	.L43:
 692 0108 00000000 	 .word cdc_event_flags
 693 010c 00000000 	 .word line_encoding_ptr
 694 0110 00000000 	 .word usb_rx_buffer
 695 0114 00000000 	 .word USBD_VCOM_cdc_interface
 696              	 .cfi_endproc
 697              	.LFE208:
 699              	 .text
 700              	.Letext0:
 701              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 702              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 703              	 .file 4 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 704              	 .file 5 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Libraries/XMCLib/inc/xmc_usbd_regs.h"
 705              	 .file 6 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Libraries/XMCLib/inc/xmc_usbd.h"
 706              	 .file 7 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Dave/Generated/USBD/usbd.h"
 707              	 .file 8 "c:\\work_mari\\xmc4800\\common-tasks\\usb_serial\\dave\\generated\\usbd\\usb\\core\\endpoint.h"
 708              	 .file 9 "c:\\work_mari\\xmc4800\\common-tasks\\usb_serial\\dave\\generated\\usbd_vcom\\class_driver\\common\\cdc_class_common.h"
 709              	 .file 10 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdarg.h"
 710              	 .file 11 "<built-in>"
 711              	 .file 12 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Dave/Generated/USBD_VCOM/class_driver/device/cdc_class_device.h"
 712              	 .file 13 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Dave/Generated/USBD_VCOM/usbd_vcom.h"
 713              	 .file 14 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Dave/Generated/DAVE.h"
 714              	 .file 15 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Libraries/CMSIS/Include/cmsis_gcc.h"
 715              	 .file 16 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Libraries/CMSIS/Include/core_cm4.h"
 716              	 .file 17 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
 717              	 .file 18 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Dave/Generated/USBD/usbd_extern.h"
 718              	 .file 19 "C:/work_mari/XMC4800/common-tasks/USB_Serial/Dave/Generated/USBD_VCOM/usbd_vcom_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000002 send_data
    {standard input}:25     .bss.usb_rx_buffer:00000000 usb_rx_buffer
    {standard input}:22     .bss.usb_rx_buffer:00000000 $d
    {standard input}:32     .rodata.CommandSeperator:00000000 CommandSeperator
    {standard input}:29     .rodata.CommandSeperator:00000000 $d
    {standard input}:39     .bss.rx_buffer:00000000 rx_buffer
    {standard input}:36     .bss.rx_buffer:00000000 $d
    {standard input}:46     .bss.tx_buffer:00000000 tx_buffer
    {standard input}:43     .bss.tx_buffer:00000000 $d
                            *COM*:00000007 line_encoding_ptr
    {standard input}:50     .text.delay:00000000 $t
    {standard input}:54     .text.delay:00000000 delay
    {standard input}:110    .text.USB_printf:00000000 $t
    {standard input}:115    .text.USB_printf:00000000 USB_printf
    {standard input}:185    .rodata:00000000 $d
    {standard input}:189    .text.processRxCommand:00000000 $t
    {standard input}:194    .text.processRxCommand:00000000 processRxCommand
    {standard input}:263    .text.processRxCommand:00000054 $d
    {standard input}:270    .text.is_printable:00000000 $t
    {standard input}:275    .text.is_printable:00000000 is_printable
    {standard input}:331    .text.USBD_VCOM_SendPromt:00000000 $t
    {standard input}:336    .text.USBD_VCOM_SendPromt:00000000 USBD_VCOM_SendPromt
    {standard input}:372    .text.USBD_VCOM_SendPromt:0000001c $d
    {standard input}:390    .text.processCommand:00000000 $t
    {standard input}:395    .text.processCommand:00000000 processCommand
    {standard input}:491    .text.processCommand:00000078 $d
    {standard input}:500    .text.main:00000000 $t
    {standard input}:505    .text.main:00000000 main
    {standard input}:692    .text.main:00000108 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vsnprintf
USBD_VCOM_SendString
strsep
strtoul
strcmp
DAVE_Init
USBD_VCOM_Connect
USBD_VCOM_IsEnumDone
USBD_VCOM_GetLineEncoding
USBD_VCOM_BytesReceived
USBD_VCOM_ReceiveByte
memset
CDC_Device_USBTask
cdc_event_flags
USBD_VCOM_cdc_interface
