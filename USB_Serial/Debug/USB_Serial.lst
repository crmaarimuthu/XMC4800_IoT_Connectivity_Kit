
USB_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bc0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  08005bc0  0c005bc0  0000dbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  3 .data         000000b8  1ffe8800  0c005be8  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000007c4  1ffe88b8  0c005ca0  000108b8  2**2
                  ALLOC
  5 USB_RAM       00000e00  20000000  20000000  00018000  2**2
                  ALLOC
  6 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  7 .debug_aranges 00000a70  00000000  00000000  000108b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001affb  00000000  00000000  00011328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ce1  00000000  00000000  0002c323  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000056c4  00000000  00000000  0002f004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002e94  00000000  00000000  000346c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000731d  00000000  00000000  0003755c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005672  00000000  00000000  0003e879  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000918  00000000  00000000  00043eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 0000083d  00000000  00000000  00044803  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	dd 3e 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .>..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c005be8 	.word	0x0c005be8
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000000b8 	.word	0x000000b8
 8000254:	0c005be8 	.word	0x0c005be8
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe88b8 	.word	0x1ffe88b8
 8000264:	000007c4 	.word	0x000007c4
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08004df9 	.word	0x08004df9
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08004cd5 	.word	0x08004cd5

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f004 fb71 	bl	8004994 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f004 fbed 	bl	8004a90 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f004 fbb8 	bl	8004a54 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <XMC_SCU_GetMirrorStatus+0x14>)
 8000396:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800039a:	4618      	mov	r0, r3
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	50004000 	.word	0x50004000

080003a8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80003b0:	f7ff ff84 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <XMC_SCU_lDelay+0x3c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <XMC_SCU_lDelay+0x40>)
 80003ba:	fba2 2303 	umull	r2, r3, r2, r3
 80003be:	0c9a      	lsrs	r2, r3, #18
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	fb02 f303 	mul.w	r3, r2, r3
 80003c6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	e003      	b.n	80003d6 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80003ce:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d3f7      	bcc.n	80003ce <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2003ffc0 	.word	0x2003ffc0
 80003e8:	431bde83 	.word	0x431bde83

080003ec <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80003f2:	685b      	ldr	r3, [r3, #4]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	50004074 	.word	0x50004074

08000404 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800040c:	4a03      	ldr	r2, [pc, #12]	; (800041c <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	60d3      	str	r3, [r2, #12]
}
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	50004074 	.word	0x50004074

08000420 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000420:	b5b0      	push	{r4, r5, r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af02      	add	r7, sp, #8
 8000426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f8ad 	bl	8000588 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800042e:	f000 fad3 	bl	80009d8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	79db      	ldrb	r3, [r3, #7]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d00a      	beq.n	8000450 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800043a:	f000 fb0b 	bl	8000a54 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800043e:	bf00      	nop
 8000440:	f000 faf6 	bl	8000a30 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000444:	4603      	mov	r3, r0
 8000446:	f083 0301 	eor.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f7      	bne.n	8000440 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7a5b      	ldrb	r3, [r3, #9]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f911 	bl	800067c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800045a:	bf00      	nop
 800045c:	f7ff ff98 	bl	8000390 <XMC_SCU_GetMirrorStatus>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d1fa      	bne.n	800045c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7a1b      	ldrb	r3, [r3, #8]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fa76 	bl	800095c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7c1b      	ldrb	r3, [r3, #16]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f91f 	bl	80006b8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	7c5b      	ldrb	r3, [r3, #17]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f942 	bl	8000708 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7c9b      	ldrb	r3, [r3, #18]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f929 	bl	80006e0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	7cdb      	ldrb	r3, [r3, #19]
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f94c 	bl	8000730 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	799b      	ldrb	r3, [r3, #6]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00a      	beq.n	80004b6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80004a0:	f000 fb10 	bl	8000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80004a4:	bf00      	nop
 80004a6:	f000 fb35 	bl	8000b14 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f083 0301 	eor.w	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1f7      	bne.n	80004a6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	78db      	ldrb	r3, [r3, #3]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d109      	bne.n	80004d2 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	799b      	ldrb	r3, [r3, #6]
 80004c2:	f083 0301 	eor.w	r3, r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d017      	beq.n	80004fc <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80004cc:	f000 fb46 	bl	8000b5c <XMC_SCU_CLOCK_DisableSystemPll>
 80004d0:	e014      	b.n	80004fc <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80004d2:	f000 fb33 	bl	8000b3c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8899      	ldrh	r1, [r3, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004e2:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004e8:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	4608      	mov	r0, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	462a      	mov	r2, r5
 80004f6:	4623      	mov	r3, r4
 80004f8:	f000 fb40 	bl	8000b7c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000504:	d103      	bne.n	800050e <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000506:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800050a:	f000 f83d 	bl	8000588 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800050e:	f7ff fed5 	bl	80002bc <SystemCoreClockUpdate>
}
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bdb0      	pop	{r4, r5, r7, pc}

08000518 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	0f1b      	lsrs	r3, r3, #28
 8000524:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800052c:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4613      	mov	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4413      	add	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	461a      	mov	r2, r3
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 800053c:	4413      	add	r3, r2
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	50004410 	.word	0x50004410

08000550 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	0f1b      	lsrs	r3, r3, #28
 800055c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000564:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	461a      	mov	r2, r3
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000574:	4413      	add	r3, r2
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	50004414 	.word	0x50004414

08000588 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000590:	4906      	ldr	r1, [pc, #24]	; (80005ac <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	50004600 	.word	0x50004600

080005b0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80005b8:	4906      	ldr	r1, [pc, #24]	; (80005d4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	50004600 	.word	0x50004600

080005d8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80005e0:	4906      	ldr	r1, [pc, #24]	; (80005fc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	50004600 	.word	0x50004600

08000600 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d108      	bne.n	8000622 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	60d3      	str	r3, [r2, #12]
 8000620:	e007      	b.n	8000632 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000622:	4a06      	ldr	r2, [pc, #24]	; (800063c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	60d3      	str	r3, [r2, #12]
  }
}
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	50004710 	.word	0x50004710

08000640 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800064a:	bf00      	nop
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800064e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f8      	bne.n	800064c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800065a:	4907      	ldr	r1, [pc, #28]	; (8000678 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000664:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	50004000 	.word	0x50004000
 8000678:	50004300 	.word	0x50004300

0800067c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000686:	bf00      	nop
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800068a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f8      	bne.n	8000688 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000696:	4907      	ldr	r1, [pc, #28]	; (80006b4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80006a2:	4313      	orrs	r3, r2
 80006a4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004000 	.word	0x50004000
 80006b4:	50004300 	.word	0x50004300

080006b8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80006c0:	4906      	ldr	r1, [pc, #24]	; (80006dc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80006ce:	4313      	orrs	r3, r2
 80006d0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	50004600 	.word	0x50004600

080006e0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80006e8:	4906      	ldr	r1, [pc, #24]	; (8000704 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80006f6:	4313      	orrs	r3, r2
 80006f8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	50004600 	.word	0x50004600

08000708 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000710:	4906      	ldr	r1, [pc, #24]	; (800072c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800071e:	4313      	orrs	r3, r2
 8000720:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	50004600 	.word	0x50004600

08000730 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000746:	4313      	orrs	r3, r2
 8000748:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	50004600 	.word	0x50004600

08000758 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800076e:	4313      	orrs	r3, r2
 8000770:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	50004600 	.word	0x50004600

08000780 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000796:	4313      	orrs	r3, r2
 8000798:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	50004600 	.word	0x50004600

080007a8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80007be:	4313      	orrs	r3, r2
 80007c0:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	50004600 	.word	0x50004600

080007d0 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80007dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007de:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80007e6:	4313      	orrs	r3, r2
 80007e8:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	50004600 	.word	0x50004600

080007f8 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	6053      	str	r3, [r2, #4]
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	50004600 	.word	0x50004600

08000818 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	0f1b      	lsrs	r3, r3, #28
 8000824:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800082c:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <XMC_SCU_CLOCK_GatePeripheralClock+0x34>)
 800083c:	4413      	add	r3, r2
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	50004644 	.word	0x50004644

08000850 <XMC_SCU_CLOCK_UngatePeripheralClock>:

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	0f1b      	lsrs	r3, r3, #28
 800085c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000864:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	461a      	mov	r2, r3
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000874:	4413      	add	r3, r2
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	601a      	str	r2, [r3, #0]
}
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	50004648 	.word	0x50004648

08000888 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	f023 0302 	bic.w	r3, r3, #2
 800089a:	6153      	str	r3, [r2, #20]
}
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	50004710 	.word	0x50004710

080008a8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008b2:	4a28      	ldr	r2, [pc, #160]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80008be:	bf00      	nop
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0f9      	beq.n	80008c0 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008d8:	491e      	ldr	r1, [pc, #120]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008e6:	4313      	orrs	r3, r2
 80008e8:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80008ea:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f023 0310 	bic.w	r3, r3, #16
 8000900:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800090c:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800090e:	bf00      	nop
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f023 0301 	bic.w	r3, r3, #1
 8000926:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000928:	bf00      	nop
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f9      	bne.n	800092a <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000940:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000944:	2208      	movs	r2, #8
 8000946:	60da      	str	r2, [r3, #12]
}
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	50004710 	.word	0x50004710
 8000958:	50004160 	.word	0x50004160

0800095c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000970:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10e      	bne.n	8000996 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000982:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000984:	2064      	movs	r0, #100	; 0x64
 8000986:	f7ff fd0f 	bl	80003a8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000994:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f7ff fd06 	bl	80003a8 <XMC_SCU_lDelay>
}
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	50004710 	.word	0x50004710

080009a8 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <XMC_SCU_POWER_EnableUsb+0x14>)
 80009ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b2:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	50004200 	.word	0x50004200

080009c0 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <XMC_SCU_POWER_DisableUsb+0x14>)
 80009c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009ca:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif
}
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	50004200 	.word	0x50004200

080009d8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d109      	bne.n	80009fc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009ee:	bf00      	nop
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f9      	beq.n	80009f0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00a      	beq.n	8000a1e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0e:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a10:	bf00      	nop
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f9      	bne.n	8000a12 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	50004200 	.word	0x50004200
 8000a2c:	50004400 	.word	0x50004400

08000a30 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf0c      	ite	eq
 8000a40:	2301      	moveq	r3, #1
 8000a42:	2300      	movne	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	50004300 	.word	0x50004300

08000a54 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a5c:	f7ff fcd2 	bl	8000404 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a6a:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a6c:	bf00      	nop
 8000a6e:	f7ff fcbd 	bl	80003ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f8      	beq.n	8000a6e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000a7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a80:	f7ff fcc0 	bl	8000404 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000a8a:	bf00      	nop
 8000a8c:	f7ff fcae 	bl	80003ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000a9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a9e:	f7ff fcb1 	bl	8000404 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000aa2:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000aae:	bf00      	nop
 8000ab0:	f7ff fc9c 	bl	80003ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f8      	beq.n	8000ab0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	50004300 	.word	0x50004300

08000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad2:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ad4:	4d0d      	ldr	r5, [pc, #52]	; (8000b0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ade:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ae2:	f003 ffb7 	bl	8004a54 <OSCHP_GetFrequency>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000aea:	fba3 2302 	umull	r2, r3, r3, r2
 8000aee:	0d1b      	lsrs	r3, r3, #20
 8000af0:	3b01      	subs	r3, #1
 8000af2:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000af4:	4323      	orrs	r3, r4
 8000af6:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afa:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b02:	6053      	str	r3, [r2, #4]
}
 8000b04:	bdb0      	pop	{r4, r5, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	50004710 	.word	0x50004710
 8000b0c:	50004700 	.word	0x50004700
 8000b10:	6b5fca6b 	.word	0x6b5fca6b

08000b14 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b20:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	50004710 	.word	0x50004710

08000b3c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4a:	f023 0302 	bic.w	r3, r3, #2
 8000b4e:	6053      	str	r3, [r2, #4]
}
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	50004710 	.word	0x50004710

08000b5c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b60:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	6053      	str	r3, [r2, #4]
}
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	50004710 	.word	0x50004710

08000b7c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4603      	mov	r3, r0
 8000b88:	81fb      	strh	r3, [r7, #14]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fd35 	bl	8000600 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b96:	7b7b      	ldrb	r3, [r7, #13]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	f040 808b 	bne.w	8000cb4 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000ba4:	f003 ff56 	bl	8004a54 <OSCHP_GetFrequency>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000bac:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb0:	0c9b      	lsrs	r3, r3, #18
 8000bb2:	059b      	lsls	r3, r3, #22
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e002      	b.n	8000bbe <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bb8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bbc:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bcc:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4a4b      	ldr	r2, [pc, #300]	; (8000d00 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	0d9b      	lsrs	r3, r3, #22
 8000bda:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bdc:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000be8:	bf00      	nop
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f9      	beq.n	8000bea <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bf6:	4a43      	ldr	r2, [pc, #268]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bf8:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c02:	4940      	ldr	r1, [pc, #256]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c04:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c0a:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	3a01      	subs	r2, #1
 8000c10:	0212      	lsls	r2, r2, #8
 8000c12:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c1a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c22:	4313      	orrs	r3, r2
 8000c24:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c26:	4a37      	ldr	r2, [pc, #220]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c28:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c30:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c32:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 0310 	bic.w	r3, r3, #16
 8000c3c:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c3e:	4a31      	ldr	r2, [pc, #196]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c4a:	bf00      	nop
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f9      	beq.n	8000c4c <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c58:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c64:	bf00      	nop
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f9      	bne.n	8000c66 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	0d9b      	lsrs	r3, r3, #22
 8000c7e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c80:	6a3a      	ldr	r2, [r7, #32]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d202      	bcs.n	8000c8e <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c88:	6938      	ldr	r0, [r7, #16]
 8000c8a:	f000 f845 	bl	8000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	085b      	lsrs	r3, r3, #1
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	0d9b      	lsrs	r3, r3, #22
 8000c9c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c9e:	6a3a      	ldr	r2, [r7, #32]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d202      	bcs.n	8000cac <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ca6:	6938      	ldr	r0, [r7, #16]
 8000ca8:	f000 f836 	bl	8000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cac:	6a38      	ldr	r0, [r7, #32]
 8000cae:	f000 f833 	bl	8000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cb2:	e01c      	b.n	8000cee <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cb4:	4913      	ldr	r1, [pc, #76]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000cc6:	bf00      	nop
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f9      	beq.n	8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000ce0:	bf00      	nop
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f9      	beq.n	8000ce2 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	60da      	str	r2, [r3, #12]
}
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	aaaaaaab 	.word	0xaaaaaaab
 8000d04:	50004710 	.word	0x50004710
 8000d08:	f08080ff 	.word	0xf08080ff
 8000d0c:	88888889 	.word	0x88888889
 8000d10:	b60b60b7 	.word	0xb60b60b7
 8000d14:	50004160 	.word	0x50004160

08000d18 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d20:	490b      	ldr	r1, [pc, #44]	; (8000d50 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000d34:	bf00      	nop
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f9      	beq.n	8000d36 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000d42:	2032      	movs	r0, #50	; 0x32
 8000d44:	f7ff fb30 	bl	80003a8 <XMC_SCU_lDelay>
}
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	50004710 	.word	0x50004710

08000d54 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e01e      	b.n	8000da4 <XMC_USBD_lDeviceActive+0x50>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <XMC_USBD_lDeviceActive+0x68>)
 8000d6a:	2134      	movs	r1, #52	; 0x34
 8000d6c:	fb01 f303 	mul.w	r3, r1, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10c      	bne.n	8000d9a <XMC_USBD_lDeviceActive+0x46>
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <XMC_USBD_lDeviceActive+0x68>)
 8000d84:	2134      	movs	r1, #52	; 0x34
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <XMC_USBD_lDeviceActive+0x4a>
    {
      result = 1U;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73bb      	strb	r3, [r7, #14]
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj)
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7b1b      	ldrb	r3, [r3, #12]
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3db      	bcc.n	8000d66 <XMC_USBD_lDeviceActive+0x12>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	1ffe8a30 	.word	0x1ffe8a30

08000dc0 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num, const uint32_t byte_count)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2234      	movs	r2, #52	; 0x34
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <XMC_USBD_lReadFifo+0xe4>)
 8000dd4:	4413      	add	r3, r2
 8000dd6:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <XMC_USBD_lReadFifo+0xe4>)
 8000dda:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8000de0:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <XMC_USBD_lReadFifo+0xe4>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3370      	adds	r3, #112	; 0x70
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d048      	beq.n	8000e9a <XMC_USBD_lReadFifo+0xda>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d044      	beq.n	8000e9a <XMC_USBD_lReadFifo+0xda>
    /*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U; i < word_count; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
 8000e14:	e00a      	b.n	8000e2c <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t *)ep->xferBuffer) + i) = *fifo;
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	601a      	str	r2, [r3, #0]
    /*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U; i < word_count; i++)
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3301      	adds	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3f0      	bcc.n	8000e16 <XMC_USBD_lReadFifo+0x56>
    {
      *(((uint32_t *)ep->xferBuffer) + i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count != temp_word_count)
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d022      	beq.n	8000e82 <XMC_USBD_lReadFifo+0xc2>
    {
      temp_data = *fifo;
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
      for (i = 0U; (temp_word_count + i) < byte_count; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
 8000e46:	e016      	b.n	8000e76 <XMC_USBD_lReadFifo+0xb6>
      {
        ep->xferBuffer[(word_count << 2) + i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	0099      	lsls	r1, r3, #2
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	440b      	add	r3, r1
 8000e54:	4413      	add	r3, r2
 8000e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e58:	00d2      	lsls	r2, r2, #3
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	22ff      	movs	r2, #255	; 0xff
 8000e5e:	fa02 f101 	lsl.w	r1, r2, r1
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	400a      	ands	r2, r1
 8000e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e68:	00c9      	lsls	r1, r1, #3
 8000e6a:	40ca      	lsrs	r2, r1
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	701a      	strb	r2, [r3, #0]
    }
    /* space is not devidable by 4 */
    if (byte_count != temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U; (temp_word_count + i) < byte_count; i++)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	3301      	adds	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	441a      	add	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3e2      	bcc.n	8000e48 <XMC_USBD_lReadFifo+0x88>
        ep->xferBuffer[(word_count << 2) + i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	441a      	add	r2, r3
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8000e9a:	372c      	adds	r7, #44	; 0x2c
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	1ffe8a30 	.word	0x1ffe8a30

08000ea8 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4a23      	ldr	r2, [pc, #140]	; (8000f48 <XMC_USBD_lWriteFifo+0xa0>)
 8000ebc:	3378      	adds	r3, #120	; 0x78
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <XMC_USBD_lWriteFifo+0xa0>)
 8000ed0:	336a      	adds	r3, #106	; 0x6a
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e023      	b.n	8000f3a <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	461a      	mov	r2, r3
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d204      	bcs.n	8000f0e <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count; ep->xferBuffer += 4U)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e00c      	b.n	8000f2e <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t *)ep->xferBuffer;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	601a      	str	r2, [r3, #0]
      i++;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count; ep->xferBuffer += 4U)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	1d1a      	adds	r2, r3, #4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3ee      	bcc.n	8000f14 <XMC_USBD_lWriteFifo+0x6c>
    {
      *fifo = *(uint32_t *)ep->xferBuffer;
      i++;
    }
    result = byte_count;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	617b      	str	r3, [r7, #20]
  }
  return result;
 8000f3a:	697b      	ldr	r3, [r7, #20]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3724      	adds	r7, #36	; 0x24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	1ffe8a30 	.word	0x1ffe8a30

08000f4c <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;
  uint32_t count;
  data.d32 = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <XMC_USBD_lFlushTXFifo+0x80>)
 8000f7c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	611a      	str	r2, [r3, #16]
  for (count = 0U; count < 1000U; count++) {}
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e002      	b.n	8000f90 <XMC_USBD_lFlushTXFifo+0x44>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f96:	d3f8      	bcc.n	8000f8a <XMC_USBD_lFlushTXFifo+0x3e>
  do
  {
    data.d32 = xmc_device.global_register->grstctl;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <XMC_USBD_lFlushTXFifo+0x80>)
 8000f9a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	60bb      	str	r3, [r7, #8]
  }
  while (data.b.txfflsh);
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f3      	bne.n	8000f98 <XMC_USBD_lFlushTXFifo+0x4c>
  count = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8000fb4:	bf00      	nop
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60fa      	str	r2, [r7, #12]
 8000fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fc0:	d3f9      	bcc.n	8000fb6 <XMC_USBD_lFlushTXFifo+0x6a>
  {
    /* wait 3 phy clocks */
  }
}
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	1ffe8a30 	.word	0x1ffe8a30

08000fd0 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
  volatile grstctl_t data;
  uint32_t count;

  data.d32 = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <XMC_USBD_lFlushRXFifo+0x64>)
 8000fe4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++) {}
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	e002      	b.n	8000ff8 <XMC_USBD_lFlushRXFifo+0x28>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffe:	d3f8      	bcc.n	8000ff2 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <XMC_USBD_lFlushRXFifo+0x64>)
 8001002:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	603b      	str	r3, [r7, #0]
  }
  while (data.b.rxfflsh);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e9      	bne.n	8000fec <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 800101c:	bf00      	nop
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001028:	d3f9      	bcc.n	800101e <XMC_USBD_lFlushRXFifo+0x4e>
  {
    /* wait 3 phy clocks */
  }
}
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	1ffe8a30 	.word	0x1ffe8a30

08001038 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 800103e:	2301      	movs	r3, #1
 8001040:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	713b      	strb	r3, [r7, #4]
  while ( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS) && ((xmc_device.txfifomsk & mask) != 0U))
 800104a:	e005      	b.n	8001058 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	80fb      	strh	r3, [r7, #6]
    i++;
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	3301      	adds	r3, #1
 8001056:	717b      	strb	r3, [r7, #5]
static uint8_t XMC_USBD_lAssignTXFifo(void)
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while ( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS) && ((xmc_device.txfifomsk & mask) != 0U))
 8001058:	797b      	ldrb	r3, [r7, #5]
 800105a:	2b06      	cmp	r3, #6
 800105c:	d807      	bhi.n	800106e <XMC_USBD_lAssignTXFifo+0x36>
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001060:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	4013      	ands	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ee      	bne.n	800104c <XMC_USBD_lAssignTXFifo+0x14>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001070:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4013      	ands	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10a      	bne.n	8001094 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001080:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	4313      	orrs	r3, r2
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <XMC_USBD_lAssignTXFifo+0x6c>)
 800108c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = i;
 8001090:	797b      	ldrb	r3, [r7, #5]
 8001092:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001094:	793b      	ldrb	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	1ffe8a30 	.word	0x1ffe8a30

080010a8 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <XMC_USBD_lUnassignFifo+0x34>)
 80010b4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4013      	ands	r3, r2
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <XMC_USBD_lUnassignFifo+0x34>)
 80010cc:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	1ffe8a30 	.word	0x1ffe8a30

080010e0 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;

  data.d32 =  0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6892      	ldr	r2, [r2, #8]
 80010fa:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80010fe:	4293      	cmp	r3, r2
 8001100:	d909      	bls.n	8001116 <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6892      	ldr	r2, [r2, #8]
 800110a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800110e:	441a      	add	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
 8001114:	e003      	b.n	800111e <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d119      	bne.n	8001160 <XMC_USBD_lStartReadXfer+0x80>
  {
    /* Setup the endpoint to receive 3 setup packages and one normal package.*/
    /* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t *)&data;
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	7893      	ldrb	r3, [r2, #2]
 8001136:	2101      	movs	r1, #1
 8001138:	f361 03c4 	bfi	r3, r1, #3, #2
 800113c:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	78d3      	ldrb	r3, [r2, #3]
 8001142:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001146:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001152:	b2d9      	uxtb	r1, r3
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	7813      	ldrb	r3, [r2, #0]
 8001158:	f361 0306 	bfi	r3, r1, #0, #7
 800115c:	7013      	strb	r3, [r2, #0]
 800115e:	e033      	b.n	80011c8 <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f36f 0312 	bfc	r3, #0, #19
 800116e:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8001170:	8a7b      	ldrh	r3, [r7, #18]
 8001172:	2201      	movs	r2, #1
 8001174:	f362 03cc 	bfi	r3, r2, #3, #10
 8001178:	827b      	strh	r3, [r7, #18]
 800117a:	e025      	b.n	80011c8 <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize - (uint32_t)1U)) / ep->maxPacketSize);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6852      	ldr	r2, [r2, #4]
 800118a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	4413      	add	r3, r2
 8001192:	3b01      	subs	r3, #1
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6852      	ldr	r2, [r2, #4]
 8001198:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	fbb3 f3f2 	udiv	r3, r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	8a7b      	ldrh	r3, [r7, #18]
 80011ac:	f362 03cc 	bfi	r3, r2, #3, #10
 80011b0:	827b      	strh	r3, [r7, #18]
      data.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f362 0312 	bfi	r3, r2, #0, #19
 80011c6:	613b      	str	r3, [r7, #16]
    }
  }
  if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <XMC_USBD_lStartReadXfer+0x170>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	7b5b      	ldrb	r3, [r3, #13]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10c      	bne.n	80011ec <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <XMC_USBD_lStartReadXfer+0x174>)
 80011de:	3370      	adds	r3, #112	; 0x70
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011ea:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <XMC_USBD_lStartReadXfer+0x174>)
 80011f8:	3370      	adds	r3, #112	; 0x70
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	611a      	str	r2, [r3, #16]

  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <XMC_USBD_lStartReadXfer+0x174>)
 8001210:	3370      	adds	r3, #112	; 0x70
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122a:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <XMC_USBD_lStartReadXfer+0x174>)
 8001238:	3370      	adds	r3, #112	; 0x70
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	1ffe88f0 	.word	0x1ffe88f0
 8001254:	1ffe8a30 	.word	0x1ffe8a30

08001258 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;

  size.d32 = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001270:	336a      	adds	r3, #106	; 0x6a
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6892      	ldr	r2, [r2, #8]
 8001288:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800128c:	4293      	cmp	r3, r2
 800128e:	d204      	bcs.n	800129a <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
 8001298:	e008      	b.n	80012ac <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6892      	ldr	r2, [r2, #8]
 80012a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80012a6:	441a      	add	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f36f 0312 	bfc	r3, #0, #19
 80012ba:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	2201      	movs	r2, #1
 80012c0:	f362 03cc 	bfi	r3, r2, #3, #10
 80012c4:	81fb      	strh	r3, [r7, #14]
 80012c6:	e06a      	b.n	800139e <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d110      	bne.n	80012f8 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 80012d6:	89fb      	ldrh	r3, [r7, #14]
 80012d8:	2201      	movs	r2, #1
 80012da:	f362 03cc 	bfi	r3, r2, #3, #10
 80012de:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f362 0312 	bfi	r3, r2, #0, #19
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e02b      	b.n	8001350 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f362 0312 	bfi	r3, r2, #0, #19
 800130c:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U)) /
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	b29a      	uxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	b29b      	uxth	r3, r3
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8001328:	b2db      	uxtb	r3, r3
 800132a:	b29b      	uxth	r3, r3
 800132c:	3b01      	subs	r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
                                 ep->maxPacketSize);
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6852      	ldr	r2, [r2, #4]
 8001336:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800133a:	b2d2      	uxtb	r2, r2
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U)) /
 800133c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001346:	b29a      	uxth	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	f362 03cc 	bfi	r3, r2, #3, #10
 800134e:	81fb      	strh	r3, [r7, #14]
                                 ep->maxPacketSize);
    }
    if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	7b5b      	ldrb	r3, [r3, #13]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10b      	bne.n	8001372 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001366:	336a      	adds	r3, #106	; 0x6a
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001370:	615a      	str	r2, [r3, #20]
    }
    if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <XMC_USBD_lStartWriteXfer+0x190>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7b5b      	ldrb	r3, [r3, #13]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d110      	bne.n	800139e <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
      xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <XMC_USBD_lStartWriteXfer+0x18c>)
 800137e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001384:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001388:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	4610      	mov	r0, r2
 8001396:	2201      	movs	r2, #1
 8001398:	4082      	lsls	r2, r0
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <XMC_USBD_lStartWriteXfer+0x18c>)
 80013aa:	336a      	adds	r3, #106	; 0x6a
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ba:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <XMC_USBD_lStartWriteXfer+0x18c>)
 80013d0:	336a      	adds	r3, #106	; 0x6a
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	1ffe8a30 	.word	0x1ffe8a30
 80013e8:	1ffe88f0 	.word	0x1ffe88f0

080013ec <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;

  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 80013f4:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 80013f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 80013fe:	7d3b      	ldrb	r3, [r7, #20]
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8001406:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001408:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U; i < (uint8_t)XMC_USBD_NUM_EPS; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	e01a      	b.n	800144c <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001416:	4a47      	ldr	r2, [pc, #284]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3370      	adds	r3, #112	; 0x70
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
    epctl.b.snak = 1U;
 8001426:	7efb      	ldrb	r3, [r7, #27]
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	76fb      	strb	r3, [r7, #27]
    epctl.b.stall = 0U;
 800142e:	7ebb      	ldrb	r3, [r7, #26]
 8001430:	f36f 1345 	bfc	r3, #5, #1
 8001434:	76bb      	strb	r3, [r7, #26]
    xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001436:	4a3f      	ldr	r2, [pc, #252]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3370      	adds	r3, #112	; 0x70
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	601a      	str	r2, [r3, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U; i < (uint8_t)XMC_USBD_NUM_EPS; i++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d9e1      	bls.n	8001416 <XMC_USBD_lHandleUSBReset+0x2a>
    xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001454:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */
  gnptxfsiz.d32 = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8001460:	2310      	movs	r3, #16
 8001462:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 800146a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U; i < (uint8_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e011      	b.n	800149c <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i - 1U] = (uint32_t)(((256U + (i * (64U))) / 4U) | ((uint32_t)16U << 16U));
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 800147a:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b01      	subs	r3, #1
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	3204      	adds	r2, #4
 8001486:	0192      	lsls	r2, r2, #6
 8001488:	0892      	lsrs	r2, r2, #2
 800148a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800148e:	3340      	adds	r3, #64	; 0x40
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	605a      	str	r2, [r3, #4]
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U; i < (uint8_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d9ea      	bls.n	8001478 <XMC_USBD_lHandleUSBReset+0x8c>
  {
    xmc_device.global_register->dtxfsiz[i - 1U] = (uint32_t)(((256U + (i * (64U))) / 4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 80014a2:	2010      	movs	r0, #16
 80014a4:	f7ff fd52 	bl	8000f4c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fd4f 	bl	8000f4c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80014ae:	f7ff fd8f 	bl	8000fd0 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */
  daint.d32 = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 80014c8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 80014d0:	200f      	movs	r0, #15
 80014d2:	f000 fbf1 	bl	8001cb8 <XMC_USBD_EnableEventOUTEP>
                             (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 fc06 	bl	8001ce8 <XMC_USBD_EnableEventINEP>
                            (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */
  dcfg.d32 = xmc_device.device_register->dcfg;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 80014de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 80014e6:	893b      	ldrh	r3, [r7, #8]
 80014e8:	f36f 130a 	bfc	r3, #4, #7
 80014ec:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 80014f0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	601a      	str	r2, [r3, #0]

  if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b5b      	ldrb	r3, [r3, #13]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d104      	bne.n	800150a <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001502:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	f022 0210 	bic.w	r2, r2, #16
 8001512:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	605a      	str	r2, [r3, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <XMC_USBD_lHandleUSBReset+0x148>)
 8001520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001524:	2004      	movs	r0, #4
 8001526:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001528:	2004      	movs	r0, #4
 800152a:	f000 fb1f 	bl	8001b6c <XMC_USBD_ClearEvent>
}
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	1ffe8a30 	.word	0x1ffe8a30

08001538 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <XMC_USBD_lHandleOTGInt+0x44>)
 8001540:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8001548:	793b      	ldrb	r3, [r7, #4]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00b      	beq.n	800156c <XMC_USBD_lHandleOTGInt+0x34>
  {
    xmc_device.IsPowered = 0U;
 8001554:	4a09      	ldr	r2, [pc, #36]	; (800157c <XMC_USBD_lHandleOTGInt+0x44>)
 8001556:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800155a:	f36f 0382 	bfc	r3, #2, #1
 800155e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <XMC_USBD_lHandleOTGInt+0x44>)
 8001564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001568:	2001      	movs	r0, #1
 800156a:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fb60 	bl	8001c34 <XMC_USBD_lClearEventOTG>

}
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	1ffe8a30 	.word	0x1ffe8a30

08001580 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;

  epctl.d32 = xmc_device.endpoint_in_register[0U]->diepctl;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 8001588:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	f36f 030a 	bfc	r3, #0, #11
 8001596:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 800159a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 80015a2:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80015a4:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 80015b0:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80015b2:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80015c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015c4:	2002      	movs	r0, #2
 80015c6:	4798      	blx	r3

  /* Set Trim */
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80015ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 80015d2:	787b      	ldrb	r3, [r7, #1]
 80015d4:	2209      	movs	r2, #9
 80015d6:	f362 0385 	bfi	r3, r2, #2, #4
 80015da:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <XMC_USBD_lHandleEnumDone+0x74>)
 80015de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 80015e6:	200b      	movs	r0, #11
 80015e8:	f000 fac0 	bl	8001b6c <XMC_USBD_ClearEvent>
}
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	1ffe8a30 	.word	0x1ffe8a30

080015f8 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;

  daint.d32 = xmc_device.device_register->daint;
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001602:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	61fb      	str	r3, [r7, #28]

  daintmsk.d32 = xmc_device.device_register->daintmsk;
 800160a:	4b68      	ldr	r3, [pc, #416]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 800160c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	61bb      	str	r3, [r7, #24]

  doepmsk.d32 = xmc_device.device_register->doepmsk;
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001616:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	617b      	str	r3, [r7, #20]

  mask = daint.ep.out & daintmsk.ep.out;
 800161e:	8bfa      	ldrh	r2, [r7, #30]
 8001620:	8b7b      	ldrh	r3, [r7, #26]
 8001622:	4013      	ands	r3, r2
 8001624:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]

  while ((uint16_t)mask >> ep_num)
 8001630:	e0ae      	b.n	8001790 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8001632:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001638:	fa42 f303 	asr.w	r3, r2, r3
 800163c:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 800163e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8001646:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 809c 	beq.w	8001786 <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 800164e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001652:	2234      	movs	r2, #52	; 0x34
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	4a54      	ldr	r2, [pc, #336]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 800165a:	4413      	add	r3, r2
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 800165e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001662:	4a52      	ldr	r2, [pc, #328]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001664:	3370      	adds	r3, #112	; 0x70
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
      if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7b5b      	ldrb	r3, [r3, #13]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 800167c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001680:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001682:	3370      	adds	r3, #112	; 0x70
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	60fb      	str	r3, [r7, #12]
      }
      /* Setup Phase Complete */
      if (doepint.b.setup)
 800168e:	7c3b      	ldrb	r3, [r7, #16]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d033      	beq.n	8001702 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	7913      	ldrb	r3, [r2, #4]
 800169e:	f36f 1345 	bfc	r3, #5, #1
 80016a2:	7113      	strb	r3, [r2, #4]
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7b5b      	ldrb	r3, [r3, #13]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10e      	bne.n	80016ca <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
          ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
                                              (uint32_t)((deptsiz0_data_t *)&doeptsiz)->b.supcnt) * (uint32_t)XMC_USBD_SETUP_SIZE);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
          ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80016ba:	4613      	mov	r3, r2
 80016bc:	075b      	lsls	r3, r3, #29
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	f103 0218 	add.w	r2, r3, #24
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	611a      	str	r2, [r3, #16]
                                              (uint32_t)((deptsiz0_data_t *)&doeptsiz)->b.supcnt) * (uint32_t)XMC_USBD_SETUP_SIZE);
        }
        if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d106      	bne.n	80016e0 <XMC_USBD_lHandleOEPInt+0xe8>
        {
          ep->outBytesAvailable += ep->xferCount;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	441a      	add	r2, r3
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	611a      	str	r2, [r3, #16]
        }
        ep->outInUse = 0U;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	f022 0210 	bic.w	r2, r2, #16
 80016e8:	605a      	str	r2, [r3, #4]
        xmc_device.EndpointEvent_cb(0U, XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 80016ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016f0:	2000      	movs	r0, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	4798      	blx	r3
        /* clear the interrupt */
        XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP, ep_num);
 80016f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016fa:	2008      	movs	r0, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	f000 fac3 	bl	8001c88 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d034      	beq.n	8001778 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b5b      	ldrb	r3, [r3, #13]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	441a      	add	r2, r3
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	441a      	add	r2, r3
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
        }
        if (ep->xferTotal == ep->xferLength)
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	429a      	cmp	r2, r3
 800174c:	d111      	bne.n	8001772 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	f022 0210 	bic.w	r2, r2, #16
 800175e:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num, XMC_USBD_EP_EVENT_OUT);
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001762:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001766:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800176a:	4610      	mov	r0, r2
 800176c:	2101      	movs	r1, #1
 800176e:	4798      	blx	r3
 8001770:	e002      	b.n	8001778 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8001772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001774:	f7ff fcb4 	bl	80010e0 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32, ep_num);
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f000 fa81 	bl	8001c88 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8001786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800178a:	3301      	adds	r3, #1
 800178c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;

  while ((uint16_t)mask >> ep_num)
 8001790:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	f47f af49 	bne.w	8001632 <XMC_USBD_lHandleOEPInt+0x3a>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 80017a0:	200d      	movs	r0, #13
 80017a2:	f000 f9e3 	bl	8001b6c <XMC_USBD_ClearEvent>
}
 80017a6:	3730      	adds	r7, #48	; 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	1ffe8a30 	.word	0x1ffe8a30

080017b0 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;

  daint.d32 = xmc_device.device_register->daint;
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80017ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	617b      	str	r3, [r7, #20]

  diepmsk.d32 = xmc_device.device_register->diepmsk;
 80017c2:	4b68      	ldr	r3, [pc, #416]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80017c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	613b      	str	r3, [r7, #16]

  dieptsiz.d32 = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 80017d0:	8abb      	ldrh	r3, [r7, #20]
 80017d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  while ((uint16_t)mask >> ep_num)
 80017da:	e0b5      	b.n	8001948 <XMC_USBD_lHandleIEPInt+0x198>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 80017dc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80017de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e2:	fa42 f303 	asr.w	r3, r2, r3
 80017e6:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 80017e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 80017f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80a3 	beq.w	800193e <XMC_USBD_lHandleIEPInt+0x18e>
    {
      ep = &xmc_device.ep[ep_num];
 80017f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017fc:	2234      	movs	r2, #52	; 0x34
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a58      	ldr	r2, [pc, #352]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001804:	4413      	add	r3, r2
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
      inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800180c:	4a55      	ldr	r2, [pc, #340]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800180e:	336a      	adds	r3, #106	; 0x6a
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
                    ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800181a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	40d3      	lsrs	r3, r2
                       0x1U) << 7U) | (uint32_t)diepmsk.d32);
 800182c:	01db      	lsls	r3, r3, #7
 800182e:	b2da      	uxtb	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	431a      	orrs	r2, r3
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
      inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	4013      	ands	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
                    ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                       0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d107      	bne.n	8001852 <XMC_USBD_lHandleIEPInt+0xa2>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001848:	336a      	adds	r3, #106	; 0x6a
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	60bb      	str	r3, [r7, #8]
      }
      if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7b5b      	ldrb	r3, [r3, #13]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d115      	bne.n	8001886 <XMC_USBD_lHandleIEPInt+0xd6>
      {
        if (diepint.b.emptyintr)
 800185a:	7b3b      	ldrb	r3, [r7, #12]
 800185c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00f      	beq.n	8001886 <XMC_USBD_lHandleIEPInt+0xd6>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8001866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001868:	f7ff fb1e 	bl	8000ea8 <XMC_USBD_lWriteFifo>
 800186c:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	441a      	add	r2, r3
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	441a      	add	r2, r3
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8001886:	7b3b      	ldrb	r3, [r7, #12]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d04e      	beq.n	8001930 <XMC_USBD_lHandleIEPInt+0x180>
      {
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7b5b      	ldrb	r3, [r3, #13]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11d      	bne.n	80018d6 <XMC_USBD_lHandleIEPInt+0x126>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800189a:	897a      	ldrh	r2, [r7, #10]
 800189c:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80018a0:	4013      	ands	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d116      	bne.n	80018d6 <XMC_USBD_lHandleIEPInt+0x126>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d111      	bne.n	80018d6 <XMC_USBD_lHandleIEPInt+0x126>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	441a      	add	r2, r3
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	441a      	add	r2, r3
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal == ep->xferLength)
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	429a      	cmp	r2, r3
 80018e0:	d123      	bne.n	800192a <XMC_USBD_lHandleIEPInt+0x17a>
        {
          ep->inInUse = 0U;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	f022 0208 	bic.w	r2, r2, #8
 80018ea:	605a      	str	r2, [r3, #4]
          if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7b5b      	ldrb	r3, [r3, #13]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d10e      	bne.n	8001912 <XMC_USBD_lHandleIEPInt+0x162>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80018f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
              (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 80018fa:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80018fc:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001900:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001902:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001906:	2001      	movs	r0, #1
 8001908:	fa00 f202 	lsl.w	r2, r0, r2
 800190c:	43d2      	mvns	r2, r2
 800190e:	400a      	ands	r2, r1
        {
          ep->inInUse = 0U;
          if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
              (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num, XMC_USBD_EP_EVENT_IN);
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001914:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001918:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800191c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	4610      	mov	r0, r2
 8001924:	2102      	movs	r1, #2
 8001926:	4798      	blx	r3
 8001928:	e002      	b.n	8001930 <XMC_USBD_lHandleIEPInt+0x180>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 800192a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800192c:	f7ff fc94 	bl	8001258 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32, ep_num);
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f000 f98f 	bl	8001c5c <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 800193e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001942:	3301      	adds	r3, #1
 8001944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;

  while ((uint16_t)mask >> ep_num)
 8001948:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800194a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800194e:	fa42 f303 	asr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f af42 	bne.w	80017dc <XMC_USBD_lHandleIEPInt+0x2c>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32, ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8001958:	200e      	movs	r0, #14
 800195a:	f000 f907 	bl	8001b6c <XMC_USBD_ClearEvent>
}
 800195e:	3730      	adds	r7, #48	; 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	1ffe8a30 	.word	0x1ffe8a30

08001968 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;
  data.d32 = xmc_device.global_register->grxstsp;
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <XMC_USBD_lHandleRxFLvl+0x7c>)
 8001970:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	2b05      	cmp	r3, #5
 8001984:	d82a      	bhi.n	80019dc <XMC_USBD_lHandleRxFLvl+0x74>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <XMC_USBD_lHandleRxFLvl+0x24>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	080019dd 	.word	0x080019dd
 8001990:	080019a5 	.word	0x080019a5
 8001994:	080019dd 	.word	0x080019dd
 8001998:	080019dd 	.word	0x080019dd
 800199c:	080019dd 	.word	0x080019dd
 80019a0:	080019c1 	.word	0x080019c1
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum, (uint32_t)data.b.bcnt);
 80019a4:	793b      	ldrb	r3, [r7, #4]
 80019a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff fa01 	bl	8000dc0 <XMC_USBD_lReadFifo>
      break;
 80019be:	e00e      	b.n	80019de <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum, (uint32_t)data.b.bcnt);
 80019c0:	793b      	ldrb	r3, [r7, #4]
 80019c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f9f3 	bl	8000dc0 <XMC_USBD_lReadFifo>
      break;
 80019da:	e000      	b.n	80019de <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 80019dc:	bf00      	nop
  }
  /* no need to clear */
}
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	1ffe8a30 	.word	0x1ffe8a30

080019e8 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;

  gintmsk.d32 = xmc_device.global_register->gintmsk;
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 80019f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 80019fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]

  if (data.b.sofintr)
 8001a08:	7a3b      	ldrb	r3, [r7, #8]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001a14:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a1a:	2009      	movs	r0, #9
 8001a1c:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001a1e:	2009      	movs	r0, #9
 8001a20:	f000 f8a4 	bl	8001b6c <XMC_USBD_ClearEvent>
  }
  if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7b5b      	ldrb	r3, [r3, #13]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d119      	bne.n	8001a60 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8001a2c:	7a3b      	ldrb	r3, [r7, #8]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	f36f 1304 	bfc	r3, #4, #1
 8001a3e:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001a42:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8001a4a:	f7ff ff8d 	bl	8001968 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8001a4e:	7b3b      	ldrb	r3, [r7, #12]
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001a56:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001a58:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8001a60:	7a7b      	ldrb	r3, [r7, #9]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f000 f87d 	bl	8001b6c <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8001a72:	7a7b      	ldrb	r3, [r7, #9]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001a80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a84:	2006      	movs	r0, #6
 8001a86:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8001a88:	2006      	movs	r0, #6
 8001a8a:	f000 f86f 	bl	8001b6c <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa0:	2008      	movs	r0, #8
 8001aa2:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001aa4:	2008      	movs	r0, #8
 8001aa6:	f000 f861 	bl	8001b6c <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001ab8:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <XMC_USBD_IRQHandler+0x148>)
 8001ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aca:	2000      	movs	r0, #0
 8001acc:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f84c 	bl	8001b6c <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8001ad4:	7a7b      	ldrb	r3, [r7, #9]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fc83 	bl	80013ec <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8001ae6:	7a7b      	ldrb	r3, [r7, #9]
 8001ae8:	f003 0320 	and.w	r3, r3, #32
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8001af2:	f7ff fd45 	bl	8001580 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8001af6:	7abb      	ldrb	r3, [r7, #10]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe54 	bl	80017b0 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <XMC_USBD_IRQHandler+0x132>
  {
    XMC_USBD_lHandleOEPInt(obj);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fd6f 	bl	80015f8 <XMC_USBD_lHandleOEPInt>
  }
  if (data.b.otgintr)
 8001b1a:	7a3b      	ldrb	r3, [r7, #8]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <XMC_USBD_IRQHandler+0x142>
  {
    XMC_USBD_lHandleOTGInt();
 8001b26:	f7ff fd07 	bl	8001538 <XMC_USBD_lHandleOTGInt>
  }

}
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	1ffe8a30 	.word	0x1ffe8a30

08001b34 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <XMC_USBD_Enable+0x18>)
 8001b3a:	f7fe fe89 	bl	8000850 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <XMC_USBD_Enable+0x18>)
 8001b40:	f7fe fd06 	bl	8000550 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001b44:	f7fe ff30 	bl	80009a8 <XMC_SCU_POWER_EnableUsb>
}
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000080 	.word	0x20000080

08001b50 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <XMC_USBD_Disable+0x18>)
 8001b56:	f7fe fcdf 	bl	8000518 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <XMC_USBD_Disable+0x18>)
 8001b5c:	f7fe fe5c 	bl	8000818 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
 8001b60:	f7fe ff2e 	bl	80009c0 <XMC_SCU_POWER_DisableUsb>
}
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000080 	.word	0x20000080

08001b6c <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  switch (event)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b0d      	cmp	r3, #13
 8001b7e:	d84c      	bhi.n	8001c1a <XMC_USBD_ClearEvent+0xae>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <XMC_USBD_ClearEvent+0x1c>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001bc1 	.word	0x08001bc1
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001bcb 	.word	0x08001bcb
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001bd5 	.word	0x08001bd5
 8001ba4:	08001bdf 	.word	0x08001bdf
 8001ba8:	08001be9 	.word	0x08001be9
 8001bac:	08001bf3 	.word	0x08001bf3
 8001bb0:	08001bfd 	.word	0x08001bfd
 8001bb4:	08001c07 	.word	0x08001c07
 8001bb8:	08001c1b 	.word	0x08001c1b
 8001bbc:	08001c11 	.word	0x08001c11
  {
    case (XMC_USBD_EVENT_POWER_ON):
      clear.b.sessreqintr = 1U;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc8:	e028      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
      clear.b.usbreset = 1U;
 8001bca:	7b7b      	ldrb	r3, [r7, #13]
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	737b      	strb	r3, [r7, #13]
      break;
 8001bd2:	e023      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
      clear.b.usbsuspend = 1U;
 8001bd4:	7b7b      	ldrb	r3, [r7, #13]
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	737b      	strb	r3, [r7, #13]
      break;
 8001bdc:	e01e      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
      clear.b.wkupintr = 1U;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	73fb      	strb	r3, [r7, #15]
      break;
 8001be6:	e019      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
      clear.b.wkupintr = 1U;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e014      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
      clear.b.sofintr = 1U;
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	733b      	strb	r3, [r7, #12]
      break;
 8001bfa:	e00f      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
      clear.b.erlysuspend = 1U;
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	737b      	strb	r3, [r7, #13]
      break;
 8001c04:	e00a      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
      clear.b.enumdone = 1U;
 8001c06:	7b7b      	ldrb	r3, [r7, #13]
 8001c08:	f043 0320 	orr.w	r3, r3, #32
 8001c0c:	737b      	strb	r3, [r7, #13]
      break;
 8001c0e:	e005      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
      clear.b.outepintr = 1U;
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	73bb      	strb	r3, [r7, #14]
      break;
 8001c18:	e000      	b.n	8001c1c <XMC_USBD_ClearEvent+0xb0>
    default:
      break;
 8001c1a:	bf00      	nop
  }
  xmc_device.global_register->gintsts = clear.d32;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <XMC_USBD_ClearEvent+0xc4>)
 8001c1e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	615a      	str	r2, [r3, #20]
}
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	1ffe8a30 	.word	0x1ffe8a30

08001c34 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <XMC_USBD_lClearEventOTG+0x24>)
 8001c46:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
}
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	1ffe8a30 	.word	0x1ffe8a30

08001c5c <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event, const uint8_t ep_num)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <XMC_USBD_ClearEventINEP+0x28>)
 8001c70:	336a      	adds	r3, #106	; 0x6a
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	609a      	str	r2, [r3, #8]
}
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	1ffe8a30 	.word	0x1ffe8a30

08001c88 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event, const uint8_t ep_num)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8001c9c:	3370      	adds	r3, #112	; 0x70
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	1ffe8a30 	.word	0x1ffe8a30

08001cb8 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  doepint_data_t doepint;
  doepint.d32 = event;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
  xmc_device.device_register->doepmsk |= doepint.d32;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8001cc6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001cca:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8001ccc:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001cd0:	6951      	ldr	r1, [r2, #20]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	615a      	str	r2, [r3, #20]
}
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	1ffe8a30 	.word	0x1ffe8a30

08001ce8 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  diepint_data_t diepint;
  diepint.d32 = event;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
  xmc_device.device_register->diepmsk |= diepint.d32;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <XMC_USBD_EnableEventINEP+0x2c>)
 8001cf6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <XMC_USBD_EnableEventINEP+0x2c>)
 8001cfc:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001d00:	6911      	ldr	r1, [r2, #16]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	1ffe8a30 	.word	0x1ffe8a30

08001d18 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap = {0U};
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8001d22:	793b      	ldrb	r3, [r7, #4]
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8001d2a:	793b      	ldrb	r3, [r7, #4]
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
  cap.event_power_on = 1U;
#else
  cap.event_power_off = 0U;
 8001d32:	793b      	ldrb	r3, [r7, #4]
 8001d34:	f36f 0341 	bfc	r3, #1, #1
 8001d38:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 0U;
 8001d3a:	793b      	ldrb	r3, [r7, #4]
 8001d3c:	f36f 0300 	bfc	r3, #0, #1
 8001d40:	713b      	strb	r3, [r7, #4]
#endif
  cap.event_high_speed = 0U;
 8001d42:	793b      	ldrb	r3, [r7, #4]
 8001d44:	f36f 1345 	bfc	r3, #5, #1
 8001d48:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8001d52:	793b      	ldrb	r3, [r7, #4]
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 8001d5a:	793b      	ldrb	r3, [r7, #4]
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8001d62:	793b      	ldrb	r3, [r7, #4]
 8001d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d68:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f36f 235f 	bfc	r3, #9, #23
 8001d70:	607b      	str	r3, [r7, #4]
  return cap;
 8001d72:	687b      	ldr	r3, [r7, #4]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
             XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))

  XMC_USBD_Enable();
 8001d88:	f7ff fed4 	bl	8001b34 <XMC_USBD_Enable>

  usbd_init = obj;
 8001d8c:	4a87      	ldr	r2, [pc, #540]	; (8001fac <XMC_USBD_Init+0x22c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	e00c      	b.n	8001db2 <XMC_USBD_Init+0x32>
  {
    XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8001d98:	4a85      	ldr	r2, [pc, #532]	; (8001fb0 <XMC_USBD_Init+0x230>)
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001da2:	4a84      	ldr	r2, [pc, #528]	; (8001fb4 <XMC_USBD_Init+0x234>)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	2140      	movs	r1, #64	; 0x40
 8001da8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  XMC_USBD_Enable();

  usbd_init = obj;

  /* Filling out buffer size */
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3301      	adds	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d9ef      	bls.n	8001d98 <XMC_USBD_Init+0x18>
    XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
    XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void *)&xmc_device, 0x0U, sizeof(XMC_USBD_DEVICE_t));
 8001db8:	487f      	ldr	r0, [pc, #508]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001dc0:	f003 f84b 	bl	8004e5a <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a7b      	ldr	r2, [pc, #492]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001dca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4a79      	ldr	r2, [pc, #484]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001dd4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t *)(obj->usbd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001de4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001df0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	e00c      	b.n	8001e14 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3348      	adds	r3, #72	; 0x48
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	441a      	add	r2, r3
 8001e04:	496c      	ldr	r1, [pc, #432]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	336a      	adds	r3, #106	; 0x6a
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t *)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	3301      	adds	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d9ef      	bls.n	8001dfa <XMC_USBD_Init+0x7a>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
                                         ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1e:	e00d      	b.n	8001e3c <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
                                          DWC_DEV_OUT_EP_REG_OFFSET +
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	3358      	adds	r3, #88	; 0x58
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	6a3a      	ldr	r2, [r7, #32]
 8001e28:	441a      	add	r2, r3
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
                                         ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
 8001e2a:	4963      	ldr	r1, [pc, #396]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3370      	adds	r3, #112	; 0x70
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
                                         ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	3301      	adds	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d9ee      	bls.n	8001e20 <XMC_USBD_Init+0xa0>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
                                          DWC_DEV_OUT_EP_REG_OFFSET +
                                          ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e00c      	b.n	8001e62 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t *)(XMC_USBD_BASE_ADDRESS +
                                      XMC_USBD_TX_FIFO_REG_OFFSET +
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	031b      	lsls	r3, r3, #12
 8001e4e:	6a3a      	ldr	r2, [r7, #32]
 8001e50:	441a      	add	r2, r3
                                          DWC_DEV_OUT_EP_REG_OFFSET +
                                          ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_TX_FIFOS; i++)
  {
    xmc_device.fifo[i] = (uint32_t *)(XMC_USBD_BASE_ADDRESS +
 8001e52:	4959      	ldr	r1, [pc, #356]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	3378      	adds	r3, #120	; 0x78
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
                                          DWC_DEV_OUT_EP_REG_OFFSET +
                                          ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3301      	adds	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d9ef      	bls.n	8001e48 <XMC_USBD_Init+0xc8>
                                      (i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001e6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8001e72:	7f3b      	ldrb	r3, [r7, #28]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001e7a:	7f3b      	ldrb	r3, [r7, #28]
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	773b      	strb	r3, [r7, #28]
  if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7b5b      	ldrb	r3, [r3, #13]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8001e8a:	7f3b      	ldrb	r3, [r7, #28]
 8001e8c:	f043 0320 	orr.w	r3, r3, #32
 8001e90:	773b      	strb	r3, [r7, #28]
 8001e92:	e003      	b.n	8001e9c <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8001e94:	7f3b      	ldrb	r3, [r7, #28]
 8001e96:	f36f 1345 	bfc	r3, #5, #1
 8001e9a:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001e9e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	609a      	str	r2, [r3, #8]
  /* configure usb details */
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001ea6:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001ea8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8001eb0:	7efb      	ldrb	r3, [r7, #27]
 8001eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb6:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001eb8:	7e7b      	ldrb	r3, [r7, #25]
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001ec2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001ecc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8001ed4:	7d3b      	ldrb	r3, [r7, #20]
 8001ed6:	f043 0303 	orr.w	r3, r3, #3
 8001eda:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8001edc:	7dbb      	ldrb	r3, [r7, #22]
 8001ede:	f36f 13c7 	bfc	r3, #7, #1
 8001ee2:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001ee6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]
  /* configure device functions */
  dctl.d32 = xmc_device.device_register->dctl;
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001ef0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001ef8:	7c3b      	ldrb	r3, [r7, #16]
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001f02:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8001f0a:	2010      	movs	r0, #16
 8001f0c:	f7ff f81e 	bl	8000f4c <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001f10:	f7ff f85e 	bl	8000fd0 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001f16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001f20:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	615a      	str	r2, [r3, #20]

  gintmsk.d32 = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8001f2e:	7b3b      	ldrb	r3, [r7, #12]
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 8001f36:	7b3b      	ldrb	r3, [r7, #12]
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f44:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 8001f46:	7b7b      	ldrb	r3, [r7, #13]
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 8001f4e:	7b7b      	ldrb	r3, [r7, #13]
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 8001f5e:	7b7b      	ldrb	r3, [r7, #13]
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6c:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8001f6e:	7b3b      	ldrb	r3, [r7, #12]
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	733b      	strb	r3, [r7, #12]
  if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7b5b      	ldrb	r3, [r3, #13]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d103      	bne.n	8001f86 <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8001f7e:	7b3b      	ldrb	r3, [r7, #12]
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8001f8e:	7bbb      	ldrb	r3, [r7, #14]
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <XMC_USBD_Init+0x238>)
 8001f98:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	1ffe88f0 	.word	0x1ffe88f0
 8001fb0:	1ffe88b8 	.word	0x1ffe88b8
 8001fb4:	1ffe88d4 	.word	0x1ffe88d4
 8001fb8:	1ffe8a30 	.word	0x1ffe8a30

08001fbc <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
  dctl.d32 = xmc_device.device_register->dctl;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <XMC_USBD_Uninitialize+0x38>)
 8001fc4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8001fcc:	793b      	ldrb	r3, [r7, #4]
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <XMC_USBD_Uninitialize+0x38>)
 8001fd6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void *)&xmc_device, 0U, sizeof(xmc_device));
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <XMC_USBD_Uninitialize+0x38>)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001fe6:	f002 ff38 	bl	8004e5a <memset>
  return XMC_USBD_STATUS_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	1ffe8a30 	.word	0x1ffe8a30

08001ff8 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect()
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
  dctl.d32 = xmc_device.device_register->dctl;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <XMC_USBD_DeviceConnect+0x30>)
 8002000:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8002008:	793b      	ldrb	r3, [r7, #4]
 800200a:	f36f 0341 	bfc	r3, #1, #1
 800200e:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <XMC_USBD_DeviceConnect+0x30>)
 8002012:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	1ffe8a30 	.word	0x1ffe8a30

0800202c <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect()
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
  dctl.d32 = xmc_device.device_register->dctl;
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <XMC_USBD_DeviceDisconnect+0x30>)
 8002034:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 800203c:	793b      	ldrb	r3, [r7, #4]
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <XMC_USBD_DeviceDisconnect+0x30>)
 8002046:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	1ffe8a30 	.word	0x1ffe8a30

08002060 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state = {0U};
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 800206c:	7b3b      	ldrb	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f362 03c4 	bfi	r3, r2, #3, #2
 8002074:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <XMC_USBD_DeviceGetState+0x60>)
 8002078:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800207c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	7b3b      	ldrb	r3, [r7, #12]
 8002084:	f362 0341 	bfi	r3, r2, #1, #1
 8002088:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fe62 	bl	8000d54 <XMC_USBD_lDeviceActive>
 8002090:	4603      	mov	r3, r0
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	7b3b      	ldrb	r3, [r7, #12]
 800209a:	f362 0382 	bfi	r3, r2, #2, #1
 800209e:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <XMC_USBD_DeviceGetState+0x60>)
 80020a2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80020a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	7b3b      	ldrb	r3, [r7, #12]
 80020ae:	f362 0300 	bfi	r3, r2, #0, #1
 80020b2:	733b      	strb	r3, [r7, #12]
  return state;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	1ffe8a30 	.word	0x1ffe8a30

080020c4 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	2234      	movs	r2, #52	; 0x34
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <XMC_USBD_EndpointReadStart+0x88>)
 80020de:	4413      	add	r3, r2
 80020e0:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;

  if (ep->outInUse || !ep->isConfigured)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <XMC_USBD_EndpointReadStart+0x3c>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	791b      	ldrb	r3, [r3, #4]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <XMC_USBD_EndpointReadStart+0x42>
  {
    result = XMC_USBD_STATUS_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e01c      	b.n	8002140 <XMC_USBD_EndpointReadStart+0x7c>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d202      	bcs.n	8002116 <XMC_USBD_EndpointReadStart+0x52>
    {
      size = ep->outBufferSize;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2200      	movs	r2, #0
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2200      	movs	r2, #0
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f7fe ffd2 	bl	80010e0 <XMC_USBD_lStartReadXfer>
    result = XMC_USBD_STATUS_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	1ffe8a30 	.word	0x1ffe8a30

08002150 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num, uint8_t *buffer, uint32_t length)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2234      	movs	r2, #52	; 0x34
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <XMC_USBD_EndpointRead+0x74>)
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d202      	bcs.n	800217c <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer, &ep->outBuffer[ep->outOffset], length);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4413      	add	r3, r2
 8002186:	68b8      	ldr	r0, [r7, #8]
 8002188:	4619      	mov	r1, r3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	f002 fe5a 	bl	8004e44 <memcpy>
  ep->outBytesAvailable -= length;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	1ad2      	subs	r2, r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	441a      	add	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	e002      	b.n	80021b8 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	1ffe8a30 	.word	0x1ffe8a30

080021c8 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num, const uint8_t *buffer, uint32_t length)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	2234      	movs	r2, #52	; 0x34
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <XMC_USBD_EndpointWrite+0xa4>)
 80021e4:	4413      	add	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e031      	b.n	8002260 <XMC_USBD_EndpointWrite+0x98>
  }
  else if (ep->inInUse == 1U)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <XMC_USBD_EndpointWrite+0x4a>
  {
    result = (int32_t)0;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e026      	b.n	8002260 <XMC_USBD_EndpointWrite+0x98>
  }
  else
  {
    if (length > ep->inBufferSize)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d202      	bcs.n	8002222 <XMC_USBD_EndpointWrite+0x5a>
    {
      length = ep->inBufferSize;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
    memcpy(ep->inBuffer, (const void *)buffer, length);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4618      	mov	r0, r3
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	f002 fe0a 	bl	8004e44 <memcpy>
    ep->xferBuffer = ep->inBuffer;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2200      	movs	r2, #0
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	605a      	str	r2, [r3, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8002254:	6938      	ldr	r0, [r7, #16]
 8002256:	f7fe ffff 	bl	8001258 <XMC_USBD_lStartWriteXfer>
    result = (int32_t)ep->xferTotal;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	617b      	str	r3, [r7, #20]
  }
  return result;
 8002260:	697b      	ldr	r3, [r7, #20]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	1ffe8a30 	.word	0x1ffe8a30

08002270 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address, const XMC_USBD_SET_ADDRESS_STAGE_t stage)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <XMC_USBD_DeviceSetAddress+0x48>)
 8002282:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002296:	b2da      	uxtb	r2, r3
 8002298:	89bb      	ldrh	r3, [r7, #12]
 800229a:	f362 130a 	bfi	r3, r2, #4, #7
 800229e:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <XMC_USBD_DeviceSetAddress+0x48>)
 80022a2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]
  }
  return XMC_USBD_STATUS_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	1ffe8a30 	.word	0x1ffe8a30

080022bc <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	2234      	movs	r2, #52	; 0x34
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  if (stall)
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d040      	beq.n	8002366 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da1a      	bge.n	8002322 <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4a43      	ldr	r2, [pc, #268]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 80022f8:	336a      	adds	r3, #106	; 0x6a
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002302:	7abb      	ldrb	r3, [r7, #10]
 8002304:	f043 0320 	orr.w	r3, r3, #32
 8002308:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 8002316:	336a      	adds	r3, #106	; 0x6a
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e01b      	b.n	800235a <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4a35      	ldr	r2, [pc, #212]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 800232e:	3370      	adds	r3, #112	; 0x70
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 800233a:	7abb      	ldrb	r3, [r7, #10]
 800233c:	f043 0320 	orr.w	r3, r3, #32
 8002340:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4a2d      	ldr	r2, [pc, #180]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 800234e:	3370      	adds	r3, #112	; 0x70
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	7913      	ldrb	r3, [r2, #4]
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	7113      	strb	r3, [r2, #4]
 8002364:	e047      	b.n	80023f6 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	b25b      	sxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	da1e      	bge.n	80023ac <XMC_USBD_EndpointStall+0xf0>
    {
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 800237a:	336a      	adds	r3, #106	; 0x6a
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60bb      	str	r3, [r7, #8]
      data.b.stall = 0U;
 8002384:	7abb      	ldrb	r3, [r7, #10]
 8002386:	f36f 1345 	bfc	r3, #5, #1
 800238a:	72bb      	strb	r3, [r7, #10]
      data.b.setd0pid = 1U; /* reset pid to 0 */
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	72fb      	strb	r3, [r7, #11]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 80023a0:	336a      	adds	r3, #106	; 0x6a
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e01f      	b.n	80023ec <XMC_USBD_EndpointStall+0x130>
    }
    else
    {
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 80023b8:	3370      	adds	r3, #112	; 0x70
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60bb      	str	r3, [r7, #8]
      data.b.stall = 0U;
 80023c4:	7abb      	ldrb	r3, [r7, #10]
 80023c6:	f36f 1345 	bfc	r3, #5, #1
 80023ca:	72bb      	strb	r3, [r7, #10]
      data.b.setd0pid = 1U; /* reset pid to 0 */
 80023cc:	7afb      	ldrb	r3, [r7, #11]
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	72fb      	strb	r3, [r7, #11]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <XMC_USBD_EndpointStall+0x148>)
 80023e0:	3370      	adds	r3, #112	; 0x70
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 0U;
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	7913      	ldrb	r3, [r2, #4]
 80023f0:	f36f 1345 	bfc	r3, #5, #1
 80023f4:	7113      	strb	r3, [r2, #4]
  }
  return XMC_USBD_STATUS_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	1ffe8a30 	.word	0x1ffe8a30

08002408 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	2234      	movs	r2, #52	; 0x34
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	4a1b      	ldr	r2, [pc, #108]	; (800248c <XMC_USBD_EndpointAbort+0x84>)
 8002420:	4413      	add	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	f022 0208 	bic.w	r2, r2, #8
 800243a:	605a      	str	r2, [r3, #4]
  }
  if (!ep->address_u.address_st.direction)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	7913      	ldrb	r3, [r2, #4]
 8002458:	f36f 1345 	bfc	r3, #5, #1
 800245c:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	1ffe8a30 	.word	0x1ffe8a30

08002490 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
    const XMC_USBD_ENDPOINT_TYPE_t ep_type,
    const uint16_t ep_max_packet_size)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	460b      	mov	r3, r1
 800249c:	71bb      	strb	r3, [r7, #6]
 800249e:	4613      	mov	r3, r2
 80024a0:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80024a2:	4b98      	ldr	r3, [pc, #608]	; (8002704 <XMC_USBD_EndpointConfigure+0x274>)
 80024a4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	613b      	str	r3, [r7, #16]
  ep = &xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	2234      	movs	r2, #52	; 0x34
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	4a92      	ldr	r2, [pc, #584]	; (8002704 <XMC_USBD_EndpointConfigure+0x274>)
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  memset((void *)ep, 0x0U, sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	2100      	movs	r1, #0
 80024c2:	2234      	movs	r2, #52	; 0x34
 80024c4:	f002 fcc9 	bl	8004e5a <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	7913      	ldrb	r3, [r2, #4]
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 80024d8:	88bb      	ldrh	r3, [r7, #4]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e0:	b2d9      	uxtb	r1, r3
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	6853      	ldr	r3, [r2, #4]
 80024e6:	f361 23d1 	bfi	r3, r1, #11, #7
 80024ea:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	6893      	ldr	r3, [r2, #8]
 80024f8:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80024fc:	f361 0312 	bfi	r3, r1, #0, #19
 8002500:	6093      	str	r3, [r2, #8]
 8002502:	e005      	b.n	8002510 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	6893      	ldr	r3, [r2, #8]
 8002508:	2140      	movs	r1, #64	; 0x40
 800250a:	f361 0312 	bfi	r3, r1, #0, #19
 800250e:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002518:	b2db      	uxtb	r3, r3
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <XMC_USBD_EndpointConfigure+0x278>)
 800251e:	441a      	add	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800252c:	b2db      	uxtb	r3, r3
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4a76      	ldr	r2, [pc, #472]	; (800270c <XMC_USBD_EndpointConfigure+0x27c>)
 8002532:	441a      	add	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	4b72      	ldr	r3, [pc, #456]	; (8002710 <XMC_USBD_EndpointConfigure+0x280>)
 8002546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <XMC_USBD_EndpointConfigure+0x284>)
 800255c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <XMC_USBD_EndpointConfigure+0xe8>
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d17a      	bne.n	800266e <XMC_USBD_EndpointConfigure+0x1de>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4a60      	ldr	r2, [pc, #384]	; (8002704 <XMC_USBD_EndpointConfigure+0x274>)
 8002584:	336a      	adds	r3, #106	; 0x6a
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
    /*enable endpoint */
    data.b.usbactep = 1U;
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	737b      	strb	r3, [r7, #13]
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
 8002596:	79bb      	ldrb	r3, [r7, #6]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	b2da      	uxtb	r2, r3
 800259e:	7bbb      	ldrb	r3, [r7, #14]
 80025a0:	f362 0383 	bfi	r3, r2, #2, #2
 80025a4:	73bb      	strb	r3, [r7, #14]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d124      	bne.n	80025f6 <XMC_USBD_EndpointConfigure+0x166>
    {
      switch (ep_max_packet_size)
 80025ac:	88bb      	ldrh	r3, [r7, #4]
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d014      	beq.n	80025dc <XMC_USBD_EndpointConfigure+0x14c>
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	dc02      	bgt.n	80025bc <XMC_USBD_EndpointConfigure+0x12c>
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d016      	beq.n	80025e8 <XMC_USBD_EndpointConfigure+0x158>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 80025ba:	e01b      	b.n	80025f4 <XMC_USBD_EndpointConfigure+0x164>
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d007      	beq.n	80025d0 <XMC_USBD_EndpointConfigure+0x140>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d000      	beq.n	80025c6 <XMC_USBD_EndpointConfigure+0x136>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 80025c4:	e016      	b.n	80025f4 <XMC_USBD_EndpointConfigure+0x164>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
      {
        case (64U):
          data.b.mps = 0x0U;
 80025c6:	89bb      	ldrh	r3, [r7, #12]
 80025c8:	f36f 030a 	bfc	r3, #0, #11
 80025cc:	81bb      	strh	r3, [r7, #12]
          break;
 80025ce:	e011      	b.n	80025f4 <XMC_USBD_EndpointConfigure+0x164>
        case (32U):
          data.b.mps = 0x1U;
 80025d0:	89bb      	ldrh	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f362 030a 	bfi	r3, r2, #0, #11
 80025d8:	81bb      	strh	r3, [r7, #12]
          break;
 80025da:	e00b      	b.n	80025f4 <XMC_USBD_EndpointConfigure+0x164>
        case (16U):
          data.b.mps = 0x2U;
 80025dc:	89bb      	ldrh	r3, [r7, #12]
 80025de:	2202      	movs	r2, #2
 80025e0:	f362 030a 	bfi	r3, r2, #0, #11
 80025e4:	81bb      	strh	r3, [r7, #12]
          break;
 80025e6:	e005      	b.n	80025f4 <XMC_USBD_EndpointConfigure+0x164>
        case (8U):
          data.b.mps = 0x3U;
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	2203      	movs	r2, #3
 80025ec:	f362 030a 	bfi	r3, r2, #0, #11
 80025f0:	81bb      	strh	r3, [r7, #12]
          break;
 80025f2:	bf00      	nop
 80025f4:	e007      	b.n	8002606 <XMC_USBD_EndpointConfigure+0x176>
          break;
      }
    }
    else
    {
      data.b.mps = ep_max_packet_size;
 80025f6:	88bb      	ldrh	r3, [r7, #4]
 80025f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	89bb      	ldrh	r3, [r7, #12]
 8002600:	f362 030a 	bfi	r3, r2, #0, #11
 8002604:	81bb      	strh	r3, [r7, #12]
    }
    /* set first data0 pid */
    data.b.setd0pid = 1U;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	73fb      	strb	r3, [r7, #15]
    /* clear stall */
    data.b.stall = 0U;
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	f36f 1345 	bfc	r3, #5, #1
 8002614:	73bb      	strb	r3, [r7, #14]
    /* set tx fifo */
    ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8002616:	f7fe fd0f 	bl	8001038 <XMC_USBD_lAssignTXFifo>
 800261a:	4603      	mov	r3, r0
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	b2d9      	uxtb	r1, r3
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	8893      	ldrh	r3, [r2, #4]
 8002626:	f361 1389 	bfi	r3, r1, #6, #4
 800262a:	8093      	strh	r3, [r2, #4]
    data.b.txfnum = ep->txFifoNum;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	889b      	ldrh	r3, [r3, #4]
 8002630:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002634:	b2da      	uxtb	r2, r3
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	f362 1389 	bfi	r3, r2, #6, #4
 800263c:	81fb      	strh	r3, [r7, #14]
    xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <XMC_USBD_EndpointConfigure+0x274>)
 800264a:	336a      	adds	r3, #106	; 0x6a
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]
    daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8002654:	8a3a      	ldrh	r2, [r7, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	2301      	movs	r3, #1
 8002664:	408b      	lsls	r3, r1
 8002666:	b29b      	uxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <XMC_USBD_EndpointConfigure+0x1f2>
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d173      	bne.n	800276a <XMC_USBD_EndpointConfigure+0x2da>
  {
    /* is out */
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <XMC_USBD_EndpointConfigure+0x274>)
 800268e:	3370      	adds	r3, #112	; 0x70
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]
    /*enable endpoint */
    data.b.usbactep = 1U;
 800269a:	7a7b      	ldrb	r3, [r7, #9]
 800269c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a0:	727b      	strb	r3, [r7, #9]
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	7abb      	ldrb	r3, [r7, #10]
 80026ac:	f362 0383 	bfi	r3, r2, #2, #2
 80026b0:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d12f      	bne.n	8002718 <XMC_USBD_EndpointConfigure+0x288>
    {
      switch (ep_max_packet_size)
 80026b8:	88bb      	ldrh	r3, [r7, #4]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d014      	beq.n	80026e8 <XMC_USBD_EndpointConfigure+0x258>
 80026be:	2b10      	cmp	r3, #16
 80026c0:	dc02      	bgt.n	80026c8 <XMC_USBD_EndpointConfigure+0x238>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d016      	beq.n	80026f4 <XMC_USBD_EndpointConfigure+0x264>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 80026c6:	e01b      	b.n	8002700 <XMC_USBD_EndpointConfigure+0x270>
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d007      	beq.n	80026dc <XMC_USBD_EndpointConfigure+0x24c>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d000      	beq.n	80026d2 <XMC_USBD_EndpointConfigure+0x242>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 80026d0:	e016      	b.n	8002700 <XMC_USBD_EndpointConfigure+0x270>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
      {
        case (64U):
          data.b.mps = 0x0U;
 80026d2:	893b      	ldrh	r3, [r7, #8]
 80026d4:	f36f 030a 	bfc	r3, #0, #11
 80026d8:	813b      	strh	r3, [r7, #8]
          break;
 80026da:	e011      	b.n	8002700 <XMC_USBD_EndpointConfigure+0x270>
        case (32U):
          data.b.mps = 0x1U;
 80026dc:	893b      	ldrh	r3, [r7, #8]
 80026de:	2201      	movs	r2, #1
 80026e0:	f362 030a 	bfi	r3, r2, #0, #11
 80026e4:	813b      	strh	r3, [r7, #8]
          break;
 80026e6:	e00b      	b.n	8002700 <XMC_USBD_EndpointConfigure+0x270>
        case (16U):
          data.b.mps = 0x2U;
 80026e8:	893b      	ldrh	r3, [r7, #8]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f362 030a 	bfi	r3, r2, #0, #11
 80026f0:	813b      	strh	r3, [r7, #8]
          break;
 80026f2:	e005      	b.n	8002700 <XMC_USBD_EndpointConfigure+0x270>
        case (8U):
          data.b.mps = 0x3U;
 80026f4:	893b      	ldrh	r3, [r7, #8]
 80026f6:	2203      	movs	r2, #3
 80026f8:	f362 030a 	bfi	r3, r2, #0, #11
 80026fc:	813b      	strh	r3, [r7, #8]
          break;
 80026fe:	bf00      	nop
 8002700:	e012      	b.n	8002728 <XMC_USBD_EndpointConfigure+0x298>
 8002702:	bf00      	nop
 8002704:	1ffe8a30 	.word	0x1ffe8a30
 8002708:	20000700 	.word	0x20000700
 800270c:	20000000 	.word	0x20000000
 8002710:	1ffe88d4 	.word	0x1ffe88d4
 8002714:	1ffe88b8 	.word	0x1ffe88b8
          break;
      }
    }
    else
    {
      data.b.mps = ep_max_packet_size;
 8002718:	88bb      	ldrh	r3, [r7, #4]
 800271a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800271e:	b29a      	uxth	r2, r3
 8002720:	893b      	ldrh	r3, [r7, #8]
 8002722:	f362 030a 	bfi	r3, r2, #0, #11
 8002726:	813b      	strh	r3, [r7, #8]
    }
    /* set first data0 pid */
    data.b.setd0pid = 1U;
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	f043 0310 	orr.w	r3, r3, #16
 800272e:	72fb      	strb	r3, [r7, #11]
    /* clear stall */
    data.b.stall = (uint8_t) 0U;
 8002730:	7abb      	ldrb	r3, [r7, #10]
 8002732:	f36f 1345 	bfc	r3, #5, #1
 8002736:	72bb      	strb	r3, [r7, #10]
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <XMC_USBD_EndpointConfigure+0x2f0>)
 8002744:	3370      	adds	r3, #112	; 0x70
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	601a      	str	r2, [r3, #0]
    daintmsk.ep.out |= (uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8002750:	8a7a      	ldrh	r2, [r7, #18]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	2301      	movs	r3, #1
 8002760:	408b      	lsls	r3, r1
 8002762:	b29b      	uxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <XMC_USBD_EndpointConfigure+0x2f0>)
 800276c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	1ffe8a30 	.word	0x1ffe8a30

08002784 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	2234      	movs	r2, #52	; 0x34
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	4a54      	ldr	r2, [pc, #336]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 800279c:	4413      	add	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
  daint_data_t daintmsk;
  XMC_USBD_STATUS_t result;
  uint32_t number_temp;
  data.d32 = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80027a4:	4b51      	ldr	r3, [pc, #324]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80027a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	4093      	lsls	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <XMC_USBD_EndpointUnconfigure+0x50>
  {
    result = XMC_USBD_STATUS_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	e085      	b.n	80028e0 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 80027d4:	7c7b      	ldrb	r3, [r7, #17]
 80027d6:	f36f 13c7 	bfc	r3, #7, #1
 80027da:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e2:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	f043 0308 	orr.w	r3, r3, #8
 80027ea:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 80027ec:	7cbb      	ldrb	r3, [r7, #18]
 80027ee:	f36f 1345 	bfc	r3, #5, #1
 80027f2:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	7913      	ldrb	r3, [r2, #4]
 80027f8:	f36f 0382 	bfc	r3, #2, #1
 80027fc:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	7913      	ldrb	r3, [r2, #4]
 8002802:	f36f 1345 	bfc	r3, #5, #1
 8002806:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	f022 0210 	bic.w	r2, r2, #16
 8002810:	605a      	str	r2, [r3, #4]
    ep->inInUse =  0U;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	f022 0208 	bic.w	r2, r2, #8
 800281a:	605a      	str	r2, [r3, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <XMC_USBD_EndpointUnconfigure+0xb4>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d112      	bne.n	800285e <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 8002844:	336a      	adds	r3, #106	; 0x6a
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 800284e:	89ba      	ldrh	r2, [r7, #12]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	b29b      	uxth	r3, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	4013      	ands	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <XMC_USBD_EndpointUnconfigure+0xf6>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d123      	bne.n	80028c2 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 8002886:	3370      	adds	r3, #112	; 0x70
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8002892:	89fa      	ldrh	r2, [r7, #14]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	b29b      	uxth	r3, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	81fb      	strh	r3, [r7, #14]
      if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <XMC_USBD_EndpointUnconfigure+0x16c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	7b5b      	ldrb	r3, [r3, #13]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10a      	bne.n	80028c2 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80028ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80028b4:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 80028b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	43d2      	mvns	r2, r2
 80028be:	400a      	ands	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <XMC_USBD_EndpointUnconfigure+0x168>)
 80028c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	889b      	ldrh	r3, [r3, #4]
 80028d0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fbe6 	bl	80010a8 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 80028e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	1ffe8a30 	.word	0x1ffe8a30
 80028f0:	1ffe88f0 	.word	0x1ffe88f0

080028f4 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <XMC_USBD_GetFrameNumber+0x28>)
 80028fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800290a:	b29b      	uxth	r3, r3
 800290c:	80fb      	strh	r3, [r7, #6]
  return result;
 800290e:	88fb      	ldrh	r3, [r7, #6]
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	1ffe8a30 	.word	0x1ffe8a30

08002920 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <XMC_USBD_IsEnumDone+0x34>)
 8002926:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <XMC_USBD_IsEnumDone+0x28>
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <XMC_USBD_IsEnumDone+0x34>)
 8002936:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <XMC_USBD_IsEnumDone+0x28>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <XMC_USBD_IsEnumDone+0x2a>
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	1ffe8a30 	.word	0x1ffe8a30

08002958 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <_sbrk+0x5c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <_sbrk+0x5c>)
 800296a:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <_sbrk+0x60>)
 800296c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_sbrk+0x5c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3303      	adds	r3, #3
 8002978:	f023 0303 	bic.w	r3, r3, #3
 800297c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <_sbrk+0x5c>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <_sbrk+0x64>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d207      	bcs.n	800299c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <_sbrk+0x5c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <_sbrk+0x5c>)
 8002996:	6013      	str	r3, [r2, #0]
    return (base);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	e006      	b.n	80029aa <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 800299c:	f002 fa26 	bl	8004dec <__errno>
 80029a0:	4602      	mov	r2, r0
 80029a2:	230c      	movs	r3, #12
 80029a4:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	1ffe88f4 	.word	0x1ffe88f4
 80029b8:	20000e00 	.word	0x20000e00
 80029bc:	2003ffc0 	.word	0x2003ffc0

080029c0 <_init>:

/* Init */
void _init(void)
{}
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <USBD_VCOM_Event_GetDescriptor>:
 *   host.
 */
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	603a      	str	r2, [r7, #0]
 80029d6:	80fb      	strh	r3, [r7, #6]
 80029d8:	460b      	mov	r3, r1
 80029da:	80bb      	strh	r3, [r7, #4]
	const uint8_t  descriptor_type   = (w_value >> 8);
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	727b      	strb	r3, [r7, #9]
	const uint8_t  descriptor_number = (w_value & 0xFF);
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	723b      	strb	r3, [r7, #8]
	const void* address = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
	uint16_t    size    = NO_DESCRIPTOR;
 80029ec:	2300      	movs	r3, #0
 80029ee:	817b      	strh	r3, [r7, #10]

	switch (descriptor_type)
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d008      	beq.n	8002a08 <USBD_VCOM_Event_GetDescriptor+0x3c>
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d00b      	beq.n	8002a12 <USBD_VCOM_Event_GetDescriptor+0x46>
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d121      	bne.n	8002a42 <USBD_VCOM_Event_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			address = &device_descriptor;
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <USBD_VCOM_Event_GetDescriptor+0x8c>)
 8002a00:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Device_t);
 8002a02:	2312      	movs	r3, #18
 8002a04:	817b      	strh	r3, [r7, #10]
			break;
 8002a06:	e01c      	b.n	8002a42 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <USBD_VCOM_Event_GetDescriptor+0x90>)
 8002a0a:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Configuration_t);
 8002a0c:	233e      	movs	r3, #62	; 0x3e
 8002a0e:	817b      	strh	r3, [r7, #10]
			break;
 8002a10:	e017      	b.n	8002a42 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_String:
			switch (descriptor_number)
 8002a12:	7a3b      	ldrb	r3, [r7, #8]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d009      	beq.n	8002a2c <USBD_VCOM_Event_GetDescriptor+0x60>
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d00c      	beq.n	8002a36 <USBD_VCOM_Event_GetDescriptor+0x6a>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d000      	beq.n	8002a22 <USBD_VCOM_Event_GetDescriptor+0x56>
				case 0x02:
					address = &product_string;
					size    = product_string.Header.Size;
					break;
			}
			break;
 8002a20:	e00e      	b.n	8002a40 <USBD_VCOM_Event_GetDescriptor+0x74>
			break;
		case DTYPE_String:
			switch (descriptor_number)
			{
				case 0x00:
					address = &language_string;
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <USBD_VCOM_Event_GetDescriptor+0x94>)
 8002a24:	60fb      	str	r3, [r7, #12]
					size    = language_string.Header.Size;
 8002a26:	2304      	movs	r3, #4
 8002a28:	817b      	strh	r3, [r7, #10]
					break;
 8002a2a:	e009      	b.n	8002a40 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x01:
					address = &manufacturer_string;
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <USBD_VCOM_Event_GetDescriptor+0x98>)
 8002a2e:	60fb      	str	r3, [r7, #12]
					size    = manufacturer_string.Header.Size;
 8002a30:	2312      	movs	r3, #18
 8002a32:	817b      	strh	r3, [r7, #10]
					break;
 8002a34:	e004      	b.n	8002a40 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x02:
					address = &product_string;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <USBD_VCOM_Event_GetDescriptor+0x9c>)
 8002a38:	60fb      	str	r3, [r7, #12]
					size    = product_string.Header.Size;
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	817b      	strh	r3, [r7, #10]
					break;
 8002a3e:	bf00      	nop
			}
			break;
 8002a40:	bf00      	nop
	}

	(void)w_index;
	*descriptor_address = address;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]
	return size;
 8002a48:	897b      	ldrh	r3, [r7, #10]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	08005878 	.word	0x08005878
 8002a5c:	0800588c 	.word	0x0800588c
 8002a60:	080058cc 	.word	0x080058cc
 8002a64:	08005934 	.word	0x08005934
 8002a68:	0800599c 	.word	0x0800599c

08002a6c <Endpoint_SelectEndpoint>:
	 *
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <Endpoint_SelectEndpoint+0x30>)
 8002a80:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <Endpoint_SelectEndpoint+0x30>)
 8002a8e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	1ffe8f28 	.word	0x1ffe8f28

08002aa0 <Endpoint_IsSETUPReceived>:
	 *  \return Boolean \c true if the selected endpoint has received a SETUP
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
		return device.IsSetupRecieved;
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <Endpoint_IsSETUPReceived+0x28>)
 8002aa6:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
	}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	1ffe8f28 	.word	0x1ffe8f28

08002acc <Endpoint_ClearSETUP>:
	 *
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
		device.IsSetupRecieved = 0;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <Endpoint_ClearSETUP+0x1c>)
 8002ad2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8002ad6:	f022 0202 	bic.w	r2, r2, #2
 8002ada:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	}
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	1ffe8f28 	.word	0x1ffe8f28

08002aec <Endpoint_ClearStatusStage>:
	/** Nothing done in this function
	 *
	 */
	static inline void Endpoint_ClearStatusStage(void);
	static inline void Endpoint_ClearStatusStage(void)
	{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

	}
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <Endpoint_IsINReady+0x54>)
 8002b00:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002b04:	461a      	mov	r2, r3
 8002b06:	232c      	movs	r3, #44	; 0x2c
 8002b08:	fb03 f302 	mul.w	r3, r3, r2
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <Endpoint_IsINReady+0x54>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <Endpoint_IsINReady+0x40>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <Endpoint_IsINReady+0x40>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <Endpoint_IsINReady+0x42>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
	}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	1ffe8f28 	.word	0x1ffe8f28

08002b50 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <Endpoint_IsOUTReceived+0x40>)
 8002b58:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	232c      	movs	r3, #44	; 0x2c
 8002b60:	fb03 f302 	mul.w	r3, r3, r2
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <Endpoint_IsOUTReceived+0x40>)
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
	}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	1ffe8f28 	.word	0x1ffe8f28

08002b94 <Endpoint_BytesInEndpoint>:
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO
	 *  buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <Endpoint_BytesInEndpoint+0x44>)
 8002b9c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	232c      	movs	r3, #44	; 0x2c
 8002ba4:	fb03 f302 	mul.w	r3, r3, r2
 8002ba8:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <Endpoint_BytesInEndpoint+0x44>)
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	607b      	str	r3, [r7, #4]
		if (ep->Direction)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <Endpoint_BytesInEndpoint+0x32>
			return (uint16_t)(ep->InBytesAvailable);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	e002      	b.n	8002bcc <Endpoint_BytesInEndpoint+0x38>
		else
			return (uint16_t)(ep->OutBytesAvailable);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	b29b      	uxth	r3, r3
	}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	1ffe8f28 	.word	0x1ffe8f28

08002bdc <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8002be4:	f7ff ff5c 	bl	8002aa0 <Endpoint_IsSETUPReceived>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80ae 	beq.w	8002d4c <CDC_Device_ProcessControlRequest+0x170>
 8002bf0:	4b58      	ldr	r3, [pc, #352]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002bf2:	889b      	ldrh	r3, [r3, #4]
 8002bf4:	b29a      	uxth	r2, r3
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7c9b      	ldrb	r3, [r3, #18]
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 80a5 	bne.w	8002d4c <CDC_Device_ProcessControlRequest+0x170>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 8002c02:	4b54      	ldr	r3, [pc, #336]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3b20      	subs	r3, #32
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	f200 809e 	bhi.w	8002d4c <CDC_Device_ProcessControlRequest+0x170>
 8002c10:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <CDC_Device_ProcessControlRequest+0x3c>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002c7d 	.word	0x08002c7d
 8002c1c:	08002c29 	.word	0x08002c29
 8002c20:	08002cef 	.word	0x08002cef
 8002c24:	08002d1f 	.word	0x08002d1f
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2ba1      	cmp	r3, #161	; 0xa1
 8002c30:	d123      	bne.n	8002c7a <CDC_Device_ProcessControlRequest+0x9e>
				{
					Endpoint_ClearSETUP();
 8002c32:	f7ff ff4b 	bl	8002acc <Endpoint_ClearSETUP>

					while (!(Endpoint_IsINReady()));
 8002c36:	bf00      	nop
 8002c38:	f7ff ff5e 	bl	8002af8 <Endpoint_IsINReady>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f7      	bne.n	8002c38 <CDC_Device_ProcessControlRequest+0x5c>

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fe85 	bl	800395c <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7f1b      	ldrb	r3, [r3, #28]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fe14 	bl	8003884 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7f5b      	ldrb	r3, [r3, #29]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fe0f 	bl	8003884 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7f9b      	ldrb	r3, [r3, #30]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fe0a 	bl	8003884 <Endpoint_Write_8>

					Endpoint_ClearIN();
 8002c70:	f000 fd84 	bl	800377c <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
 8002c74:	f7ff ff3a 	bl	8002aec <Endpoint_ClearStatusStage>
				}

				break;
 8002c78:	e068      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
 8002c7a:	e067      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002c7c:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b21      	cmp	r3, #33	; 0x21
 8002c84:	d132      	bne.n	8002cec <CDC_Device_ProcessControlRequest+0x110>
				{
					Endpoint_ClearSETUP();
 8002c86:	f7ff ff21 	bl	8002acc <Endpoint_ClearSETUP>

					while (!(Endpoint_IsOUTReceived()))
 8002c8a:	e005      	b.n	8002c98 <CDC_Device_ProcessControlRequest+0xbc>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <CDC_Device_ProcessControlRequest+0x17c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d100      	bne.n	8002c98 <CDC_Device_ProcessControlRequest+0xbc>
						  return;
 8002c96:	e059      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 8002c98:	f7ff ff5a 	bl	8002b50 <Endpoint_IsOUTReceived>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f083 0301 	eor.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f1      	bne.n	8002c8c <CDC_Device_ProcessControlRequest+0xb0>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8002ca8:	f000 fe8c 	bl	80039c4 <Endpoint_Read_32_LE>
 8002cac:	4602      	mov	r2, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	619a      	str	r2, [r3, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8002cb2:	f000 fe1b 	bl	80038ec <Endpoint_Read_8>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	771a      	strb	r2, [r3, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8002cbe:	f000 fe15 	bl	80038ec <Endpoint_Read_8>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	775a      	strb	r2, [r3, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8002cca:	f000 fe0f 	bl	80038ec <Endpoint_Read_8>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	779a      	strb	r2, [r3, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();
 8002cd6:	f7ff ff09 	bl	8002aec <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.LineEncodingChanged)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <CDC_Device_ProcessControlRequest+0x180>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <CDC_Device_ProcessControlRequest+0x110>
					{
						cdc_class_events.LineEncodingChanged(CDCInterfaceInfo);
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <CDC_Device_ProcessControlRequest+0x180>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
					}

				}

				break;
 8002cea:	e02f      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
 8002cec:	e02e      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b21      	cmp	r3, #33	; 0x21
 8002cf6:	d111      	bne.n	8002d1c <CDC_Device_ProcessControlRequest+0x140>
				{
					Endpoint_ClearSETUP();
 8002cf8:	f7ff fee8 	bl	8002acc <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8002cfc:	f7ff fef6 	bl	8002aec <Endpoint_ClearStatusStage>

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002d02:	885b      	ldrh	r3, [r3, #2]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	829a      	strh	r2, [r3, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <CDC_Device_ProcessControlRequest+0x180>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <CDC_Device_ProcessControlRequest+0x140>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <CDC_Device_ProcessControlRequest+0x180>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
					}

				}

				break;
 8002d1a:	e017      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
 8002d1c:	e016      	b.n	8002d4c <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b21      	cmp	r3, #33	; 0x21
 8002d26:	d110      	bne.n	8002d4a <CDC_Device_ProcessControlRequest+0x16e>
				{
					Endpoint_ClearSETUP();
 8002d28:	f7ff fed0 	bl	8002acc <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8002d2c:	f7ff fede 	bl	8002aec <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.Device_BreakSent)
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <CDC_Device_ProcessControlRequest+0x180>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <CDC_Device_ProcessControlRequest+0x16e>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <CDC_Device_ProcessControlRequest+0x180>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <CDC_Device_ProcessControlRequest+0x178>)
 8002d3e:	8852      	ldrh	r2, [r2, #2]
 8002d40:	b292      	uxth	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4798      	blx	r3
					}

				}

				break;
 8002d4a:	bf00      	nop
		}
	}
}
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	1ffe8d20 	.word	0x1ffe8d20
 8002d58:	1ffe8d1d 	.word	0x1ffe8d1d
 8002d5c:	1ffe8828 	.word	0x1ffe8828

08002d60 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	bool status = true;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	4618      	mov	r0, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	220c      	movs	r2, #12
 8002d76:	f002 f870 	bl	8004e5a <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	711a      	strb	r2, [r3, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	729a      	strb	r2, [r3, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	741a      	strb	r2, [r3, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	2101      	movs	r1, #1
 8002d92:	f000 fe4f 	bl	8003a34 <Endpoint_ConfigureEndpointTable>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <CDC_Device_ConfigureEndpoints+0x46>
	{
		status = false;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3306      	adds	r3, #6
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002daa:	4618      	mov	r0, r3
 8002dac:	2101      	movs	r1, #1
 8002dae:	f000 fe41 	bl	8003a34 <Endpoint_ConfigureEndpointTable>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <CDC_Device_ConfigureEndpoints+0x62>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	330c      	adds	r3, #12
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	2101      	movs	r1, #1
 8002dca:	f000 fe33 	bl	8003a34 <Endpoint_ConfigureEndpointTable>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <CDC_Device_ConfigureEndpoints+0x7e>
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	{
		status = false;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <CDC_Device_USBTask+0x3c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d110      	bne.n	8002e1c <CDC_Device_USBTask+0x34>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <CDC_Device_USBTask+0x34>
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fe30 	bl	8002a6c <Endpoint_SelectEndpoint>

		if (Endpoint_IsINReady())
 8002e0c:	f7ff fe74 	bl	8002af8 <Endpoint_IsINReady>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <CDC_Device_USBTask+0x34>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f832 	bl	8002e80 <CDC_Device_Flush>
		}
		#endif
	}
}
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	1ffe8d1d 	.word	0x1ffe8d1d

08002e28 <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const char* const String)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <CDC_Device_SendString+0x54>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d115      	bne.n	8002e6c <CDC_Device_SendString+0x44>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d011      	beq.n	8002e6c <CDC_Device_SendString+0x44>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe0d 	bl	8002a6c <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f002 f813 	bl	8004e7e <strlen>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	6838      	ldr	r0, [r7, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	2200      	movs	r2, #0
 8002e62:	f000 fa9b 	bl	800339c <Endpoint_Write_Stream_LE>
 8002e66:	4603      	mov	r3, r0
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e001      	b.n	8002e70 <CDC_Device_SendString+0x48>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	1ffe8d1d 	.word	0x1ffe8d1d

08002e80 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <CDC_Device_Flush+0x4c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d112      	bne.n	8002ebc <CDC_Device_Flush+0x3c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <CDC_Device_Flush+0x3c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fde2 	bl	8002a6c <Endpoint_SelectEndpoint>

		if (Endpoint_BytesInEndpoint())
 8002ea8:	f7ff fe74 	bl	8002b94 <Endpoint_BytesInEndpoint>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <CDC_Device_Flush+0x36>
		{
			Endpoint_ClearIN();
 8002eb2:	f000 fc63 	bl	800377c <Endpoint_ClearIN>
		}

		status = ENDPOINT_READYWAIT_NoError;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	e001      	b.n	8002ec0 <CDC_Device_Flush+0x40>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	1ffe8d1d 	.word	0x1ffe8d1d

08002ed0 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	uint16_t bytes = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	81fb      	strh	r3, [r7, #14]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <CDC_Device_BytesReceived+0x60>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d11e      	bne.n	8002f24 <CDC_Device_BytesReceived+0x54>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <CDC_Device_BytesReceived+0x54>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	799b      	ldrb	r3, [r3, #6]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fdba 	bl	8002a6c <Endpoint_SelectEndpoint>

		if (Endpoint_IsOUTReceived())
 8002ef8:	f7ff fe2a 	bl	8002b50 <Endpoint_IsOUTReceived>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <CDC_Device_BytesReceived+0x50>
		{
			if (!(Endpoint_BytesInEndpoint()))
 8002f02:	f7ff fe47 	bl	8002b94 <Endpoint_BytesInEndpoint>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <CDC_Device_BytesReceived+0x46>
			{
				Endpoint_ClearOUT();
 8002f0c:	f000 fbe8 	bl	80036e0 <Endpoint_ClearOUT>
				bytes = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	81fb      	strh	r3, [r7, #14]
 8002f14:	e006      	b.n	8002f24 <CDC_Device_BytesReceived+0x54>
			}
			else
			{
				bytes = Endpoint_BytesInEndpoint();
 8002f16:	f7ff fe3d 	bl	8002b94 <Endpoint_BytesInEndpoint>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	81fb      	strh	r3, [r7, #14]
 8002f1e:	e001      	b.n	8002f24 <CDC_Device_BytesReceived+0x54>
			}
		}
		else
		{
			bytes = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	81fb      	strh	r3, [r7, #14]
		}
	}

	return bytes;
 8002f24:	89fb      	ldrh	r3, [r7, #14]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	1ffe8d1d 	.word	0x1ffe8d1d

08002f34 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(
						USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	int16_t Rx_bytes = -1;
 8002f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f40:	81fb      	strh	r3, [r7, #14]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <CDC_Device_ReceiveByte+0x58>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d119      	bne.n	8002f80 <CDC_Device_ReceiveByte+0x4c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <CDC_Device_ReceiveByte+0x4c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	799b      	ldrb	r3, [r3, #6]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fd87 	bl	8002a6c <Endpoint_SelectEndpoint>

		if (Endpoint_IsOUTReceived())
 8002f5e:	f7ff fdf7 	bl	8002b50 <Endpoint_IsOUTReceived>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <CDC_Device_ReceiveByte+0x4c>
		{
			if (Endpoint_BytesInEndpoint())
 8002f68:	f7ff fe14 	bl	8002b94 <Endpoint_BytesInEndpoint>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <CDC_Device_ReceiveByte+0x48>
			{
				Rx_bytes = Endpoint_Read_8();
 8002f72:	f000 fcbb 	bl	80038ec <Endpoint_Read_8>
 8002f76:	4603      	mov	r3, r0
 8002f78:	81fb      	strh	r3, [r7, #14]
 8002f7a:	e001      	b.n	8002f80 <CDC_Device_ReceiveByte+0x4c>
			}
			else
			{
				Endpoint_ClearOUT();
 8002f7c:	f000 fbb0 	bl	80036e0 <Endpoint_ClearOUT>
			}

		}

	}
	return Rx_bytes;
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	b21b      	sxth	r3, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	1ffe8d1d 	.word	0x1ffe8d1d

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <__NVIC_EnableIRQ+0x34>)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	79fa      	ldrb	r2, [r7, #7]
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db10      	blt.n	8002ffc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fda:	490b      	ldr	r1, [pc, #44]	; (8003008 <__NVIC_DisableIRQ+0x40>)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	79fa      	ldrb	r2, [r7, #7]
 8002fe4:	f002 021f 	and.w	r2, r2, #31
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fa00 f202 	lsl.w	r2, r0, r2
 8002fee:	3320      	adds	r3, #32
 8002ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ff4:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002ff8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <USBD_VCOM_Init>:
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <USBD_VCOM_Init+0x8c>)
 800301a:	2200      	movs	r2, #0
 800301c:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003020:	2282      	movs	r2, #130	; 0x82
 8003022:	701a      	strb	r2, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	805a      	strh	r2, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <USBD_VCOM_Init+0x8c>)
 800302c:	2202      	movs	r2, #2
 800302e:	711a      	strb	r2, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003032:	2200      	movs	r2, #0
 8003034:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003038:	2203      	movs	r2, #3
 800303a:	719a      	strb	r2, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <USBD_VCOM_Init+0x8c>)
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	811a      	strh	r2, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003044:	2202      	movs	r2, #2
 8003046:	729a      	strb	r2, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <USBD_VCOM_Init+0x8c>)
 800304a:	2200      	movs	r2, #0
 800304c:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003050:	2281      	movs	r2, #129	; 0x81
 8003052:	731a      	strb	r2, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003056:	2208      	movs	r2, #8
 8003058:	81da      	strh	r2, [r3, #14]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <USBD_VCOM_Init+0x8c>)
 800305c:	2203      	movs	r2, #3
 800305e:	741a      	strb	r2, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <USBD_VCOM_Init+0x8c>)
 8003062:	2200      	movs	r2, #0
 8003064:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 8003066:	480d      	ldr	r0, [pc, #52]	; (800309c <USBD_VCOM_Init+0x90>)
 8003068:	f000 f8bc 	bl	80031e4 <USBD_VCOM_Register_USBEvent_CB>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <USBD_VCOM_Init+0x7c>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <USBD_VCOM_Init+0x94>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fe4a 	bl	8003d10 <USBD_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <USBD_VCOM_Init+0x80>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e001      	b.n	800308c <USBD_VCOM_Init+0x80>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	1ffe8cfc 	.word	0x1ffe8cfc
 800309c:	1ffe8800 	.word	0x1ffe8800
 80030a0:	1ffe884c 	.word	0x1ffe884c

080030a4 <USBD_VCOM_IsEnumDone>:

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 80030a8:	f000 fed0 	bl	8003e4c <USBD_IsEnumDone>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <USBD_VCOM_IsEnumDone+0x1c>
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <USBD_VCOM_IsEnumDone+0x24>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d101      	bne.n	80030c0 <USBD_VCOM_IsEnumDone+0x1c>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <USBD_VCOM_IsEnumDone+0x1e>
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	1ffe8d1d 	.word	0x1ffe8d1d

080030cc <USBD_VCOM_SendString>:
  return status;
}

/* This function sends string data to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendString(const int8_t* const data_string)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]

  if (data_string != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d011      	beq.n	8003102 <USBD_VCOM_SendString+0x36>
  {
    /* Send string to the host */
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != CDC_Device_SendString(&USBD_VCOM_cdc_interface, (const char*)data_string))
 80030de:	480c      	ldr	r0, [pc, #48]	; (8003110 <USBD_VCOM_SendString+0x44>)
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	f7ff fea1 	bl	8002e28 <CDC_Device_SendString>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <USBD_VCOM_SendString+0x24>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80030ec:	2306      	movs	r3, #6
 80030ee:	73fb      	strb	r3, [r7, #15]
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 80030f0:	4807      	ldr	r0, [pc, #28]	; (8003110 <USBD_VCOM_SendString+0x44>)
 80030f2:	f7ff fec5 	bl	8002e80 <CDC_Device_Flush>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <USBD_VCOM_SendString+0x3a>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80030fc:	2306      	movs	r3, #6
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e001      	b.n	8003106 <USBD_VCOM_SendString+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 8003102:	2306      	movs	r3, #6
 8003104:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	1ffe8cfc 	.word	0x1ffe8cfc

08003114 <USBD_VCOM_ReceiveByte>:

/* This function receives a byte from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveByte(int8_t* data_byte)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
  int16_t rx_byte;

  if (data_byte != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d011      	beq.n	800314a <USBD_VCOM_ReceiveByte+0x36>
  {
    /* Receive one byte of data */
    rx_byte = CDC_Device_ReceiveByte(&USBD_VCOM_cdc_interface);
 8003126:	480c      	ldr	r0, [pc, #48]	; (8003158 <USBD_VCOM_ReceiveByte+0x44>)
 8003128:	f7ff ff04 	bl	8002f34 <CDC_Device_ReceiveByte>
 800312c:	4603      	mov	r3, r0
 800312e:	81bb      	strh	r3, [r7, #12]

    if (rx_byte != -1)
 8003130:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d004      	beq.n	8003144 <USBD_VCOM_ReceiveByte+0x30>
    {
      *data_byte = (int8_t)rx_byte;
 800313a:	89bb      	ldrh	r3, [r7, #12]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e004      	b.n	800314e <USBD_VCOM_ReceiveByte+0x3a>
    }
    else
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003144:	2306      	movs	r3, #6
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e001      	b.n	800314e <USBD_VCOM_ReceiveByte+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 800314a:	2306      	movs	r3, #6
 800314c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	1ffe8cfc 	.word	0x1ffe8cfc

0800315c <USBD_VCOM_GetLineEncoding>:
  return status;
}

/* Gets the line encoding */
USBD_VCOM_STATUS_t USBD_VCOM_GetLineEncoding(CDC_LineEncoding_t* line_encoding_ptr)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;	
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]

  if (line_encoding_ptr != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <USBD_VCOM_GetLineEncoding+0x3e>
  {
    if ((USB_DeviceState != (uint8_t)DEVICE_STATE_Configured) ||
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <USBD_VCOM_GetLineEncoding+0x50>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b04      	cmp	r3, #4
 8003176:	d103      	bne.n	8003180 <USBD_VCOM_GetLineEncoding+0x24>
      (!(USBD_VCOM_cdc_interface.State.LineEncoding.BaudRateBPS)))
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <USBD_VCOM_GetLineEncoding+0x54>)
 800317a:	699b      	ldr	r3, [r3, #24]
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;	

  if (line_encoding_ptr != NULL)
  {
    if ((USB_DeviceState != (uint8_t)DEVICE_STATE_Configured) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <USBD_VCOM_GetLineEncoding+0x2a>
      (!(USBD_VCOM_cdc_interface.State.LineEncoding.BaudRateBPS)))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003180:	2306      	movs	r3, #6
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e00b      	b.n	800319e <USBD_VCOM_GetLineEncoding+0x42>
    }
    else
    {
      memcpy(line_encoding_ptr, &USBD_VCOM_cdc_interface.State.LineEncoding,
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <USBD_VCOM_GetLineEncoding+0x54>)
 800318a:	3318      	adds	r3, #24
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	6011      	str	r1, [r2, #0]
 8003190:	8899      	ldrh	r1, [r3, #4]
 8003192:	799b      	ldrb	r3, [r3, #6]
 8003194:	8091      	strh	r1, [r2, #4]
 8003196:	7193      	strb	r3, [r2, #6]
 8003198:	e001      	b.n	800319e <USBD_VCOM_GetLineEncoding+0x42>
                sizeof(CDC_LineEncoding_t));
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 800319a:	2306      	movs	r3, #6
 800319c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	1ffe8d1d 	.word	0x1ffe8d1d
 80031b0:	1ffe8cfc 	.word	0x1ffe8cfc

080031b4 <USBD_VCOM_BytesReceived>:

/* This function checks number of bytes received from the USB host. */
uint16_t USBD_VCOM_BytesReceived(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  uint16_t bytes = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	80fb      	strh	r3, [r7, #6]

  /* Check if bytes are received from host */
  NVIC_DisableIRQ(USB0_0_IRQn);
 80031be:	206b      	movs	r0, #107	; 0x6b
 80031c0:	f7ff ff02 	bl	8002fc8 <__NVIC_DisableIRQ>
  bytes = CDC_Device_BytesReceived(&USBD_VCOM_cdc_interface);
 80031c4:	4806      	ldr	r0, [pc, #24]	; (80031e0 <USBD_VCOM_BytesReceived+0x2c>)
 80031c6:	f7ff fe83 	bl	8002ed0 <CDC_Device_BytesReceived>
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  NVIC_EnableIRQ(USB0_0_IRQn);	
 80031ce:	206b      	movs	r0, #107	; 0x6b
 80031d0:	f7ff fede 	bl	8002f90 <__NVIC_EnableIRQ>
    
  return bytes;
 80031d4:	88fb      	ldrh	r3, [r7, #6]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	1ffe8cfc 	.word	0x1ffe8cfc

080031e4 <USBD_VCOM_Register_USBEvent_CB>:
/**
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]

  /*Register USB event call backs*/
  if (event_callback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d03c      	beq.n	8003270 <USBD_VCOM_Register_USBEvent_CB+0x8c>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6912      	ldr	r2, [r2, #16]
 8003200:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68d2      	ldr	r2, [r2, #12]
 8003224:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6952      	ldr	r2, [r2, #20]
 800323c:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	69d2      	ldr	r2, [r2, #28]
 8003248:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6992      	ldr	r2, [r2, #24]
 8003254:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6a12      	ldr	r2, [r2, #32]
 8003260:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
 800326e:	e001      	b.n	8003274 <USBD_VCOM_Register_USBEvent_CB+0x90>
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]

}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	1ffe884c 	.word	0x1ffe884c

08003288 <USBD_VCOM_Event_ConfigurationChanged>:

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 800328c:	2081      	movs	r0, #129	; 0x81
 800328e:	490f      	ldr	r1, [pc, #60]	; (80032cc <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	f000 fde7 	bl	8003e64 <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8003296:	2082      	movs	r0, #130	; 0x82
 8003298:	490d      	ldr	r1, [pc, #52]	; (80032d0 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	f000 fde2 	bl	8003e64 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 80032a0:	2003      	movs	r0, #3
 80032a2:	490c      	ldr	r1, [pc, #48]	; (80032d4 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	f000 fddd 	bl	8003e64 <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 80032aa:	480b      	ldr	r0, [pc, #44]	; (80032d8 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 80032ac:	f7ff fd58 	bl	8002d60 <CDC_Device_ConfigureEndpoints>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <USBD_VCOM_Event_ConfigurationChanged+0x42>
  {
    device.IsConfigured = 1U;
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 80032b8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <USBD_VCOM_Event_ConfigurationChanged+0x58>)
 80032c6:	2204      	movs	r2, #4
 80032c8:	701a      	strb	r2, [r3, #0]
  }
}
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	1ffe8c7c 	.word	0x1ffe8c7c
 80032d0:	1ffe8c38 	.word	0x1ffe8c38
 80032d4:	1ffe8cbc 	.word	0x1ffe8cbc
 80032d8:	1ffe8cfc 	.word	0x1ffe8cfc
 80032dc:	1ffe8f28 	.word	0x1ffe8f28
 80032e0:	1ffe8d1d 	.word	0x1ffe8d1d

080032e4 <USBD_VCOM_Event_ControlRequest>:

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 80032e8:	4801      	ldr	r0, [pc, #4]	; (80032f0 <USBD_VCOM_Event_ControlRequest+0xc>)
 80032ea:	f7ff fc77 	bl	8002bdc <CDC_Device_ProcessControlRequest>
}
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	1ffe8cfc 	.word	0x1ffe8cfc

080032f4 <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <USBD_VCOM_Event_Reset+0x38>)
 80032fa:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <USBD_VCOM_Event_Reset+0x36>
  {
    device.IsConfigured = 0U;
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <USBD_VCOM_Event_Reset+0x38>)
 800330a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800330e:	f36f 0300 	bfc	r3, #0, #1
 8003312:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <USBD_VCOM_Event_Reset+0x3c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fe76 	bl	800300c <USBD_VCOM_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <USBD_VCOM_Event_Reset+0x36>
    {
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 8003326:	f000 f831 	bl	800338c <USBD_VCOM_Connect>
      {
      }
    }
  }
}
 800332a:	bd80      	pop	{r7, pc}
 800332c:	1ffe8f28 	.word	0x1ffe8f28
 8003330:	1ffe8834 	.word	0x1ffe8834

08003334 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
/*CDC class driver event for a line encoding change on a CDC interface. This event fires each time the host
 * requests a line encoding change (containing the serial parity, baud and other configuration information). The new
 * line encoding settings are available in the LineEncoding structure inside the CDC interface structure passed
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x18>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
  (void)cdc_interface_info;

}
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	1ffe8c78 	.word	0x1ffe8c78

08003350 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
/*CDC class driver event for a control line state change on a CDC interface. This event fires
 * each time the host requests a control line state change (containing the virtual serial control
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x18>)
 800335a:	2201      	movs	r2, #1
 800335c:	705a      	strb	r2, [r3, #1]
  (void)cdc_interface_info;

}
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	1ffe8c78 	.word	0x1ffe8c78

0800336c <USBD_VCOM_CDCClass_Event_BreakSent>:

/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <USBD_VCOM_CDCClass_Event_BreakSent+0x1c>)
 800337a:	2201      	movs	r2, #1
 800337c:	709a      	strb	r2, [r3, #2]
  (void)cdc_interface_info;
  (void)duration;

}
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	1ffe8c78 	.word	0x1ffe8c78

0800338c <USBD_VCOM_Connect>:

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 8003390:	f000 fd50 	bl	8003e34 <USBD_Connect>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	460b      	mov	r3, r1
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <Endpoint_Write_Stream_LE+0x108>)
 80033ac:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80033b0:	461a      	mov	r2, r3
 80033b2:	232c      	movs	r3, #44	; 0x2c
 80033b4:	fb03 f302 	mul.w	r3, r3, r2
 80033b8:	4a3a      	ldr	r2, [pc, #232]	; (80034a4 <Endpoint_Write_Stream_LE+0x108>)
 80033ba:	4413      	add	r3, r2
 80033bc:	3304      	adds	r3, #4
 80033be:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	83fb      	strh	r3, [r7, #30]
	uint16_t BytesTransfered = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	83bb      	strh	r3, [r7, #28]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <Endpoint_Write_Stream_LE+0x42>
	{
		Length -= *BytesProcessed;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	897a      	ldrh	r2, [r7, #10]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	83bb      	strh	r3, [r7, #28]
	}

	while (Length) 
 80033de:	e058      	b.n	8003492 <Endpoint_Write_Stream_LE+0xf6>
	{
		if (ep->InInUse)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d000      	beq.n	80033f2 <Endpoint_Write_Stream_LE+0x56>
		{
			continue;
 80033f0:	e04f      	b.n	8003492 <Endpoint_Write_Stream_LE+0xf6>
		}
		if (Endpoint_IsReadWriteAllowed()) 
 80033f2:	f000 fa15 	bl	8003820 <Endpoint_IsReadWriteAllowed>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02f      	beq.n	800345c <Endpoint_Write_Stream_LE+0xc0>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	1ad2      	subs	r2, r2, r3
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	429a      	cmp	r2, r3
 800340a:	d902      	bls.n	8003412 <Endpoint_Write_Stream_LE+0x76>
			{
				Bytes = Length;
 800340c:	897b      	ldrh	r3, [r7, #10]
 800340e:	83fb      	strh	r3, [r7, #30]
 8003410:	e007      	b.n	8003422 <Endpoint_Write_Stream_LE+0x86>
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	b29a      	uxth	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	b29b      	uxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	18d1      	adds	r1, r2, r3
 800342c:	8bbb      	ldrh	r3, [r7, #28]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	441a      	add	r2, r3
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	f001 fd03 	bl	8004e44 <memcpy>
			ep->InBytesAvailable += Bytes;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	8bfb      	ldrh	r3, [r7, #30]
 8003444:	441a      	add	r2, r3
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 800344a:	8bba      	ldrh	r2, [r7, #28]
 800344c:	8bfb      	ldrh	r3, [r7, #30]
 800344e:	4413      	add	r3, r2
 8003450:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8003452:	897a      	ldrh	r2, [r7, #10]
 8003454:	8bfb      	ldrh	r3, [r7, #30]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	e01a      	b.n	8003492 <Endpoint_Write_Stream_LE+0xf6>
		}
		else 
		{
			Endpoint_ClearIN();
 800345c:	f000 f98e 	bl	800377c <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 8003460:	897b      	ldrh	r3, [r7, #10]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	8892      	ldrh	r2, [r2, #4]
 8003466:	f3c2 1286 	ubfx	r2, r2, #6, #7
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	4293      	cmp	r3, r2
 800346e:	da07      	bge.n	8003480 <Endpoint_Write_Stream_LE+0xe4>
			{
				if (BytesProcessed!=NULL) 
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <Endpoint_Write_Stream_LE+0xe4>
				{
					*BytesProcessed = BytesTransfered;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8bba      	ldrh	r2, [r7, #28]
 800347a:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800347c:	2305      	movs	r3, #5
 800347e:	e00c      	b.n	800349a <Endpoint_Write_Stream_LE+0xfe>
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 8003480:	f000 f8e6 	bl	8003650 <Endpoint_WaitUntilReady>
 8003484:	4603      	mov	r3, r0
 8003486:	75fb      	strb	r3, [r7, #23]
			if (ErrorCode) 
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <Endpoint_Write_Stream_LE+0xf6>
			{
				return ErrorCode;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	e003      	b.n	800349a <Endpoint_Write_Stream_LE+0xfe>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1a3      	bne.n	80033e0 <Endpoint_Write_Stream_LE+0x44>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	1ffe8f28 	.word	0x1ffe8f28

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	4908      	ldr	r1, [pc, #32]	; (80034dc <__NVIC_EnableIRQ+0x34>)
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	79fa      	ldrb	r2, [r7, #7]
 80034c4:	f002 021f 	and.w	r2, r2, #31
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db10      	blt.n	8003514 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f2:	490b      	ldr	r1, [pc, #44]	; (8003520 <__NVIC_DisableIRQ+0x40>)
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	79fa      	ldrb	r2, [r7, #7]
 80034fc:	f002 021f 	and.w	r2, r2, #31
 8003500:	2001      	movs	r0, #1
 8003502:	fa00 f202 	lsl.w	r2, r0, r2
 8003506:	3320      	adds	r3, #32
 8003508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800350c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003510:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <Endpoint_IsINReady+0x54>)
 800352c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003530:	461a      	mov	r2, r3
 8003532:	232c      	movs	r3, #44	; 0x2c
 8003534:	fb03 f302 	mul.w	r3, r3, r2
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <Endpoint_IsINReady+0x54>)
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <Endpoint_IsINReady+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <Endpoint_IsINReady+0x40>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <Endpoint_IsINReady+0x42>
 8003564:	2300      	movs	r3, #0
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
	}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	1ffe8f28 	.word	0x1ffe8f28

0800357c <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <Endpoint_IsOUTReceived+0x40>)
 8003584:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003588:	461a      	mov	r2, r3
 800358a:	232c      	movs	r3, #44	; 0x2c
 800358c:	fb03 f302 	mul.w	r3, r3, r2
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <Endpoint_IsOUTReceived+0x40>)
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
	}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	1ffe8f28 	.word	0x1ffe8f28

080035c0 <Endpoint_GetEndpointDirection>:
	 *  \return The currently selected endpoint's direction, as a
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <Endpoint_GetEndpointDirection+0x34>)
 80035c8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80035cc:	461a      	mov	r2, r3
 80035ce:	232c      	movs	r3, #44	; 0x2c
 80035d0:	fb03 f302 	mul.w	r3, r3, r2
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <Endpoint_GetEndpointDirection+0x34>)
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	607b      	str	r3, [r7, #4]
		return ep->Address & ENDPOINT_DIR_MASK;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035e4:	b2db      	uxtb	r3, r3
	}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	1ffe8f28 	.word	0x1ffe8f28

080035f8 <Endpoint_IsStalled>:
	 *  \return Boolean \c true if the currently selected endpoint is stalled,
	 *  \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
		bool status = false;
 80035fe:	2300      	movs	r3, #0
 8003600:	71fb      	strb	r3, [r7, #7]
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <Endpoint_IsStalled+0x3c>)
 8003604:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003608:	4619      	mov	r1, r3
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <Endpoint_IsStalled+0x3c>)
 800360c:	232c      	movs	r3, #44	; 0x2c
 800360e:	fb03 f301 	mul.w	r3, r3, r1
 8003612:	4413      	add	r3, r2
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <Endpoint_IsStalled+0x2e>
		{
			status = true;
 8003622:	2301      	movs	r3, #1
 8003624:	71fb      	strb	r3, [r7, #7]
		}
		return status;
 8003626:	79fb      	ldrb	r3, [r7, #7]
	}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	1ffe8f28 	.word	0x1ffe8f28

08003638 <USB_Device_GetFrameNumber>:
 *  the frame number is incremented by one.
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	return device.Driver->GetFrameNumber();
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <USB_Device_GetFrameNumber+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	4798      	blx	r3
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	1ffe8f28 	.word	0x1ffe8f28

08003650 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8003656:	2364      	movs	r3, #100	; 0x64
 8003658:	71fb      	strb	r3, [r7, #7]
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 800365a:	f7ff ffed 	bl	8003638 <USB_Device_GetFrameNumber>
 800365e:	4603      	mov	r3, r0
 8003660:	80bb      	strh	r3, [r7, #4]

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8003662:	f7ff ffad 	bl	80035c0 <Endpoint_GetEndpointDirection>
 8003666:	4603      	mov	r3, r0
 8003668:	2b80      	cmp	r3, #128	; 0x80
 800366a:	d106      	bne.n	800367a <Endpoint_WaitUntilReady+0x2a>
		{
			if (Endpoint_IsINReady())
 800366c:	f7ff ff5a 	bl	8003524 <Endpoint_IsINReady>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 8003676:	2300      	movs	r3, #0
 8003678:	e02c      	b.n	80036d4 <Endpoint_WaitUntilReady+0x84>
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 800367a:	f7ff ff7f 	bl	800357c <Endpoint_IsOUTReceived>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 8003684:	2300      	movs	r3, #0
 8003686:	e025      	b.n	80036d4 <Endpoint_WaitUntilReady+0x84>
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <Endpoint_WaitUntilReady+0x8c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	70fb      	strb	r3, [r7, #3]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <Endpoint_WaitUntilReady+0x48>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8003694:	2302      	movs	r3, #2
 8003696:	e01d      	b.n	80036d4 <Endpoint_WaitUntilReady+0x84>
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d101      	bne.n	80036a2 <Endpoint_WaitUntilReady+0x52>
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 800369e:	2303      	movs	r3, #3
 80036a0:	e018      	b.n	80036d4 <Endpoint_WaitUntilReady+0x84>
		}
		else if (Endpoint_IsStalled())
 80036a2:	f7ff ffa9 	bl	80035f8 <Endpoint_IsStalled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <Endpoint_WaitUntilReady+0x60>
		{
		  return ENDPOINT_READYWAIT_EndpointStalled;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e011      	b.n	80036d4 <Endpoint_WaitUntilReady+0x84>
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 80036b0:	f7ff ffc2 	bl	8003638 <USB_Device_GetFrameNumber>
 80036b4:	4603      	mov	r3, r0
 80036b6:	803b      	strh	r3, [r7, #0]

		if (CurrentFrameNumber != PreviousFrameNumber)
 80036b8:	883a      	ldrh	r2, [r7, #0]
 80036ba:	88bb      	ldrh	r3, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d008      	beq.n	80036d2 <Endpoint_WaitUntilReady+0x82>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 80036c0:	883b      	ldrh	r3, [r7, #0]
 80036c2:	80bb      	strh	r3, [r7, #4]

			if (!(TimeoutMSRem--))
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	1e5a      	subs	r2, r3, #1
 80036c8:	71fa      	strb	r2, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_Timeout;
 80036ce:	2304      	movs	r3, #4
 80036d0:	e000      	b.n	80036d4 <Endpoint_WaitUntilReady+0x84>
			}
		}
	}
 80036d2:	e7c6      	b.n	8003662 <Endpoint_WaitUntilReady+0x12>
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	1ffe8d1d 	.word	0x1ffe8d1d

080036e0 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) 
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <Endpoint_ClearOUT+0x98>)
 80036e8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80036ec:	461a      	mov	r2, r3
 80036ee:	232c      	movs	r3, #44	; 0x2c
 80036f0:	fb03 f302 	mul.w	r3, r3, r2
 80036f4:	4a20      	ldr	r2, [pc, #128]	; (8003778 <Endpoint_ClearOUT+0x98>)
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to
	 * not override it */
	if (ep->IsEnabled == 0)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d100      	bne.n	800370e <Endpoint_ClearOUT+0x2e>
	{
		return;
 800370c:	e030      	b.n	8003770 <Endpoint_ClearOUT+0x90>
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <Endpoint_ClearOUT+0x98>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	7810      	ldrb	r0, [r2, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6911      	ldr	r1, [r2, #16]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6952      	ldr	r2, [r2, #20]
 8003720:	4798      	blx	r3
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	08db      	lsrs	r3, r3, #3
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d117      	bne.n	8003770 <Endpoint_ClearOUT+0x90>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d113      	bne.n	8003770 <Endpoint_ClearOUT+0x90>
	{
		ep->OutInUse = true;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	8893      	ldrh	r3, [r2, #4]
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	8893      	ldrh	r3, [r2, #4]
 8003756:	f36f 1345 	bfc	r3, #5, #1
 800375a:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <Endpoint_ClearOUT+0x98>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	7811      	ldrb	r1, [r2, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6952      	ldr	r2, [r2, #20]
 800376a:	4608      	mov	r0, r1
 800376c:	4611      	mov	r1, r2
 800376e:	4798      	blx	r3
	}
}
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	1ffe8f28 	.word	0x1ffe8f28

0800377c <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <Endpoint_ClearIN+0xa0>)
 8003784:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003788:	461a      	mov	r2, r3
 800378a:	232c      	movs	r3, #44	; 0x2c
 800378c:	fb03 f302 	mul.w	r3, r3, r2
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <Endpoint_ClearIN+0xa0>)
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <Endpoint_ClearIN+0x3c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d100      	bne.n	80037ba <Endpoint_ClearIN+0x3e>
		return;
 80037b8:	e02c      	b.n	8003814 <Endpoint_ClearIN+0x98>
	ep->InInUse = true;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	8893      	ldrh	r3, [r2, #4]
 80037be:	f043 0310 	orr.w	r3, r3, #16
 80037c2:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 80037da:	206b      	movs	r0, #107	; 0x6b
 80037dc:	f7ff fe80 	bl	80034e0 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <Endpoint_ClearIN+0xa0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f2:	4798      	blx	r3
 80037f4:	6038      	str	r0, [r7, #0]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 800380e:	206b      	movs	r0, #107	; 0x6b
 8003810:	f7ff fe4a 	bl	80034a8 <__NVIC_EnableIRQ>

}
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	1ffe8f28 	.word	0x1ffe8f28

08003820 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed() {
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <Endpoint_IsReadWriteAllowed+0x60>)
 8003828:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800382c:	461a      	mov	r2, r3
 800382e:	232c      	movs	r3, #44	; 0x2c
 8003830:	fb03 f302 	mul.w	r3, r3, r2
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <Endpoint_IsReadWriteAllowed+0x60>)
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 800383c:	2300      	movs	r3, #0
 800383e:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf34      	ite	cc
 800385a:	2301      	movcc	r3, #1
 800385c:	2300      	movcs	r3, #0
 800385e:	71fb      	strb	r3, [r7, #7]
 8003860:	e006      	b.n	8003870 <Endpoint_IsReadWriteAllowed+0x50>
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8003870:	79fb      	ldrb	r3, [r7, #7]
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	1ffe8f28 	.word	0x1ffe8f28

08003884 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <Endpoint_Write_8+0x64>)
 8003890:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003894:	461a      	mov	r2, r3
 8003896:	232c      	movs	r3, #44	; 0x2c
 8003898:	fb03 f302 	mul.w	r3, r3, r2
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <Endpoint_Write_8+0x64>)
 800389e:	4413      	add	r3, r2
 80038a0:	3304      	adds	r3, #4
 80038a2:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d20d      	bcs.n	80038d0 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	79fa      	ldrb	r2, [r7, #7]
 80038c0:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	619a      	str	r2, [r3, #24]

	      Success = true;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	f083 0301 	eor.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <Endpoint_Write_8+0x24>
}
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	1ffe8f28 	.word	0x1ffe8f28

080038ec <Endpoint_Read_8>:

uint8_t Endpoint_Read_8() {
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <Endpoint_Read_8+0x6c>)
 80038f4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80038f8:	461a      	mov	r2, r3
 80038fa:	232c      	movs	r3, #44	; 0x2c
 80038fc:	fb03 f302 	mul.w	r3, r3, r2
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <Endpoint_Read_8+0x6c>)
 8003902:	4413      	add	r3, r2
 8003904:	3304      	adds	r3, #4
 8003906:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8003908:	2300      	movs	r3, #0
 800390a:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	71bb      	strb	r3, [r7, #6]

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <Endpoint_Read_8+0x52>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4413      	add	r3, r2
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	71bb      	strb	r3, [r7, #6]
		  EndPoint->OutOffset++;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	60da      	str	r2, [r3, #12]
		  EndPoint->OutBytesAvailable--;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	609a      	str	r2, [r3, #8]

		  Success = true;
 800393a:	2301      	movs	r3, #1
 800393c:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f083 0301 	eor.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e2      	bne.n	8003910 <Endpoint_Read_8+0x24>
	 return data;
 800394a:	79bb      	ldrb	r3, [r7, #6]
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	1ffe8f28 	.word	0x1ffe8f28

0800395c <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <Endpoint_Write_32_LE+0x64>)
 8003966:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800396a:	461a      	mov	r2, r3
 800396c:	232c      	movs	r3, #44	; 0x2c
 800396e:	fb03 f302 	mul.w	r3, r3, r2
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <Endpoint_Write_32_LE+0x64>)
 8003974:	4413      	add	r3, r2
 8003976:	3304      	adds	r3, #4
 8003978:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	3b03      	subs	r3, #3
 8003988:	429a      	cmp	r2, r3
 800398a:	d20d      	bcs.n	80039a8 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	4413      	add	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
																		Data;
			EndPoint->InBytesAvailable+=4;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	619a      	str	r2, [r3, #24]

			Success = true;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	f083 0301 	eor.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e4      	bne.n	800397e <Endpoint_Write_32_LE+0x22>
}
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	1ffe8f28 	.word	0x1ffe8f28

080039c4 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE() {
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <Endpoint_Read_32_LE+0x6c>)
 80039cc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80039d0:	461a      	mov	r2, r3
 80039d2:	232c      	movs	r3, #44	; 0x2c
 80039d4:	fb03 f302 	mul.w	r3, r3, r2
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <Endpoint_Read_32_LE+0x6c>)
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	607b      	str	r3, [r7, #4]
	bool Success = false;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d912      	bls.n	8003a16 <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	1f1a      	subs	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	609a      	str	r2, [r3, #8]

			Success = true;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e2      	bne.n	80039e8 <Endpoint_Read_32_LE+0x24>
	return data;
 8003a22:	68bb      	ldr	r3, [r7, #8]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	1ffe8f28 	.word	0x1ffe8f28

08003a34 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e092      	b.n	8003b6c <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8003a5e:	4b48      	ldr	r3, [pc, #288]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69dc      	ldr	r4, [r3, #28]
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	7818      	ldrb	r0, [r3, #0]
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	7919      	ldrb	r1, [r3, #4]
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4413      	add	r3, r2
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8003a98:	885b      	ldrh	r3, [r3, #2]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	47a0      	blx	r4
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <Endpoint_ConfigureEndpointTable+0x74>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e067      	b.n	8003b78 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8003aa8:	7bb9      	ldrb	r1, [r7, #14]
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	7818      	ldrb	r0, [r3, #0]
 8003abc:	4a30      	ldr	r2, [pc, #192]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003abe:	232c      	movs	r3, #44	; 0x2c
 8003ac0:	fb03 f301 	mul.w	r3, r3, r1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8003aca:	7bb8      	ldrb	r0, [r7, #14]
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	885b      	ldrh	r3, [r3, #2]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae4:	b2d9      	uxtb	r1, r3
 8003ae6:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003ae8:	232c      	movs	r3, #44	; 0x2c
 8003aea:	fb03 f300 	mul.w	r3, r3, r0
 8003aee:	441a      	add	r2, r3
 8003af0:	8913      	ldrh	r3, [r2, #8]
 8003af2:	f361 138c 	bfi	r3, r1, #6, #7
 8003af6:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8003af8:	7bbb      	ldrb	r3, [r7, #14]
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	441a      	add	r2, r3
 8003b04:	7a13      	ldrb	r3, [r2, #8]
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	441a      	add	r2, r3
 8003b18:	8913      	ldrh	r3, [r2, #8]
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	8113      	strh	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	db15      	blt.n	8003b66 <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	7818      	ldrb	r0, [r3, #0]
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3310      	adds	r3, #16
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4619      	mov	r1, r3
 8003b64:	47a0      	blx	r4

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	f4ff af68 	bcc.w	8003a46 <Endpoint_ConfigureEndpointTable+0x12>
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd90      	pop	{r4, r7, pc}
 8003b80:	1ffe8f28 	.word	0x1ffe8f28

08003b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <__NVIC_GetPriorityGrouping+0x18>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b90:	0a1b      	lsrs	r3, r3, #8
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db0b      	blt.n	8003bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb2:	4908      	ldr	r1, [pc, #32]	; (8003bd4 <__NVIC_EnableIRQ+0x34>)
 8003bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	79fa      	ldrb	r2, [r7, #7]
 8003bbc:	f002 021f 	and.w	r2, r2, #31
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db10      	blt.n	8003c0c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	490b      	ldr	r1, [pc, #44]	; (8003c18 <__NVIC_DisableIRQ+0x40>)
 8003bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	79fa      	ldrb	r2, [r7, #7]
 8003bf4:	f002 021f 	and.w	r2, r2, #31
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	3320      	adds	r3, #32
 8003c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c04:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003c08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000e100 	.word	0xe000e100

08003c1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0c      	blt.n	8003c48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	4909      	ldr	r1, [pc, #36]	; (8003c54 <__NVIC_ClearPendingIRQ+0x38>)
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	79fa      	ldrb	r2, [r7, #7]
 8003c38:	f002 021f 	and.w	r2, r2, #31
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	3360      	adds	r3, #96	; 0x60
 8003c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	490d      	ldr	r1, [pc, #52]	; (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	4909      	ldr	r1, [pc, #36]	; (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	3b04      	subs	r3, #4
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	0092      	lsls	r2, r2, #2
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
  }
}
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	bf28      	it	cs
 8003cca:	2306      	movcs	r3, #6
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3306      	adds	r3, #6
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	401a      	ands	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	1e59      	subs	r1, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003d00:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	USBD_STATUS_t status = USBD_STATUS_SUCCESS;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8003d1c:	f7fd ff18 	bl	8001b50 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 8003d20:	483d      	ldr	r0, [pc, #244]	; (8003e18 <USBD_Init+0x108>)
 8003d22:	2100      	movs	r1, #0
 8003d24:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8003d28:	f001 f897 	bl	8004e5a <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <USBD_Init+0x10c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <USBD_Init+0x108>)
 8003d34:	4a3a      	ldr	r2, [pc, #232]	; (8003e20 <USBD_Init+0x110>)
 8003d36:	601a      	str	r2, [r3, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <USBD_Init+0x108>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <USBD_Init+0x108>)
 8003d42:	4a38      	ldr	r2, [pc, #224]	; (8003e24 <USBD_Init+0x114>)
 8003d44:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <USBD_Init+0x108>)
 8003d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <USBD_Init+0x108>)
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <USBD_Init+0x118>)
 8003d52:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <USBD_Init+0x108>)
 8003d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d5a:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <USBD_Init+0x108>)
 8003d5e:	7913      	ldrb	r3, [r2, #4]
 8003d60:	f36f 13c7 	bfc	r3, #7, #1
 8003d64:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 8003d66:	4a2c      	ldr	r2, [pc, #176]	; (8003e18 <USBD_Init+0x108>)
 8003d68:	7a13      	ldrb	r3, [r2, #8]
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8003d70:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <USBD_Init+0x108>)
 8003d72:	8913      	ldrh	r3, [r2, #8]
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	8113      	strh	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8003d7a:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <USBD_Init+0x108>)
 8003d7c:	8913      	ldrh	r3, [r2, #8]
 8003d7e:	2140      	movs	r1, #64	; 0x40
 8003d80:	f361 138c 	bfi	r3, r1, #6, #7
 8003d84:	8113      	strh	r3, [r2, #8]

	if ((handle->event_cb->control_request == 0) ||
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	695b      	ldr	r3, [r3, #20]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	689b      	ldr	r3, [r3, #8]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <USBD_Init+0x9a>
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e031      	b.n	8003e0e <USBD_Init+0xfe>
	}
	else
	{
	  device.events = handle->event_cb;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <USBD_Init+0x108>)
 8003db0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7fc fd1f 	bl	80007f8 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <USBD_Init+0x11c>)
 8003dbe:	605a      	str	r2, [r3, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <USBD_Init+0x120>)
 8003dc4:	609a      	str	r2, [r3, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <USBD_Init+0x108>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4798      	blx	r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	73fb      	strb	r3, [r7, #15]
	  if (USBD_STATUS_SUCCESS == status)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <USBD_Init+0xe2>
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();
 8003ddc:	f000 f888 	bl	8003ef0 <USB_EnableUSBInterrupt>

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <USBD_Init+0x108>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	2000      	movs	r0, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	4798      	blx	r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <USBD_Init+0xfe>
	  {
	  XMC_USBD_Disable();
 8003df8:	f7fd feaa 	bl	8001b50 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <USBD_Init+0x108>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4798      	blx	r3
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <USBD_Init+0xfe>
	  {
	    USB_DisableUSBInterrupt();
 8003e0a:	f000 f887 	bl	8003f1c <USB_DisableUSBInterrupt>
	  }
	  }
	}


	return status;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	1ffe8f28 	.word	0x1ffe8f28
 8003e1c:	1ffe8d1d 	.word	0x1ffe8d1d
 8003e20:	08005838 	.word	0x08005838
 8003e24:	1ffe8d28 	.word	0x1ffe8d28
 8003e28:	1ffe8e28 	.word	0x1ffe8e28
 8003e2c:	08004551 	.word	0x08004551
 8003e30:	080047ad 	.word	0x080047ad

08003e34 <USBD_Connect>:
 *
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <USBD_Connect+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4798      	blx	r3
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	1ffe8f28 	.word	0x1ffe8f28

08003e4c <USBD_IsEnumDone>:
 *
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  return device.Driver->IsEnumDone();
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <USBD_IsEnumDone+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	4798      	blx	r3
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	1ffe8f28 	.word	0x1ffe8f28

08003e64 <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
 8003e70:	4613      	mov	r3, r2
 8003e72:	80bb      	strh	r3, [r7, #4]
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	da12      	bge.n	8003eaa <USBD_SetEndpointBuffer+0x46>
  {
    device.Endpoints[number].InBuffer = buf;
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <USBD_SetEndpointBuffer+0x74>)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3318      	adds	r3, #24
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	609a      	str	r2, [r3, #8]
    device.Endpoints[number].InBufferLength = len;
 8003e96:	88ba      	ldrh	r2, [r7, #4]
 8003e98:	490f      	ldr	r1, [pc, #60]	; (8003ed8 <USBD_SetEndpointBuffer+0x74>)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	202c      	movs	r0, #44	; 0x2c
 8003e9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	e011      	b.n	8003ece <USBD_SetEndpointBuffer+0x6a>
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <USBD_SetEndpointBuffer+0x74>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3310      	adds	r3, #16
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]
    device.Endpoints[number].OutBufferLength = len;
 8003ebc:	88ba      	ldrh	r2, [r7, #4]
 8003ebe:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <USBD_SetEndpointBuffer+0x74>)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	202c      	movs	r0, #44	; 0x2c
 8003ec4:	fb00 f303 	mul.w	r3, r0, r3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3310      	adds	r3, #16
 8003ecc:	609a      	str	r2, [r3, #8]
  }

}
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	1ffe8f28 	.word	0x1ffe8f28

08003edc <USB0_0_IRQHandler>:
 *
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <USB0_0_IRQHandler+0x10>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fd fd7f 	bl	80019e8 <XMC_USBD_IRQHandler>
}
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	1ffe884c 	.word	0x1ffe884c

08003ef0 <USB_EnableUSBInterrupt>:
 * Enables and sets the priority of USB Interrupt
 *
 * First the interrupt priority is set and then the interrupt is enabled in the NVIC.
 */
static void USB_EnableUSBInterrupt(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), USB_PRE_EMPTION_PRIORITY, 
 8003ef4:	f7ff fe46 	bl	8003b84 <__NVIC_GetPriorityGrouping>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4618      	mov	r0, r3
 8003efc:	213f      	movs	r1, #63	; 0x3f
 8003efe:	2200      	movs	r2, #0
 8003f00:	f7ff fed4 	bl	8003cac <NVIC_EncodePriority>
 8003f04:	4603      	mov	r3, r0
 8003f06:	206b      	movs	r0, #107	; 0x6b
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7ff fea5 	bl	8003c58 <__NVIC_SetPriority>
  USB_SUB_PRIORITY));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8003f0e:	206b      	movs	r0, #107	; 0x6b
 8003f10:	f7ff fe84 	bl	8003c1c <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 8003f14:	206b      	movs	r0, #107	; 0x6b
 8003f16:	f7ff fe43 	bl	8003ba0 <__NVIC_EnableIRQ>
}
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <USB_DisableUSBInterrupt>:
 * Disables the USB interrupt in the NVIC.
 *
 * Before the interrupt gets disabled, it will clear the pending IRQs.
 */
static void USB_DisableUSBInterrupt(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8003f20:	206b      	movs	r0, #107	; 0x6b
 8003f22:	f7ff fe7b 	bl	8003c1c <__NVIC_ClearPendingIRQ>
  NVIC_DisableIRQ(USB0_0_IRQn);
 8003f26:	206b      	movs	r0, #107	; 0x6b
 8003f28:	f7ff fe56 	bl	8003bd8 <__NVIC_DisableIRQ>
}
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <USBD_HandleEP0_Stall+0x2c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2080      	movs	r0, #128	; 0x80
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4798      	blx	r3
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <USBD_HandleEP0_Stall+0x2a>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <USBD_HandleEP0_Stall+0x2c>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8003f4e:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <USBD_HandleEP0_Stall+0x2c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	2000      	movs	r0, #0
 8003f56:	2118      	movs	r1, #24
 8003f58:	4798      	blx	r3
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	1ffe8f28 	.word	0x1ffe8f28

08003f60 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
  uint32_t length = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
  uint32_t ret;
  void *buffer = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
  uint32_t status = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	603b      	str	r3, [r7, #0]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8003f72:	4b95      	ldr	r3, [pc, #596]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8003f74:	885b      	ldrh	r3, [r3, #2]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	61bb      	str	r3, [r7, #24]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8003f7c:	4b93      	ldr	r3, [pc, #588]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8003f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <USBD_Handle_DeviceRequest+0x32>
  {
    device.events->control_request();
 8003f88:	4b90      	ldr	r3, [pc, #576]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8003f8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 8003f92:	4b8e      	ldr	r3, [pc, #568]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8003f94:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	f040 8228 	bne.w	80043f8 <USBD_Handle_DeviceRequest+0x498>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 8003fa8:	4b87      	ldr	r3, [pc, #540]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	f200 821f 	bhi.w	80043f2 <USBD_Handle_DeviceRequest+0x492>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <USBD_Handle_DeviceRequest+0x5c>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08004157 	.word	0x08004157
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	080043f3 	.word	0x080043f3
 8003fc8:	08004325 	.word	0x08004325
 8003fcc:	080043f3 	.word	0x080043f3
 8003fd0:	0800424f 	.word	0x0800424f
 8003fd4:	0800409d 	.word	0x0800409d
 8003fd8:	080042df 	.word	0x080042df
 8003fdc:	0800408d 	.word	0x0800408d
 8003fe0:	08004293 	.word	0x08004293
 8003fe4:	0800411d 	.word	0x0800411d
 8003fe8:	080042e5 	.word	0x080042e5
 8003fec:	080043ed 	.word	0x080043ed
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 8003ff0:	4b75      	ldr	r3, [pc, #468]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d134      	bne.n	8004068 <USBD_Handle_DeviceRequest+0x108>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8003ffe:	4b72      	ldr	r3, [pc, #456]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8004000:	889b      	ldrh	r3, [r3, #4]
 8004002:	b29b      	uxth	r3, r3
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 800400a:	4b71      	ldr	r3, [pc, #452]	; (80041d0 <USBD_Handle_DeviceRequest+0x270>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b04      	cmp	r3, #4
 8004012:	d004      	beq.n	800401e <USBD_Handle_DeviceRequest+0xbe>
 8004014:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8004016:	889b      	ldrh	r3, [r3, #4]
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d121      	bne.n	8004062 <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
 800401e:	4a6b      	ldr	r2, [pc, #428]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	7a1b      	ldrb	r3, [r3, #8]
 800402c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004030:	b2db      	uxtb	r3, r3
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8004032:	2b01      	cmp	r3, #1
 8004034:	d115      	bne.n	8004062 <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 8004036:	4a65      	ldr	r2, [pc, #404]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	441a      	add	r2, r3
 8004042:	8913      	ldrh	r3, [r2, #8]
 8004044:	f36f 0382 	bfc	r3, #2, #1
 8004048:	8113      	strh	r3, [r2, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 800404a:	4b60      	ldr	r3, [pc, #384]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	4a5d      	ldr	r2, [pc, #372]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8004052:	8892      	ldrh	r2, [r2, #4]
 8004054:	b292      	uxth	r2, r2
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	4610      	mov	r0, r2
 800405a:	2100      	movs	r1, #0
 800405c:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 800405e:	bf00      	nop
          }
          else
          {
            USBD_HandleEP0_Stall();
          }
          break;
 8004060:	e1ca      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed", 0);
            }
          }
          else
          {
            USBD_HandleEP0_Stall();
 8004062:	f7ff ff65 	bl	8003f30 <USBD_HandleEP0_Stall>
          }
          break;
 8004066:	e1c7      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8004068:	4b57      	ldr	r3, [pc, #348]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <USBD_Handle_DeviceRequest+0x126>
        {
          device.remote_wakeup = 0U;
 8004076:	4a55      	ldr	r2, [pc, #340]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004078:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800407c:	f36f 0382 	bfc	r3, #2, #1
 8004080:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
          break;
 8004084:	e1b8      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        USBD_HandleEP0_Stall();
 8004086:	f7ff ff53 	bl	8003f30 <USBD_HandleEP0_Stall>
        break;
 800408a:	e1b5      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 800408c:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	2000      	movs	r0, #0
 8004094:	494f      	ldr	r1, [pc, #316]	; (80041d4 <USBD_Handle_DeviceRequest+0x274>)
 8004096:	2201      	movs	r2, #1
 8004098:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 800409a:	e1ad      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 800409e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <USBD_Handle_DeviceRequest+0x170>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80040a8:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 80040aa:	885b      	ldrh	r3, [r3, #2]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80040b0:	4b45      	ldr	r3, [pc, #276]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	60fb      	str	r3, [r7, #12]
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 80040b8:	4b44      	ldr	r3, [pc, #272]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 80040ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	b290      	uxth	r0, r2
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	b291      	uxth	r1, r2
 80040c8:	1d3a      	adds	r2, r7, #4
 80040ca:	4798      	blx	r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	61fb      	str	r3, [r7, #28]
        }

        if (0U == length)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <USBD_Handle_DeviceRequest+0x17c>
        {
          USBD_HandleEP0_Stall();
 80040d6:	f7ff ff2b 	bl	8003f30 <USBD_HandleEP0_Stall>

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;
 80040da:	e18d      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 80040dc:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 80040de:	88db      	ldrh	r3, [r3, #6]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d803      	bhi.n	80040f2 <USBD_Handle_DeviceRequest+0x192>
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 80040ea:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 80040ec:	88db      	ldrh	r3, [r3, #6]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	61fb      	str	r3, [r7, #28]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	2000      	movs	r0, #0
 80040fc:	4611      	mov	r1, r2
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	4798      	blx	r3
 8004102:	4603      	mov	r3, r0
 8004104:	60bb      	str	r3, [r7, #8]
          device.Endpoints[0].InDataLeft = length - ret;
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 800410e:	6293      	str	r3, [r2, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4413      	add	r3, r2
 8004116:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        break;
 800411a:	e16d      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <USBD_Handle_DeviceRequest+0x270>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b04      	cmp	r3, #4
 8004124:	d10e      	bne.n	8004144 <USBD_Handle_DeviceRequest+0x1e4>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 800412e:	8892      	ldrh	r2, [r2, #4]
 8004130:	b292      	uxth	r2, r2
 8004132:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8004136:	4925      	ldr	r1, [pc, #148]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004138:	440a      	add	r2, r1
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 800413a:	2000      	movs	r0, #0
 800413c:	4611      	mov	r1, r2
 800413e:	2201      	movs	r2, #1
 8004140:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 8004142:	e159      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004144:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <USBD_Handle_DeviceRequest+0x270>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b03      	cmp	r3, #3
 800414c:	d102      	bne.n	8004154 <USBD_Handle_DeviceRequest+0x1f4>
        {
          USBD_HandleEP0_Stall();
 800414e:	f7ff feef 	bl	8003f30 <USBD_HandleEP0_Stall>
          break;
 8004152:	e151      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 8004154:	e150      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d119      	bne.n	8004198 <USBD_Handle_DeviceRequest+0x238>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004166:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800416a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004178:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800417c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	463a      	mov	r2, r7
 800418e:	2000      	movs	r0, #0
 8004190:	4611      	mov	r1, r2
 8004192:	2202      	movs	r2, #2
 8004194:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 8004196:	e12f      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <USBD_Handle_DeviceRequest+0x268>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d118      	bne.n	80041d8 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <USBD_Handle_DeviceRequest+0x270>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b2db      	uxtb	r3, r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d113      	bne.n	80041d8 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <USBD_Handle_DeviceRequest+0x26c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	463a      	mov	r2, r7
 80041bc:	2000      	movs	r0, #0
 80041be:	4611      	mov	r1, r2
 80041c0:	2202      	movs	r2, #2
 80041c2:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 80041c4:	e118      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
 80041c6:	bf00      	nop
 80041c8:	1ffe8d20 	.word	0x1ffe8d20
 80041cc:	1ffe8f28 	.word	0x1ffe8f28
 80041d0:	1ffe8d1d 	.word	0x1ffe8d1d
 80041d4:	1ffe9061 	.word	0x1ffe9061
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80041d8:	4b8c      	ldr	r3, [pc, #560]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d130      	bne.n	8004248 <USBD_Handle_DeviceRequest+0x2e8>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 80041e6:	4b89      	ldr	r3, [pc, #548]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80041e8:	889b      	ldrh	r3, [r3, #4]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 80041f2:	4b87      	ldr	r3, [pc, #540]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d004      	beq.n	8004206 <USBD_Handle_DeviceRequest+0x2a6>
 80041fc:	4b83      	ldr	r3, [pc, #524]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80041fe:	889b      	ldrh	r3, [r3, #4]
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d120      	bne.n	8004248 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
 8004206:	4a83      	ldr	r2, [pc, #524]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	212c      	movs	r1, #44	; 0x2c
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	4413      	add	r3, r2
 8004212:	7a1b      	ldrb	r3, [r3, #8]
 8004214:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004218:	b2db      	uxtb	r3, r3
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800421a:	2b01      	cmp	r3, #1
 800421c:	d114      	bne.n	8004248 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 800421e:	4a7d      	ldr	r2, [pc, #500]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	603b      	str	r3, [r7, #0]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004236:	4b77      	ldr	r3, [pc, #476]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	463a      	mov	r2, r7
 800423e:	2000      	movs	r0, #0
 8004240:	4611      	mov	r1, r2
 8004242:	2202      	movs	r2, #2
 8004244:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 8004246:	e0d7      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default stall */
        USBD_HandleEP0_Stall();
 8004248:	f7ff fe72 	bl	8003f30 <USBD_HandleEP0_Stall>
        break;
 800424c:	e0d4      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetAddress:
        if (0U == value)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <USBD_Handle_DeviceRequest+0x2fc>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8004254:	4b6e      	ldr	r3, [pc, #440]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 8004256:	2202      	movs	r2, #2
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	e002      	b.n	8004262 <USBD_Handle_DeviceRequest+0x302>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 800425c:	4b6c      	ldr	r3, [pc, #432]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 800425e:	2203      	movs	r2, #3
 8004260:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 8004262:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	4610      	mov	r0, r2
 800426e:	2100      	movs	r1, #0
 8004270:	4798      	blx	r3
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <USBD_Handle_DeviceRequest+0x330>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 800427a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <USBD_Handle_DeviceRequest+0x330>
          {
            device.events->set_address();
 8004284:	4b63      	ldr	r3, [pc, #396]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004286:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	4798      	blx	r3
          }
        }
        break;
 800428e:	e0b3      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
 8004290:	e0b2      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b5f      	ldr	r3, [pc, #380]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004298:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
        if (NULL != device.events->config_changed)
 800429c:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 800429e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <USBD_Handle_DeviceRequest+0x352>
        {
          device.events->config_changed();
 80042a8:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 80042aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <USBD_Handle_DeviceRequest+0x360>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80042b8:	4b55      	ldr	r3, [pc, #340]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 80042ba:	2203      	movs	r2, #3
 80042bc:	701a      	strb	r2, [r3, #0]
          break;
 80042be:	e09b      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 80042c0:	4b54      	ldr	r3, [pc, #336]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 80042c2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <USBD_Handle_DeviceRequest+0x378>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80042d0:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USBD_HandleEP0_Stall();
        }
        break;
 80042d6:	e08f      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
        }
        else
        {
          USBD_HandleEP0_Stall();
 80042d8:	f7ff fe2a 	bl	8003f30 <USBD_HandleEP0_Stall>
        }
        break;
 80042dc:	e08c      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetDescriptor:
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
 80042de:	f7ff fe27 	bl	8003f30 <USBD_HandleEP0_Stall>
        break;
 80042e2:	e089      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80042e4:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d111      	bne.n	8004312 <USBD_Handle_DeviceRequest+0x3b2>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80042f0:	885b      	ldrh	r3, [r3, #2]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80042f6:	4b45      	ldr	r3, [pc, #276]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80042f8:	889b      	ldrh	r3, [r3, #4]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	60fb      	str	r3, [r7, #12]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	b2d9      	uxtb	r1, r3
 8004302:	4a44      	ldr	r2, [pc, #272]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800430c:	460a      	mov	r2, r1
 800430e:	701a      	strb	r2, [r3, #0]
          break;
 8004310:	e072      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b03      	cmp	r3, #3
 800431a:	d102      	bne.n	8004322 <USBD_Handle_DeviceRequest+0x3c2>
        {
          USBD_HandleEP0_Stall();
 800431c:	f7ff fe08 	bl	8003f30 <USBD_HandleEP0_Stall>
          break;
 8004320:	e06a      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 8004322:	e069      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d102      	bne.n	8004330 <USBD_Handle_DeviceRequest+0x3d0>
        {
          USBD_HandleEP0_Stall();
 800432a:	f7ff fe01 	bl	8003f30 <USBD_HandleEP0_Stall>
          break;
 800432e:	e063      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004330:	4b37      	ldr	r3, [pc, #220]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b04      	cmp	r3, #4
 8004338:	d138      	bne.n	80043ac <USBD_Handle_DeviceRequest+0x44c>
        {
          switch (value)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <USBD_Handle_DeviceRequest+0x3f6>
 8004340:	2b01      	cmp	r3, #1
 8004342:	d000      	beq.n	8004346 <USBD_Handle_DeviceRequest+0x3e6>
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
            default:
              break;
 8004344:	e031      	b.n	80043aa <USBD_Handle_DeviceRequest+0x44a>
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 8004346:	4a33      	ldr	r2, [pc, #204]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004348:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
              break;
 8004354:	e029      	b.n	80043aa <USBD_Handle_DeviceRequest+0x44a>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 8004358:	889b      	ldrh	r3, [r3, #4]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	617b      	str	r3, [r7, #20]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 8004362:	4a2c      	ldr	r2, [pc, #176]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	7a1b      	ldrb	r3, [r3, #8]
 8004370:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <USBD_Handle_DeviceRequest+0x420>
              {
                USBD_HandleEP0_Stall();
 800437a:	f7ff fdd9 	bl	8003f30 <USBD_HandleEP0_Stall>
 800437e:	e013      	b.n	80043a8 <USBD_Handle_DeviceRequest+0x448>
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	441a      	add	r2, r3
 800438c:	8913      	ldrh	r3, [r2, #8]
 800438e:	f043 0304 	orr.w	r3, r3, #4
 8004392:	8113      	strh	r3, [r2, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 8004394:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	4a1c      	ldr	r2, [pc, #112]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 800439c:	8892      	ldrh	r2, [r2, #4]
 800439e:	b292      	uxth	r2, r2
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	4610      	mov	r0, r2
 80043a4:	2101      	movs	r1, #1
 80043a6:	4798      	blx	r3
                {
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
 80043a8:	bf00      	nop
            default:
              break;
          }
          break;
 80043aa:	e025      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <USBD_Handle_DeviceRequest+0x4b0>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d117      	bne.n	80043e6 <USBD_Handle_DeviceRequest+0x486>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d114      	bne.n	80043e6 <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f003 0303 	and.w	r3, r3, #3
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d10d      	bne.n	80043e6 <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <USBD_Handle_DeviceRequest+0x4ac>)
 80043cc:	889b      	ldrh	r3, [r3, #4]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <USBD_Handle_DeviceRequest+0x486>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 80043d6:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 80043d8:	8913      	ldrh	r3, [r2, #8]
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	8113      	strh	r3, [r2, #8]
            USBD_HandleEP0_Stall();
 80043e0:	f7ff fda6 	bl	8003f30 <USBD_HandleEP0_Stall>
            break;
 80043e4:	e008      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default behaviour is stall */
        USBD_HandleEP0_Stall();
 80043e6:	f7ff fda3 	bl	8003f30 <USBD_HandleEP0_Stall>
        break;
 80043ea:	e005      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SynchFrame:
        /* Not yet supported */
        USBD_HandleEP0_Stall();
 80043ec:	f7ff fda0 	bl	8003f30 <USBD_HandleEP0_Stall>
        break;
 80043f0:	e002      	b.n	80043f8 <USBD_Handle_DeviceRequest+0x498>

      default:
        USBD_HandleEP0_Stall();
 80043f2:	f7ff fd9d 	bl	8003f30 <USBD_HandleEP0_Stall>
        break;
 80043f6:	bf00      	nop
    }
  }
  device.IsSetupRecieved = 0U;
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <USBD_Handle_DeviceRequest+0x4b4>)
 80043fa:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80043fe:	f022 0202 	bic.w	r2, r2, #2
 8004402:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	1ffe8d20 	.word	0x1ffe8d20
 8004410:	1ffe8d1d 	.word	0x1ffe8d1d
 8004414:	1ffe8f28 	.word	0x1ffe8f28

08004418 <USBD_HandleEP0_IN>:
 * state.
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 800441e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004422:	2b02      	cmp	r3, #2
 8004424:	d10a      	bne.n	800443c <USBD_HandleEP0_IN+0x24>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	2000      	movs	r0, #0
 800442e:	2100      	movs	r1, #0
 8004430:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 8004434:	2205      	movs	r2, #5
 8004436:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 800443a:	e010      	b.n	800445e <USBD_HandleEP0_IN+0x46>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 800443e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004442:	2b03      	cmp	r3, #3
 8004444:	d10b      	bne.n	800445e <USBD_HandleEP0_IN+0x46>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 800444e:	7912      	ldrb	r2, [r2, #4]
 8004450:	4610      	mov	r0, r2
 8004452:	2118      	movs	r1, #24
 8004454:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8004456:	4b02      	ldr	r3, [pc, #8]	; (8004460 <USBD_HandleEP0_IN+0x48>)
 8004458:	2201      	movs	r2, #1
 800445a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_IN: invalid ep0 state", 0);
  }
}
 800445e:	bd80      	pop	{r7, pc}
 8004460:	1ffe8f28 	.word	0x1ffe8f28

08004464 <USBD_HandleEP0_OUT>:
 * for new SETUP packets, when in \ref USBD_EP0_STATE_OUT_STATUS. When endpoint 0 is in
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 800446a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800446e:	2b04      	cmp	r3, #4
 8004470:	d10d      	bne.n	800448e <USBD_HandleEP0_OUT+0x2a>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 8004472:	f7ff fd75 	bl	8003f60 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	2000      	movs	r0, #0
 800447e:	2100      	movs	r1, #0
 8004480:	2200      	movs	r2, #0
 8004482:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 8004486:	2203      	movs	r2, #3
 8004488:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 800448c:	e010      	b.n	80044b0 <USBD_HandleEP0_OUT+0x4c>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 8004490:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004494:	2b05      	cmp	r3, #5
 8004496:	d10b      	bne.n	80044b0 <USBD_HandleEP0_OUT+0x4c>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 80044a0:	7912      	ldrb	r2, [r2, #4]
 80044a2:	4610      	mov	r0, r2
 80044a4:	2118      	movs	r1, #24
 80044a6:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <USBD_HandleEP0_OUT+0x50>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_OUT: invalid ep0 state", 0);
  }
}
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	1ffe8f28 	.word	0x1ffe8f28

080044b8 <USBD_HandleEP0_SETUP>:
 * equals zero, it starts processing the request and sends in status response including the switch to
 * USBD_EP0_STATE_IN_STATUS. When the host expects data from the device, the function processes the control
 * request and switches to USBD_EP0_STATE_IN_DATA state.
 */
static void USBD_HandleEP0_SETUP()
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 80044be:	4b22      	ldr	r3, [pc, #136]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2000      	movs	r0, #0
 80044c6:	4921      	ldr	r1, [pc, #132]	; (800454c <USBD_HandleEP0_SETUP+0x94>)
 80044c8:	2208      	movs	r2, #8
 80044ca:	4798      	blx	r3
 80044cc:	4603      	mov	r3, r0
 80044ce:	607b      	str	r3, [r7, #4]
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 80044d2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80044d6:	f042 0202 	orr.w	r2, r2, #2
 80044da:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d12d      	bne.n	8004540 <USBD_HandleEP0_SETUP+0x88>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <USBD_HandleEP0_SETUP+0x94>)
 80044e6:	88db      	ldrh	r3, [r3, #6]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <USBD_HandleEP0_SETUP+0x52>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 80044f0:	2203      	movs	r2, #3
 80044f2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 80044f6:	f7ff fd33 	bl	8003f60 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	2000      	movs	r0, #0
 8004502:	2100      	movs	r1, #0
 8004504:	2200      	movs	r2, #0
 8004506:	4798      	blx	r3
 8004508:	e01a      	b.n	8004540 <USBD_HandleEP0_SETUP+0x88>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <USBD_HandleEP0_SETUP+0x94>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	b25b      	sxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	da06      	bge.n	8004526 <USBD_HandleEP0_SETUP+0x6e>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 800451a:	2202      	movs	r2, #2
 800451c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 8004520:	f7ff fd1e 	bl	8003f60 <USBD_Handle_DeviceRequest>
 8004524:	e00c      	b.n	8004540 <USBD_HandleEP0_SETUP+0x88>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 8004528:	2204      	movs	r2, #4
 800452a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <USBD_HandleEP0_SETUP+0x90>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	4a05      	ldr	r2, [pc, #20]	; (800454c <USBD_HandleEP0_SETUP+0x94>)
 8004536:	88d2      	ldrh	r2, [r2, #6]
 8004538:	b292      	uxth	r2, r2
 800453a:	2000      	movs	r0, #0
 800453c:	4611      	mov	r1, r2
 800453e:	4798      	blx	r3
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_SETUP: read invalid setup packet size", 0);
  }
}
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	1ffe8f28 	.word	0x1ffe8f28
 800454c:	1ffe8d20 	.word	0x1ffe8d20

08004550 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  switch (event)
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2b09      	cmp	r3, #9
 800455e:	f200 811c 	bhi.w	800479a <USBD_SignalDeviceEventHandler+0x24a>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <USBD_SignalDeviceEventHandler+0x18>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	08004743 	.word	0x08004743
 800456c:	08004723 	.word	0x08004723
 8004570:	080046e9 	.word	0x080046e9
 8004574:	08004703 	.word	0x08004703
 8004578:	08004591 	.word	0x08004591
 800457c:	0800479b 	.word	0x0800479b
 8004580:	0800476f 	.word	0x0800476f
 8004584:	0800474b 	.word	0x0800474b
 8004588:	0800479b 	.word	0x0800479b
 800458c:	080046cf 	.word	0x080046cf
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8004590:	4b84      	ldr	r3, [pc, #528]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8004596:	4b84      	ldr	r3, [pc, #528]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004598:	2201      	movs	r2, #1
 800459a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 800459e:	4a82      	ldr	r2, [pc, #520]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80045a0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80045a4:	f36f 0382 	bfc	r3, #2, #1
 80045a8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 80045ac:	2307      	movs	r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e060      	b.n	8004674 <USBD_SignalDeviceEventHandler+0x124>
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f1c3 0307 	rsb	r3, r3, #7
 80045b8:	4a7b      	ldr	r2, [pc, #492]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80045ba:	212c      	movs	r1, #44	; 0x2c
 80045bc:	fb01 f303 	mul.w	r3, r1, r3
 80045c0:	441a      	add	r2, r3
 80045c2:	8913      	ldrh	r3, [r2, #8]
 80045c4:	f36f 1304 	bfc	r3, #4, #1
 80045c8:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1c3 0307 	rsb	r3, r3, #7
 80045d0:	4a75      	ldr	r2, [pc, #468]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	441a      	add	r2, r3
 80045da:	8913      	ldrh	r3, [r2, #8]
 80045dc:	f36f 03c3 	bfc	r3, #3, #1
 80045e0:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1c3 0307 	rsb	r3, r3, #7
 80045e8:	4a6f      	ldr	r2, [pc, #444]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	441a      	add	r2, r3
 80045f2:	8913      	ldrh	r3, [r2, #8]
 80045f4:	f36f 0382 	bfc	r3, #2, #1
 80045f8:	8113      	strh	r3, [r2, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	d036      	beq.n	800466e <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f1c3 0307 	rsb	r3, r3, #7
 8004606:	4a68      	ldr	r2, [pc, #416]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	7a1b      	ldrb	r3, [r3, #8]
 8004612:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004616:	b2db      	uxtb	r3, r3
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004618:	2b00      	cmp	r3, #0
 800461a:	d028      	beq.n	800466e <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 800461c:	4b62      	ldr	r3, [pc, #392]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a1b      	ldr	r3, [r3, #32]
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f1c2 0207 	rsb	r2, r2, #7
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004628:	495f      	ldr	r1, [pc, #380]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800462a:	202c      	movs	r0, #44	; 0x2c
 800462c:	fb00 f202 	mul.w	r2, r0, r2
 8004630:	440a      	add	r2, r1
 8004632:	7912      	ldrb	r2, [r2, #4]
 8004634:	4610      	mov	r0, r2
 8004636:	4798      	blx	r3
 8004638:	4603      	mov	r3, r0
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 800463a:	2b00      	cmp	r3, #0
 800463c:	d117      	bne.n	800466e <USBD_SignalDeviceEventHandler+0x11e>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1c3 0307 	rsb	r3, r3, #7
 8004644:	4a58      	ldr	r2, [pc, #352]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	441a      	add	r2, r3
 800464e:	7a13      	ldrb	r3, [r2, #8]
 8004650:	f36f 0300 	bfc	r3, #0, #1
 8004654:	7213      	strb	r3, [r2, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f1c3 0307 	rsb	r3, r3, #7
 800465c:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	441a      	add	r2, r3
 8004666:	8913      	ldrh	r3, [r2, #8]
 8004668:	f36f 0341 	bfc	r3, #1, #1
 800466c:	8113      	strh	r3, [r2, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b01      	subs	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d19b      	bne.n	80045b2 <USBD_SignalDeviceEventHandler+0x62>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 800467a:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8004682:	2301      	movs	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e00a      	b.n	800469e <USBD_SignalDeviceEventHandler+0x14e>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f1c3 0301 	rsb	r3, r3, #1
 800468e:	4a46      	ldr	r2, [pc, #280]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f1      	bne.n	8004688 <USBD_SignalDeviceEventHandler+0x138>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80046a4:	4b40      	ldr	r3, [pc, #256]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046ac:	7912      	ldrb	r2, [r2, #4]
 80046ae:	4610      	mov	r0, r2
 80046b0:	2118      	movs	r1, #24
 80046b2:	4798      	blx	r3
      if (NULL != device.events->reset)
 80046b4:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <USBD_SignalDeviceEventHandler+0x17c>
      {
        device.events->reset();
 80046c0:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	4798      	blx	r3
      }
      break;
 80046ca:	e067      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 80046cc:	e066      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 80046ce:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <USBD_SignalDeviceEventHandler+0x196>
      {
        device.events->start_of_frame();
 80046da:	4b33      	ldr	r3, [pc, #204]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4798      	blx	r3
      }
      break;
 80046e4:	e05a      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 80046e6:	e059      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 80046e8:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <USBD_SignalDeviceEventHandler+0x1b0>
      {
        device.events->connect();
 80046f4:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 80046f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4798      	blx	r3
      }
      break;
 80046fe:	e04d      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 8004700:	e04c      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004708:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800470a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <USBD_SignalDeviceEventHandler+0x1d0>
      {
        device.events->disconnect();
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4798      	blx	r3
      }
      break;
 800471e:	e03d      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 8004720:	e03c      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004728:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800472a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <USBD_SignalDeviceEventHandler+0x1f0>
      {
        device.events->disconnect();
 8004734:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004736:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4798      	blx	r3
      }
      break;
 800473e:	e02d      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 8004740:	e02c      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
      break;
 8004748:	e028      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800474c:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 8004752:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->wakeup)
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <USBD_SignalDeviceEventHandler+0x21c>
      {
        device.events->wakeup();
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4798      	blx	r3
      }
      break;
 800476a:	e017      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 800476c:	e016      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004776:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <USBD_SignalDeviceEventHandler+0x254>)
 800477c:	2205      	movs	r2, #5
 800477e:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->suspend)
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 8004782:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <USBD_SignalDeviceEventHandler+0x248>
      {
        device.events->suspend();
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <USBD_SignalDeviceEventHandler+0x258>)
 800478e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4798      	blx	r3
      }
      break;
 8004796:	e001      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
 8004798:	e000      	b.n	800479c <USBD_SignalDeviceEventHandler+0x24c>
    default:
      break;
 800479a:	bf00      	nop
  }
}
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	1ffe8d1d 	.word	0x1ffe8d1d
 80047a8:	1ffe8f28 	.word	0x1ffe8f28

080047ac <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	460a      	mov	r2, r1
 80047b6:	71fb      	strb	r3, [r7, #7]
 80047b8:	4613      	mov	r3, r2
 80047ba:	71bb      	strb	r3, [r7, #6]
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	222c      	movs	r2, #44	; 0x2c
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	4a5e      	ldr	r2, [pc, #376]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 80047ca:	4413      	add	r3, r2
 80047cc:	3304      	adds	r3, #4
 80047ce:	617b      	str	r3, [r7, #20]
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 80047d0:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 80047d2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80047d6:	613b      	str	r3, [r7, #16]
  temp_dir = (uint32_t)device.CurrentDirection;
 80047d8:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 80047da:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80047de:	60fb      	str	r3, [r7, #12]
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	4b56      	ldr	r3, [pc, #344]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 80047ea:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b53      	ldr	r3, [pc, #332]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 80047f8:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 80047fc:	79bb      	ldrb	r3, [r7, #6]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d013      	beq.n	800482a <USBD_SignalEndpointEvent_Handler+0x7e>
 8004802:	2b02      	cmp	r3, #2
 8004804:	d03a      	beq.n	800487c <USBD_SignalEndpointEvent_Handler+0xd0>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d000      	beq.n	800480c <USBD_SignalEndpointEvent_Handler+0x60>
        default:
          break;
      }
      break;
    default:
      break;
 800480a:	e08e      	b.n	800492a <USBD_SignalEndpointEvent_Handler+0x17e>
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	8893      	ldrh	r3, [r2, #4]
 8004810:	f36f 03c3 	bfc	r3, #3, #1
 8004814:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004816:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004818:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d000      	beq.n	8004822 <USBD_SignalEndpointEvent_Handler+0x76>
      {
        case 0:
          USBD_HandleEP0_SETUP();
          break;
        default:
          break;
 8004820:	e002      	b.n	8004828 <USBD_SignalEndpointEvent_Handler+0x7c>
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_SETUP();
 8004822:	f7ff fe49 	bl	80044b8 <USBD_HandleEP0_SETUP>
          break;
 8004826:	bf00      	nop
        default:
          break;
      }
      break;
 8004828:	e07f      	b.n	800492a <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	8893      	ldrh	r3, [r2, #4]
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	8093      	strh	r3, [r2, #4]
      if (ep->OutBytesAvailable == 0U)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d110      	bne.n	800485e <USBD_SignalEndpointEvent_Handler+0xb2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	7810      	ldrb	r0, [r2, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	6911      	ldr	r1, [r2, #16]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6952      	ldr	r2, [r2, #20]
 8004854:	4798      	blx	r3
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	609a      	str	r2, [r3, #8]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	8893      	ldrh	r3, [r2, #4]
 8004862:	f36f 03c3 	bfc	r3, #3, #1
 8004866:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 800486a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d000      	beq.n	8004874 <USBD_SignalEndpointEvent_Handler+0xc8>
      {
        case 0:
          USBD_HandleEP0_OUT();
          break;
        default:
          break;
 8004872:	e002      	b.n	800487a <USBD_SignalEndpointEvent_Handler+0xce>
      }
      ep->OutInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_OUT();
 8004874:	f7ff fdf6 	bl	8004464 <USBD_HandleEP0_OUT>
          break;
 8004878:	bf00      	nop
        default:
          break;
      }
      break;
 800487a:	e056      	b.n	800492a <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <USBD_SignalEndpointEvent_Handler+0x108>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8004884:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	7810      	ldrb	r0, [r2, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004896:	4798      	blx	r3
 8004898:	60b8      	str	r0, [r7, #8]
        ep->InDataLeft -= (uint32_t)data_count;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad2      	subs	r2, r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24
        ep->InDataBuffer += (uint32_t)data_count;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	441a      	add	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80048b2:	e03a      	b.n	800492a <USBD_SignalEndpointEvent_Handler+0x17e>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d121      	bne.n	8004906 <USBD_SignalEndpointEvent_Handler+0x15a>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01d      	beq.n	8004906 <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <USBD_SignalEndpointEvent_Handler+0x19c>)
 80048d0:	88d2      	ldrh	r2, [r2, #6]
 80048d2:	b292      	uxth	r2, r2
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d016      	beq.n	8004906 <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	8892      	ldrh	r2, [r2, #4]
 80048e0:	f3c2 1286 	ubfx	r2, r2, #6, #7
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ea:	fb02 f201 	mul.w	r2, r2, r1
 80048ee:	1a9b      	subs	r3, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d108      	bne.n	8004906 <USBD_SignalEndpointEvent_Handler+0x15a>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	4610      	mov	r0, r2
 8004900:	2100      	movs	r1, #0
 8004902:	2200      	movs	r2, #0
 8004904:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	619a      	str	r2, [r3, #24]
      ep->InInUse = (uint8_t)0;
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	8893      	ldrh	r3, [r2, #4]
 8004910:	f36f 1304 	bfc	r3, #4, #1
 8004914:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004918:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d000      	beq.n	8004922 <USBD_SignalEndpointEvent_Handler+0x176>
      {
        case 0:
          USBD_HandleEP0_IN();
          break;
        default:
          break;
 8004920:	e002      	b.n	8004928 <USBD_SignalEndpointEvent_Handler+0x17c>
      ep->InBytesAvailable = 0U;
      ep->InInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_IN();
 8004922:	f7ff fd79 	bl	8004418 <USBD_HandleEP0_IN>
          break;
 8004926:	bf00      	nop
        default:
          break;
      }
      break;
 8004928:	bf00      	nop
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004930:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	4b02      	ldr	r3, [pc, #8]	; (8004944 <USBD_SignalEndpointEvent_Handler+0x198>)
 800493a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	1ffe8f28 	.word	0x1ffe8f28
 8004948:	1ffe8d20 	.word	0x1ffe8d20

0800494c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004968:	4013      	ands	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800497e:	4a04      	ldr	r2, [pc, #16]	; (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	60d3      	str	r3, [r2, #12]
}
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800499a:	2001      	movs	r0, #1
 800499c:	f7ff ffd6 	bl	800494c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049a0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80049a2:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <SystemCoreSetup+0x94>)
 80049a4:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <SystemCoreSetup+0x98>)
 80049a6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049a8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80049ac:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <SystemCoreSetup+0x94>)
 80049b0:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <SystemCoreSetup+0x94>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80049be:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <SystemCoreSetup+0x9c>)
 80049c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c4:	3314      	adds	r3, #20
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f023 030f 	bic.w	r3, r3, #15
 80049d0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <SystemCoreSetup+0x9c>)
 80049dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e0:	3314      	adds	r3, #20
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80049e6:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <SystemCoreSetup+0x94>)
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <SystemCoreSetup+0x94>)
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f023 0310 	bic.w	r3, r3, #16
 80049f0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80049f2:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <SystemCoreSetup+0x94>)
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <SystemCoreSetup+0x94>)
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f023 0308 	bic.w	r3, r3, #8
 80049fc:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <SystemCoreSetup+0x94>)
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <SystemCoreSetup+0x94>)
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <SystemCoreSetup+0x94>)
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <SystemCoreSetup+0x94>)
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a14:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8004a16:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <SystemCoreSetup+0x94>)
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <SystemCoreSetup+0x94>)
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a20:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed00 	.word	0xe000ed00
 8004a2c:	08000000 	.word	0x08000000
 8004a30:	58001000 	.word	0x58001000

08004a34 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]

  return (status);
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8004a58:	4b02      	ldr	r3, [pc, #8]	; (8004a64 <OSCHP_GetFrequency+0x10>)
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	00b71b00 	.word	0x00b71b00

08004a68 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8004a70:	4906      	ldr	r1, [pc, #24]	; (8004a8c <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	50004600 	.word	0x50004600

08004a90 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8004a90:	b5b0      	push	{r4, r5, r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <SystemCoreClockSetup+0x60>)
 8004a98:	1d3c      	adds	r4, r7, #4
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fcba 	bl	8000420 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7fb fdc7 	bl	8000640 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8004ab2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ab6:	f7fb fd7b 	bl	80005b0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8004aba:	2006      	movs	r0, #6
 8004abc:	f7fb fe4c 	bl	8000758 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8004ac0:	f7fb fee2 	bl	8000888 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8004ac4:	2003      	movs	r0, #3
 8004ac6:	2164      	movs	r1, #100	; 0x64
 8004ac8:	f7fb feee 	bl	80008a8 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8004acc:	2000      	movs	r0, #0
 8004ace:	f7ff ffcb 	bl	8004a68 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f7fb fe7c 	bl	80007d0 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fb fd7d 	bl	80005d8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f7fb fe62 	bl	80007a8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fb fe4b 	bl	8000780 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bdb0      	pop	{r4, r5, r7, pc}
 8004af0:	08005a04 	.word	0x08005a04

08004af4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8004afa:	2300      	movs	r3, #0
 8004afc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004afe:	4809      	ldr	r0, [pc, #36]	; (8004b24 <DAVE_Init+0x30>)
 8004b00:	f7ff ff98 	bl	8004a34 <CLOCK_XMC4_Init>
 8004b04:	4603      	mov	r3, r0
 8004b06:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <DAVE_Init+0x24>
  {
	 /**  Initialization of USBD_VCOM APP instance USBD_VCOM_0 */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&USBD_VCOM_0); 
 8004b0e:	4806      	ldr	r0, [pc, #24]	; (8004b28 <DAVE_Init+0x34>)
 8004b10:	f7fe fa7c 	bl	800300c <USBD_VCOM_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8004b18:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	1ffe8924 	.word	0x1ffe8924
 8004b28:	1ffe88f8 	.word	0x1ffe88f8

08004b2c <delay>:
  int8_t tx_buffer[64] = { 0 };
  CDC_LineEncoding_t line_encoding_ptr;
  static void delay(uint32_t cycles);

  static void delay(uint32_t cycles)
  {
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;

    for(i = 0UL; i < cycles ;++i)
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e003      	b.n	8004b42 <delay+0x16>
    {
       __NOP();
 8004b3a:	bf00      	nop

  static void delay(uint32_t cycles)
  {
    volatile uint32_t i;

    for(i = 0UL; i < cycles ;++i)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3f7      	bcc.n	8004b3a <delay+0xe>
    {
       __NOP();
    }
  }
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_printf>:
  USB_STATUS_t USB_printf(const char *format, ...)
  {
 8004b54:	b40f      	push	{r0, r1, r2, r3}
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b0c2      	sub	sp, #264	; 0x108
 8004b5a:	af00      	add	r7, sp, #0
  	char outPutString[USBD_VCOM_BUFFSIZE];
  	USB_STATUS_t result;
  	va_list args;
  	va_start(args, format);
 8004b5c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8004b60:	463b      	mov	r3, r7
 8004b62:	601a      	str	r2, [r3, #0]

  	vsnprintf(outPutString, USBD_VCOM_BUFFSIZE, format, args);
 8004b64:	1d3a      	adds	r2, r7, #4
 8004b66:	463b      	mov	r3, r7
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f000 fa70 	bl	8005058 <vsniprintf>
  	result = USBD_VCOM_SendString(S(outPutString));
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe faa6 	bl	80030cc <USBD_VCOM_SendString>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

  	va_end(args);
  	return result;
 8004b86:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
  }
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004b90:	46bd      	mov	sp, r7
 8004b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b96:	b004      	add	sp, #16
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop

08004b9c <processRxCommand>:

  USB_STATUS_t processRxCommand(char* commandLine)
  {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  	char *token;

  	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 8004ba4:	1d3b      	adds	r3, r7, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4911      	ldr	r1, [pc, #68]	; (8004bf0 <processRxCommand+0x54>)
 8004baa:	f000 f970 	bl	8004e8e <strsep>
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <processRxCommand+0x48>
  		{
  		send_data = strtoul(token, NULL, 0);
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f000 fa14 	bl	8004fe8 <strtoul>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <processRxCommand+0x58>)
 8004bc6:	801a      	strh	r2, [r3, #0]

  		send_data=send_data+10;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <processRxCommand+0x58>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	330a      	adds	r3, #10
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <processRxCommand+0x58>)
 8004bd2:	801a      	strh	r2, [r3, #0]
  		//return USB_CAN_STATUS_SUCCESS;
  		USB_printf("\r\n Return Data: %d \r\n",send_data);
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <processRxCommand+0x58>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	4807      	ldr	r0, [pc, #28]	; (8004bf8 <processRxCommand+0x5c>)
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f7ff ffba 	bl	8004b54 <USB_printf>

  		return USB_STATUS_SUCCESS;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <processRxCommand+0x4a>

  		}
  	else
  		{
  			return USB_STATUS_FAILURE;
 8004be4:	2301      	movs	r3, #1
  		}
  }
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	08005a18 	.word	0x08005a18
 8004bf4:	1ffe9074 	.word	0x1ffe9074
 8004bf8:	08005a1c 	.word	0x08005a1c

08004bfc <is_printable>:


  int is_printable(int8_t data_byte)
  {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]
  	return (31 < data_byte) && (data_byte < 126);
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	2b1f      	cmp	r3, #31
 8004c0c:	dd05      	ble.n	8004c1a <is_printable+0x1e>
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	2b7d      	cmp	r3, #125	; 0x7d
 8004c14:	dc01      	bgt.n	8004c1a <is_printable+0x1e>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <is_printable+0x20>
 8004c1a:	2300      	movs	r3, #0
  }
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USBD_VCOM_SendPromt>:


  USBD_VCOM_STATUS_t USBD_VCOM_SendPromt(int8_t usb_rx_buffer[])
  {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  	return USB_printf("\r> %s", usb_rx_buffer);
 8004c30:	4804      	ldr	r0, [pc, #16]	; (8004c44 <USBD_VCOM_SendPromt+0x1c>)
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	f7ff ff8e 	bl	8004b54 <USB_printf>
 8004c38:	4603      	mov	r3, r0
  }
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	08005a34 	.word	0x08005a34

08004c48 <processCommand>:


  USB_STATUS_t processCommand(int8_t usb_rx_buffer[])
  {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  	USB_STATUS_t result = USB_STATUS_FAILURE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
  	char* commandLine = (char*) usb_rx_buffer;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60bb      	str	r3, [r7, #8]
  	const char* cmd = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
  	char *token;

  	if (usb_rx_buffer == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <processCommand+0x1e>
  	{
  		return USB_STATUS_FAILURE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e028      	b.n	8004cb8 <processCommand+0x70>
  	}

  	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4914      	ldr	r1, [pc, #80]	; (8004cc0 <processCommand+0x78>)
 8004c6e:	f000 f90e 	bl	8004e8e <strsep>
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01d      	beq.n	8004cb6 <processCommand+0x6e>
  	{
  		cmd = token;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	613b      	str	r3, [r7, #16]
  		if (!strcmp(cmd, "Send"))
 8004c7e:	6938      	ldr	r0, [r7, #16]
 8004c80:	4910      	ldr	r1, [pc, #64]	; (8004cc4 <processCommand+0x7c>)
 8004c82:	f000 f8f2 	bl	8004e6a <strcmp>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <processCommand+0x52>
  		{
  			result = processRxCommand(commandLine);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff ff84 	bl	8004b9c <processRxCommand>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]
 8004c98:	e003      	b.n	8004ca2 <processCommand+0x5a>
  		}
  		else
  		{
  			USB_printf("\r\nUnknown command '%s'\r\n", cmd);
 8004c9a:	480b      	ldr	r0, [pc, #44]	; (8004cc8 <processCommand+0x80>)
 8004c9c:	6939      	ldr	r1, [r7, #16]
 8004c9e:	f7ff ff59 	bl	8004b54 <USB_printf>
  		}

  		if (result == USB_STATUS_SUCCESS)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <processCommand+0x68>
  		{
  			USB_printf("\r\nResult: Success\r\n");
 8004ca8:	4808      	ldr	r0, [pc, #32]	; (8004ccc <processCommand+0x84>)
 8004caa:	f7ff ff53 	bl	8004b54 <USB_printf>
 8004cae:	e002      	b.n	8004cb6 <processCommand+0x6e>
  		}
  		else
  		{
  			USB_printf("\r\nResult: Failure\r\n");
 8004cb0:	4807      	ldr	r0, [pc, #28]	; (8004cd0 <processCommand+0x88>)
 8004cb2:	f7ff ff4f 	bl	8004b54 <USB_printf>
  		}
  	}
  	return result;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
  }
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08005a18 	.word	0x08005a18
 8004cc4:	08005a3c 	.word	0x08005a3c
 8004cc8:	08005a44 	.word	0x08005a44
 8004ccc:	08005a60 	.word	0x08005a60
 8004cd0:	08005a74 	.word	0x08005a74

08004cd4 <main>:

  int main(void)
  {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
    DAVE_STATUS_t init_status;
    uint16_t bytes = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	817b      	strh	r3, [r7, #10]
    init_status = DAVE_Init();
 8004cde:	f7ff ff09 	bl	8004af4 <DAVE_Init>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	727b      	strb	r3, [r7, #9]

    if (init_status == DAVE_STATUS_SUCCESS)
 8004ce6:	7a7b      	ldrb	r3, [r7, #9]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d172      	bne.n	8004dd2 <main+0xfe>
    {

      if (USBD_VCOM_Connect() != USBD_VCOM_STATUS_SUCCESS)
 8004cec:	f7fe fb4e 	bl	800338c <USBD_VCOM_Connect>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <main+0x28>
      {
       return -1;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e06b      	b.n	8004dd4 <main+0x100>
      }

      while (!USBD_VCOM_IsEnumDone());
 8004cfc:	bf00      	nop
 8004cfe:	f7fe f9d1 	bl	80030a4 <USBD_VCOM_IsEnumDone>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0fa      	beq.n	8004cfe <main+0x2a>
      while(!cdc_event_flags.line_encoding_event_flag);
 8004d08:	bf00      	nop
 8004d0a:	4b34      	ldr	r3, [pc, #208]	; (8004ddc <main+0x108>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0fa      	beq.n	8004d0a <main+0x36>

      delay(0xffff);//ensure the status of line encoding request is properly send to host.
 8004d14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d18:	f7ff ff08 	bl	8004b2c <delay>
      USBD_VCOM_GetLineEncoding(&line_encoding_ptr);
 8004d1c:	4830      	ldr	r0, [pc, #192]	; (8004de0 <main+0x10c>)
 8004d1e:	f7fe fa1d 	bl	800315c <USBD_VCOM_GetLineEncoding>

      int usb_rx_buffer_idx = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]

      while(1U)
      {

        bytes = USBD_VCOM_BytesReceived();
 8004d26:	f7fe fa45 	bl	80031b4 <USBD_VCOM_BytesReceived>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	817b      	strh	r3, [r7, #10]
        if (bytes)
 8004d2e:	897b      	ldrh	r3, [r7, #10]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d04a      	beq.n	8004dca <main+0xf6>
        {
				USBD_VCOM_STATUS_t status;
				int8_t data_byte = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	71bb      	strb	r3, [r7, #6]
				const int8_t newLine = '\r';
 8004d38:	230d      	movs	r3, #13
 8004d3a:	723b      	strb	r3, [r7, #8]

				status = USBD_VCOM_ReceiveByte(&data_byte);
 8004d3c:	1dbb      	adds	r3, r7, #6
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe f9e8 	bl	8003114 <USBD_VCOM_ReceiveByte>
 8004d44:	4603      	mov	r3, r0
 8004d46:	71fb      	strb	r3, [r7, #7]

				if (status == USBD_VCOM_STATUS_SUCCESS)
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d13d      	bne.n	8004dca <main+0xf6>
				{
					if (data_byte == newLine)
 8004d4e:	79bb      	ldrb	r3, [r7, #6]
 8004d50:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d10b      	bne.n	8004d72 <main+0x9e>
					{
						processCommand(usb_rx_buffer);
 8004d5a:	4822      	ldr	r0, [pc, #136]	; (8004de4 <main+0x110>)
 8004d5c:	f7ff ff74 	bl	8004c48 <processCommand>

						usb_rx_buffer_idx = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
						memset(usb_rx_buffer, 0, USBD_VCOM_BUFFSIZE);
 8004d64:	481f      	ldr	r0, [pc, #124]	; (8004de4 <main+0x110>)
 8004d66:	2100      	movs	r1, #0
 8004d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d6c:	f000 f875 	bl	8004e5a <memset>
 8004d70:	e028      	b.n	8004dc4 <main+0xf0>
					}
					else if (data_byte == '\177')
 8004d72:	79bb      	ldrb	r3, [r7, #6]
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d113      	bne.n	8004da2 <main+0xce>
					{
						if (usb_rx_buffer_idx > 0)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dd21      	ble.n	8004dc4 <main+0xf0>
						{
							usb_rx_buffer_idx--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
							usb_rx_buffer[usb_rx_buffer_idx] = ' ';
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <main+0x110>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	701a      	strb	r2, [r3, #0]
							USBD_VCOM_SendPromt(usb_rx_buffer);
 8004d90:	4814      	ldr	r0, [pc, #80]	; (8004de4 <main+0x110>)
 8004d92:	f7ff ff49 	bl	8004c28 <USBD_VCOM_SendPromt>
							usb_rx_buffer[usb_rx_buffer_idx] = 0;
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <main+0x110>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e010      	b.n	8004dc4 <main+0xf0>
						}
					}
					else if (is_printable(data_byte)
 8004da2:	79bb      	ldrb	r3, [r7, #6]
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff ff28 	bl	8004bfc <is_printable>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <main+0xf0>
							&& (usb_rx_buffer_idx < (USBD_VCOM_BUFFSIZE - 1)))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2bfe      	cmp	r3, #254	; 0xfe
 8004db6:	dc05      	bgt.n	8004dc4 <main+0xf0>
					{
						usb_rx_buffer[usb_rx_buffer_idx++] = data_byte;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	60fa      	str	r2, [r7, #12]
 8004dbe:	79b9      	ldrb	r1, [r7, #6]
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <main+0x110>)
 8004dc2:	54d1      	strb	r1, [r2, r3]
					}
					USBD_VCOM_SendPromt(usb_rx_buffer);
 8004dc4:	4807      	ldr	r0, [pc, #28]	; (8004de4 <main+0x110>)
 8004dc6:	f7ff ff2f 	bl	8004c28 <USBD_VCOM_SendPromt>
				}
			}

        CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 8004dca:	4807      	ldr	r0, [pc, #28]	; (8004de8 <main+0x114>)
 8004dcc:	f7fe f80c 	bl	8002de8 <CDC_Device_USBTask>
      }
 8004dd0:	e7a9      	b.n	8004d26 <main+0x52>
    else
    {
      XMC_DEBUG("main: Application initialization failed");
      while(1U)
      {
      }
 8004dd2:	e7fe      	b.n	8004dd2 <main+0xfe>
    }

    return 1U;
  }
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	1ffe8c78 	.word	0x1ffe8c78
 8004de0:	1ffe906c 	.word	0x1ffe906c
 8004de4:	1ffe8928 	.word	0x1ffe8928
 8004de8:	1ffe8cfc 	.word	0x1ffe8cfc

08004dec <__errno>:
 8004dec:	4b01      	ldr	r3, [pc, #4]	; (8004df4 <__errno+0x8>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	1ffe88b0 	.word	0x1ffe88b0

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <__libc_init_array+0x3c>)
 8004dfc:	4c0e      	ldr	r4, [pc, #56]	; (8004e38 <__libc_init_array+0x40>)
 8004dfe:	1ae4      	subs	r4, r4, r3
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	2500      	movs	r5, #0
 8004e04:	461e      	mov	r6, r3
 8004e06:	42a5      	cmp	r5, r4
 8004e08:	d004      	beq.n	8004e14 <__libc_init_array+0x1c>
 8004e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e0e:	4798      	blx	r3
 8004e10:	3501      	adds	r5, #1
 8004e12:	e7f8      	b.n	8004e06 <__libc_init_array+0xe>
 8004e14:	f7fd fdd4 	bl	80029c0 <_init>
 8004e18:	4c08      	ldr	r4, [pc, #32]	; (8004e3c <__libc_init_array+0x44>)
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <__libc_init_array+0x48>)
 8004e1c:	1ae4      	subs	r4, r4, r3
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2500      	movs	r5, #0
 8004e22:	461e      	mov	r6, r3
 8004e24:	42a5      	cmp	r5, r4
 8004e26:	d004      	beq.n	8004e32 <__libc_init_array+0x3a>
 8004e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e2c:	4798      	blx	r3
 8004e2e:	3501      	adds	r5, #1
 8004e30:	e7f8      	b.n	8004e24 <__libc_init_array+0x2c>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	1ffe88b8 	.word	0x1ffe88b8
 8004e38:	1ffe88b8 	.word	0x1ffe88b8
 8004e3c:	1ffe88b8 	.word	0x1ffe88b8
 8004e40:	1ffe88b8 	.word	0x1ffe88b8

08004e44 <memcpy>:
 8004e44:	b510      	push	{r4, lr}
 8004e46:	1e43      	subs	r3, r0, #1
 8004e48:	440a      	add	r2, r1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	d004      	beq.n	8004e58 <memcpy+0x14>
 8004e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e56:	e7f8      	b.n	8004e4a <memcpy+0x6>
 8004e58:	bd10      	pop	{r4, pc}

08004e5a <memset>:
 8004e5a:	4402      	add	r2, r0
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d002      	beq.n	8004e68 <memset+0xe>
 8004e62:	f803 1b01 	strb.w	r1, [r3], #1
 8004e66:	e7fa      	b.n	8004e5e <memset+0x4>
 8004e68:	4770      	bx	lr

08004e6a <strcmp>:
 8004e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	bf28      	it	cs
 8004e76:	429a      	cmpcs	r2, r3
 8004e78:	d0f7      	beq.n	8004e6a <strcmp>
 8004e7a:	1ad0      	subs	r0, r2, r3
 8004e7c:	4770      	bx	lr

08004e7e <strlen>:
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d1fb      	bne.n	8004e80 <strlen+0x2>
 8004e88:	1a18      	subs	r0, r3, r0
 8004e8a:	3801      	subs	r0, #1
 8004e8c:	4770      	bx	lr

08004e8e <strsep>:
 8004e8e:	4602      	mov	r2, r0
 8004e90:	2300      	movs	r3, #0
 8004e92:	6800      	ldr	r0, [r0, #0]
 8004e94:	f000 b800 	b.w	8004e98 <__strtok_r>

08004e98 <__strtok_r>:
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	b948      	cbnz	r0, 8004eb0 <__strtok_r+0x18>
 8004e9c:	6810      	ldr	r0, [r2, #0]
 8004e9e:	b938      	cbnz	r0, 8004eb0 <__strtok_r+0x18>
 8004ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ea6:	b15e      	cbz	r6, 8004ec0 <__strtok_r+0x28>
 8004ea8:	42b5      	cmp	r5, r6
 8004eaa:	d1fa      	bne.n	8004ea2 <__strtok_r+0xa>
 8004eac:	b12b      	cbz	r3, 8004eba <__strtok_r+0x22>
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	460f      	mov	r7, r1
 8004eb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004eb8:	e7f3      	b.n	8004ea2 <__strtok_r+0xa>
 8004eba:	6014      	str	r4, [r2, #0]
 8004ebc:	7003      	strb	r3, [r0, #0]
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec0:	b94d      	cbnz	r5, 8004ed6 <__strtok_r+0x3e>
 8004ec2:	6015      	str	r5, [r2, #0]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ecc:	42ae      	cmp	r6, r5
 8004ece:	d007      	beq.n	8004ee0 <__strtok_r+0x48>
 8004ed0:	2e00      	cmp	r6, #0
 8004ed2:	d1f9      	bne.n	8004ec8 <__strtok_r+0x30>
 8004ed4:	461c      	mov	r4, r3
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	460f      	mov	r7, r1
 8004eda:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004ede:	e7f3      	b.n	8004ec8 <__strtok_r+0x30>
 8004ee0:	b115      	cbz	r5, 8004ee8 <__strtok_r+0x50>
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	7021      	strb	r1, [r4, #0]
 8004ee6:	e000      	b.n	8004eea <__strtok_r+0x52>
 8004ee8:	462b      	mov	r3, r5
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004ef0 <_strtoul_r>:
 8004ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	4c3b      	ldr	r4, [pc, #236]	; (8004fe4 <_strtoul_r+0xf4>)
 8004ef6:	f8d4 9000 	ldr.w	r9, [r4]
 8004efa:	460e      	mov	r6, r1
 8004efc:	4635      	mov	r5, r6
 8004efe:	f815 eb01 	ldrb.w	lr, [r5], #1
 8004f02:	eb09 040e 	add.w	r4, r9, lr
 8004f06:	7867      	ldrb	r7, [r4, #1]
 8004f08:	f007 0408 	and.w	r4, r7, #8
 8004f0c:	f004 07ff 	and.w	r7, r4, #255	; 0xff
 8004f10:	b10c      	cbz	r4, 8004f16 <_strtoul_r+0x26>
 8004f12:	462e      	mov	r6, r5
 8004f14:	e7f2      	b.n	8004efc <_strtoul_r+0xc>
 8004f16:	4674      	mov	r4, lr
 8004f18:	2c2d      	cmp	r4, #45	; 0x2d
 8004f1a:	d103      	bne.n	8004f24 <_strtoul_r+0x34>
 8004f1c:	1cb5      	adds	r5, r6, #2
 8004f1e:	7874      	ldrb	r4, [r6, #1]
 8004f20:	2701      	movs	r7, #1
 8004f22:	e003      	b.n	8004f2c <_strtoul_r+0x3c>
 8004f24:	2c2b      	cmp	r4, #43	; 0x2b
 8004f26:	bf04      	itt	eq
 8004f28:	7874      	ldrbeq	r4, [r6, #1]
 8004f2a:	1cb5      	addeq	r5, r6, #2
 8004f2c:	b113      	cbz	r3, 8004f34 <_strtoul_r+0x44>
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d10a      	bne.n	8004f48 <_strtoul_r+0x58>
 8004f32:	e051      	b.n	8004fd8 <_strtoul_r+0xe8>
 8004f34:	2c30      	cmp	r4, #48	; 0x30
 8004f36:	d14d      	bne.n	8004fd4 <_strtoul_r+0xe4>
 8004f38:	782c      	ldrb	r4, [r5, #0]
 8004f3a:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004f3e:	2c58      	cmp	r4, #88	; 0x58
 8004f40:	d143      	bne.n	8004fca <_strtoul_r+0xda>
 8004f42:	786c      	ldrb	r4, [r5, #1]
 8004f44:	2310      	movs	r3, #16
 8004f46:	3502      	adds	r5, #2
 8004f48:	f04f 38ff 	mov.w	r8, #4294967295
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	fbb8 f8f3 	udiv	r8, r8, r3
 8004f52:	fb03 fa08 	mul.w	sl, r3, r8
 8004f56:	ea6f 0a0a 	mvn.w	sl, sl
 8004f5a:	46b6      	mov	lr, r6
 8004f5c:	eb09 0c04 	add.w	ip, r9, r4
 8004f60:	f89c c001 	ldrb.w	ip, [ip, #1]
 8004f64:	f01c 0f04 	tst.w	ip, #4
 8004f68:	d001      	beq.n	8004f6e <_strtoul_r+0x7e>
 8004f6a:	3c30      	subs	r4, #48	; 0x30
 8004f6c:	e00b      	b.n	8004f86 <_strtoul_r+0x96>
 8004f6e:	f01c 0c03 	ands.w	ip, ip, #3
 8004f72:	d01b      	beq.n	8004fac <_strtoul_r+0xbc>
 8004f74:	f1bc 0f01 	cmp.w	ip, #1
 8004f78:	bf0c      	ite	eq
 8004f7a:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8004f7e:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8004f82:	ebcc 0404 	rsb	r4, ip, r4
 8004f86:	429c      	cmp	r4, r3
 8004f88:	da10      	bge.n	8004fac <_strtoul_r+0xbc>
 8004f8a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004f8e:	d00a      	beq.n	8004fa6 <_strtoul_r+0xb6>
 8004f90:	45c6      	cmp	lr, r8
 8004f92:	d806      	bhi.n	8004fa2 <_strtoul_r+0xb2>
 8004f94:	d101      	bne.n	8004f9a <_strtoul_r+0xaa>
 8004f96:	4554      	cmp	r4, sl
 8004f98:	dc03      	bgt.n	8004fa2 <_strtoul_r+0xb2>
 8004f9a:	fb03 4e0e 	mla	lr, r3, lr, r4
 8004f9e:	2601      	movs	r6, #1
 8004fa0:	e001      	b.n	8004fa6 <_strtoul_r+0xb6>
 8004fa2:	f04f 36ff 	mov.w	r6, #4294967295
 8004fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004faa:	e7d7      	b.n	8004f5c <_strtoul_r+0x6c>
 8004fac:	1c74      	adds	r4, r6, #1
 8004fae:	4673      	mov	r3, lr
 8004fb0:	d103      	bne.n	8004fba <_strtoul_r+0xca>
 8004fb2:	2322      	movs	r3, #34	; 0x22
 8004fb4:	6003      	str	r3, [r0, #0]
 8004fb6:	4633      	mov	r3, r6
 8004fb8:	e002      	b.n	8004fc0 <_strtoul_r+0xd0>
 8004fba:	b10f      	cbz	r7, 8004fc0 <_strtoul_r+0xd0>
 8004fbc:	f1ce 0300 	rsb	r3, lr, #0
 8004fc0:	b16a      	cbz	r2, 8004fde <_strtoul_r+0xee>
 8004fc2:	b106      	cbz	r6, 8004fc6 <_strtoul_r+0xd6>
 8004fc4:	1e69      	subs	r1, r5, #1
 8004fc6:	6011      	str	r1, [r2, #0]
 8004fc8:	e009      	b.n	8004fde <_strtoul_r+0xee>
 8004fca:	2430      	movs	r4, #48	; 0x30
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1bb      	bne.n	8004f48 <_strtoul_r+0x58>
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	e7b9      	b.n	8004f48 <_strtoul_r+0x58>
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	e7b7      	b.n	8004f48 <_strtoul_r+0x58>
 8004fd8:	2c30      	cmp	r4, #48	; 0x30
 8004fda:	d1b5      	bne.n	8004f48 <_strtoul_r+0x58>
 8004fdc:	e7ac      	b.n	8004f38 <_strtoul_r+0x48>
 8004fde:	4618      	mov	r0, r3
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe4:	1ffe88b4 	.word	0x1ffe88b4

08004fe8 <strtoul>:
 8004fe8:	b530      	push	{r4, r5, lr}
 8004fea:	4613      	mov	r3, r2
 8004fec:	4a04      	ldr	r2, [pc, #16]	; (8005000 <strtoul+0x18>)
 8004fee:	4605      	mov	r5, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	6810      	ldr	r0, [r2, #0]
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ffc:	f7ff bf78 	b.w	8004ef0 <_strtoul_r>
 8005000:	1ffe88b0 	.word	0x1ffe88b0

08005004 <_vsniprintf_r>:
 8005004:	b530      	push	{r4, r5, lr}
 8005006:	1e14      	subs	r4, r2, #0
 8005008:	b09b      	sub	sp, #108	; 0x6c
 800500a:	4605      	mov	r5, r0
 800500c:	da04      	bge.n	8005018 <_vsniprintf_r+0x14>
 800500e:	238b      	movs	r3, #139	; 0x8b
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e01c      	b.n	8005052 <_vsniprintf_r+0x4e>
 8005018:	f44f 7202 	mov.w	r2, #520	; 0x208
 800501c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8005020:	bf14      	ite	ne
 8005022:	f104 32ff 	addne.w	r2, r4, #4294967295
 8005026:	4622      	moveq	r2, r4
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	9205      	str	r2, [sp, #20]
 800502c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005030:	9100      	str	r1, [sp, #0]
 8005032:	9104      	str	r1, [sp, #16]
 8005034:	f8ad 200e 	strh.w	r2, [sp, #14]
 8005038:	4669      	mov	r1, sp
 800503a:	461a      	mov	r2, r3
 800503c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800503e:	f000 f875 	bl	800512c <_svfiprintf_r>
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	bfbc      	itt	lt
 8005046:	238b      	movlt	r3, #139	; 0x8b
 8005048:	602b      	strlt	r3, [r5, #0]
 800504a:	b114      	cbz	r4, 8005052 <_vsniprintf_r+0x4e>
 800504c:	9b00      	ldr	r3, [sp, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	b01b      	add	sp, #108	; 0x6c
 8005054:	bd30      	pop	{r4, r5, pc}
	...

08005058 <vsniprintf>:
 8005058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <vsniprintf+0x1c>)
 800505e:	4606      	mov	r6, r0
 8005060:	460d      	mov	r5, r1
 8005062:	4614      	mov	r4, r2
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	4631      	mov	r1, r6
 8005068:	462a      	mov	r2, r5
 800506a:	4623      	mov	r3, r4
 800506c:	f7ff ffca 	bl	8005004 <_vsniprintf_r>
 8005070:	b002      	add	sp, #8
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	1ffe88b0 	.word	0x1ffe88b0

08005078 <__ssputs_r>:
 8005078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800507c:	688e      	ldr	r6, [r1, #8]
 800507e:	42b3      	cmp	r3, r6
 8005080:	4682      	mov	sl, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4690      	mov	r8, r2
 8005086:	4699      	mov	r9, r3
 8005088:	d340      	bcc.n	800510c <__ssputs_r+0x94>
 800508a:	898a      	ldrh	r2, [r1, #12]
 800508c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005090:	d03a      	beq.n	8005108 <__ssputs_r+0x90>
 8005092:	6825      	ldr	r5, [r4, #0]
 8005094:	6909      	ldr	r1, [r1, #16]
 8005096:	1a6f      	subs	r7, r5, r1
 8005098:	6965      	ldr	r5, [r4, #20]
 800509a:	2302      	movs	r3, #2
 800509c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80050a4:	1c7b      	adds	r3, r7, #1
 80050a6:	444b      	add	r3, r9
 80050a8:	429d      	cmp	r5, r3
 80050aa:	bf38      	it	cc
 80050ac:	461d      	movcc	r5, r3
 80050ae:	0553      	lsls	r3, r2, #21
 80050b0:	d50f      	bpl.n	80050d2 <__ssputs_r+0x5a>
 80050b2:	4629      	mov	r1, r5
 80050b4:	f000 fb2a 	bl	800570c <_malloc_r>
 80050b8:	4606      	mov	r6, r0
 80050ba:	b198      	cbz	r0, 80050e4 <__ssputs_r+0x6c>
 80050bc:	6921      	ldr	r1, [r4, #16]
 80050be:	463a      	mov	r2, r7
 80050c0:	f7ff fec0 	bl	8004e44 <memcpy>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	e013      	b.n	80050fa <__ssputs_r+0x82>
 80050d2:	462a      	mov	r2, r5
 80050d4:	f000 fb70 	bl	80057b8 <_realloc_r>
 80050d8:	4606      	mov	r6, r0
 80050da:	b970      	cbnz	r0, 80050fa <__ssputs_r+0x82>
 80050dc:	4650      	mov	r0, sl
 80050de:	6921      	ldr	r1, [r4, #16]
 80050e0:	f000 fad0 	bl	8005684 <_free_r>
 80050e4:	230c      	movs	r3, #12
 80050e6:	f8ca 3000 	str.w	r3, [sl]
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	f04f 30ff 	mov.w	r0, #4294967295
 80050f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fa:	6126      	str	r6, [r4, #16]
 80050fc:	6165      	str	r5, [r4, #20]
 80050fe:	443e      	add	r6, r7
 8005100:	1bed      	subs	r5, r5, r7
 8005102:	6026      	str	r6, [r4, #0]
 8005104:	60a5      	str	r5, [r4, #8]
 8005106:	464e      	mov	r6, r9
 8005108:	45b1      	cmp	r9, r6
 800510a:	d200      	bcs.n	800510e <__ssputs_r+0x96>
 800510c:	464e      	mov	r6, r9
 800510e:	4632      	mov	r2, r6
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	4641      	mov	r1, r8
 8005114:	f000 fa9b 	bl	800564e <memmove>
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	1b9b      	subs	r3, r3, r6
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	441e      	add	r6, r3
 8005122:	6026      	str	r6, [r4, #0]
 8005124:	2000      	movs	r0, #0
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800512c <_svfiprintf_r>:
 800512c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005130:	b09d      	sub	sp, #116	; 0x74
 8005132:	4606      	mov	r6, r0
 8005134:	9303      	str	r3, [sp, #12]
 8005136:	898b      	ldrh	r3, [r1, #12]
 8005138:	061c      	lsls	r4, r3, #24
 800513a:	460d      	mov	r5, r1
 800513c:	4690      	mov	r8, r2
 800513e:	d50c      	bpl.n	800515a <_svfiprintf_r+0x2e>
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	b953      	cbnz	r3, 800515a <_svfiprintf_r+0x2e>
 8005144:	2140      	movs	r1, #64	; 0x40
 8005146:	f000 fae1 	bl	800570c <_malloc_r>
 800514a:	6028      	str	r0, [r5, #0]
 800514c:	6128      	str	r0, [r5, #16]
 800514e:	b910      	cbnz	r0, 8005156 <_svfiprintf_r+0x2a>
 8005150:	230c      	movs	r3, #12
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	e0cc      	b.n	80052f0 <_svfiprintf_r+0x1c4>
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	616b      	str	r3, [r5, #20]
 800515a:	2300      	movs	r3, #0
 800515c:	9309      	str	r3, [sp, #36]	; 0x24
 800515e:	2320      	movs	r3, #32
 8005160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005164:	2330      	movs	r3, #48	; 0x30
 8005166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800516a:	4643      	mov	r3, r8
 800516c:	461c      	mov	r4, r3
 800516e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005172:	b91a      	cbnz	r2, 800517c <_svfiprintf_r+0x50>
 8005174:	ebb4 0908 	subs.w	r9, r4, r8
 8005178:	d00f      	beq.n	800519a <_svfiprintf_r+0x6e>
 800517a:	e002      	b.n	8005182 <_svfiprintf_r+0x56>
 800517c:	2a25      	cmp	r2, #37	; 0x25
 800517e:	d1f5      	bne.n	800516c <_svfiprintf_r+0x40>
 8005180:	e7f8      	b.n	8005174 <_svfiprintf_r+0x48>
 8005182:	4630      	mov	r0, r6
 8005184:	4629      	mov	r1, r5
 8005186:	4642      	mov	r2, r8
 8005188:	464b      	mov	r3, r9
 800518a:	f7ff ff75 	bl	8005078 <__ssputs_r>
 800518e:	3001      	adds	r0, #1
 8005190:	f000 80a9 	beq.w	80052e6 <_svfiprintf_r+0x1ba>
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	444b      	add	r3, r9
 8005198:	9309      	str	r3, [sp, #36]	; 0x24
 800519a:	7823      	ldrb	r3, [r4, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a2 	beq.w	80052e6 <_svfiprintf_r+0x1ba>
 80051a2:	2300      	movs	r3, #0
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	9307      	str	r3, [sp, #28]
 80051ac:	9205      	str	r2, [sp, #20]
 80051ae:	9306      	str	r3, [sp, #24]
 80051b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051b4:	931a      	str	r3, [sp, #104]	; 0x68
 80051b6:	f104 0801 	add.w	r8, r4, #1
 80051ba:	4644      	mov	r4, r8
 80051bc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8005308 <_svfiprintf_r+0x1dc>
 80051c0:	7821      	ldrb	r1, [r4, #0]
 80051c2:	4648      	mov	r0, r9
 80051c4:	2205      	movs	r2, #5
 80051c6:	f000 fa33 	bl	8005630 <memchr>
 80051ca:	f108 0801 	add.w	r8, r8, #1
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	b130      	cbz	r0, 80051e0 <_svfiprintf_r+0xb4>
 80051d2:	ebc9 0000 	rsb	r0, r9, r0
 80051d6:	2201      	movs	r2, #1
 80051d8:	4082      	lsls	r2, r0
 80051da:	4313      	orrs	r3, r2
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	e7ec      	b.n	80051ba <_svfiprintf_r+0x8e>
 80051e0:	06d8      	lsls	r0, r3, #27
 80051e2:	bf44      	itt	mi
 80051e4:	2220      	movmi	r2, #32
 80051e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051ea:	0719      	lsls	r1, r3, #28
 80051ec:	bf44      	itt	mi
 80051ee:	222b      	movmi	r2, #43	; 0x2b
 80051f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051f4:	7822      	ldrb	r2, [r4, #0]
 80051f6:	2a2a      	cmp	r2, #42	; 0x2a
 80051f8:	d002      	beq.n	8005200 <_svfiprintf_r+0xd4>
 80051fa:	9907      	ldr	r1, [sp, #28]
 80051fc:	4623      	mov	r3, r4
 80051fe:	e00e      	b.n	800521e <_svfiprintf_r+0xf2>
 8005200:	9a03      	ldr	r2, [sp, #12]
 8005202:	1d11      	adds	r1, r2, #4
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	9103      	str	r1, [sp, #12]
 8005208:	2a00      	cmp	r2, #0
 800520a:	bfbb      	ittet	lt
 800520c:	4252      	neglt	r2, r2
 800520e:	f043 0302 	orrlt.w	r3, r3, #2
 8005212:	9207      	strge	r2, [sp, #28]
 8005214:	9207      	strlt	r2, [sp, #28]
 8005216:	bfb8      	it	lt
 8005218:	9304      	strlt	r3, [sp, #16]
 800521a:	3401      	adds	r4, #1
 800521c:	e00a      	b.n	8005234 <_svfiprintf_r+0x108>
 800521e:	461c      	mov	r4, r3
 8005220:	3301      	adds	r3, #1
 8005222:	7822      	ldrb	r2, [r4, #0]
 8005224:	3a30      	subs	r2, #48	; 0x30
 8005226:	2a09      	cmp	r2, #9
 8005228:	d803      	bhi.n	8005232 <_svfiprintf_r+0x106>
 800522a:	200a      	movs	r0, #10
 800522c:	fb00 2101 	mla	r1, r0, r1, r2
 8005230:	e7f5      	b.n	800521e <_svfiprintf_r+0xf2>
 8005232:	9107      	str	r1, [sp, #28]
 8005234:	7823      	ldrb	r3, [r4, #0]
 8005236:	2b2e      	cmp	r3, #46	; 0x2e
 8005238:	d11a      	bne.n	8005270 <_svfiprintf_r+0x144>
 800523a:	7863      	ldrb	r3, [r4, #1]
 800523c:	2b2a      	cmp	r3, #42	; 0x2a
 800523e:	d10a      	bne.n	8005256 <_svfiprintf_r+0x12a>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9203      	str	r2, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfb8      	it	lt
 800524c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005250:	3402      	adds	r4, #2
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	e00c      	b.n	8005270 <_svfiprintf_r+0x144>
 8005256:	1c61      	adds	r1, r4, #1
 8005258:	2200      	movs	r2, #0
 800525a:	460c      	mov	r4, r1
 800525c:	3101      	adds	r1, #1
 800525e:	7823      	ldrb	r3, [r4, #0]
 8005260:	3b30      	subs	r3, #48	; 0x30
 8005262:	2b09      	cmp	r3, #9
 8005264:	d803      	bhi.n	800526e <_svfiprintf_r+0x142>
 8005266:	200a      	movs	r0, #10
 8005268:	fb00 3202 	mla	r2, r0, r2, r3
 800526c:	e7f5      	b.n	800525a <_svfiprintf_r+0x12e>
 800526e:	9205      	str	r2, [sp, #20]
 8005270:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800530c <_svfiprintf_r+0x1e0>
 8005274:	7821      	ldrb	r1, [r4, #0]
 8005276:	4640      	mov	r0, r8
 8005278:	2203      	movs	r2, #3
 800527a:	f000 f9d9 	bl	8005630 <memchr>
 800527e:	b138      	cbz	r0, 8005290 <_svfiprintf_r+0x164>
 8005280:	9a04      	ldr	r2, [sp, #16]
 8005282:	ebc8 0000 	rsb	r0, r8, r0
 8005286:	2340      	movs	r3, #64	; 0x40
 8005288:	4083      	lsls	r3, r0
 800528a:	4313      	orrs	r3, r2
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	3401      	adds	r4, #1
 8005290:	7821      	ldrb	r1, [r4, #0]
 8005292:	481a      	ldr	r0, [pc, #104]	; (80052fc <_svfiprintf_r+0x1d0>)
 8005294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005298:	2206      	movs	r2, #6
 800529a:	f104 0801 	add.w	r8, r4, #1
 800529e:	f000 f9c7 	bl	8005630 <memchr>
 80052a2:	b188      	cbz	r0, 80052c8 <_svfiprintf_r+0x19c>
 80052a4:	4b16      	ldr	r3, [pc, #88]	; (8005300 <_svfiprintf_r+0x1d4>)
 80052a6:	b933      	cbnz	r3, 80052b6 <_svfiprintf_r+0x18a>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	3307      	adds	r3, #7
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	3308      	adds	r3, #8
 80052b2:	9303      	str	r3, [sp, #12]
 80052b4:	e013      	b.n	80052de <_svfiprintf_r+0x1b2>
 80052b6:	ab03      	add	r3, sp, #12
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	4630      	mov	r0, r6
 80052bc:	a904      	add	r1, sp, #16
 80052be:	462a      	mov	r2, r5
 80052c0:	4b10      	ldr	r3, [pc, #64]	; (8005304 <_svfiprintf_r+0x1d8>)
 80052c2:	f3af 8000 	nop.w
 80052c6:	e007      	b.n	80052d8 <_svfiprintf_r+0x1ac>
 80052c8:	ab03      	add	r3, sp, #12
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	4630      	mov	r0, r6
 80052ce:	a904      	add	r1, sp, #16
 80052d0:	462a      	mov	r2, r5
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <_svfiprintf_r+0x1d8>)
 80052d4:	f000 f892 	bl	80053fc <_printf_i>
 80052d8:	1c42      	adds	r2, r0, #1
 80052da:	4607      	mov	r7, r0
 80052dc:	d003      	beq.n	80052e6 <_svfiprintf_r+0x1ba>
 80052de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e0:	443b      	add	r3, r7
 80052e2:	9309      	str	r3, [sp, #36]	; 0x24
 80052e4:	e741      	b.n	800516a <_svfiprintf_r+0x3e>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	065b      	lsls	r3, r3, #25
 80052ea:	d401      	bmi.n	80052f0 <_svfiprintf_r+0x1c4>
 80052ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ee:	e001      	b.n	80052f4 <_svfiprintf_r+0x1c8>
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	b01d      	add	sp, #116	; 0x74
 80052f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052fa:	bf00      	nop
 80052fc:	08005b95 	.word	0x08005b95
 8005300:	00000000 	.word	0x00000000
 8005304:	08005079 	.word	0x08005079
 8005308:	08005b8b 	.word	0x08005b8b
 800530c:	08005b91 	.word	0x08005b91

08005310 <_printf_common>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	4691      	mov	r9, r2
 8005316:	461f      	mov	r7, r3
 8005318:	688a      	ldr	r2, [r1, #8]
 800531a:	690b      	ldr	r3, [r1, #16]
 800531c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005320:	4293      	cmp	r3, r2
 8005322:	bfb8      	it	lt
 8005324:	4613      	movlt	r3, r2
 8005326:	f8c9 3000 	str.w	r3, [r9]
 800532a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800532e:	4606      	mov	r6, r0
 8005330:	460c      	mov	r4, r1
 8005332:	b112      	cbz	r2, 800533a <_printf_common+0x2a>
 8005334:	3301      	adds	r3, #1
 8005336:	f8c9 3000 	str.w	r3, [r9]
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	0699      	lsls	r1, r3, #26
 800533e:	bf42      	ittt	mi
 8005340:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005344:	3302      	addmi	r3, #2
 8005346:	f8c9 3000 	strmi.w	r3, [r9]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d01c      	beq.n	800538c <_printf_common+0x7c>
 8005352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	3300      	adds	r3, #0
 800535a:	bf18      	it	ne
 800535c:	2301      	movne	r3, #1
 800535e:	0692      	lsls	r2, r2, #26
 8005360:	d51f      	bpl.n	80053a2 <_printf_common+0x92>
 8005362:	18e1      	adds	r1, r4, r3
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	2030      	movs	r0, #48	; 0x30
 8005368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800536c:	4422      	add	r2, r4
 800536e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005372:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005376:	3302      	adds	r3, #2
 8005378:	e013      	b.n	80053a2 <_printf_common+0x92>
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	f104 0219 	add.w	r2, r4, #25
 8005382:	2301      	movs	r3, #1
 8005384:	47c0      	blx	r8
 8005386:	3001      	adds	r0, #1
 8005388:	d007      	beq.n	800539a <_printf_common+0x8a>
 800538a:	3501      	adds	r5, #1
 800538c:	68e3      	ldr	r3, [r4, #12]
 800538e:	f8d9 2000 	ldr.w	r2, [r9]
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	429d      	cmp	r5, r3
 8005396:	dbf0      	blt.n	800537a <_printf_common+0x6a>
 8005398:	e7db      	b.n	8005352 <_printf_common+0x42>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053aa:	47c0      	blx	r8
 80053ac:	3001      	adds	r0, #1
 80053ae:	d0f4      	beq.n	800539a <_printf_common+0x8a>
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	f8d9 5000 	ldr.w	r5, [r9]
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	f002 0206 	and.w	r2, r2, #6
 80053bc:	2a04      	cmp	r2, #4
 80053be:	bf08      	it	eq
 80053c0:	1b5d      	subeq	r5, r3, r5
 80053c2:	6922      	ldr	r2, [r4, #16]
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	bf0c      	ite	eq
 80053c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053cc:	2500      	movne	r5, #0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	bfc4      	itt	gt
 80053d2:	1a9b      	subgt	r3, r3, r2
 80053d4:	18ed      	addgt	r5, r5, r3
 80053d6:	f04f 0900 	mov.w	r9, #0
 80053da:	45a9      	cmp	r9, r5
 80053dc:	da0a      	bge.n	80053f4 <_printf_common+0xe4>
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f104 021a 	add.w	r2, r4, #26
 80053e6:	2301      	movs	r3, #1
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0d5      	beq.n	800539a <_printf_common+0x8a>
 80053ee:	f109 0901 	add.w	r9, r9, #1
 80053f2:	e7f2      	b.n	80053da <_printf_common+0xca>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080053fc <_printf_i>:
 80053fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005400:	460c      	mov	r4, r1
 8005402:	4617      	mov	r7, r2
 8005404:	7e22      	ldrb	r2, [r4, #24]
 8005406:	2a6e      	cmp	r2, #110	; 0x6e
 8005408:	4698      	mov	r8, r3
 800540a:	4606      	mov	r6, r0
 800540c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540e:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8005412:	f000 80a9 	beq.w	8005568 <_printf_i+0x16c>
 8005416:	d812      	bhi.n	800543e <_printf_i+0x42>
 8005418:	2a63      	cmp	r2, #99	; 0x63
 800541a:	d023      	beq.n	8005464 <_printf_i+0x68>
 800541c:	d80a      	bhi.n	8005434 <_printf_i+0x38>
 800541e:	2a00      	cmp	r2, #0
 8005420:	f000 80b6 	beq.w	8005590 <_printf_i+0x194>
 8005424:	2a58      	cmp	r2, #88	; 0x58
 8005426:	f040 80c5 	bne.w	80055b4 <_printf_i+0x1b8>
 800542a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800542e:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8005628 <_printf_i+0x22c>
 8005432:	e051      	b.n	80054d8 <_printf_i+0xdc>
 8005434:	2a64      	cmp	r2, #100	; 0x64
 8005436:	d01e      	beq.n	8005476 <_printf_i+0x7a>
 8005438:	2a69      	cmp	r2, #105	; 0x69
 800543a:	d01c      	beq.n	8005476 <_printf_i+0x7a>
 800543c:	e0ba      	b.n	80055b4 <_printf_i+0x1b8>
 800543e:	2a73      	cmp	r2, #115	; 0x73
 8005440:	f000 80aa 	beq.w	8005598 <_printf_i+0x19c>
 8005444:	d809      	bhi.n	800545a <_printf_i+0x5e>
 8005446:	2a6f      	cmp	r2, #111	; 0x6f
 8005448:	d02b      	beq.n	80054a2 <_printf_i+0xa6>
 800544a:	2a70      	cmp	r2, #112	; 0x70
 800544c:	f040 80b2 	bne.w	80055b4 <_printf_i+0x1b8>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	f042 0220 	orr.w	r2, r2, #32
 8005456:	6022      	str	r2, [r4, #0]
 8005458:	e039      	b.n	80054ce <_printf_i+0xd2>
 800545a:	2a75      	cmp	r2, #117	; 0x75
 800545c:	d021      	beq.n	80054a2 <_printf_i+0xa6>
 800545e:	2a78      	cmp	r2, #120	; 0x78
 8005460:	d035      	beq.n	80054ce <_printf_i+0xd2>
 8005462:	e0a7      	b.n	80055b4 <_printf_i+0x1b8>
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	1d11      	adds	r1, r2, #4
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005474:	e0a2      	b.n	80055bc <_printf_i+0x1c0>
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800547e:	d003      	beq.n	8005488 <_printf_i+0x8c>
 8005480:	1d10      	adds	r0, r2, #4
 8005482:	6018      	str	r0, [r3, #0]
 8005484:	6813      	ldr	r3, [r2, #0]
 8005486:	e005      	b.n	8005494 <_printf_i+0x98>
 8005488:	0645      	lsls	r5, r0, #25
 800548a:	d5f9      	bpl.n	8005480 <_printf_i+0x84>
 800548c:	1d10      	adds	r0, r2, #4
 800548e:	6018      	str	r0, [r3, #0]
 8005490:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005494:	2b00      	cmp	r3, #0
 8005496:	da3b      	bge.n	8005510 <_printf_i+0x114>
 8005498:	222d      	movs	r2, #45	; 0x2d
 800549a:	425b      	negs	r3, r3
 800549c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054a0:	e036      	b.n	8005510 <_printf_i+0x114>
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80054aa:	d003      	beq.n	80054b4 <_printf_i+0xb8>
 80054ac:	1d10      	adds	r0, r2, #4
 80054ae:	6018      	str	r0, [r3, #0]
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	e004      	b.n	80054be <_printf_i+0xc2>
 80054b4:	0640      	lsls	r0, r0, #25
 80054b6:	d5f9      	bpl.n	80054ac <_printf_i+0xb0>
 80054b8:	1d10      	adds	r0, r2, #4
 80054ba:	6018      	str	r0, [r3, #0]
 80054bc:	8813      	ldrh	r3, [r2, #0]
 80054be:	7e22      	ldrb	r2, [r4, #24]
 80054c0:	f8df e164 	ldr.w	lr, [pc, #356]	; 8005628 <_printf_i+0x22c>
 80054c4:	2a6f      	cmp	r2, #111	; 0x6f
 80054c6:	bf0c      	ite	eq
 80054c8:	2208      	moveq	r2, #8
 80054ca:	220a      	movne	r2, #10
 80054cc:	e01c      	b.n	8005508 <_printf_i+0x10c>
 80054ce:	2278      	movs	r2, #120	; 0x78
 80054d0:	f8df e158 	ldr.w	lr, [pc, #344]	; 800562c <_printf_i+0x230>
 80054d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80054e0:	f100 0504 	add.w	r5, r0, #4
 80054e4:	601d      	str	r5, [r3, #0]
 80054e6:	d001      	beq.n	80054ec <_printf_i+0xf0>
 80054e8:	6803      	ldr	r3, [r0, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0xf6>
 80054ec:	0655      	lsls	r5, r2, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0xec>
 80054f0:	8803      	ldrh	r3, [r0, #0]
 80054f2:	07d0      	lsls	r0, r2, #31
 80054f4:	bf44      	itt	mi
 80054f6:	f042 0220 	orrmi.w	r2, r2, #32
 80054fa:	6022      	strmi	r2, [r4, #0]
 80054fc:	b91b      	cbnz	r3, 8005506 <_printf_i+0x10a>
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	f022 0220 	bic.w	r2, r2, #32
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	2210      	movs	r2, #16
 8005508:	2000      	movs	r0, #0
 800550a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800550e:	e002      	b.n	8005516 <_printf_i+0x11a>
 8005510:	f8df e114 	ldr.w	lr, [pc, #276]	; 8005628 <_printf_i+0x22c>
 8005514:	220a      	movs	r2, #10
 8005516:	6865      	ldr	r5, [r4, #4]
 8005518:	60a5      	str	r5, [r4, #8]
 800551a:	2d00      	cmp	r5, #0
 800551c:	bfa2      	ittt	ge
 800551e:	6820      	ldrge	r0, [r4, #0]
 8005520:	f020 0004 	bicge.w	r0, r0, #4
 8005524:	6020      	strge	r0, [r4, #0]
 8005526:	b903      	cbnz	r3, 800552a <_printf_i+0x12e>
 8005528:	b165      	cbz	r5, 8005544 <_printf_i+0x148>
 800552a:	460d      	mov	r5, r1
 800552c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005530:	fb02 3310 	mls	r3, r2, r0, r3
 8005534:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8005538:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800553c:	4603      	mov	r3, r0
 800553e:	2800      	cmp	r0, #0
 8005540:	d1f4      	bne.n	800552c <_printf_i+0x130>
 8005542:	e000      	b.n	8005546 <_printf_i+0x14a>
 8005544:	460d      	mov	r5, r1
 8005546:	2a08      	cmp	r2, #8
 8005548:	d10b      	bne.n	8005562 <_printf_i+0x166>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	07da      	lsls	r2, r3, #31
 800554e:	d508      	bpl.n	8005562 <_printf_i+0x166>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	bfde      	ittt	le
 8005558:	2330      	movle	r3, #48	; 0x30
 800555a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800555e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005562:	1b49      	subs	r1, r1, r5
 8005564:	6121      	str	r1, [r4, #16]
 8005566:	e02e      	b.n	80055c6 <_printf_i+0x1ca>
 8005568:	6825      	ldr	r5, [r4, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	6960      	ldr	r0, [r4, #20]
 800556e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005572:	d003      	beq.n	800557c <_printf_i+0x180>
 8005574:	1d15      	adds	r5, r2, #4
 8005576:	601d      	str	r5, [r3, #0]
 8005578:	6813      	ldr	r3, [r2, #0]
 800557a:	e008      	b.n	800558e <_printf_i+0x192>
 800557c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005580:	f102 0504 	add.w	r5, r2, #4
 8005584:	601d      	str	r5, [r3, #0]
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	d001      	beq.n	800558e <_printf_i+0x192>
 800558a:	8018      	strh	r0, [r3, #0]
 800558c:	e000      	b.n	8005590 <_printf_i+0x194>
 800558e:	6018      	str	r0, [r3, #0]
 8005590:	2300      	movs	r3, #0
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	460d      	mov	r5, r1
 8005596:	e016      	b.n	80055c6 <_printf_i+0x1ca>
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	1d11      	adds	r1, r2, #4
 800559c:	6019      	str	r1, [r3, #0]
 800559e:	6815      	ldr	r5, [r2, #0]
 80055a0:	6862      	ldr	r2, [r4, #4]
 80055a2:	4628      	mov	r0, r5
 80055a4:	2100      	movs	r1, #0
 80055a6:	f000 f843 	bl	8005630 <memchr>
 80055aa:	b108      	cbz	r0, 80055b0 <_printf_i+0x1b4>
 80055ac:	1b40      	subs	r0, r0, r5
 80055ae:	6060      	str	r0, [r4, #4]
 80055b0:	6863      	ldr	r3, [r4, #4]
 80055b2:	e004      	b.n	80055be <_printf_i+0x1c2>
 80055b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c6:	f8cd 8000 	str.w	r8, [sp]
 80055ca:	4630      	mov	r0, r6
 80055cc:	4621      	mov	r1, r4
 80055ce:	aa03      	add	r2, sp, #12
 80055d0:	463b      	mov	r3, r7
 80055d2:	f7ff fe9d 	bl	8005310 <_printf_common>
 80055d6:	3001      	adds	r0, #1
 80055d8:	d102      	bne.n	80055e0 <_printf_i+0x1e4>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e01f      	b.n	8005620 <_printf_i+0x224>
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	462a      	mov	r2, r5
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	47c0      	blx	r8
 80055ea:	3001      	adds	r0, #1
 80055ec:	d0f5      	beq.n	80055da <_printf_i+0x1de>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	079b      	lsls	r3, r3, #30
 80055f2:	d405      	bmi.n	8005600 <_printf_i+0x204>
 80055f4:	68e0      	ldr	r0, [r4, #12]
 80055f6:	9b03      	ldr	r3, [sp, #12]
 80055f8:	4298      	cmp	r0, r3
 80055fa:	bfb8      	it	lt
 80055fc:	4618      	movlt	r0, r3
 80055fe:	e00f      	b.n	8005620 <_printf_i+0x224>
 8005600:	2500      	movs	r5, #0
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	9a03      	ldr	r2, [sp, #12]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	429d      	cmp	r5, r3
 800560a:	daf3      	bge.n	80055f4 <_printf_i+0x1f8>
 800560c:	4630      	mov	r0, r6
 800560e:	4639      	mov	r1, r7
 8005610:	f104 0219 	add.w	r2, r4, #25
 8005614:	2301      	movs	r3, #1
 8005616:	47c0      	blx	r8
 8005618:	3001      	adds	r0, #1
 800561a:	d0de      	beq.n	80055da <_printf_i+0x1de>
 800561c:	3501      	adds	r5, #1
 800561e:	e7f0      	b.n	8005602 <_printf_i+0x206>
 8005620:	b004      	add	sp, #16
 8005622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005626:	bf00      	nop
 8005628:	08005b9c 	.word	0x08005b9c
 800562c:	08005bad 	.word	0x08005bad

08005630 <memchr>:
 8005630:	b510      	push	{r4, lr}
 8005632:	b2c9      	uxtb	r1, r1
 8005634:	4402      	add	r2, r0
 8005636:	4290      	cmp	r0, r2
 8005638:	4603      	mov	r3, r0
 800563a:	d006      	beq.n	800564a <memchr+0x1a>
 800563c:	781c      	ldrb	r4, [r3, #0]
 800563e:	428c      	cmp	r4, r1
 8005640:	f100 0001 	add.w	r0, r0, #1
 8005644:	d1f7      	bne.n	8005636 <memchr+0x6>
 8005646:	4618      	mov	r0, r3
 8005648:	bd10      	pop	{r4, pc}
 800564a:	2000      	movs	r0, #0
 800564c:	bd10      	pop	{r4, pc}

0800564e <memmove>:
 800564e:	4281      	cmp	r1, r0
 8005650:	b510      	push	{r4, lr}
 8005652:	eb01 0302 	add.w	r3, r1, r2
 8005656:	d301      	bcc.n	800565c <memmove+0xe>
 8005658:	1e42      	subs	r2, r0, #1
 800565a:	e00b      	b.n	8005674 <memmove+0x26>
 800565c:	4298      	cmp	r0, r3
 800565e:	d2fb      	bcs.n	8005658 <memmove+0xa>
 8005660:	1881      	adds	r1, r0, r2
 8005662:	1ad2      	subs	r2, r2, r3
 8005664:	42d3      	cmn	r3, r2
 8005666:	d004      	beq.n	8005672 <memmove+0x24>
 8005668:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800566c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005670:	e7f8      	b.n	8005664 <memmove+0x16>
 8005672:	bd10      	pop	{r4, pc}
 8005674:	4299      	cmp	r1, r3
 8005676:	d004      	beq.n	8005682 <memmove+0x34>
 8005678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800567c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005680:	e7f8      	b.n	8005674 <memmove+0x26>
 8005682:	bd10      	pop	{r4, pc}

08005684 <_free_r>:
 8005684:	b530      	push	{r4, r5, lr}
 8005686:	2900      	cmp	r1, #0
 8005688:	d03d      	beq.n	8005706 <_free_r+0x82>
 800568a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800568e:	1f0b      	subs	r3, r1, #4
 8005690:	491d      	ldr	r1, [pc, #116]	; (8005708 <_free_r+0x84>)
 8005692:	2a00      	cmp	r2, #0
 8005694:	bfb8      	it	lt
 8005696:	189b      	addlt	r3, r3, r2
 8005698:	680a      	ldr	r2, [r1, #0]
 800569a:	460c      	mov	r4, r1
 800569c:	b912      	cbnz	r2, 80056a4 <_free_r+0x20>
 800569e:	605a      	str	r2, [r3, #4]
 80056a0:	600b      	str	r3, [r1, #0]
 80056a2:	bd30      	pop	{r4, r5, pc}
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d20d      	bcs.n	80056c4 <_free_r+0x40>
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	1858      	adds	r0, r3, r1
 80056ac:	4290      	cmp	r0, r2
 80056ae:	bf01      	itttt	eq
 80056b0:	585a      	ldreq	r2, [r3, r1]
 80056b2:	1852      	addeq	r2, r2, r1
 80056b4:	601a      	streq	r2, [r3, #0]
 80056b6:	6842      	ldreq	r2, [r0, #4]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	bd30      	pop	{r4, r5, pc}
 80056be:	4299      	cmp	r1, r3
 80056c0:	d803      	bhi.n	80056ca <_free_r+0x46>
 80056c2:	460a      	mov	r2, r1
 80056c4:	6851      	ldr	r1, [r2, #4]
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d1f9      	bne.n	80056be <_free_r+0x3a>
 80056ca:	6814      	ldr	r4, [r2, #0]
 80056cc:	1915      	adds	r5, r2, r4
 80056ce:	429d      	cmp	r5, r3
 80056d0:	d10a      	bne.n	80056e8 <_free_r+0x64>
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4423      	add	r3, r4
 80056d6:	18d0      	adds	r0, r2, r3
 80056d8:	4288      	cmp	r0, r1
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	d113      	bne.n	8005706 <_free_r+0x82>
 80056de:	6808      	ldr	r0, [r1, #0]
 80056e0:	4403      	add	r3, r0
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	684b      	ldr	r3, [r1, #4]
 80056e6:	e00d      	b.n	8005704 <_free_r+0x80>
 80056e8:	d902      	bls.n	80056f0 <_free_r+0x6c>
 80056ea:	230c      	movs	r3, #12
 80056ec:	6003      	str	r3, [r0, #0]
 80056ee:	bd30      	pop	{r4, r5, pc}
 80056f0:	681c      	ldr	r4, [r3, #0]
 80056f2:	1918      	adds	r0, r3, r4
 80056f4:	4288      	cmp	r0, r1
 80056f6:	bf04      	itt	eq
 80056f8:	6808      	ldreq	r0, [r1, #0]
 80056fa:	6849      	ldreq	r1, [r1, #4]
 80056fc:	6059      	str	r1, [r3, #4]
 80056fe:	bf04      	itt	eq
 8005700:	1900      	addeq	r0, r0, r4
 8005702:	6018      	streq	r0, [r3, #0]
 8005704:	6053      	str	r3, [r2, #4]
 8005706:	bd30      	pop	{r4, r5, pc}
 8005708:	1ffe8a2c 	.word	0x1ffe8a2c

0800570c <_malloc_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	1ccc      	adds	r4, r1, #3
 8005710:	f024 0403 	bic.w	r4, r4, #3
 8005714:	3408      	adds	r4, #8
 8005716:	2c0c      	cmp	r4, #12
 8005718:	bf38      	it	cc
 800571a:	240c      	movcc	r4, #12
 800571c:	2c00      	cmp	r4, #0
 800571e:	4606      	mov	r6, r0
 8005720:	da03      	bge.n	800572a <_malloc_r+0x1e>
 8005722:	230c      	movs	r3, #12
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	2000      	movs	r0, #0
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	428c      	cmp	r4, r1
 800572c:	d3f9      	bcc.n	8005722 <_malloc_r+0x16>
 800572e:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <_malloc_r+0xa4>)
 8005730:	6813      	ldr	r3, [r2, #0]
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	b1a1      	cbz	r1, 8005762 <_malloc_r+0x56>
 8005738:	680a      	ldr	r2, [r1, #0]
 800573a:	1b12      	subs	r2, r2, r4
 800573c:	d40e      	bmi.n	800575c <_malloc_r+0x50>
 800573e:	2a0b      	cmp	r2, #11
 8005740:	d903      	bls.n	800574a <_malloc_r+0x3e>
 8005742:	600a      	str	r2, [r1, #0]
 8005744:	188b      	adds	r3, r1, r2
 8005746:	508c      	str	r4, [r1, r2]
 8005748:	e01f      	b.n	800578a <_malloc_r+0x7e>
 800574a:	428b      	cmp	r3, r1
 800574c:	bf0d      	iteet	eq
 800574e:	685a      	ldreq	r2, [r3, #4]
 8005750:	684a      	ldrne	r2, [r1, #4]
 8005752:	605a      	strne	r2, [r3, #4]
 8005754:	6002      	streq	r2, [r0, #0]
 8005756:	bf18      	it	ne
 8005758:	460b      	movne	r3, r1
 800575a:	e016      	b.n	800578a <_malloc_r+0x7e>
 800575c:	460b      	mov	r3, r1
 800575e:	6849      	ldr	r1, [r1, #4]
 8005760:	e7e9      	b.n	8005736 <_malloc_r+0x2a>
 8005762:	4d14      	ldr	r5, [pc, #80]	; (80057b4 <_malloc_r+0xa8>)
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b91b      	cbnz	r3, 8005770 <_malloc_r+0x64>
 8005768:	4630      	mov	r0, r6
 800576a:	f000 f84b 	bl	8005804 <_sbrk_r>
 800576e:	6028      	str	r0, [r5, #0]
 8005770:	4630      	mov	r0, r6
 8005772:	4621      	mov	r1, r4
 8005774:	f000 f846 	bl	8005804 <_sbrk_r>
 8005778:	1c42      	adds	r2, r0, #1
 800577a:	4603      	mov	r3, r0
 800577c:	d0d1      	beq.n	8005722 <_malloc_r+0x16>
 800577e:	1cc5      	adds	r5, r0, #3
 8005780:	f025 0503 	bic.w	r5, r5, #3
 8005784:	4285      	cmp	r5, r0
 8005786:	d10a      	bne.n	800579e <_malloc_r+0x92>
 8005788:	601c      	str	r4, [r3, #0]
 800578a:	f103 000b 	add.w	r0, r3, #11
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	f020 0007 	bic.w	r0, r0, #7
 8005794:	1a82      	subs	r2, r0, r2
 8005796:	d00a      	beq.n	80057ae <_malloc_r+0xa2>
 8005798:	4251      	negs	r1, r2
 800579a:	5099      	str	r1, [r3, r2]
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	4630      	mov	r0, r6
 80057a0:	1ae9      	subs	r1, r5, r3
 80057a2:	f000 f82f 	bl	8005804 <_sbrk_r>
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0bb      	beq.n	8005722 <_malloc_r+0x16>
 80057aa:	462b      	mov	r3, r5
 80057ac:	e7ec      	b.n	8005788 <_malloc_r+0x7c>
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	1ffe8a2c 	.word	0x1ffe8a2c
 80057b4:	1ffe8a28 	.word	0x1ffe8a28

080057b8 <_realloc_r>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	4607      	mov	r7, r0
 80057bc:	4615      	mov	r5, r2
 80057be:	460e      	mov	r6, r1
 80057c0:	b921      	cbnz	r1, 80057cc <_realloc_r+0x14>
 80057c2:	4611      	mov	r1, r2
 80057c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057c8:	f7ff bfa0 	b.w	800570c <_malloc_r>
 80057cc:	b91a      	cbnz	r2, 80057d6 <_realloc_r+0x1e>
 80057ce:	f7ff ff59 	bl	8005684 <_free_r>
 80057d2:	4628      	mov	r0, r5
 80057d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d6:	f000 f825 	bl	8005824 <_malloc_usable_size_r>
 80057da:	42a8      	cmp	r0, r5
 80057dc:	d20e      	bcs.n	80057fc <_realloc_r+0x44>
 80057de:	4638      	mov	r0, r7
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7ff ff93 	bl	800570c <_malloc_r>
 80057e6:	4604      	mov	r4, r0
 80057e8:	b150      	cbz	r0, 8005800 <_realloc_r+0x48>
 80057ea:	4631      	mov	r1, r6
 80057ec:	462a      	mov	r2, r5
 80057ee:	f7ff fb29 	bl	8004e44 <memcpy>
 80057f2:	4638      	mov	r0, r7
 80057f4:	4631      	mov	r1, r6
 80057f6:	f7ff ff45 	bl	8005684 <_free_r>
 80057fa:	e001      	b.n	8005800 <_realloc_r+0x48>
 80057fc:	4630      	mov	r0, r6
 80057fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005800:	4620      	mov	r0, r4
 8005802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005804 <_sbrk_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4c06      	ldr	r4, [pc, #24]	; (8005820 <_sbrk_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4605      	mov	r5, r0
 800580c:	4608      	mov	r0, r1
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	f7fd f8a2 	bl	8002958 <_sbrk>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_sbrk_r+0x1a>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	b103      	cbz	r3, 800581e <_sbrk_r+0x1a>
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	1ffe9078 	.word	0x1ffe9078

08005824 <_malloc_usable_size_r>:
 8005824:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005828:	2800      	cmp	r0, #0
 800582a:	bfbe      	ittt	lt
 800582c:	1809      	addlt	r1, r1, r0
 800582e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8005832:	18c0      	addlt	r0, r0, r3
 8005834:	3804      	subs	r0, #4
 8005836:	4770      	bx	lr

08005838 <Driver_USBD0>:
 8005838:	1d19 0800 1d81 0800 1fbd 0800 1ff9 0800     ................
 8005848:	202d 0800 2061 0800 2271 0800 2491 0800     - ..a ..q"...$..
 8005858:	2785 0800 22bd 0800 20c5 0800 2151 0800     .'..."... ..Q!..
 8005868:	21c9 0800 2409 0800 28f5 0800 2921 0800     .!...$...(..!)..

08005878 <device_descriptor>:
 8005878:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 8005888:	0100 0000                                   ....

0800588c <configuration_descriptor>:
 800588c:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800589c:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 80058ac:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 80058bc:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

080058cc <language_string>:
 80058cc:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

08005934 <manufacturer_string>:
 8005934:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 8005944:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

0800599c <product_string>:
 800599c:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...
 8005a04:	0230 0101 0000 0001 0000 0000 0000 0001     0...............
 8005a14:	0102 0101                                   ....

08005a18 <CommandSeperator>:
 8005a18:	0020 0000 0a0d 5220 7465 7275 206e 6144      ..... Return Da
 8005a28:	6174 203a 6425 0d20 000a 0000 3e0d 2520     ta: %d ......> %
 8005a38:	0073 0000 6553 646e 0000 0000 0a0d 6e55     s...Send......Un
 8005a48:	6e6b 776f 206e 6f63 6d6d 6e61 2064 2527     known command '%
 8005a58:	2773 0a0d 0000 0000 0a0d 6552 7573 746c     s'........Result
 8005a68:	203a 7553 6363 7365 0d73 000a 0a0d 6552     : Success.....Re
 8005a78:	7573 746c 203a 6146 6c69 7275 0d65 000a     sult: Failure...
 8005a88:	0043                                        C.

08005a8a <_ctype_>:
 8005a8a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8005a9a:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8005aaa:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8005aba:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8005aca:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8005ada:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8005aea:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8005afa:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8005b0a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 8005b8a:	2300 302d 202b 6800 4c6c 6500 6766 4645     .#-0+ .hlL.efgEF
 8005b9a:	0047 3130 3332 3534 3736 3938 4241 4443     G.0123456789ABCD
 8005baa:	4645 3000 3231 3433 3635 3837 6139 6362     EF.0123456789abc
 8005bba:	6564 0066 0000                              def...
