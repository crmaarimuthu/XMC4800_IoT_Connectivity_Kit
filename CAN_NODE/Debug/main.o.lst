   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_NODE_GetReceiveErrorCounter,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_NODE_GetReceiveErrorCounter:
  25              	.LFB198:
  26              	 .file 1 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  12:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  14:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  21:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  28:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  41:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  42:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  43:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  44:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  46:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  47:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  49:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  50:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  51:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  52:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  53:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  54:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  55:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  56:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  57:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  58:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  59:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  60:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  61:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  62:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  63:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  64:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  65:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  66:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  67:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  68:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  69:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  70:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  71:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  72:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  73:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  74:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  75:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsListEmpty(), XMC_CAN_GetListBegin(), XMC_CAN_GetListSize(), XMC_CAN_MO_Get
  76:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  77:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  78:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  79:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  80:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  81:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  82:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  83:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  84:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
  85:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  86:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  87:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  88:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  89:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  90:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  91:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  92:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  93:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  94:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  95:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  96:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  97:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  98:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  99:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 100:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
 101:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>
 102:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
 103:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 104:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 105:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 106:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 107:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 108:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 109:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 110:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 111:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 112:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 113:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 114:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 115:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 116:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 117:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 118:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 119:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 120:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 121:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 122:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 123:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 124:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 125:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 126:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 127:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 128:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 129:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 130:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 131:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 132:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes.
 133:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 134:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between
 135:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 136:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 137:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 138:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 139:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 140:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 141:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 142:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 143:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 144:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 145:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 146:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 147:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 148:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 149:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 150:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 151:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 152:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure().
 153:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 154:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 155:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 156:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 157:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions
 158:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 159:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent().
 160:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 161:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 162:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 163:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 164:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 165:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 166:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 167:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 168:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 169:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 170:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 172:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 173:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 174:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 175:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 176:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 177:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 178:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 179:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 180:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 181:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 182:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 183:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 184:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 185:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 186:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 187:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 188:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 189:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 190:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 191:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 192:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 193:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 194:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 195:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 196:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 197:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 198:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 199:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 200:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 201:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 202:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 203:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 204:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 205:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 206:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 207:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 208:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 209:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 210:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 211:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 212:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 213:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 214:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 215:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 216:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 217:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 218:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 219:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 220:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 221:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 222:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 224:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 226:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 227:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 228:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 229:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 230:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 231:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 232:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 233:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 234:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 235:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 236:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 237:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 238:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 239:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 240:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 241:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 242:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 243:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 244:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 245:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 246:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 247:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 248:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 249:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 250:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 251:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 252:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 253:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 254:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 255:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 256:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 257:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 258:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 259:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 260:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 261:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 262:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 263:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 264:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 265:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 266:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 267:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 268:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 269:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 270:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 271:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 272:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 273:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 274:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 275:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 276:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 277:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 278:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 279:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 280:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 281:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 282:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 283:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 284:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 285:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 286:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 287:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 288:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 289:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 290:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 291:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 292:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 293:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 294:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 295:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 296:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 297:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 298:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 299:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 300:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 301:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 302:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 303:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 304:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 305:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 306:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 307:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 308:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 309:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 310:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 311:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 312:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 313:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 314:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 315:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 316:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 317:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 318:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 319:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 320:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 321:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 322:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 323:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 324:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 325:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 326:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 327:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 328:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 329:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 330:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 331:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 332:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 333:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 334:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 335:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 336:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 337:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 338:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 339:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 340:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 341:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF = CAN_NODE_NSR_BOFF_Msk,              /**< Bus-off status */
 342:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 343:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 344:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 345:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 346:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 347:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 348:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 349:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 350:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 351:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 352:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 353:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 354:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 355:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 356:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 357:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 358:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 359:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 360:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE = CAN_NODE_NCR_CCE_Msk,    /**< Configuration change enab
 361:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 362:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 363:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 364:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 365:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 366:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 367:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 368:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 369:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 370:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 371:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 372:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 373:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 374:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 375:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 376:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 377:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 378:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 379:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 380:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 381:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 382:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 383:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 384:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 385:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 386:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 387:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 388:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 389:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 391:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 393:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 394:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 395:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 396:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 397:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 398:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 399:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 400:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 401:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 402:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 403:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 404:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 405:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 406:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 407:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 408:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 409:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 410:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 411:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 412:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 413:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 414:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 415:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 416:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 417:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 418:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 419:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 420:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 421:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 422:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 423:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 424:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 425:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 426:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 427:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 428:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 429:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 430:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 431:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 432:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 433:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 435:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 437:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 438:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 439:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 440:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 441:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 442:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 443:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 444:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 445:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 446:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 447:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 448:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 449:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 450:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 451:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 452:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 453:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 454:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 455:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 456:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 457:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 458:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator
 459:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 460:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 461:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 462:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 463:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 464:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 465:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #else
 466:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 467:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 468:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 469:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #else
 470:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 471:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 472:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 473:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 474:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 475:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 476:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 477:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 478:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 479:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 480:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 481:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 482:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;     /**< Frequency of the CAN module(fCAN). \a can_frequency shall be ran
 483:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 484:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 485:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                                    the synchronization segment. Sample point. Range = [0, 10000] wi
 486:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 487:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 488:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 489:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 490:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 491:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 492:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 493:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 494:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 495:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 496:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 497:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 498:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 499:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 500:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 501:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 502:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 503:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 504:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 505:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 506:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 507:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 508:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 509:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 510:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 511:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 512:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 513:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 514:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 515:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 516:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 517:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 518:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 519:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 520:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 521:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 522:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 523:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 524:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 525:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 526:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 527:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 528:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #pragma push
 529:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #pragma anon_unions
 530:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 531:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #pragma warning 586
 532:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 533:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 534:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 535:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 536:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 537:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 538:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 539:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 540:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 541:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 542:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   union
 543:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   {
 544:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     struct
 545:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     {
 546:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 547:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection: 3;  /**<   Defines function of the frame counter  */
 548:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode: 2;     /**<   Determines the operation mode of the frame count
 549:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 550:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     };
 551:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 552:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 553:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   };
 554:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 555:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 556:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 557:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 558:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** */
 559:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 560:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 561:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 562:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 563:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 564:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 565:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 566:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 567:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   union
 568:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   {
 569:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     struct
 570:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     {
 571:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier: 29;           /**< standard (11 bit)/Extended (29 bit) message ident
 572:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode: 1;               /**< Standard/Extended identifier support */
 573:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority: 2;              /**< Arbitration Mode/Priority */
 574:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     };
 575:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 576:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   };
 577:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   union
 578:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   {
 579:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     struct
 580:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     {
 581:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask: 29;             /**< CAN Identifier of Message Object */
 582:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask: 1;             /**< Identifier Extension Bit of Message Object */
 583:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     };
 584:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 585:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   };
 586:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 587:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 588:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   union
 589:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   {
 590:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 591:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint8_t can_data_byte[8];                 /**< Each position of the array represents a data byt
 592:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bits 
 593:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_data[
 594:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 595:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     uint64_t can_data_long;                   /** Data of the Message Object*/
 596:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   };
 597:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 598:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 599:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 600:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 601:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 602:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 603:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #pragma pop
 604:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 605:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #pragma warning restore
 606:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 607:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 608:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 609:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 610:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 611:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 612:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 613:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 614:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 615:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 616:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 617:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 618:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 619:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 620:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 621:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 622:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 623:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 624:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 625:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 626:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 627:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 628:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 629:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 630:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 631:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 632:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 633:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 634:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 635:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 636:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 637:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 639:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 640:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 641:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 642:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 643:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 644:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 645:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 646:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 647:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 648:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 649:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 650:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 652:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 653:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 654:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 655:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 656:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 658:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 659:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 660:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 661:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 662:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 663:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 664:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 665:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 666:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 667:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 668:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 669:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 670:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 671:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 672:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 673:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 674:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 675:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 677:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 678:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 679:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 680:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 681:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 682:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 683:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 684:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 685:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 686:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 687:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 688:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 689:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 690:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 691:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 693:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 694:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 696:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 697:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 698:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 699:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 700:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 701:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 702:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 703:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 704:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 705:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 706:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 707:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 708:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 709:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 710:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 711:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 712:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 713:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 714:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_PANCMD_t pancmd,
 715:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const uint8_t arg1,
 716:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const uint8_t arg2)
 717:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 718:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 719:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 720:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 721:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 722:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 723:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 724:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 725:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 726:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 727:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 728:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 729:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 730:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 731:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 732:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 733:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 734:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 735:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 736:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 737:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 739:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 740:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 741:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 742:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 743:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj, const XMC_CAN_NODE_INTERRUPT_TRIGGE
 744:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 745:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 746:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 747:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 748:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 749:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 750:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 751:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 752:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 753:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 754:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 755:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN).
 756:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 757:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 758:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 759:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 760:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 761:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 762:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 763:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 764:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN.
 765:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 766:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 767:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 768:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 769:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 770:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 771:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 772:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 773:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 774:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 775:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 776:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 777:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 778:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 779:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 780:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 781:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 782:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 783:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 784:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 785:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 786:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 787:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 788:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 789:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 790:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 791:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 792:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 793:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 794:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 795:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 796:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 797:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 798:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source);
 799:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 800:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 801:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 802:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 803:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 804:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency
 805:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 806:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 807:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 808:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 809:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 810:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 811:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 812:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 813:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 814:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 815:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency
 816:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 817:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 818:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 819:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 820:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 821:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 822:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 823:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 824:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 825:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 827:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 828:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 829:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 830:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 831:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 832:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 833:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 834:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 835:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 836:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 837:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 838:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 839:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 840:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 841:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 844:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 847:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #else
 848:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 849:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** #endif
 850:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 851:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 852:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 853:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 854:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 855:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 856:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 857:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 858:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 859:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 860:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 866:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 867:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 868:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 869:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 870:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 871:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 872:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 873:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 874:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 875:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 876:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 877:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 878:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 879:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 880:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 881:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * None
 882:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 883:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 884:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 885:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 886:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 887:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const uint32_t service_request)
 888:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 889:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 890:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 891:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 892:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 893:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 894:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 895:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 896:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 897:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 898:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 899:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 900:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 901:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 902:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 903:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 905:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * None
 906:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 908:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 909:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time);
 910:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 911:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 912:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 913:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 914:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 915:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 916:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 917:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 919:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate.
 920:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 921:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 922:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 923:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 924:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 925:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 927:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 928:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 930:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 931:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time);
 932:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 933:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 934:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 935:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 936:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 937:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 938:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 939:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 940:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 941:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 942:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 943:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 944:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 946:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * None
 947:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 948:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 949:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 950:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 951:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 952:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 953:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 954:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 955:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 956:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 957:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 958:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 959:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 960:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 961:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 962:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 963:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 964:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 965:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 966:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 967:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 968:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 969:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 970:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 971:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 972:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 974:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 975:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 976:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 977:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 978:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 979:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
 980:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 981:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 982:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 983:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 984:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 985:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 986:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
 987:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
 988:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 989:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 990:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 991:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 992:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 993:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 994:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 995:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 996:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
 997:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 998:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 999:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1000:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1002:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
1003:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1005:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1006:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
1007:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1008:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
1009:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1010:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1011:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1012:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1022:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1025:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1028:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1030:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1031:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1034:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1035:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1036:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1038:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1039:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1040:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1041:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1042:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1043:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1044:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1045:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1046:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1047:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1048:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1049:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1050:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1051:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1052:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1053:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1054:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1055:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1056:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1057:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1058:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1059:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1060:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1061:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1062:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1063:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1064:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1065:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1066:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1067:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1068:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1069:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1070:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1071:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1072:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1073:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1074:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1075:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1077:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1078:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1079:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1080:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1081:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1083:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1084:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1085:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1086:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk) >> CAN_NODE_NEC
1087:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1088:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1089:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1090:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1091:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1092:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1093:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1094:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1095:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1096:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1097:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1098:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1099:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1100:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1101:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1102:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1103:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1105:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1106:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1107:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1108:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1109:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1110:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1111:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1112:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1113:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1114:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1115:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1116:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1117:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1118:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1119:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1120:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1121:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1122:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1123:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1124:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1125:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1126:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1127:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1129:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1130:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1131:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1132:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1133:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1134:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1135:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1136:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1137:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1138:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1139:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1140:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1141:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1142:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1143:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1144:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1145:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1146:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1147:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1148:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1149:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1150:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1151:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1152:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1153:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1155:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1156:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1157:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1158:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1159:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1161:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1162:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1163:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1164:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1165:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_M
1166:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1167:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1168:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1169:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1170:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1171:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1172:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1173:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1174:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1175:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1176:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1177:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1178:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1179:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1180:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1181:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1182:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1183:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1184:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1185:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1186:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1187:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EW
1188:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1189:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1190:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1191:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1192:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1193:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1194:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1195:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1196:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1197:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1198:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1199:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1200:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1201:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1202:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1203:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1204:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1205:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1206:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1207:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1208:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1209:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1210:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1211:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1212:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1213:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1214:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1215:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1216:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1217:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1218:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1219:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1220:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1221:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1222:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1223:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1224:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1225:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1226:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1227:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1228:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1229:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1230:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1231:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
  27              	 .loc 1 1231 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1232:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
  43              	 .loc 1 1232 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 5B69     	 ldr r3,[r3,#20]
  46 000c DBB2     	 uxtb r3,r3
1233:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
  47              	 .loc 1 1233 0
  48 000e 1846     	 mov r0,r3
  49 0010 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0012 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0014 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 0018 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE198:
  64 001a 00BF     	 .section .text.XMC_CAN_NODE_SetInitBit,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	XMC_CAN_NODE_SetInitBit:
  70              	.LFB203:
1234:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1235:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1236:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1240:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1241:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1242:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1243:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1244:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1245:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1246:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1247:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1248:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1249:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1250:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1251:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1252:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1253:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1254:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1255:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1256:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1257:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1258:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1259:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1260:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1261:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1262:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1263:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1264:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1265:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1266:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1267:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1268:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1269:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1270:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node, XMC_CAN_NODE_STATUS_t
1271:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1272:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NSR &= ~(uint32_t)can_node_status;
1273:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1274:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1275:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1276:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1277:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1278:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1279:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1281:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1283:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1284:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1285:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1286:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1287:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1288:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1289:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1290:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1291:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1292:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1293:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
1294:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1295:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1296:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1297:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1298:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1299:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1300:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1301:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1302:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1303:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1304:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1305:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1306:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1307:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1308:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1309:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1310:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1311:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1312:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
1313:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
1314:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
1315:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1316:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1317:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1318:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1319:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1320:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1321:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1322:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1323:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1324:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1325:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Disable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node e
1326:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1327:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1328:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1329:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit()
1330:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1331:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1332:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1333:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
1334:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
  71              	 .loc 1 1334 0
  72              	 .cfi_startproc
  73              	 
  74              	 
  75              	 
  76 0000 80B4     	 push {r7}
  77              	.LCFI6:
  78              	 .cfi_def_cfa_offset 4
  79              	 .cfi_offset 7,-4
  80 0002 83B0     	 sub sp,sp,#12
  81              	.LCFI7:
  82              	 .cfi_def_cfa_offset 16
  83 0004 00AF     	 add r7,sp,#0
  84              	.LCFI8:
  85              	 .cfi_def_cfa_register 7
  86 0006 7860     	 str r0,[r7,#4]
1335:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
  87              	 .loc 1 1335 0
  88 0008 7B68     	 ldr r3,[r7,#4]
  89 000a 1B68     	 ldr r3,[r3]
  90 000c 43F00102 	 orr r2,r3,#1
  91 0010 7B68     	 ldr r3,[r7,#4]
  92 0012 1A60     	 str r2,[r3]
1336:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
  93              	 .loc 1 1336 0
  94 0014 0C37     	 adds r7,r7,#12
  95              	.LCFI9:
  96              	 .cfi_def_cfa_offset 4
  97 0016 BD46     	 mov sp,r7
  98              	.LCFI10:
  99              	 .cfi_def_cfa_register 13
 100              	 
 101 0018 5DF8047B 	 ldr r7,[sp],#4
 102              	.LCFI11:
 103              	 .cfi_restore 7
 104              	 .cfi_def_cfa_offset 0
 105 001c 7047     	 bx lr
 106              	 .cfi_endproc
 107              	.LFE203:
 109 001e 00BF     	 .section .text.XMC_CAN_NODE_ResetInitBit,"ax",%progbits
 110              	 .align 2
 111              	 .thumb
 112              	 .thumb_func
 114              	XMC_CAN_NODE_ResetInitBit:
 115              	.LFB204:
1337:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1338:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1339:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1340:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1341:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1342:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1343:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1344:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1345:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node en
1346:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1347:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1348:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1349:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit()
1350:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1351:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1352:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
1353:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 116              	 .loc 1 1353 0
 117              	 .cfi_startproc
 118              	 
 119              	 
 120              	 
 121 0000 80B4     	 push {r7}
 122              	.LCFI12:
 123              	 .cfi_def_cfa_offset 4
 124              	 .cfi_offset 7,-4
 125 0002 83B0     	 sub sp,sp,#12
 126              	.LCFI13:
 127              	 .cfi_def_cfa_offset 16
 128 0004 00AF     	 add r7,sp,#0
 129              	.LCFI14:
 130              	 .cfi_def_cfa_register 7
 131 0006 7860     	 str r0,[r7,#4]
1354:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 132              	 .loc 1 1354 0
 133 0008 7B68     	 ldr r3,[r7,#4]
 134 000a 1B68     	 ldr r3,[r3]
 135 000c 23F00102 	 bic r2,r3,#1
 136 0010 7B68     	 ldr r3,[r7,#4]
 137 0012 1A60     	 str r2,[r3]
1355:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 138              	 .loc 1 1355 0
 139 0014 0C37     	 adds r7,r7,#12
 140              	.LCFI15:
 141              	 .cfi_def_cfa_offset 4
 142 0016 BD46     	 mov sp,r7
 143              	.LCFI16:
 144              	 .cfi_def_cfa_register 13
 145              	 
 146 0018 5DF8047B 	 ldr r7,[sp],#4
 147              	.LCFI17:
 148              	 .cfi_restore 7
 149              	 .cfi_def_cfa_offset 0
 150 001c 7047     	 bx lr
 151              	 .cfi_endproc
 152              	.LFE204:
 154 001e 00BF     	 .section .text.XMC_CAN_NODE_Enable,"ax",%progbits
 155              	 .align 2
 156              	 .thumb
 157              	 .thumb_func
 159              	XMC_CAN_NODE_Enable:
 160              	.LFB205:
1356:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** 
1357:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** /**
1358:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1359:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1360:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1361:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1362:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1363:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1364:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * Enable the CAN node, starts the participation in CAN traffic. It configures NCR.CANDIS and the N
1365:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1366:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1367:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  * None
1368:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  *
1369:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****  */
1370:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
1371:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** {
 161              	 .loc 1 1371 0
 162              	 .cfi_startproc
 163              	 
 164              	 
 165 0000 80B5     	 push {r7,lr}
 166              	.LCFI18:
 167              	 .cfi_def_cfa_offset 8
 168              	 .cfi_offset 7,-8
 169              	 .cfi_offset 14,-4
 170 0002 82B0     	 sub sp,sp,#8
 171              	.LCFI19:
 172              	 .cfi_def_cfa_offset 16
 173 0004 00AF     	 add r7,sp,#0
 174              	.LCFI20:
 175              	 .cfi_def_cfa_register 7
 176 0006 7860     	 str r0,[r7,#4]
1372:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
 177              	 .loc 1 1372 0
 178 0008 7B68     	 ldr r3,[r7,#4]
 179 000a 1B68     	 ldr r3,[r3]
 180 000c 23F01002 	 bic r2,r3,#16
 181 0010 7B68     	 ldr r3,[r7,#4]
 182 0012 1A60     	 str r2,[r3]
1373:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_ResetInitBit(can_node);
 183              	 .loc 1 1373 0
 184 0014 7868     	 ldr r0,[r7,#4]
 185 0016 FFF7FEFF 	 bl XMC_CAN_NODE_ResetInitBit
1374:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc\xmc_can.h **** }
 186              	 .loc 1 1374 0
 187 001a 0837     	 adds r7,r7,#8
 188              	.LCFI21:
 189              	 .cfi_def_cfa_offset 8
 190 001c BD46     	 mov sp,r7
 191              	.LCFI22:
 192              	 .cfi_def_cfa_register 13
 193              	 
 194 001e 80BD     	 pop {r7,pc}
 195              	 .cfi_endproc
 196              	.LFE205:
 198              	 .section .text.CAN_NODE_Enable,"ax",%progbits
 199              	 .align 2
 200              	 .thumb
 201              	 .thumb_func
 203              	CAN_NODE_Enable:
 204              	.LFB242:
 205              	 .file 2 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE/can_node.h"
   1:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
   2:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @file can_node.h
   3:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @date 2021-01-08
   4:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
   5:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * NOTE:
   6:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
   8:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @cond
   9:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  **************************************************************************************************
  10:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * CAN_NODE v4.1.24 - Configures a Node and MO registers of MultiCAN module. It provides a run-time
  11:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *                   node baud rate and to enable/disable Node and MO events.
  12:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  13:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  14:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * All rights reserved.
  15:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *                                             
  16:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * following conditions are met:
  18:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  19:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   disclaimer.
  21:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  22:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  25:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   products derived from this software without specific prior written permission.
  27:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  28:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  36:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  **************************************************************************************************
  39:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  40:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Change History
  41:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * --------------
  42:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  43:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2015-02-16:
  44:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - Initial version<br>
  45:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  46:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2015-05-12:
  47:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - CAN_NODE_EnableEvent() and CAN_NODE_ConfigBaudrate() APIs are included with additional arg
  48:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - New APIs are added: CAN_NODE_MO_ReceiveData(),CAN_NODE_MO_ClearStatus(), CAN_NODE_ClearSta
  49:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  50:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2015-06-18:
  51:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - LLD version check is removed.<br>
  52:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - Version check added for XMCLib dependency.<br>
  53:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  54:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2015-06-30:
  55:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - New APIs are added: CAN_NODE_Enable() and CAN_NODE_Disable() to enable and disable CAN nod
  56:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         from participating CAN traffic. <br>
  57:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  58:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2016-06-20:
  59:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - New API added: CAN_NODE_MO_UpdateID() to update the message object identifier.
  60:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
  61:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2018-08-28:
  62:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - Fixed code example for CAN_NODE_MO_Transmit()
  63:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
  64:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2021-01-08:
  65:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     - Modified check for minimum XMCLib version
  66:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  67:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcond
  68:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
  69:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
  70:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
  71:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**************************************************************************************************
  72:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * HEADER FILES
  73:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  **************************************************************************************************
  74:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
  75:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #ifndef CAN_NODE_H
  76:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #define CAN_NODE_H
  77:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
  78:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #include "xmc_can.h"
  79:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #include "xmc_gpio.h"
  80:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #include "GLOBAL_CAN/global_can.h"
  81:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #include "can_node_conf.h"
  82:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #include "DAVE_Common.h"
  83:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
  84:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**************************************************************************************************
  85:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * MACROS
  86:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  **************************************************************************************************
  87:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #define CAN_NODE_XMC_LIB_MAJOR_VERSION 2
  88:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #define CAN_NODE_XMC_LIB_MINOR_VERSION 0
  89:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #define CAN_NODE_XMC_LIB_PATCH_VERSION 0
  90:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
  91:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #if !((XMC_LIB_MAJOR_VERSION > CAN_NODE_XMC_LIB_MAJOR_VERSION) ||\
  92:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****       ((XMC_LIB_MAJOR_VERSION == CAN_NODE_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > CAN_NO
  93:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****       ((XMC_LIB_MAJOR_VERSION == CAN_NODE_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == CAN_N
  94:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #error "CAN_NODE requires XMC Peripheral Library v2.0.0 or higher"
  95:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #endif
  96:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
  97:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  /*************************************************************************************************
  98:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * ENUMS
  99:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  **************************************************************************************************
 100:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 101:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @ingroup CAN_NODE_enumerations
 102:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @{
 103:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 104:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 105:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 106:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  Enum to describe the possible status values, returned
 107:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  by CAN APIs.
 108:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 109:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** typedef enum CAN_NODE_STATUS
 110:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** {
 111:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_STATUS_SUCCESS = 0, /**< APP success state */
 112:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_STATUS_FAILURE,  /**< Returned when unknown error occurred */
 113:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_STATUS_BUSY,      /**< CAN_NODE is busy and can not handle request*/
 114:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_STATUS_MO_NOT_ACCEPTABLE,/**< Message object type not allowed*/
 115:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_STATUS_MO_DISABLED  /**< Returned if Message object is disabled */
 116:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** } CAN_NODE_STATUS_t;
 117:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 118:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 119:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 120:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @}
 121:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 122:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 123:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**************************************************************************************************
 124:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** * DATA STRUCTURES
 125:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** ***************************************************************************************************
 126:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 127:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 128:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @ingroup CAN_NODE_datastructures
 129:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @{
 130:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 131:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 132:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 133:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This is the data structure to hold the configured port and pin numbers for CAN_NODE.
 134:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 135:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 136:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 137:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** typedef const struct CAN_NODE_GPIO
 138:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** {
 139:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   XMC_GPIO_PORT_t  *const port; /**< Pointer to port hardware register to select for CAN communicat
 140:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t  pin;    /**< Configured CAN Tx/Rx pin number */
 141:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** } CAN_NODE_GPIO_t;
 142:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 143:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 144:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *    Node events service request structure for CAN_NODE.
 145:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *    To enable the events user explicitly connect the signals to INTERUPT APP.
 146:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 147:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** typedef const struct CAN_NODE_SR
 148:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** {
 149:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t alert_event_sr;      /**< Alert event service request  */
 150:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t lec_event_sr;        /**< LEC event service request  */
 151:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t txok_event_sr;       /**< Transmit OK event service request  */
 152:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t framecount_event_sr; /**< Frame count event service request  */
 153:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** } CAN_NODE_SR_t;
 154:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 155:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 156:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   Message object structure for CAN_NODE APP
 157:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 158:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** typedef struct CAN_NODE_LMO
 159:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** {
 160:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   XMC_CAN_MO_t *mo_ptr;        /**< CAN message object pointer */
 161:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t number;              /**< Consumed CAN message object number */
 162:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t tx_sr;               /**< CAN message object transmit service request */
 163:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t rx_sr;               /**< CAN message object receive service request */
 164:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const bool tx_event_enable;  /**< GUI configured value for CAN message object transmit event chec
 165:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const bool rx_event_enable;  /**< GUI configured value for CAN message object receive event check
 166:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** } CAN_NODE_LMO_t;
 167:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 168:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 169:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  Initialization data structure for CAN_NODE APP
 170:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 171:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** typedef struct CAN_NODE
 172:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** {
 173:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   GLOBAL_CAN_t *const global_ptr;                    /**< Global CAN pointer */
 174:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   XMC_CAN_NODE_t *const node_ptr;                    /**< Consumed CAN node pointer */
 175:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *baudrate_config; /**< Pointer to bit time configuration s
 176:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_LMO_t *lmobj_ptr[32];                     /**< Array of pointer to logical message objec
 177:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   CAN_NODE_SR_t *node_sr_ptr;                        /**< Node service request  */
 178:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const CAN_NODE_GPIO_t    *const gpio_out;          /**< GPIO structure for CAN transmit pin  */
 179:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const XMC_GPIO_CONFIG_t  *const gpio_out_config;   /**< GPIO configuration structure for CAN tran
 180:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const CAN_NODE_GPIO_t    *const gpio_in;           /**< GPIO structure for CAN receive pin  */
 181:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const XMC_GPIO_CONFIG_t  *const gpio_in_config;    /**< GPIO configuration structure for CAN rece
 182:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   const XMC_CAN_NODE_RECEIVE_INPUT_t rx_signal;      /**< Possible input type for CAN receive pin *
 183:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t node_num;                                  /**< Consumed CAN node number */
 184:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   uint8_t mo_count;                                  /**< GUI configured value Consumed CAN MO coun
 185:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   bool lec_event_enable;                       /**< GUI configured value for LEC event check box  *
 186:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   bool txok_event_enable;                      /**< GUI configured value for transmit OK event chec
 187:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   bool alert_event_enable;                     /**< GUI configured value for alert event check box 
 188:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   bool framecount_event_enable;                /**< GUI configured value for frame count event chec
 189:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   bool loopback_enable;                        /**< GUI configured value for loop back enable check
 190:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 191:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** } CAN_NODE_t;
 192:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 193:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 194:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @}
 195:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 196:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 197:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**************************************************************************************************
 198:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** * API Prototypes
 199:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** ***************************************************************************************************
 200:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /* Support for C++ codebase */
 201:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #ifdef __cplusplus
 202:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** extern "C" {
 203:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** #endif
 204:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 205:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 206:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @ingroup CAN_NODE_apidoc
 207:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @{
 208:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 209:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 210:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 211:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to read the CAN_NODE APP version.
 212:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 213:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return DAVE_APP_VERSION_t Structure that contains the members
 214:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         major, minor and patch values.
 215:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 216:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 217:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * The function can be used to check application software compatibility with a
 218:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * specific version of the APP.
 219:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 220:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 221:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 222:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 223:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 224:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 225:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 226:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 227:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 228:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 229:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_APP_VERSION_t can_version;
 230:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 231:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 232:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 233:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     can_version = CAN_NODE_GetAppVersion();
 234:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     if ((can_version.major == 4U) &&
 235:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         (can_version.minor == 1U))
 236:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 237:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // Application code
 238:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 239:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     else
 240:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 241:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // Probably, not the right version.
 242:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 243:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 244:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 245:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 246:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 247:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 248:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 249:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 250:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 251:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  }
 252:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  @endcode
 253:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 254:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** DAVE_APP_VERSION_t CAN_NODE_GetAppVersion(void);
 255:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 256:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 257:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to initialize the CAN node by configuring the baud rate,
 258:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *        can bus type(External or internal) and message objects.
 259:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 260:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle  is a pointer pointing to APP data structure.@ref CAN_NODE_t
 261:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return CAN_NODE_STATUS_t CAN_NODE_STATUS_SUCCESS: if the initialization succeeds.<BR>
 262:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *                           CAN_NODE_STATUS_FAILURE  : for failure case.<BR>
 263:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 264:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 265:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This function internally calls GLOBAL_CAN_Init() API to configure peripheral frequency
 266:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * to enable CAN communication. API configures loop back mode or external CAN bus, message objects
 267:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  based on the settings and enables configured event flags and service request values.
 268:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 269:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 270:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 271:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 272:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 273:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 274:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 275:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 276:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 277:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   CAN_NODE_STATUS_t init_status;
 278:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // DAVE_Init() internally calls CAN_NODE_Init()
 279:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = CAN_NODE_Init(&CAN_NODE_0);
 280:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == CAN_NODE_STATUS_SUCCESS)
 281:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 282:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code
 283:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 284:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   else
 285:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 286:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Failed to initialize the CAN peripheral
 287:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 288:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 289:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 290:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 291:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 292:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 293:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 294:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  }
 295:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  @endcode
 296:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 297:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t *handle);
 298:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 299:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 300:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to initialize the CAN message object. It configures message type,
 301:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         message ID type, Identifier value, mask bits, required data length.<br>
 302:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         It also configures the transmit and receive events for the message object.<br>
 303:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 304:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param lmo_ptr is a handle with pointers to static and dynamic content of message object.@ref CA
 305:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return None.
 306:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 307:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 308:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 309:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  It configures message type to transmit / receive message object, message ID type to standard / 
 310:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         Identifier value, mask bits,required data length for the transmit message object.
 311:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  It also enables configured event flags for message objects.
 312:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  To achieve this functionality API calls XMC_CAN_MO_Config().
 313:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 314:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 315:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 316:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 317:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 318:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 319:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 320:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   int main(void)
 321:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 322:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     DAVE_STATUS_t init_status;
 323:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 324:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     XMC_CAN_MO_t *MO_Ptr;
 325:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 326:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;   //'0' refers to first message object configured
 327:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *                                                   // for the selected can node
 328:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 329:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     init_status = DAVE_Init(); //CAN_NODE_Init();
 330:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 331:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 332:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 333:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 334:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       //Application code.
 335:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 336:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ;  //Configure message object type as tra
 337:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS; //configure MO identifier type
 338:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       MO_Ptr->can_data_length = 8; // Configure CAN transmit MO data length field
 339:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       MO_Ptr->can_data[1] = 0xAAAA5555;  // Configure Higher 4 bytes of Data
 340:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       MO_Ptr->can_data[0] = 0xAAAA5555;  // Configure Lower 4 bytes of Data
 341:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // Runtime change the MO configuration
 342:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[0]);
 343:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 344:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 345:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     else
 346:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 347:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // CAN initialization failed
 348:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 349:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // More code here
 350:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     while(1)
 351:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 352:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 353:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 354:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 355:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     return (1);
 356:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  }
 357:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *  @endcode
 358:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 359:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr);
 360:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 361:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 362:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to configures the CAN bit time by using SJW, sample point and can frequency.<br>
 363:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 364:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t
 365:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param baudrate  is the required baud rate for the CAN node.
 366:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param sample_point is the sample point for the bit time.<br>
 367:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *        \b Range: 0% to 100% of the total bit time.<br>
 368:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param sjw is the (synchronization jump width) time quanta for resynchronizations.<br>
 369:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 370:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return None.<BR>
 371:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 372:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 373:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 374:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This function configures the CAN node bit time by updating synchronous jump width,
 375:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *      baud rate prescaler(BRP),sample point, divider mode, and time segment values to
 376:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *      the node bit timing register(NBTR). To achieve this functionality
 377:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *      API calls XMC_CAN_NODE_NominalBitTimeConfigure().
 378:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 379:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 380:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 381:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 382:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 383:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 384:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 385:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 386:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 387:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   const CAN_NODE_t *HandlePtr1= &CAN_NODE_0;
 388:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 389:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   uint32_t new_baudrate = 1000000;  // in Hz
 390:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   uint16_t new_sampe_point = 80;
 391:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   uint8_t new_sjw = 2;
 392:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 393:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 394:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // DAVE_Init() internally calls CAN_NODE_Init()
 395:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   //CAN_NODE_Init() internally calls CAN_NODE_ConfigBaudrate()
 396:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 397:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 398:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     //  Application code ........
 399:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 400:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // For run time baud rate configuration change
 401:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Configure new baud rate to 1MHz
 402:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 403:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     XMC_CAN_NODE_SetInitBit(HandlePtr1->node_ptr);
 404:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 405:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_ConfigBaudrate(HandlePtr1, new_baudrate, new_sampe_point,new_sjw);
 406:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 407:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     XMC_CAN_NODE_ResetInitBit(HandlePtr1->node_ptr);
 408:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 409:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 410:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 411:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 412:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 413:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 414:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 415:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 416:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 417:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * }
 418:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcode
 419:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 420:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** void CAN_NODE_ConfigBaudrate(const CAN_NODE_t *handle, uint32_t baudrate, uint16_t sample_point, ui
 421:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 422:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 423:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 424:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to enable the node events like node alert, LEC, Transfer OK, frame counter overf
 425:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t<br>
 426:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param  node_event is the required node event to enable. @ref XMC_CAN_NODE_EVENT_t <br>
 427:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         \b Note:  Multiple events can not be combined using \a OR operation.
 428:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return None <BR>
 429:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 430:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 431:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This function check the node event flags which are enabled through GUI. If the flags are configu
 432:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * then API enables the related CAN node events.
 433:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 1. XMC_CAN_NODE_EVENT_TX_INT
 434:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2. XMC_CAN_NODE_EVENT_LEC
 435:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 3. XMC_CAN_NODE_EVENT_ALERT
 436:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 4. XMC_CAN_NODE_EVENT_CFCIE
 437:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This API enables the above events by configuring NCR register.
 438:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_EnableEvent().
 439:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 440:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 441:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 442:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 443:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 444:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 445:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 446:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 447:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 448:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 449:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 450:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 451:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 452:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   //DAVE_Init();   internally calls CAN_NODE_Init()
 453:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   //CAN_NODE_Init() internally calls CAN_NODE_EnableEvent()
 454:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 455:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 456:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code ..
 457:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 458:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable the events during run time....
 459:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     //  enable LEC event
 460:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_ALERT);
 461:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable Alert event
 462:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_LEC);
 463:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable Transmit OK event
 464:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_TX_INT);
 465:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable CFCIE event
 466:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_CFCIE);
 467:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 468:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code...
 469:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 470:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // disable the events by calling CAN_NODE_DisableEvent() API
 471:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 472:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 473:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 474:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while (1)
 475:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 476:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 477:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 478:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 479:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * }
 480:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcode
 481:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 482:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** void CAN_NODE_EnableEvent(const CAN_NODE_t *handle, const XMC_CAN_NODE_EVENT_t node_event);
 483:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 484:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 485:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to disable the selected node events like node alert, LEC, Transfer OK, frame cou
 486:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t.<br>
 487:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param  node_event is the required node event to disable. @ref XMC_CAN_NODE_EVENT_t <br>
 488:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *         \b Note:  Multiple events can not be combined using \a OR operation.
 489:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return None.<BR>
 490:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 491:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 492:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 493:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * This function disables the CAN node events. Using the API following node events can be disabled,
 494:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 1. XMC_CAN_NODE_EVENT_TX_INT
 495:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 2. XMC_CAN_NODE_EVENT_LEC
 496:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 3. XMC_CAN_NODE_EVENT_ALERT
 497:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 4. XMC_CAN_NODE_EVENT_CFCIE
 498:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_DisableEvent().
 499:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 500:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 501:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 502:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 503:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 504:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 505:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 506:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 507:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 508:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 509:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   const CAN_NODE_t *HandlePtr1= &CAN_NODE_0;
 510:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 511:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 512:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 513:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 514:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 515:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code..
 516:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 517:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     //  enable LEC event
 518:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_ALERT);
 519:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable Alert event
 520:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_LEC);
 521:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable Transmit OK event
 522:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_TX_INT);
 523:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // enable CFCIE event
 524:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_CFCIE);
 525:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 526:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code
 527:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 528:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 529:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // For disabling LEC event
 530:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_ALERT);
 531:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // For disabling Alert event
 532:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_LEC);
 533:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // For disabling Transmit OK event
 534:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_TX_INT);
 535:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // For disabling CFCIE event
 536:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_CFCIE);
 537:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 538:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 539:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 540:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 541:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 542:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 543:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 544:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 545:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 546:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * }
 547:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcode
 548:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 549:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** void CAN_NODE_DisableEvent(const CAN_NODE_t *handle, const XMC_CAN_NODE_EVENT_t node_event);
 550:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 551:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 552:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to retrieve the current status of the can node.
 553:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *        It contains error information as well as successfully transferred CAN frames status.
 554:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle  is a pointer pointing to APP data structure.@ref CAN_NODE_t
 555:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return status of type uint32_t.<BR>
 556:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 557:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 558:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Status provides an overview about the current state of the respective CAN node,
 559:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * comprising information about CAN transfers, CAN node status and error conditions.
 560:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * It reads NSR (node status register)register.
 561:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_GetStatus().
 562:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 563:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 564:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 565:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 566:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 567:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 568:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 569:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 570:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 571:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 572:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 573:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 574:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   uint32_t status;
 575:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 576:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 577:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 578:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 579:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 580:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     //Transmit MO data
 581:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 582:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 583:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     status = CAN_NODE_GetStatus(HandlePtr1);
 584:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     if (status & XMC_CAN_NODE_STATUS_TX_OK)
 585:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 586:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       //Message transmitted successfully
 587:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 588:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     else if (status & XMC_CAN_NODE_STATUS_ALERT_WARNING)
 589:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 590:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // node alert warning event enabled
 591:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 592:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     else if (status & XMC_CAN_NODE_STATUS_BUS_OFF)
 593:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 594:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       //Bus off error
 595:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 596:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 597:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 598:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 599:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 600:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 601:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 602:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 603:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 604:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 605:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * }
 606:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcode
 607:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 608:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** uint32_t CAN_NODE_GetStatus(const CAN_NODE_t *handle);
 609:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 610:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 611:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 612:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to reset / clear the specific status of the can node.
 613:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *        It contains error information as well as successfully transferred CAN frames status.<br>
 614:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param can_node_status  is a node status enum. @ref XMC_CAN_NODE_STATUS_t <br>
 615:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle  is a pointer pointing to APP data structure.@ref CAN_NODE_t <br>
 616:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return none.<BR>
 617:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 618:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 619:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Status provides an overview about the current state of the respective CAN node,
 620:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * comprising information about CAN transfers, CAN node status and error conditions.
 621:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * It reads NSR (node status register)register.
 622:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_GetStatus().
 623:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 624:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 625:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 626:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 627:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 628:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 629:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 630:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 631:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 632:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 633:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 634:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 635:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   uint32_t status;
 636:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 637:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 638:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 639:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 640:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 641:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     //Transmit MO data
 642:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 643:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 644:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     status = CAN_NODE_GetStatus(HandlePtr1);
 645:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     if (status & XMC_CAN_NODE_STATUS_TX_OK)
 646:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 647:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       //Message transmitted successfully
 648:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       CAN_NODE_ClearStatus(HandlePtr1,XMC_CAN_NODE_STATUS_TX_OK);
 649:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // Application code..
 650:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 651:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     else if (status & XMC_CAN_NODE_STATUS_ALERT_WARNING)
 652:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 653:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // node alert warning event enabled
 654:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       CAN_NODE_ClearStatus(HandlePtr1,XMC_CAN_NODE_STATUS_ALERT_WARNING);
 655:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       // Application code..
 656:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 657:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     else if (status & XMC_CAN_NODE_STATUS_BUS_OFF)
 658:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     {
 659:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *       //Bus off error
 660:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     }
 661:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 662:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 663:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 664:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 665:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 666:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 667:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 668:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 669:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 670:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * }
 671:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcode
 672:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 673:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** void CAN_NODE_ClearStatus(const CAN_NODE_t *handle, XMC_CAN_NODE_STATUS_t can_node_status);
 674:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** 
 675:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** /**
 676:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @brief Function to enable CAN node for participation in CAN traffic.<br>
 677:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t <br>
 678:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @return none.<BR>
 679:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 680:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * \par<b>Description:</b><br>
 681:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Enables the CAN node for participation in the CAN traffic by configuring NCR.INIT and NCR.CANDIS
 682:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * <BR>
 683:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 684:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * Example Usage:
 685:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * 
 686:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @code
 687:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 688:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 689:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * int main(void)
 690:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * {
 691:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   DAVE_STATUS_t init_status;
 692:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 693:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 694:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   init_status = DAVE_Init();
 695:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   if (init_status == DAVE_STATUS_SUCCESS)
 696:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 697:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 698:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code..
 699:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 700:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 701:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Disable CAN node from participating in CAN traffic.
 702:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_Disable(HandlePtr1);
 703:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 704:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Application code..
 705:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 706:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 707:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     // Enable CAN node for participating in CAN traffic.
 708:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *     CAN_NODE_Enable(HandlePtr1);
 709:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 710:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 711:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   // More code here
 712:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   while(1)
 713:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   {
 714:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 715:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   }
 716:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *
 717:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  *   return (1);
 718:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * }
 719:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  * @endcode
 720:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****  */
 721:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** __STATIC_INLINE void CAN_NODE_Enable(const CAN_NODE_t *handle)
 722:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** {
 206              	 .loc 2 722 0
 207              	 .cfi_startproc
 208              	 
 209              	 
 210 0000 80B5     	 push {r7,lr}
 211              	.LCFI23:
 212              	 .cfi_def_cfa_offset 8
 213              	 .cfi_offset 7,-8
 214              	 .cfi_offset 14,-4
 215 0002 82B0     	 sub sp,sp,#8
 216              	.LCFI24:
 217              	 .cfi_def_cfa_offset 16
 218 0004 00AF     	 add r7,sp,#0
 219              	.LCFI25:
 220              	 .cfi_def_cfa_register 7
 221 0006 7860     	 str r0,[r7,#4]
 723:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   XMC_ASSERT("CAN_NODE_Enable: null pointer", handle != NULL);
 724:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h ****   XMC_CAN_NODE_Enable(handle->node_ptr);
 222              	 .loc 2 724 0
 223 0008 7B68     	 ldr r3,[r7,#4]
 224 000a 5B68     	 ldr r3,[r3,#4]
 225 000c 1846     	 mov r0,r3
 226 000e FFF7FEFF 	 bl XMC_CAN_NODE_Enable
 725:C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE\can_node.h **** }
 227              	 .loc 2 725 0
 228 0012 0837     	 adds r7,r7,#8
 229              	.LCFI26:
 230              	 .cfi_def_cfa_offset 8
 231 0014 BD46     	 mov sp,r7
 232              	.LCFI27:
 233              	 .cfi_def_cfa_register 13
 234              	 
 235 0016 80BD     	 pop {r7,pc}
 236              	 .cfi_endproc
 237              	.LFE242:
 239              	 .global new_baudrate
 240              	 .section .data.new_baudrate,"aw",%progbits
 241              	 .align 2
 244              	new_baudrate:
 245 0000 20A10700 	 .word 500000
 246              	 .global new_sampe_point
 247              	 .section .data.new_sampe_point,"aw",%progbits
 248              	 .align 1
 251              	new_sampe_point:
 252 0000 5000     	 .short 80
 253              	 .global new_sjw
 254              	 .section .data.new_sjw,"aw",%progbits
 257              	new_sjw:
 258 0000 02       	 .byte 2
 259              	 .comm array_data,4,4
 260              	 .comm received_id,4,4
 261              	 .comm received_data,8,4
 262              	 .comm get_status,4,4
 263              	 .comm get_data,4,4
 264              	 .section .text.CanSendMessage,"ax",%progbits
 265              	 .align 2
 266              	 .global CanSendMessage
 267              	 .thumb
 268              	 .thumb_func
 270              	CanSendMessage:
 271              	.LFB249:
 272              	 .file 3 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2024 Aug 28 02:14:04
   5:../main.c     ****  *  Author: admin
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** 
   9:../main.c     **** 
  10:../main.c     **** 
  11:../main.c     **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
  12:../main.c     **** #include <stdlib.h>
  13:../main.c     **** #include <stdio.h>
  14:../main.c     **** #include <string.h>
  15:../main.c     **** #include <stdarg.h>
  16:../main.c     **** #include <stdbool.h>
  17:../main.c     **** 	uint32_t new_baudrate = 500000;  // in Hz
  18:../main.c     **** 	uint16_t new_sampe_point = 80;
  19:../main.c     **** 	uint8_t new_sjw = 2;
  20:../main.c     **** 	uint8_t *array_data;
  21:../main.c     **** 
  22:../main.c     **** 	uint32_t received_id;
  23:../main.c     **** 	uint8_t received_data[8];
  24:../main.c     **** 	uint32_t get_status;
  25:../main.c     **** 	uint32_t get_data;
  26:../main.c     **** 	typedef enum USB_CAN_STATUS
  27:../main.c     **** 	{
  28:../main.c     **** 		USB_CAN_STATUS_SUCCESS = 0U, USB_CAN_STATUS_FAILURE
  29:../main.c     **** 	} USB_CAN_STATUS_t;
  30:../main.c     **** 
  31:../main.c     **** #define USBD_VCOM_BUFFSIZE (256)
  32:../main.c     **** /**
  33:../main.c     **** 
  34:../main.c     ****  * @brief main() - Application entry point
  35:../main.c     ****  *
  36:../main.c     ****  * <b>Details of function</b><br>
  37:../main.c     ****  * This routine is the application entry point. It is invoked by the device startup code. It is res
  38:../main.c     ****  * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder fo
  39:../main.c     ****  * code.
  40:../main.c     ****  */
  41:../main.c     **** 
  42:../main.c     **** 	void CanSendMessage(uint8_t *data,uint16_t CAN_identifier,int CanBytes)
  43:../main.c     **** 	{
 273              	 .loc 3 43 0
 274              	 .cfi_startproc
 275              	 
 276              	 
 277 0000 80B5     	 push {r7,lr}
 278              	.LCFI28:
 279              	 .cfi_def_cfa_offset 8
 280              	 .cfi_offset 7,-8
 281              	 .cfi_offset 14,-4
 282 0002 86B0     	 sub sp,sp,#24
 283              	.LCFI29:
 284              	 .cfi_def_cfa_offset 32
 285 0004 00AF     	 add r7,sp,#0
 286              	.LCFI30:
 287              	 .cfi_def_cfa_register 7
 288 0006 F860     	 str r0,[r7,#12]
 289 0008 0B46     	 mov r3,r1
 290 000a 7A60     	 str r2,[r7,#4]
 291 000c 7B81     	 strh r3,[r7,#10]
  44:../main.c     **** 		XMC_CAN_MO_t *MO_Ptr;
  45:../main.c     **** 		const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 292              	 .loc 3 45 0
 293 000e 2A4B     	 ldr r3,.L8
 294 0010 7B61     	 str r3,[r7,#20]
  46:../main.c     **** 		MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;   //'0' refers to first message object configured
 295              	 .loc 3 46 0
 296 0012 7B69     	 ldr r3,[r7,#20]
 297 0014 DB68     	 ldr r3,[r3,#12]
 298 0016 1B68     	 ldr r3,[r3]
 299 0018 3B61     	 str r3,[r7,#16]
  47:../main.c     **** 				                                                     // for the selected can node
  48:../main.c     **** 		CAN_NODE_Enable(HandlePtr1);
 300              	 .loc 3 48 0
 301 001a 7869     	 ldr r0,[r7,#20]
 302 001c FFF7FEFF 	 bl CAN_NODE_Enable
  49:../main.c     **** 		XMC_CAN_NODE_SetInitBit(HandlePtr1->node_ptr);
 303              	 .loc 3 49 0
 304 0020 7B69     	 ldr r3,[r7,#20]
 305 0022 5B68     	 ldr r3,[r3,#4]
 306 0024 1846     	 mov r0,r3
 307 0026 FFF7FEFF 	 bl XMC_CAN_NODE_SetInitBit
  50:../main.c     **** 		CAN_NODE_ConfigBaudrate(HandlePtr1, new_baudrate, new_sampe_point,new_sjw);//400000
 308              	 .loc 3 50 0
 309 002a 244B     	 ldr r3,.L8+4
 310 002c 1968     	 ldr r1,[r3]
 311 002e 244B     	 ldr r3,.L8+8
 312 0030 1A88     	 ldrh r2,[r3]
 313 0032 244B     	 ldr r3,.L8+12
 314 0034 1B78     	 ldrb r3,[r3]
 315 0036 7869     	 ldr r0,[r7,#20]
 316 0038 FFF7FEFF 	 bl CAN_NODE_ConfigBaudrate
  51:../main.c     **** 		XMC_CAN_NODE_ResetInitBit(HandlePtr1->node_ptr);
 317              	 .loc 3 51 0
 318 003c 7B69     	 ldr r3,[r7,#20]
 319 003e 5B68     	 ldr r3,[r3,#4]
 320 0040 1846     	 mov r0,r3
 321 0042 FFF7FEFF 	 bl XMC_CAN_NODE_ResetInitBit
  52:../main.c     **** 
  53:../main.c     **** 		array_data = data;
 322              	 .loc 3 53 0
 323 0046 204A     	 ldr r2,.L8+16
 324 0048 FB68     	 ldr r3,[r7,#12]
 325 004a 1360     	 str r3,[r2]
  54:../main.c     **** 		MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ;  //Configure message object type as transmit t
 326              	 .loc 3 54 0
 327 004c 3B69     	 ldr r3,[r7,#16]
 328 004e 0122     	 movs r2,#1
 329 0050 1A76     	 strb r2,[r3,#24]
  55:../main.c     **** 		MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS; //configure MO identifier type
 330              	 .loc 3 55 0
 331 0052 3A69     	 ldr r2,[r7,#16]
 332 0054 D379     	 ldrb r3,[r2,#7]
 333 0056 6FF34513 	 bfc r3,#5,#1
 334 005a D371     	 strb r3,[r2,#7]
  56:../main.c     **** 		MO_Ptr->can_data_length = CanBytes; // Configure CAN transmit MO data length field
 335              	 .loc 3 56 0
 336 005c 7B68     	 ldr r3,[r7,#4]
 337 005e DAB2     	 uxtb r2,r3
 338 0060 3B69     	 ldr r3,[r7,#16]
 339 0062 1A73     	 strb r2,[r3,#12]
  57:../main.c     **** 		MO_Ptr->can_identifier =CAN_identifier ; // Example identifier
 340              	 .loc 3 57 0
 341 0064 7A89     	 ldrh r2,[r7,#10]
 342 0066 22F06042 	 bic r2,r2,#-536870912
 343 006a 3969     	 ldr r1,[r7,#16]
 344 006c 4B68     	 ldr r3,[r1,#4]
 345 006e 62F31C03 	 bfi r3,r2,#0,#29
 346 0072 4B60     	 str r3,[r1,#4]
  58:../main.c     **** 		MO_Ptr->can_id_mask = 0x7FF;
 347              	 .loc 3 58 0
 348 0074 3A69     	 ldr r2,[r7,#16]
 349 0076 9368     	 ldr r3,[r2,#8]
 350 0078 40F2FF71 	 movw r1,#2047
 351 007c 61F31C03 	 bfi r3,r1,#0,#29
 352 0080 9360     	 str r3,[r2,#8]
  59:../main.c     **** 		MO_Ptr->can_priority = XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2;
 353              	 .loc 3 59 0
 354 0082 3A69     	 ldr r2,[r7,#16]
 355 0084 D379     	 ldrb r3,[r2,#7]
 356 0086 0221     	 movs r1,#2
 357 0088 61F38713 	 bfi r3,r1,#6,#2
 358 008c D371     	 strb r3,[r2,#7]
  60:../main.c     **** 		// Runtime change the MO configuration
  61:../main.c     **** 
  62:../main.c     **** 		CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[0]);
 359              	 .loc 3 62 0
 360 008e 7B69     	 ldr r3,[r7,#20]
 361 0090 DB68     	 ldr r3,[r3,#12]
 362 0092 1846     	 mov r0,r3
 363 0094 FFF7FEFF 	 bl CAN_NODE_MO_Init
  63:../main.c     **** 		CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[0],array_data); //CAN Transmit
 364              	 .loc 3 63 0
 365 0098 7B69     	 ldr r3,[r7,#20]
 366 009a DA68     	 ldr r2,[r3,#12]
 367 009c 0A4B     	 ldr r3,.L8+16
 368 009e 1B68     	 ldr r3,[r3]
 369 00a0 1046     	 mov r0,r2
 370 00a2 1946     	 mov r1,r3
 371 00a4 FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
  64:../main.c     **** 		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 372              	 .loc 3 64 0
 373 00a8 7B69     	 ldr r3,[r7,#20]
 374 00aa DB68     	 ldr r3,[r3,#12]
 375 00ac 1846     	 mov r0,r3
 376 00ae FFF7FEFF 	 bl CAN_NODE_MO_Transmit
  65:../main.c     **** 
  66:../main.c     **** 
  67:../main.c     **** 
  68:../main.c     **** 
  69:../main.c     **** 	}
 377              	 .loc 3 69 0
 378 00b2 1837     	 adds r7,r7,#24
 379              	.LCFI31:
 380              	 .cfi_def_cfa_offset 8
 381 00b4 BD46     	 mov sp,r7
 382              	.LCFI32:
 383              	 .cfi_def_cfa_register 13
 384              	 
 385 00b6 80BD     	 pop {r7,pc}
 386              	.L9:
 387              	 .align 2
 388              	.L8:
 389 00b8 00000000 	 .word CAN_NODE_0
 390 00bc 00000000 	 .word new_baudrate
 391 00c0 00000000 	 .word new_sampe_point
 392 00c4 00000000 	 .word new_sjw
 393 00c8 00000000 	 .word array_data
 394              	 .cfi_endproc
 395              	.LFE249:
 397              	 .section .text.CanNode0_receiveINT,"ax",%progbits
 398              	 .align 2
 399              	 .global CanNode0_receiveINT
 400              	 .thumb
 401              	 .thumb_func
 403              	CanNode0_receiveINT:
 404              	.LFB250:
  70:../main.c     **** 	void CanNode0_receiveINT()
  71:../main.c     **** 		{
 405              	 .loc 3 71 0
 406              	 .cfi_startproc
 407              	 
 408              	 
 409 0000 80B5     	 push {r7,lr}
 410              	.LCFI33:
 411              	 .cfi_def_cfa_offset 8
 412              	 .cfi_offset 7,-8
 413              	 .cfi_offset 14,-4
 414 0002 84B0     	 sub sp,sp,#16
 415              	.LCFI34:
 416              	 .cfi_def_cfa_offset 24
 417 0004 00AF     	 add r7,sp,#0
 418              	.LCFI35:
 419              	 .cfi_def_cfa_register 7
  72:../main.c     **** 			  XMC_CAN_MO_t *MO_Ptr;
  73:../main.c     **** 			  const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 420              	 .loc 3 73 0
 421 0006 314B     	 ldr r3,.L13
 422 0008 BB60     	 str r3,[r7,#8]
  74:../main.c     **** 			 // long double current_angle = 5.78899 ;
  75:../main.c     **** 			  MO_Ptr = HandlePtr1->lmobj_ptr[1]->mo_ptr;   //'0' refers to first message object configured
 423              	 .loc 3 75 0
 424 000a BB68     	 ldr r3,[r7,#8]
 425 000c 1B69     	 ldr r3,[r3,#16]
 426 000e 1B68     	 ldr r3,[r3]
 427 0010 7B60     	 str r3,[r7,#4]
  76:../main.c     **** 			                                                     // for the selected can node
  77:../main.c     **** 
  78:../main.c     **** 
  79:../main.c     **** 			CAN_NODE_Enable(HandlePtr1);
 428              	 .loc 3 79 0
 429 0012 B868     	 ldr r0,[r7,#8]
 430 0014 FFF7FEFF 	 bl CAN_NODE_Enable
  80:../main.c     **** 
  81:../main.c     **** 			// For run time baud rate configuration change
  82:../main.c     **** 			// Configure new baud rate to 1MHz
  83:../main.c     **** 
  84:../main.c     **** 			XMC_CAN_NODE_SetInitBit(HandlePtr1->node_ptr);
 431              	 .loc 3 84 0
 432 0018 BB68     	 ldr r3,[r7,#8]
 433 001a 5B68     	 ldr r3,[r3,#4]
 434 001c 1846     	 mov r0,r3
 435 001e FFF7FEFF 	 bl XMC_CAN_NODE_SetInitBit
  85:../main.c     **** 			CAN_NODE_ConfigBaudrate(HandlePtr1, new_baudrate, new_sampe_point,new_sjw);
 436              	 .loc 3 85 0
 437 0022 2B4B     	 ldr r3,.L13+4
 438 0024 1968     	 ldr r1,[r3]
 439 0026 2B4B     	 ldr r3,.L13+8
 440 0028 1A88     	 ldrh r2,[r3]
 441 002a 2B4B     	 ldr r3,.L13+12
 442 002c 1B78     	 ldrb r3,[r3]
 443 002e B868     	 ldr r0,[r7,#8]
 444 0030 FFF7FEFF 	 bl CAN_NODE_ConfigBaudrate
  86:../main.c     **** 			XMC_CAN_NODE_ResetInitBit(HandlePtr1->node_ptr);
 445              	 .loc 3 86 0
 446 0034 BB68     	 ldr r3,[r7,#8]
 447 0036 5B68     	 ldr r3,[r3,#4]
 448 0038 1846     	 mov r0,r3
 449 003a FFF7FEFF 	 bl XMC_CAN_NODE_ResetInitBit
  87:../main.c     **** 	        //Receive the data
  88:../main.c     **** 			CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[1]);
 450              	 .loc 3 88 0
 451 003e BB68     	 ldr r3,[r7,#8]
 452 0040 1B69     	 ldr r3,[r3,#16]
 453 0042 1846     	 mov r0,r3
 454 0044 FFF7FEFF 	 bl CAN_NODE_MO_Receive
  89:../main.c     **** 
  90:../main.c     **** 			MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;  //Configure message object type as transmit ty
 455              	 .loc 3 90 0
 456 0048 7B68     	 ldr r3,[r7,#4]
 457 004a 0022     	 movs r2,#0
 458 004c 1A76     	 strb r2,[r3,#24]
  91:../main.c     **** 			MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS; //configure MO identifier type
 459              	 .loc 3 91 0
 460 004e 7A68     	 ldr r2,[r7,#4]
 461 0050 D379     	 ldrb r3,[r2,#7]
 462 0052 6FF34513 	 bfc r3,#5,#1
 463 0056 D371     	 strb r3,[r2,#7]
  92:../main.c     **** 			MO_Ptr->can_data_length = 8; // Configure CAN transmit MO data length field
 464              	 .loc 3 92 0
 465 0058 7B68     	 ldr r3,[r7,#4]
 466 005a 0822     	 movs r2,#8
 467 005c 1A73     	 strb r2,[r3,#12]
  93:../main.c     **** 			received_id=MO_Ptr->can_identifier;
 468              	 .loc 3 93 0
 469 005e 7B68     	 ldr r3,[r7,#4]
 470 0060 5B68     	 ldr r3,[r3,#4]
 471 0062 C3F31C03 	 ubfx r3,r3,#0,#29
 472 0066 1A46     	 mov r2,r3
 473 0068 1C4B     	 ldr r3,.L13+16
 474 006a 1A60     	 str r2,[r3]
  94:../main.c     **** 			MO_Ptr->can_identifier =received_id ; // Example identifier
 475              	 .loc 3 94 0
 476 006c 1B4B     	 ldr r3,.L13+16
 477 006e 1B68     	 ldr r3,[r3]
 478 0070 23F06041 	 bic r1,r3,#-536870912
 479 0074 7A68     	 ldr r2,[r7,#4]
 480 0076 5368     	 ldr r3,[r2,#4]
 481 0078 61F31C03 	 bfi r3,r1,#0,#29
 482 007c 5360     	 str r3,[r2,#4]
  95:../main.c     **** 			MO_Ptr->can_id_mask = 0x0;
 483              	 .loc 3 95 0
 484 007e 7A68     	 ldr r2,[r7,#4]
 485 0080 9368     	 ldr r3,[r2,#8]
 486 0082 6FF31C03 	 bfc r3,#0,#29
 487 0086 9360     	 str r3,[r2,#8]
  96:../main.c     **** 			MO_Ptr->can_priority = XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2;
 488              	 .loc 3 96 0
 489 0088 7A68     	 ldr r2,[r7,#4]
 490 008a D379     	 ldrb r3,[r2,#7]
 491 008c 0221     	 movs r1,#2
 492 008e 61F38713 	 bfi r3,r1,#6,#2
 493 0092 D371     	 strb r3,[r2,#7]
  97:../main.c     **** 			// Runtime change the MO configuration
  98:../main.c     **** 			CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[1]);
 494              	 .loc 3 98 0
 495 0094 BB68     	 ldr r3,[r7,#8]
 496 0096 1B69     	 ldr r3,[r3,#16]
 497 0098 1846     	 mov r0,r3
 498 009a FFF7FEFF 	 bl CAN_NODE_MO_Init
 499              	.LBB2:
  99:../main.c     **** 
 100:../main.c     **** 			for (int i = 0; i < 8; i++)
 500              	 .loc 3 100 0
 501 009e 0023     	 movs r3,#0
 502 00a0 FB60     	 str r3,[r7,#12]
 503 00a2 0CE0     	 b .L11
 504              	.L12:
 101:../main.c     **** 			{
 102:../main.c     **** 				received_data[i] = MO_Ptr->can_data_byte[i];
 505              	 .loc 3 102 0 discriminator 3
 506 00a4 7A68     	 ldr r2,[r7,#4]
 507 00a6 FB68     	 ldr r3,[r7,#12]
 508 00a8 1344     	 add r3,r3,r2
 509 00aa 1033     	 adds r3,r3,#16
 510 00ac 1978     	 ldrb r1,[r3]
 511 00ae 0C4A     	 ldr r2,.L13+20
 512 00b0 FB68     	 ldr r3,[r7,#12]
 513 00b2 1344     	 add r3,r3,r2
 514 00b4 0A46     	 mov r2,r1
 515 00b6 1A70     	 strb r2,[r3]
 100:../main.c     **** 			{
 516              	 .loc 3 100 0 discriminator 3
 517 00b8 FB68     	 ldr r3,[r7,#12]
 518 00ba 0133     	 adds r3,r3,#1
 519 00bc FB60     	 str r3,[r7,#12]
 520              	.L11:
 100:../main.c     **** 			{
 521              	 .loc 3 100 0 is_stmt 0 discriminator 1
 522 00be FB68     	 ldr r3,[r7,#12]
 523 00c0 072B     	 cmp r3,#7
 524 00c2 EFDD     	 ble .L12
 525              	.LBE2:
 103:../main.c     **** 			}
 104:../main.c     **** 
 105:../main.c     **** 
 106:../main.c     **** 		}
 526              	 .loc 3 106 0 is_stmt 1
 527 00c4 1037     	 adds r7,r7,#16
 528              	.LCFI36:
 529              	 .cfi_def_cfa_offset 8
 530 00c6 BD46     	 mov sp,r7
 531              	.LCFI37:
 532              	 .cfi_def_cfa_register 13
 533              	 
 534 00c8 80BD     	 pop {r7,pc}
 535              	.L14:
 536 00ca 00BF     	 .align 2
 537              	.L13:
 538 00cc 00000000 	 .word CAN_NODE_0
 539 00d0 00000000 	 .word new_baudrate
 540 00d4 00000000 	 .word new_sampe_point
 541 00d8 00000000 	 .word new_sjw
 542 00dc 00000000 	 .word received_id
 543 00e0 00000000 	 .word received_data
 544              	 .cfi_endproc
 545              	.LFE250:
 547              	 .section .text.USB_CAN_printf,"ax",%progbits
 548              	 .align 2
 549              	 .global USB_CAN_printf
 550              	 .thumb
 551              	 .thumb_func
 553              	USB_CAN_printf:
 554              	.LFB251:
 107:../main.c     **** 
 108:../main.c     **** 	void USB_CAN_printf(const char *format, ...)
 109:../main.c     **** 	{
 555              	 .loc 3 109 0
 556              	 .cfi_startproc
 557              	 
 558              	 
 559 0000 0FB4     	 push {r0,r1,r2,r3}
 560              	.LCFI38:
 561              	 .cfi_def_cfa_offset 16
 562              	 .cfi_offset 0,-16
 563              	 .cfi_offset 1,-12
 564              	 .cfi_offset 2,-8
 565              	 .cfi_offset 3,-4
 566 0002 80B5     	 push {r7,lr}
 567              	.LCFI39:
 568              	 .cfi_def_cfa_offset 24
 569              	 .cfi_offset 7,-24
 570              	 .cfi_offset 14,-20
 571 0004 C2B0     	 sub sp,sp,#264
 572              	.LCFI40:
 573              	 .cfi_def_cfa_offset 288
 574 0006 00AF     	 add r7,sp,#0
 575              	.LCFI41:
 576              	 .cfi_def_cfa_register 7
 110:../main.c     **** 		char outPutString[USBD_VCOM_BUFFSIZE];
 111:../main.c     **** 		va_list args;
 112:../main.c     **** 		va_start(args, format);
 577              	 .loc 3 112 0
 578 0008 07F58A72 	 add r2,r7,#276
 579 000c 3B1D     	 adds r3,r7,#4
 580 000e 1A60     	 str r2,[r3]
 113:../main.c     **** 
 114:../main.c     **** 		vsnprintf(outPutString, USBD_VCOM_BUFFSIZE, format, args);
 581              	 .loc 3 114 0
 582 0010 07F10802 	 add r2,r7,#8
 583 0014 3B1D     	 adds r3,r7,#4
 584 0016 1046     	 mov r0,r2
 585 0018 4FF48071 	 mov r1,#256
 586 001c D7F81021 	 ldr r2,[r7,#272]
 587 0020 1B68     	 ldr r3,[r3]
 588 0022 FFF7FEFF 	 bl vsnprintf
 115:../main.c     **** 		//result = USBD_VCOM_SendString(S(outPutString));
 116:../main.c     **** 
 117:../main.c     **** 		va_end(args);
 118:../main.c     **** 	}
 589              	 .loc 3 118 0
 590 0026 07F58477 	 add r7,r7,#264
 591              	.LCFI42:
 592              	 .cfi_def_cfa_offset 24
 593 002a BD46     	 mov sp,r7
 594              	.LCFI43:
 595              	 .cfi_def_cfa_register 13
 596              	 
 597 002c BDE88040 	 pop {r7,lr}
 598              	.LCFI44:
 599              	 .cfi_restore 14
 600              	 .cfi_restore 7
 601              	 .cfi_def_cfa_offset 16
 602 0030 04B0     	 add sp,sp,#16
 603              	.LCFI45:
 604              	 .cfi_restore 3
 605              	 .cfi_restore 2
 606              	 .cfi_restore 1
 607              	 .cfi_restore 0
 608              	 .cfi_def_cfa_offset 0
 609 0032 7047     	 bx lr
 610              	 .cfi_endproc
 611              	.LFE251:
 613              	 .section .rodata
 614              	 .align 2
 615              	.LC1:
 616 0000 0D200A20 	 .ascii "\015 \012  \015 \012\000"
 616      200D200A 
 616      00
 617 0009 000000   	 .align 2
 618              	.LC2:
 619 000c 0D204C41 	 .ascii "\015 LAST_ERROR_CODE Stuff Error  \015 \000"
 619      53545F45 
 619      52524F52 
 619      5F434F44 
 619      45205374 
 620 002e 0000     	 .align 2
 621              	.LC3:
 622 0030 0D204C41 	 .ascii "\015 LAST_ERROR_CODE Form Error  \015 \012\000"
 622      53545F45 
 622      52524F52 
 622      5F434F44 
 622      4520466F 
 623 0052 0000     	 .align 2
 624              	.LC4:
 625 0054 0D204C41 	 .ascii "\015 LAST_ERROR_CODE Ack Error  \015 \012\000"
 625      53545F45 
 625      52524F52 
 625      5F434F44 
 625      45204163 
 626 0075 000000   	 .align 2
 627              	.LC5:
 628 0078 0D204C41 	 .ascii "\015 LAST_ERROR_CODE Bit1 Error \015 \012\000"
 628      53545F45 
 628      52524F52 
 628      5F434F44 
 628      45204269 
 629 0099 000000   	 .align 2
 630              	.LC6:
 631 009c 0D204C41 	 .ascii "\015 LAST_ERROR_CODE Bit0 Error \015 \012\000"
 631      53545F45 
 631      52524F52 
 631      5F434F44 
 631      45204269 
 632 00bd 000000   	 .align 2
 633              	.LC7:
 634 00c0 0D204C41 	 .ascii "\015 LAST_ERROR_CODE CRC Error  \015 \012\000"
 634      53545F45 
 634      52524F52 
 634      5F434F44 
 634      45204352 
 635 00e1 000000   	 .align 2
 636              	.LC8:
 637 00e4 0D202043 	 .ascii "\015  CPU write to LEC  \015 \012\000"
 637      50552077 
 637      72697465 
 637      20746F20 
 637      4C454320 
 638 00fd 000000   	 .align 2
 639              	.LC9:
 640 0100 0D205458 	 .ascii "\015 TX OK \015 \012 \000"
 640      204F4B20 
 640      0D200A20 
 640      00
 641 010d 000000   	 .align 2
 642              	.LC10:
 643 0110 0D205258 	 .ascii "\015 RX OK \015 \012 \000"
 643      204F4B20 
 643      0D200A20 
 643      00
 644 011d 000000   	 .align 2
 645              	.LC11:
 646 0120 0D20414C 	 .ascii "\015 ALERT WARNING \015 \012 \000"
 646      45525420 
 646      5741524E 
 646      494E4720 
 646      0D200A20 
 647 0135 000000   	 .align 2
 648              	.LC12:
 649 0138 0D204552 	 .ascii "\015 ERROR WARNING\015 \012 \000"
 649      524F5220 
 649      5741524E 
 649      494E470D 
 649      200A2000 
 650              	 .align 2
 651              	.LC13:
 652 014c 0D204255 	 .ascii "\015 BUS OFF \015 \012 \000"
 652      53204F46 
 652      46200D20 
 652      0A2000
 653 015b 00       	 .align 2
 654              	.LC14:
 655 015c 0D204C49 	 .ascii "\015 LIST_LENGTH_ERROR \015 \012 \000"
 655      53545F4C 
 655      454E4754 
 655      485F4552 
 655      524F5220 
 656 0175 000000   	 .align 2
 657              	.LC15:
 658 0178 0D204C49 	 .ascii "\015 LIST_OBJECT_ERROR \015 \012 \000"
 658      53545F4F 
 658      424A4543 
 658      545F4552 
 658      524F5220 
 659 0191 000000   	 .align 2
 660              	.LC16:
 661 0194 0D206765 	 .ascii "\015 get status: %d\015 \012\000"
 661      74207374 
 661      61747573 
 661      3A202564 
 661      0D200A00 
 662              	 .align 2
 663              	.LC17:
 664 01a8 0D205265 	 .ascii "\015 Receive Error: %d \015 \012\000"
 664      63656976 
 664      65204572 
 664      726F723A 
 664      20256420 
 665              	 .align 2
 666              	.LC0:
 667 01c0 01       	 .byte 1
 668 01c1 02       	 .byte 2
 669 01c2 03       	 .byte 3
 670 01c3 04       	 .byte 4
 671 01c4 05       	 .byte 5
 672 01c5 06       	 .byte 6
 673 01c6 07       	 .byte 7
 674 01c7 08       	 .byte 8
 675              	 .section .text.main,"ax",%progbits
 676              	 .align 2
 677              	 .global main
 678              	 .thumb
 679              	 .thumb_func
 681              	main:
 682              	.LFB252:
 119:../main.c     **** int main(void)
 120:../main.c     **** {
 683              	 .loc 3 120 0
 684              	 .cfi_startproc
 685              	 
 686              	 
 687 0000 80B5     	 push {r7,lr}
 688              	.LCFI46:
 689              	 .cfi_def_cfa_offset 8
 690              	 .cfi_offset 7,-8
 691              	 .cfi_offset 14,-4
 692 0002 86B0     	 sub sp,sp,#24
 693              	.LCFI47:
 694              	 .cfi_def_cfa_offset 32
 695 0004 00AF     	 add r7,sp,#0
 696              	.LCFI48:
 697              	 .cfi_def_cfa_register 7
 121:../main.c     ****   DAVE_STATUS_t status;
 122:../main.c     **** 
 123:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 698              	 .loc 3 123 0
 699 0006 FFF7FEFF 	 bl DAVE_Init
 700 000a 0346     	 mov r3,r0
 701 000c FB73     	 strb r3,[r7,#15]
 124:../main.c     **** 
 125:../main.c     ****   uint8_t can_data[8]={1,2,3,4,5,6,7,8};
 702              	 .loc 3 125 0
 703 000e 524A     	 ldr r2,.L42
 704 0010 3B1D     	 adds r3,r7,#4
 705 0012 1068     	 ldr r0,[r2]
 706 0014 5168     	 ldr r1,[r2,#4]
 707 0016 03C3     	 stmia r3!,{r0,r1}
 126:../main.c     **** 
 127:../main.c     ****   if (status != DAVE_STATUS_SUCCESS)
 708              	 .loc 3 127 0
 709 0018 FB7B     	 ldrb r3,[r7,#15]
 710 001a 002B     	 cmp r3,#0
 711 001c 00D0     	 beq .L17
 712              	.L18:
 128:../main.c     ****   {
 129:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 130:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 131:../main.c     **** 
 132:../main.c     ****     while(1U)
 133:../main.c     ****     {
 134:../main.c     **** 
 135:../main.c     ****     }
 713              	 .loc 3 135 0 discriminator 1
 714 001e FEE7     	 b .L18
 715              	.L17:
 716              	.LBB3:
 136:../main.c     ****   }
 137:../main.c     **** 
 138:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 139:../main.c     **** 
 140:../main.c     **** 
 141:../main.c     **** 
 142:../main.c     **** 
 143:../main.c     ****   while(1U)
 144:../main.c     ****   {
 145:../main.c     **** 	 CanSendMessage(can_data,100,8);
 717              	 .loc 3 145 0
 718 0020 3B1D     	 adds r3,r7,#4
 719 0022 1846     	 mov r0,r3
 720 0024 6421     	 movs r1,#100
 721 0026 0822     	 movs r2,#8
 722 0028 FFF7FEFF 	 bl CanSendMessage
 146:../main.c     **** 	 CanNode0_receiveINT();
 723              	 .loc 3 146 0
 724 002c FFF7FEFF 	 bl CanNode0_receiveINT
 725              	.LBB4:
 147:../main.c     **** 	 for(int i=0;i<900000;i++);
 726              	 .loc 3 147 0
 727 0030 0023     	 movs r3,#0
 728 0032 7B61     	 str r3,[r7,#20]
 729 0034 02E0     	 b .L19
 730              	.L20:
 731              	 .loc 3 147 0 is_stmt 0 discriminator 3
 732 0036 7B69     	 ldr r3,[r7,#20]
 733 0038 0133     	 adds r3,r3,#1
 734 003a 7B61     	 str r3,[r7,#20]
 735              	.L19:
 736              	 .loc 3 147 0 discriminator 1
 737 003c 7B69     	 ldr r3,[r7,#20]
 738 003e 474A     	 ldr r2,.L42+4
 739 0040 9342     	 cmp r3,r2
 740 0042 F8DD     	 ble .L20
 741              	.LBE4:
 148:../main.c     **** 
 149:../main.c     **** 		uint8_t Receive_Error = XMC_CAN_NODE_GetReceiveErrorCounter((XMC_CAN_NODE_t *const) &CAN_NODE_0);
 742              	 .loc 3 149 0 is_stmt 1
 743 0044 4648     	 ldr r0,.L42+8
 744 0046 FFF7FEFF 	 bl XMC_CAN_NODE_GetReceiveErrorCounter
 745 004a 0346     	 mov r3,r0
 746 004c BB73     	 strb r3,[r7,#14]
 150:../main.c     **** 
 151:../main.c     **** 
 152:../main.c     **** 		CAN_NODE_GetStatus(&CAN_NODE_0);
 747              	 .loc 3 152 0
 748 004e 4448     	 ldr r0,.L42+8
 749 0050 FFF7FEFF 	 bl CAN_NODE_GetStatus
 153:../main.c     **** 			USB_CAN_printf("\r \n  \r \n");
 750              	 .loc 3 153 0
 751 0054 4348     	 ldr r0,.L42+12
 752 0056 FFF7FEFF 	 bl USB_CAN_printf
 753              	.LBB5:
 154:../main.c     **** 			for (int i = 32; i >= 0; --i)
 754              	 .loc 3 154 0
 755 005a 2023     	 movs r3,#32
 756 005c 3B61     	 str r3,[r7,#16]
 757 005e 77E0     	 b .L21
 758              	.L40:
 155:../main.c     **** 			{
 156:../main.c     **** 				// Check if the i-th bit is set
 157:../main.c     **** 				get_data =(get_status & (1 << i));
 759              	 .loc 3 157 0
 760 0060 0122     	 movs r2,#1
 761 0062 3B69     	 ldr r3,[r7,#16]
 762 0064 02FA03F3 	 lsl r3,r2,r3
 763 0068 1A46     	 mov r2,r3
 764 006a 3F4B     	 ldr r3,.L42+16
 765 006c 1B68     	 ldr r3,[r3]
 766 006e 1340     	 ands r3,r3,r2
 767 0070 3E4A     	 ldr r2,.L42+20
 768 0072 1360     	 str r3,[r2]
 158:../main.c     **** 				switch (get_data) {
 769              	 .loc 3 158 0
 770 0074 3D4B     	 ldr r3,.L42+20
 771 0076 1B68     	 ldr r3,[r3]
 772 0078 072B     	 cmp r3,#7
 773 007a 3BD0     	 beq .L23
 774 007c 072B     	 cmp r3,#7
 775 007e 0DD8     	 bhi .L24
 776 0080 032B     	 cmp r3,#3
 777 0082 27D0     	 beq .L25
 778 0084 032B     	 cmp r3,#3
 779 0086 04D8     	 bhi .L26
 780 0088 012B     	 cmp r3,#1
 781 008a 1BD0     	 beq .L27
 782 008c 022B     	 cmp r3,#2
 783 008e 1DD0     	 beq .L28
 784 0090 50E0     	 b .L22
 785              	.L26:
 786 0092 052B     	 cmp r3,#5
 787 0094 26D0     	 beq .L29
 788 0096 052B     	 cmp r3,#5
 789 0098 28D8     	 bhi .L30
 790 009a 1FE0     	 b .L41
 791              	.L24:
 792 009c 402B     	 cmp r3,#64
 793 009e 39D0     	 beq .L32
 794 00a0 402B     	 cmp r3,#64
 795 00a2 06D8     	 bhi .L33
 796 00a4 102B     	 cmp r3,#16
 797 00a6 2DD0     	 beq .L34
 798 00a8 202B     	 cmp r3,#32
 799 00aa 2FD0     	 beq .L35
 800 00ac 082B     	 cmp r3,#8
 801 00ae 25D0     	 beq .L36
 802 00b0 40E0     	 b .L22
 803              	.L33:
 804 00b2 B3F5807F 	 cmp r3,#256
 805 00b6 35D0     	 beq .L37
 806 00b8 B3F5007F 	 cmp r3,#512
 807 00bc 36D0     	 beq .L38
 808 00be 802B     	 cmp r3,#128
 809 00c0 2CD0     	 beq .L39
 810 00c2 37E0     	 b .L22
 811              	.L27:
 159:../main.c     **** 
 160:../main.c     **** 			case (1):
 161:../main.c     **** 					printf("\r LAST_ERROR_CODE Stuff Error  \r \n");
 812              	 .loc 3 161 0
 813 00c4 2A48     	 ldr r0,.L42+24
 814 00c6 FFF7FEFF 	 bl puts
 162:../main.c     **** 				break;
 815              	 .loc 3 162 0
 816 00ca 33E0     	 b .L22
 817              	.L28:
 163:../main.c     **** 			case (2):
 164:../main.c     **** 					USB_CAN_printf("\r LAST_ERROR_CODE Form Error  \r \n");
 818              	 .loc 3 164 0
 819 00cc 2948     	 ldr r0,.L42+28
 820 00ce FFF7FEFF 	 bl USB_CAN_printf
 165:../main.c     **** 				break;
 821              	 .loc 3 165 0
 822 00d2 2FE0     	 b .L22
 823              	.L25:
 166:../main.c     **** 			case (3):
 167:../main.c     **** 					USB_CAN_printf("\r LAST_ERROR_CODE Ack Error  \r \n");
 824              	 .loc 3 167 0
 825 00d4 2848     	 ldr r0,.L42+32
 826 00d6 FFF7FEFF 	 bl USB_CAN_printf
 168:../main.c     **** 				break;
 827              	 .loc 3 168 0
 828 00da 2BE0     	 b .L22
 829              	.L41:
 169:../main.c     **** 			case (4):
 170:../main.c     **** 					USB_CAN_printf("\r LAST_ERROR_CODE Bit1 Error \r \n");
 830              	 .loc 3 170 0
 831 00dc 2748     	 ldr r0,.L42+36
 832 00de FFF7FEFF 	 bl USB_CAN_printf
 171:../main.c     **** 				break;
 833              	 .loc 3 171 0
 834 00e2 27E0     	 b .L22
 835              	.L29:
 172:../main.c     **** 			case (5):
 173:../main.c     **** 					USB_CAN_printf("\r LAST_ERROR_CODE Bit0 Error \r \n");
 836              	 .loc 3 173 0
 837 00e4 2648     	 ldr r0,.L42+40
 838 00e6 FFF7FEFF 	 bl USB_CAN_printf
 174:../main.c     **** 				break;
 839              	 .loc 3 174 0
 840 00ea 23E0     	 b .L22
 841              	.L30:
 175:../main.c     **** 			case (6):
 176:../main.c     **** 					USB_CAN_printf("\r LAST_ERROR_CODE CRC Error  \r \n");
 842              	 .loc 3 176 0
 843 00ec 2548     	 ldr r0,.L42+44
 844 00ee FFF7FEFF 	 bl USB_CAN_printf
 177:../main.c     **** 				break;
 845              	 .loc 3 177 0
 846 00f2 1FE0     	 b .L22
 847              	.L23:
 178:../main.c     **** 			case (7):
 179:../main.c     **** 					USB_CAN_printf("\r  CPU write to LEC  \r \n");
 848              	 .loc 3 179 0
 849 00f4 2448     	 ldr r0,.L42+48
 850 00f6 FFF7FEFF 	 bl USB_CAN_printf
 180:../main.c     **** 				break;
 851              	 .loc 3 180 0
 852 00fa 1BE0     	 b .L22
 853              	.L36:
 181:../main.c     **** 			case 8:
 182:../main.c     **** 					USB_CAN_printf("\r TX OK \r \n ");
 854              	 .loc 3 182 0
 855 00fc 2348     	 ldr r0,.L42+52
 856 00fe FFF7FEFF 	 bl USB_CAN_printf
 183:../main.c     **** 				break;
 857              	 .loc 3 183 0
 858 0102 17E0     	 b .L22
 859              	.L34:
 184:../main.c     **** 			case 16:
 185:../main.c     **** 					USB_CAN_printf("\r RX OK \r \n ");
 860              	 .loc 3 185 0
 861 0104 2248     	 ldr r0,.L42+56
 862 0106 FFF7FEFF 	 bl USB_CAN_printf
 186:../main.c     **** 				break;
 863              	 .loc 3 186 0
 864 010a 13E0     	 b .L22
 865              	.L35:
 187:../main.c     **** 			case 32:
 188:../main.c     **** 				USB_CAN_printf("\r ALERT WARNING \r \n ");
 866              	 .loc 3 188 0
 867 010c 2148     	 ldr r0,.L42+60
 868 010e FFF7FEFF 	 bl USB_CAN_printf
 189:../main.c     **** 				break;
 869              	 .loc 3 189 0
 870 0112 0FE0     	 b .L22
 871              	.L32:
 190:../main.c     **** 			case 64:
 191:../main.c     **** 				USB_CAN_printf("\r ERROR WARNING\r \n ");
 872              	 .loc 3 191 0
 873 0114 2048     	 ldr r0,.L42+64
 874 0116 FFF7FEFF 	 bl USB_CAN_printf
 192:../main.c     **** 				break;
 875              	 .loc 3 192 0
 876 011a 0BE0     	 b .L22
 877              	.L39:
 193:../main.c     **** 			case 128:
 194:../main.c     **** 				USB_CAN_printf("\r BUS OFF \r \n ");
 878              	 .loc 3 194 0
 879 011c 1F48     	 ldr r0,.L42+68
 880 011e FFF7FEFF 	 bl USB_CAN_printf
 195:../main.c     **** 				break;
 881              	 .loc 3 195 0
 882 0122 07E0     	 b .L22
 883              	.L37:
 196:../main.c     **** 			case 256:
 197:../main.c     **** 				USB_CAN_printf("\r LIST_LENGTH_ERROR \r \n ");
 884              	 .loc 3 197 0
 885 0124 1E48     	 ldr r0,.L42+72
 886 0126 FFF7FEFF 	 bl USB_CAN_printf
 198:../main.c     **** 				break;
 887              	 .loc 3 198 0
 888 012a 03E0     	 b .L22
 889              	.L38:
 199:../main.c     **** 			case 512:
 200:../main.c     **** 				USB_CAN_printf("\r LIST_OBJECT_ERROR \r \n ");
 890              	 .loc 3 200 0
 891 012c 1D48     	 ldr r0,.L42+76
 892 012e FFF7FEFF 	 bl USB_CAN_printf
 201:../main.c     **** 				break;
 893              	 .loc 3 201 0
 894 0132 00BF     	 nop
 895              	.L22:
 202:../main.c     **** 			}
 203:../main.c     **** 				USB_CAN_printf("\r get status: %d\r \n",get_status);
 896              	 .loc 3 203 0 discriminator 2
 897 0134 0C4B     	 ldr r3,.L42+16
 898 0136 1B68     	 ldr r3,[r3]
 899 0138 1B48     	 ldr r0,.L42+80
 900 013a 1946     	 mov r1,r3
 901 013c FFF7FEFF 	 bl USB_CAN_printf
 204:../main.c     **** 				USB_CAN_printf("\r Receive Error: %d \r \n",Receive_Error);
 902              	 .loc 3 204 0 discriminator 2
 903 0140 BB7B     	 ldrb r3,[r7,#14]
 904 0142 1A48     	 ldr r0,.L42+84
 905 0144 1946     	 mov r1,r3
 906 0146 FFF7FEFF 	 bl USB_CAN_printf
 154:../main.c     **** 			{
 907              	 .loc 3 154 0 discriminator 2
 908 014a 3B69     	 ldr r3,[r7,#16]
 909 014c 013B     	 subs r3,r3,#1
 910 014e 3B61     	 str r3,[r7,#16]
 911              	.L21:
 154:../main.c     **** 			{
 912              	 .loc 3 154 0 is_stmt 0 discriminator 1
 913 0150 3B69     	 ldr r3,[r7,#16]
 914 0152 002B     	 cmp r3,#0
 915 0154 84DA     	 bge .L40
 916              	.LBE5:
 917              	.LBE3:
 205:../main.c     **** 		}
 206:../main.c     ****   }
 918              	 .loc 3 206 0 is_stmt 1
 919 0156 63E7     	 b .L17
 920              	.L43:
 921              	 .align 2
 922              	.L42:
 923 0158 C0010000 	 .word .LC0
 924 015c 9FBB0D00 	 .word 899999
 925 0160 00000000 	 .word CAN_NODE_0
 926 0164 00000000 	 .word .LC1
 927 0168 00000000 	 .word get_status
 928 016c 00000000 	 .word get_data
 929 0170 0C000000 	 .word .LC2
 930 0174 30000000 	 .word .LC3
 931 0178 54000000 	 .word .LC4
 932 017c 78000000 	 .word .LC5
 933 0180 9C000000 	 .word .LC6
 934 0184 C0000000 	 .word .LC7
 935 0188 E4000000 	 .word .LC8
 936 018c 00010000 	 .word .LC9
 937 0190 10010000 	 .word .LC10
 938 0194 20010000 	 .word .LC11
 939 0198 38010000 	 .word .LC12
 940 019c 4C010000 	 .word .LC13
 941 01a0 5C010000 	 .word .LC14
 942 01a4 78010000 	 .word .LC15
 943 01a8 94010000 	 .word .LC16
 944 01ac A8010000 	 .word .LC17
 945              	 .cfi_endproc
 946              	.LFE252:
 948              	 .text
 949              	.Letext0:
 950              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 951              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 952              	 .file 6 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 953              	 .file 7 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc/xmc_gpio.h"
 954              	 .file 8 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/XMCLib/inc/xmc4_gpio.h"
 955              	 .file 9 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/GLOBAL_CAN/global_can.h"
 956              	 .file 10 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/DAVE.h"
 957              	 .file 11 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdarg.h"
 958              	 .file 12 "<built-in>"
 959              	 .file 13 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/CMSIS/Include/cmsis_gcc.h"
 960              	 .file 14 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/CMSIS/Include/core_cm4.h"
 961              	 .file 15 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
 962              	 .file 16 "C:/work_mari/XMC4800/common-tasks/CAN_NODE/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_CAN_NODE_GetReceiveErrorCounter:00000000 $t
    {standard input}:24     .text.XMC_CAN_NODE_GetReceiveErrorCounter:00000000 XMC_CAN_NODE_GetReceiveErrorCounter
    {standard input}:65     .text.XMC_CAN_NODE_SetInitBit:00000000 $t
    {standard input}:69     .text.XMC_CAN_NODE_SetInitBit:00000000 XMC_CAN_NODE_SetInitBit
    {standard input}:110    .text.XMC_CAN_NODE_ResetInitBit:00000000 $t
    {standard input}:114    .text.XMC_CAN_NODE_ResetInitBit:00000000 XMC_CAN_NODE_ResetInitBit
    {standard input}:155    .text.XMC_CAN_NODE_Enable:00000000 $t
    {standard input}:159    .text.XMC_CAN_NODE_Enable:00000000 XMC_CAN_NODE_Enable
    {standard input}:199    .text.CAN_NODE_Enable:00000000 $t
    {standard input}:203    .text.CAN_NODE_Enable:00000000 CAN_NODE_Enable
    {standard input}:244    .data.new_baudrate:00000000 new_baudrate
    {standard input}:241    .data.new_baudrate:00000000 $d
    {standard input}:251    .data.new_sampe_point:00000000 new_sampe_point
    {standard input}:248    .data.new_sampe_point:00000000 $d
    {standard input}:257    .data.new_sjw:00000000 new_sjw
                            *COM*:00000004 array_data
                            *COM*:00000004 received_id
                            *COM*:00000008 received_data
                            *COM*:00000004 get_status
                            *COM*:00000004 get_data
    {standard input}:265    .text.CanSendMessage:00000000 $t
    {standard input}:270    .text.CanSendMessage:00000000 CanSendMessage
    {standard input}:389    .text.CanSendMessage:000000b8 $d
    {standard input}:398    .text.CanNode0_receiveINT:00000000 $t
    {standard input}:403    .text.CanNode0_receiveINT:00000000 CanNode0_receiveINT
    {standard input}:538    .text.CanNode0_receiveINT:000000cc $d
    {standard input}:548    .text.USB_CAN_printf:00000000 $t
    {standard input}:553    .text.USB_CAN_printf:00000000 USB_CAN_printf
    {standard input}:614    .rodata:00000000 $d
    {standard input}:676    .text.main:00000000 $t
    {standard input}:681    .text.main:00000000 main
    {standard input}:923    .text.main:00000158 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CAN_NODE_ConfigBaudrate
CAN_NODE_MO_Init
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
CAN_NODE_0
CAN_NODE_MO_Receive
vsnprintf
DAVE_Init
CAN_NODE_GetStatus
puts
