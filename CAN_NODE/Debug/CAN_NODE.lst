
CAN_NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036b0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         000000bc  1ffe8800  0c0036b0  00010800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000002c  1ffe88bc  0c00376c  000108bc  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .stab         0000009c  00000000  00000000  000108bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000014d  00000000  00000000  00010958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000820  00000000  00000000  00010aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009a34  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001776  00000000  00000000  0001acfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000036c9  00000000  00000000  0001c472  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002a28  00000000  00000000  0001fb3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004b0c  00000000  00000000  00022564  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000460a  00000000  00000000  00027070  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000720  00000000  00000000  0002b67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 000009f8  00000000  00000000  0002bd9a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0036b0 	.word	0x0c0036b0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000000bc 	.word	0x000000bc
 8000254:	0c0036b0 	.word	0x0c0036b0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe88bc 	.word	0x1ffe88bc
 8000264:	0000002c 	.word	0x0000002c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800230d 	.word	0x0800230d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08002151 	.word	0x08002151

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f000 f805 	bl	80002bc <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f001 fb1b 	bl	80018ec <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c2:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <SystemCoreSetup+0x64>)
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <SystemCoreSetup+0x68>)
 80002c8:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002ce:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f023 0308 	bic.w	r3, r3, #8
 80002ea:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <SystemCoreSetup+0x6c>)
 80002ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002f2:	3314      	adds	r3, #20
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f023 030f 	bic.w	r3, r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <SystemCoreSetup+0x6c>)
 800030a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800030e:	3314      	adds	r3, #20
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	08000000 	.word	0x08000000
 8000328:	58001000 	.word	0x58001000

0800032c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d03e      	beq.n	80003bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e002      	b.n	8000356 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000350:	f001 faae 	bl	80018b0 <OSCHP_GetFrequency>
 8000354:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000356:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	2b00      	cmp	r3, #0
 8000360:	d020      	beq.n	80003a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800036a:	0e1b      	lsrs	r3, r3, #24
 800036c:	3301      	adds	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	3301      	adds	r3, #1
 800038a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e00d      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ac:	3301      	adds	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e001      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 80003be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	3301      	adds	r3, #1
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SystemCoreClockUpdate+0xd0>)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	50004600 	.word	0x50004600
 80003f4:	50004710 	.word	0x50004710
 80003f8:	016e3600 	.word	0x016e3600
 80003fc:	2003ffc0 	.word	0x2003ffc0

08000400 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	460b      	mov	r3, r1
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	089b      	lsrs	r3, r3, #2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4618      	mov	r0, r3
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	089b      	lsrs	r3, r3, #2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3204      	adds	r2, #4
 8000422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	f003 0303 	and.w	r3, r3, #3
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	4619      	mov	r1, r3
 8000430:	23f8      	movs	r3, #248	; 0xf8
 8000432:	408b      	lsls	r3, r1
 8000434:	43db      	mvns	r3, r3
 8000436:	ea02 0103 	and.w	r1, r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	1d02      	adds	r2, r0, #4
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4619      	mov	r1, r3
 800044c:	2303      	movs	r3, #3
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	401a      	ands	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4a3a      	ldr	r2, [pc, #232]	; (8000544 <XMC_GPIO_Init+0x144>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <XMC_GPIO_Init+0x68>
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4a39      	ldr	r2, [pc, #228]	; (8000548 <XMC_GPIO_Init+0x148>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d10a      	bne.n	800047e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800046c:	7afb      	ldrb	r3, [r7, #11]
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	661a      	str	r2, [r3, #96]	; 0x60
 800047c:	e042      	b.n	8000504 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	b25b      	sxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	da3c      	bge.n	8000504 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	409a      	lsls	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3210      	adds	r2, #16
 80004aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4619      	mov	r1, r3
 80004b8:	2307      	movs	r3, #7
 80004ba:	408b      	lsls	r3, r1
 80004bc:	43db      	mvns	r3, r3
 80004be:	ea02 0103 	and.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f100 0210 	add.w	r2, r0, #16
 80004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3210      	adds	r2, #16
 80004e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7a1b      	ldrb	r3, [r3, #8]
 80004e8:	4619      	mov	r1, r3
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	f003 0307 	and.w	r3, r3, #7
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	ea42 0103 	orr.w	r1, r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	f100 0210 	add.w	r2, r0, #16
 8000500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	089b      	lsrs	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4618      	mov	r0, r3
 800050c:	7afb      	ldrb	r3, [r7, #11]
 800050e:	089b      	lsrs	r3, r3, #2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3204      	adds	r2, #4
 8000518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	f003 0303 	and.w	r3, r3, #3
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	ea42 0103 	orr.w	r1, r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1d02      	adds	r2, r0, #4
 8000536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	48028e00 	.word	0x48028e00
 8000548:	48028f00 	.word	0x48028f00

0800054c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2003ffc0 	.word	0x2003ffc0

08000564 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <XMC_SCU_GetMirrorStatus+0x14>)
 800056a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	50004000 	.word	0x50004000

0800057c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000584:	f7ff fed2 	bl	800032c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <XMC_SCU_lDelay+0x3c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <XMC_SCU_lDelay+0x40>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9a      	lsrs	r2, r3, #18
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e003      	b.n	80005aa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80005a2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3f7      	bcc.n	80005a2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2003ffc0 	.word	0x2003ffc0
 80005bc:	431bde83 	.word	0x431bde83

080005c0 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80005c6:	685b      	ldr	r3, [r3, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	50004074 	.word	0x50004074

080005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60d3      	str	r3, [r2, #12]
}
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	50004074 	.word	0x50004074

080005f4 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f8a1 	bl	8000744 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000602:	f000 fa83 	bl	8000b0c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	79db      	ldrb	r3, [r3, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00a      	beq.n	8000624 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800060e:	f000 fabb 	bl	8000b88 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000612:	bf00      	nop
 8000614:	f000 faa6 	bl	8000b64 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000618:	4603      	mov	r3, r0
 800061a:	f083 0301 	eor.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f7      	bne.n	8000614 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7a5b      	ldrb	r3, [r3, #9]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f905 	bl	8000838 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800062e:	bf00      	nop
 8000630:	f7ff ff98 	bl	8000564 <XMC_SCU_GetMirrorStatus>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1fa      	bne.n	8000630 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fa3e 	bl	8000ac0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7c1b      	ldrb	r3, [r3, #16]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f913 	bl	8000874 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7c5b      	ldrb	r3, [r3, #17]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f936 	bl	80008c4 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7c9b      	ldrb	r3, [r3, #18]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f91d 	bl	800089c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7cdb      	ldrb	r3, [r3, #19]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f940 	bl	80008ec <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	799b      	ldrb	r3, [r3, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000674:	f000 fac0 	bl	8000bf8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000678:	bf00      	nop
 800067a:	f000 fae5 	bl	8000c48 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800067e:	4603      	mov	r3, r0
 8000680:	f083 0301 	eor.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	799b      	ldrb	r3, [r3, #6]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d017      	beq.n	80006d0 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80006a0:	f000 faf6 	bl	8000c90 <XMC_SCU_CLOCK_DisableSystemPll>
 80006a4:	e014      	b.n	80006d0 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80006a6:	f000 fae3 	bl	8000c70 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8899      	ldrh	r1, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006b6:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006bc:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4608      	mov	r0, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	462a      	mov	r2, r5
 80006ca:	4623      	mov	r3, r4
 80006cc:	f000 faf0 	bl	8000cb0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006d8:	d103      	bne.n	80006e2 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 80006da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006de:	f000 f831 	bl	8000744 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80006e2:	f7ff fe23 	bl	800032c <SystemCoreClockUpdate>
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}

080006ec <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	0f1b      	lsrs	r3, r3, #28
 80006f8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000700:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000710:	4413      	add	r3, r2
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	50004414 	.word	0x50004414

08000724 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000728:	f7ff ff10 	bl	800054c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800072c:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000730:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800079c:	4906      	ldr	r1, [pc, #24]	; (80007b8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	50004600 	.word	0x50004600

080007bc <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d108      	bne.n	80007de <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007d6:	f023 0301 	bic.w	r3, r3, #1
 80007da:	60d3      	str	r3, [r2, #12]
 80007dc:	e007      	b.n	80007ee <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	60d3      	str	r3, [r2, #12]
  }
}
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	50004710 	.word	0x50004710

080007fc <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000806:	bf00      	nop
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800080a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f8      	bne.n	8000808 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000816:	4907      	ldr	r1, [pc, #28]	; (8000834 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000820:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000822:	4313      	orrs	r3, r2
 8000824:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	50004000 	.word	0x50004000
 8000834:	50004300 	.word	0x50004300

08000838 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000842:	bf00      	nop
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000846:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f8      	bne.n	8000844 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000852:	4907      	ldr	r1, [pc, #28]	; (8000870 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800085c:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004000 	.word	0x50004000
 8000870:	50004300 	.word	0x50004300

08000874 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000952:	4313      	orrs	r3, r2
 8000954:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800097a:	4313      	orrs	r3, r2
 800097c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	50004600 	.word	0x50004600

0800098c <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000994:	4906      	ldr	r1, [pc, #24]	; (80009b0 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099a:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80009a2:	4313      	orrs	r3, r2
 80009a4:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	50004600 	.word	0x50004600

080009b4 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	0f1b      	lsrs	r3, r3, #28
 80009c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009c8:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009d8:	4413      	add	r3, r2
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	50004648 	.word	0x50004648

080009ec <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fa:	f023 0302 	bic.w	r3, r3, #2
 80009fe:	6153      	str	r3, [r2, #20]
}
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	50004710 	.word	0x50004710

08000a0c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a16:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a22:	bf00      	nop
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f9      	beq.n	8000a24 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a3c:	491e      	ldr	r1, [pc, #120]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a58:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f023 0310 	bic.w	r3, r3, #16
 8000a64:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a70:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a72:	bf00      	nop
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f9      	beq.n	8000a74 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a8c:	bf00      	nop
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f9      	bne.n	8000a8e <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000aa4:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	60da      	str	r2, [r3, #12]
}
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	50004710 	.word	0x50004710
 8000abc:	50004160 	.word	0x50004160

08000ac0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ad4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10e      	bne.n	8000afa <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ae6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f7ff fd47 	bl	800057c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000aee:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f7ff fd3e 	bl	800057c <XMC_SCU_lDelay>
}
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	50004710 	.word	0x50004710

08000b0c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b22:	bf00      	nop
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0f9      	beq.n	8000b24 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00a      	beq.n	8000b52 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b42:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b44:	bf00      	nop
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f9      	bne.n	8000b46 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	50004200 	.word	0x50004200
 8000b60:	50004400 	.word	0x50004400

08000b64 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf0c      	ite	eq
 8000b74:	2301      	moveq	r3, #1
 8000b76:	2300      	movne	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	50004300 	.word	0x50004300

08000b88 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b90:	f7ff fd22 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b9e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000ba0:	bf00      	nop
 8000ba2:	f7ff fd0d 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f8      	beq.n	8000ba2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bb0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bb4:	f7ff fd10 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bba:	2208      	movs	r2, #8
 8000bbc:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bbe:	bf00      	nop
 8000bc0:	f7ff fcfe 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f8      	beq.n	8000bc0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bd2:	f7ff fd01 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bd6:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000be2:	bf00      	nop
 8000be4:	f7ff fcec 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f8      	beq.n	8000be4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	50004300 	.word	0x50004300

08000bf8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c08:	4d0d      	ldr	r5, [pc, #52]	; (8000c40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c12:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c16:	f000 fe4b 	bl	80018b0 <OSCHP_GetFrequency>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c22:	0d1b      	lsrs	r3, r3, #20
 8000c24:	3b01      	subs	r3, #1
 8000c26:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c28:	4323      	orrs	r3, r4
 8000c2a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c36:	6053      	str	r3, [r2, #4]
}
 8000c38:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	50004710 	.word	0x50004710
 8000c40:	50004700 	.word	0x50004700
 8000c44:	6b5fca6b 	.word	0x6b5fca6b

08000c48 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c54:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c58:	bf0c      	ite	eq
 8000c5a:	2301      	moveq	r3, #1
 8000c5c:	2300      	movne	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	50004710 	.word	0x50004710

08000c70 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	f023 0302 	bic.w	r3, r3, #2
 8000c82:	6053      	str	r3, [r2, #4]
}
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	50004710 	.word	0x50004710

08000c90 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6053      	str	r3, [r2, #4]
}
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	50004710 	.word	0x50004710

08000cb0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	81fb      	strh	r3, [r7, #14]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd79 	bl	80007bc <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000cca:	7b7b      	ldrb	r3, [r7, #13]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	f040 808b 	bne.w	8000de8 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d109      	bne.n	8000cec <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cd8:	f000 fdea 	bl	80018b0 <OSCHP_GetFrequency>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce4:	0c9b      	lsrs	r3, r3, #18
 8000ce6:	059b      	lsls	r3, r3, #22
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e002      	b.n	8000cf2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000cec:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000cf0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	fb02 f203 	mul.w	r2, r2, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	0d9b      	lsrs	r3, r3, #22
 8000d0e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d10:	4a49      	ldr	r2, [pc, #292]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d1c:	bf00      	nop
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f9      	beq.n	8000d1e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d2a:	4a43      	ldr	r2, [pc, #268]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d36:	4940      	ldr	r1, [pc, #256]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d38:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d3e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	3a01      	subs	r2, #1
 8000d44:	0212      	lsls	r2, r2, #8
 8000d46:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d4e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d56:	4313      	orrs	r3, r2
 8000d58:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d5a:	4a37      	ldr	r2, [pc, #220]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d66:	4a34      	ldr	r2, [pc, #208]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f023 0310 	bic.w	r3, r3, #16
 8000d70:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d7e:	bf00      	nop
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f9      	beq.n	8000d80 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f023 0301 	bic.w	r3, r3, #1
 8000d96:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d98:	bf00      	nop
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f9      	bne.n	8000d9a <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	0d9b      	lsrs	r3, r3, #22
 8000db2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000db4:	6a3a      	ldr	r2, [r7, #32]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d202      	bcs.n	8000dc2 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dbc:	6938      	ldr	r0, [r7, #16]
 8000dbe:	f000 f845 	bl	8000e4c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	0d9b      	lsrs	r3, r3, #22
 8000dd0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dd2:	6a3a      	ldr	r2, [r7, #32]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d202      	bcs.n	8000de0 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dda:	6938      	ldr	r0, [r7, #16]
 8000ddc:	f000 f836 	bl	8000e4c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000de0:	6a38      	ldr	r0, [r7, #32]
 8000de2:	f000 f833 	bl	8000e4c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000de6:	e01c      	b.n	8000e22 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000de8:	4913      	ldr	r1, [pc, #76]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000dfa:	bf00      	nop
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f9      	beq.n	8000dfc <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e14:	bf00      	nop
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f9      	beq.n	8000e16 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e24:	2205      	movs	r2, #5
 8000e26:	60da      	str	r2, [r3, #12]
}
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	431bde83 	.word	0x431bde83
 8000e34:	aaaaaaab 	.word	0xaaaaaaab
 8000e38:	50004710 	.word	0x50004710
 8000e3c:	f08080ff 	.word	0xf08080ff
 8000e40:	88888889 	.word	0x88888889
 8000e44:	b60b60b7 	.word	0xb60b60b7
 8000e48:	50004160 	.word	0x50004160

08000e4c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e54:	490b      	ldr	r1, [pc, #44]	; (8000e84 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e68:	bf00      	nop
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0320 	and.w	r3, r3, #32
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f9      	beq.n	8000e6a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e76:	2032      	movs	r0, #50	; 0x32
 8000e78:	f7ff fb80 	bl	800057c <XMC_SCU_lDelay>
}
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	50004710 	.word	0x50004710

08000e88 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	70fb      	strb	r3, [r7, #3]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70bb      	strb	r3, [r7, #2]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000eca:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000ecc:	78bb      	ldrb	r3, [r7, #2]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000ed4:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000ed6:	787b      	ldrb	r3, [r7, #1]
 8000ed8:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000eda:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	bf38      	it	cc
 8000f3e:	4613      	movcc	r3, r2
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	bf28      	it	cs
 8000f5e:	4613      	movcs	r3, r2
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	6852      	ldr	r2, [r2, #4]
 8000f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f82:	fb02 f201 	mul.w	r2, r2, r1
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 8090 	bne.w	80010ae <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000fa4:	2319      	movs	r3, #25
 8000fa6:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000fb0:	e04b      	b.n	800104a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fba:	6979      	ldr	r1, [r7, #20]
 8000fbc:	fb01 f202 	mul.w	r2, r1, r2
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d13e      	bne.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d034      	beq.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe0:	d830      	bhi.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe6:	d90a      	bls.n	8000ffe <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
              continue;
 8000ff8:	e027      	b.n	800104a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3b01      	subs	r3, #1
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	8912      	ldrh	r2, [r2, #8]
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0b5b      	lsrs	r3, r3, #13
 8001012:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	3b01      	subs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d90f      	bls.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d80c      	bhi.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d909      	bls.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b06      	cmp	r3, #6
 8001034:	d806      	bhi.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	895b      	ldrh	r3, [r3, #10]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	429a      	cmp	r2, r3
 8001040:	d800      	bhi.n	8001044 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8001042:	e005      	b.n	8001050 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3b01      	subs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d8b0      	bhi.n	8000fb2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b07      	cmp	r3, #7
 8001054:	d92b      	bls.n	80010ae <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff48 	bl	8000eec <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3b01      	subs	r3, #1
 8001060:	031b      	lsls	r3, r3, #12
 8001062:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	895b      	ldrh	r3, [r3, #10]
 800106a:	3b01      	subs	r3, #1
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001070:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3b01      	subs	r3, #1
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 800107c:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	461a      	mov	r2, r3
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	40d3      	lsrs	r3, r2
 800108e:	3b01      	subs	r3, #1
 8001090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8001094:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	03db      	lsls	r3, r3, #15
 800109c:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 800109e:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff31 	bl	8000f0c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	d1b71759 	.word	0xd1b71759

080010bc <XMC_CAN_NODE_NominalBitTimeConfigure>:

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	; 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
 80010c6:	230c      	movs	r3, #12
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
 80010ca:	230c      	movs	r3, #12
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
 80010d2:	2301      	movs	r3, #1
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
 80010de:	f242 7310 	movw	r3, #10000	; 0x2710
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 80010e4:	2301      	movs	r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e8:	e067      	b.n	80011ba <XMC_CAN_NODE_NominalBitTimeConfigure+0xfe>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	461a      	mov	r2, r3
 80010f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

    if ((temp_tbaud % 10U) > 5U)
 800110c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800110e:	4b5b      	ldr	r3, [pc, #364]	; (800127c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8001110:	fba3 2301 	umull	r2, r3, r3, r1
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	1aca      	subs	r2, r1, r3
 8001120:	2a05      	cmp	r2, #5
 8001122:	d909      	bls.n	8001138 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
    {
      temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	4a55      	ldr	r2, [pc, #340]	; (800127c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
      temp_tbaud++;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
 8001136:	e005      	b.n	8001144 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
    }
    else
    {
      temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	4a50      	ldr	r2, [pc, #320]	; (800127c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (temp_tbaud > 0U)
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
    {
      temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 800114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	461a      	mov	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fbb3 f3f2 	udiv	r3, r3, r2
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	e007      	b.n	8001170 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
    }
    else
    {
      temp_baudrate = f_quanta / 10U;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4a46      	ldr	r2, [pc, #280]	; (800127c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	623b      	str	r3, [r7, #32]
      temp_tbaud = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (temp_baudrate >= can_bit_time->baudrate)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	429a      	cmp	r2, r3
 8001178:	d805      	bhi.n	8001186 <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
    {
      error = temp_baudrate - can_bit_time->baudrate;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	6a3a      	ldr	r2, [r7, #32]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	e004      	b.n	8001190 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
    }
    else
    {
      error = can_bit_time->baudrate - temp_baudrate;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	61fb      	str	r3, [r7, #28]
    }

    if ((temp_tbaud <= 20U) && (best_error > error))
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2b14      	cmp	r3, #20
 8001194:	d80e      	bhi.n	80011b4 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
 8001196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	429a      	cmp	r2, r3
 800119c:	d90a      	bls.n	80011b4 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
    {
      best_brp = temp_brp;
 800119e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
      best_tbaud = temp_tbaud;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      best_error = (error);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28

      if (error < 1000U)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b0:	d200      	bcs.n	80011b4 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
      {
        break;
 80011b2:	e005      	b.n	80011c0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 80011b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b6:	3301      	adds	r3, #1
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011bc:	2b40      	cmp	r3, #64	; 0x40
 80011be:	d994      	bls.n	80010ea <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
        break;
      }
    }
  }
  /* search for best sample point */
  best_error = 10000U;
 80011c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 80011c6:	2340      	movs	r3, #64	; 0x40
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80011ca:	e02e      	b.n	800122a <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 80011cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ce:	3301      	adds	r3, #1
 80011d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d4:	fb02 f203 	mul.w	r2, r2, r3
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	60fb      	str	r3, [r7, #12]
    uint32_t error;
    if (tempSamplePoint >= can_bit_time->sample_point)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	891b      	ldrh	r3, [r3, #8]
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d806      	bhi.n	80011fa <XMC_CAN_NODE_NominalBitTimeConfigure+0x13e>
    {
      error = tempSamplePoint  - can_bit_time->sample_point;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	461a      	mov	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	e005      	b.n	8001206 <XMC_CAN_NODE_NominalBitTimeConfigure+0x14a>
    }
    else
    {
      error = can_bit_time->sample_point  - tempSamplePoint;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	891b      	ldrh	r3, [r3, #8]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	61bb      	str	r3, [r7, #24]
    }
    if (best_error > error)
 8001206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	429a      	cmp	r2, r3
 800120c:	d903      	bls.n	8001216 <XMC_CAN_NODE_NominalBitTimeConfigure+0x15a>
    {
      best_tseg1 = temp_tseg1;
 800120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	429a      	cmp	r2, r3
 8001220:	d900      	bls.n	8001224 <XMC_CAN_NODE_NominalBitTimeConfigure+0x168>
    {
      break;
 8001222:	e005      	b.n	8001230 <XMC_CAN_NODE_NominalBitTimeConfigure+0x174>
    }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8001224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001226:	3b01      	subs	r3, #1
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
 800122a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122c:	2b02      	cmp	r3, #2
 800122e:	d8cd      	bhi.n	80011cc <XMC_CAN_NODE_NominalBitTimeConfigure+0x110>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8001230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	3b01      	subs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe56 	bl	8000eec <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3b01      	subs	r3, #1
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	895b      	ldrh	r3, [r3, #10]
 800124e:	3b01      	subs	r3, #1
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	b2db      	uxtb	r3, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001254:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                   (((uint32_t)(best_tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8001256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001258:	3b01      	subs	r3, #1
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8001260:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8001262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001264:	3b01      	subs	r3, #1
 8001266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800126a:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                   (((uint32_t)(best_tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fe4b 	bl	8000f0c <XMC_CAN_NODE_DisableConfigurationChange>
}
 8001276:	3740      	adds	r7, #64	; 0x40
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	cccccccd 	.word	0xcccccccd

08001280 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	4613      	mov	r3, r2
 800128e:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8001290:	bf00      	nop
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fdf8 	bl	8000e88 <XMC_CAN_IsPanelControlReady>
 8001298:	4603      	mov	r3, r0
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f6      	bne.n	8001292 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	78ba      	ldrb	r2, [r7, #2]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	2102      	movs	r1, #2
 80012b0:	f7ff fdfe 	bl	8000eb0 <XMC_CAN_PanelControl>
}
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop

080012bc <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <XMC_CAN_Enable+0x34>)
 80012c6:	f7ff fb75 	bl	80009b4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <XMC_CAN_Enable+0x34>)
 80012cc:	f7ff fa0e 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 0201 	bic.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 80012dc:	bf00      	nop
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	10000010 	.word	0x10000010

080012f4 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001306:	f023 020f 	bic.w	r2, r3, #15
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffe5 	bl	8001320 <XMC_CAN_GetBaudrateClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d002      	beq.n	8001362 <XMC_CAN_GetBaudrateClockFrequency+0x1e>
 800135c:	2b02      	cmp	r3, #2
 800135e:	d004      	beq.n	800136a <XMC_CAN_GetBaudrateClockFrequency+0x26>
 8001360:	e007      	b.n	8001372 <XMC_CAN_GetBaudrateClockFrequency+0x2e>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001362:	f7ff f9df 	bl	8000724 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001366:	60f8      	str	r0, [r7, #12]
      break;
 8001368:	e003      	b.n	8001372 <XMC_CAN_GetBaudrateClockFrequency+0x2e>
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
 800136a:	f000 faa1 	bl	80018b0 <OSCHP_GetFrequency>
 800136e:	60f8      	str	r0, [r7, #12]
      break;
 8001370:	bf00      	nop
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	460b      	mov	r3, r1
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff ff96 	bl	80012bc <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff ffad 	bl	80012f4 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff ffd2 	bl	8001344 <XMC_CAN_GetBaudrateClockFrequency>
 80013a0:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80013ae:	2000      	movs	r0, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fdbb 	bl	8000f2c <max>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80013be:	f7ff fdc5 	bl	8000f4c <min>
 80013c2:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80013da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	60da      	str	r2, [r3, #12]

  return freq_n;
 80013f2:	697b      	ldr	r3, [r7, #20]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 800140c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8001410:	095b      	lsrs	r3, r3, #5
 8001412:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	035a      	lsls	r2, r3, #13
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	6892      	ldr	r2, [r2, #8]
 8001430:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001434:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	6891      	ldr	r1, [r2, #8]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	79db      	ldrb	r3, [r3, #7]
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	79db      	ldrb	r3, [r3, #7]
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	d100      	bne.n	8001464 <XMC_CAN_MO_Config+0x68>
 8001462:	e060      	b.n	8001526 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001470:	2b01      	cmp	r3, #1
 8001472:	d000      	beq.n	8001476 <XMC_CAN_MO_Config+0x7a>
 8001474:	e057      	b.n	8001526 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2220      	movs	r2, #32
 800147c:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	79db      	ldrb	r3, [r3, #7]
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d128      	bne.n	80014de <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001498:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80014a2:	049b      	lsls	r3, r3, #18
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80014c0:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80014ca:	049b      	lsls	r3, r3, #18
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	e009      	b.n	80014f2 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6852      	ldr	r2, [r2, #4]
 80014e6:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6892      	ldr	r2, [r2, #8]
 80014f0:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e1b      	ldrb	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10c      	bne.n	8001514 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f81a 	bl	8001534 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001508:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <XMC_CAN_MO_Config+0x130>)
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	e008      	b.n	8001526 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a03      	ldr	r2, [pc, #12]	; (8001530 <XMC_CAN_MO_Config+0x134>)
 8001524:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	062000c0 	.word	0x062000c0
 8001530:	00a00640 	.word	0x00a00640

08001534 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800153c:	2303      	movs	r3, #3
 800153e:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d122      	bne.n	800158e <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2220      	movs	r2, #32
 800154e:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	7b12      	ldrb	r2, [r2, #12]
 8001562:	0612      	lsls	r2, r2, #24
 8001564:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6912      	ldr	r2, [r2, #16]
 8001574:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6952      	ldr	r2, [r2, #20]
 800157e:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <XMC_CAN_MO_UpdateData+0x6c>)
 8001586:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800158e:	2303      	movs	r3, #3
 8001590:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	00280040 	.word	0x00280040

080015a4 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80015d2:	2304      	movs	r3, #4
 80015d4:	75fb      	strb	r3, [r7, #23]
 80015d6:	e00c      	b.n	80015f2 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d102      	bne.n	80015e4 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	e006      	b.n	80015f2 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80015ec:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800161e:	0adb      	lsrs	r3, r3, #11
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001636:	2303      	movs	r3, #3
 8001638:	75fb      	strb	r3, [r7, #23]
 800163a:	e0a7      	b.n	800178c <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d102      	bne.n	8001648 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 8001642:	2302      	movs	r3, #2
 8001644:	75fb      	strb	r3, [r7, #23]
 8001646:	e0a1      	b.n	800178c <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2208      	movs	r2, #8
 800164e:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800165a:	0f5b      	lsrs	r3, r3, #29
 800165c:	2b00      	cmp	r3, #0
 800165e:	d140      	bne.n	80016e2 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	79d3      	ldrb	r3, [r2, #7]
 8001664:	f36f 1345 	bfc	r3, #5, #1
 8001668:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <XMC_CAN_MO_Receive+0x19c>)
 8001672:	4013      	ands	r3, r2
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6853      	ldr	r3, [r2, #4]
 800167e:	f361 031c 	bfi	r3, r1, #0, #29
 8001682:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800168e:	0f5b      	lsrs	r3, r3, #29
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	b2d9      	uxtb	r1, r3
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	7ad3      	ldrb	r3, [r2, #11]
 800169c:	f361 1345 	bfi	r3, r1, #5, #1
 80016a0:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7adb      	ldrb	r3, [r3, #11]
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00d      	beq.n	80016cc <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <XMC_CAN_MO_Receive+0x19c>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0c9b      	lsrs	r3, r3, #18
 80016bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6893      	ldr	r3, [r2, #8]
 80016c4:	f361 031c 	bfi	r3, r1, #0, #29
 80016c8:	6093      	str	r3, [r2, #8]
 80016ca:	e032      	b.n	8001732 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6893      	ldr	r3, [r2, #8]
 80016da:	f361 031c 	bfi	r3, r1, #0, #29
 80016de:	6093      	str	r3, [r2, #8]
 80016e0:	e027      	b.n	8001732 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	79d3      	ldrb	r3, [r2, #7]
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6853      	ldr	r3, [r2, #4]
 80016fa:	f361 031c 	bfi	r3, r1, #0, #29
 80016fe:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6893      	ldr	r3, [r2, #8]
 800170e:	f361 031c 	bfi	r3, r1, #0, #29
 8001712:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800171e:	0f5b      	lsrs	r3, r3, #29
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	b2d9      	uxtb	r1, r3
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	7ad3      	ldrb	r3, [r2, #11]
 800172c:	f361 1345 	bfi	r3, r1, #5, #1
 8001730:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800173c:	0e1b      	lsrs	r3, r3, #24
 800173e:	b2da      	uxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 8001774:	7dbb      	ldrb	r3, [r7, #22]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <XMC_CAN_MO_Receive+0x182>
 800177a:	7d7b      	ldrb	r3, [r7, #21]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f47f af63 	bne.w	8001648 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 8001788:	2300      	movs	r3, #0
 800178a:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800178c:	7dfb      	ldrb	r3, [r7, #23]
}
 800178e:	4618      	mov	r0, r3
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	1ffc0000 	.word	0x1ffc0000

080017a0 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b0:	d006      	beq.n	80017c0 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e005      	b.n	80017cc <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
  }
}
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <_sbrk+0x5c>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <_sbrk+0x60>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x5c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3303      	adds	r3, #3
 80017f8:	f023 0303 	bic.w	r3, r3, #3
 80017fc:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <_sbrk+0x5c>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a0d      	ldr	r2, [pc, #52]	; (800183c <_sbrk+0x64>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d207      	bcs.n	800181c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <_sbrk+0x5c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <_sbrk+0x5c>)
 8001816:	6013      	str	r3, [r2, #0]
    return (base);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	e006      	b.n	800182a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 800181c:	f000 fd70 	bl	8002300 <__errno>
 8001820:	4602      	mov	r2, r0
 8001822:	230c      	movs	r3, #12
 8001824:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	1ffe88bc 	.word	0x1ffe88bc
 8001838:	20000000 	.word	0x20000000
 800183c:	2003ffc0 	.word	0x2003ffc0

08001840 <_init>:

/* Init */
void _init(void)
{}
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7a5b      	ldrb	r3, [r3, #9]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00f      	beq.n	8001886 <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7a1a      	ldrb	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4608      	mov	r0, r1
 8001874:	4611      	mov	r1, r2
 8001876:	461a      	mov	r2, r3
 8001878:	f7ff fd80 	bl	800137c <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8001886:	7bfb      	ldrb	r3, [r7, #15]

}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]

  return (status);
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <OSCHP_GetFrequency+0x10>)
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	00b71b00 	.word	0x00b71b00

080018c4 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 80018cc:	4906      	ldr	r1, [pc, #24]	; (80018e8 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	50004600 	.word	0x50004600

080018ec <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <SystemCoreClockSetup+0x60>)
 80018f4:	1d3c      	adds	r4, r7, #4
 80018f6:	461d      	mov	r5, r3
 80018f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe76 	bl	80005f4 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001908:	2000      	movs	r0, #0
 800190a:	f7fe ff77 	bl	80007fc <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 800190e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001912:	f7fe ff2b 	bl	800076c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8001916:	2006      	movs	r0, #6
 8001918:	f7fe fffc 	bl	8000914 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 800191c:	f7ff f866 	bl	80009ec <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8001920:	2003      	movs	r0, #3
 8001922:	2164      	movs	r1, #100	; 0x64
 8001924:	f7ff f872 	bl	8000a0c <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff ffcb 	bl	80018c4 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 800192e:	2002      	movs	r0, #2
 8001930:	f7ff f82c 	bl	800098c <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001934:	2000      	movs	r0, #0
 8001936:	f7fe ff2d 	bl	8000794 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff f812 	bl	8000964 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001940:	2001      	movs	r0, #1
 8001942:	f7fe fffb 	bl	800093c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	08003340 	.word	0x08003340

08001950 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	460b      	mov	r3, r1
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	2107      	movs	r1, #7
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	401a      	ands	r2, r3
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	431a      	orrs	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
}
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <XMC_CAN_NODE_GetStatus>:
 *  XMC_CAN_NODE_ClearStatus()
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return ((can_node->NSR));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop

08001a0c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0201 	bic.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	460b      	mov	r3, r1
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	6891      	ldr	r1, [r2, #8]
 8001aa4:	7afa      	ldrb	r2, [r7, #11]
 8001aa6:	2007      	movs	r0, #7
 8001aa8:	fa00 f202 	lsl.w	r2, r0, r2
 8001aac:	43d2      	mvns	r2, r2
 8001aae:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8001ab0:	7afa      	ldrb	r2, [r7, #11]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	6811      	ldr	r1, [r2, #0]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001afe:	f7ff ffe3 	bl	8001ac8 <XMC_CAN_MO_EnableEvent>
}
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001b1a:	f7ff ffd5 	bl	8001ac8 <XMC_CAN_MO_EnableEvent>
}
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f831 	bl	8001b98 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	f7ff fe14 	bl	80017a0 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b8c:	f7ff fe08 	bl	80017a0 <XMC_CAN_NODE_EnableEvent>
  }

}
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop

08001b98 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001baa:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001bac:	4610      	mov	r0, r2
 8001bae:	2100      	movs	r1, #0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f7ff fecd 	bl	8001950 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc0:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f7ff fec2 	bl	8001950 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8001bd8:	4610      	mov	r0, r2
 8001bda:	2108      	movs	r1, #8
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f7ff feb7 	bl	8001950 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bec:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8001bee:	4610      	mov	r0, r2
 8001bf0:	210c      	movs	r1, #12
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff feac 	bl	8001950 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop

08001c00 <CAN_NODE_ConfigBaudrate>:

}

/*  Function to configure the baud rate based on UI configuration. */
void CAN_NODE_ConfigBaudrate(const CAN_NODE_t *handle, uint32_t baudrate, uint16_t sample_point, uint8_t sjw)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	460b      	mov	r3, r1
 8001c10:	80fb      	strh	r3, [r7, #6]
 8001c12:	4613      	mov	r3, r2
 8001c14:	717b      	strb	r3, [r7, #5]
  XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	617b      	str	r3, [r7, #20]
  XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time = handle->baudrate_config;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
                                                                     && (baudrate <= CAN_NODE_MAX_BAUDRATE));
  XMC_ASSERT("CAN_NODE_ConfigBaudrate: sample_point invalid", (sample_point >= 0U) &&
                                                                        (sample_point <= CAN_NODE_MAX_SAMPLE_POINT));
  XMC_ASSERT("CAN_NODE_ConfigBaudrate: Synchronization jump width invalid", (sjw >= 0U) && (sjw <= CAN_NODE_MAX_SJW));

  can_bit_time->baudrate = baudrate;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	605a      	str	r2, [r3, #4]
  can_bit_time->sample_point = (sample_point * CAN_NODE_MAX_SAMPLE_POINT);
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	0091      	lsls	r1, r2, #2
 8001c34:	461a      	mov	r2, r3
 8001c36:	460b      	mov	r3, r1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	811a      	strh	r2, [r3, #8]
  can_bit_time->sjw = (uint16_t)sjw;
 8001c42:	797b      	ldrb	r3, [r7, #5]
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	815a      	strh	r2, [r3, #10]

  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f7ff fa35 	bl	80010bc <XMC_CAN_NODE_NominalBitTimeConfigure>
}
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <CAN_NODE_MO_Init>:

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fbc9 	bl	80013fc <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	79db      	ldrb	r3, [r3, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	795b      	ldrb	r3, [r3, #5]
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f7ff ff04 	bl	8001a8c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff31 	bl	8001aec <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7a1b      	ldrb	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	799b      	ldrb	r3, [r3, #6]
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f7ff fef4 	bl	8001a8c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff2f 	bl	8001b08 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc6f 	bl	80015a4 <XMC_CAN_MO_Transmit>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fc8b 	bl	8001600 <XMC_CAN_MO_Receive>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	6852      	ldr	r2, [r2, #4]
 8001d1c:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fc06 	bl	8001534 <XMC_CAN_MO_UpdateData>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop

08001d38 <CAN_NODE_GetStatus>:

}

/* Function to read the current status of the CAN node  */
uint32_t CAN_NODE_GetStatus(const CAN_NODE_t* handle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t  status;

  XMC_ASSERT("CAN_NODE_GetStatus: handle null", handle != NULL);

  XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  status = XMC_CAN_NODE_GetStatus(can_node);
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fe44 	bl	80019d4 <XMC_CAN_NODE_GetStatus>
 8001d4c:	60b8      	str	r0, [r7, #8]
  return (status);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001d60:	2300      	movs	r3, #0
 8001d62:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd6b 	bl	800184c <GLOBAL_CAN_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 8087 	bne.w	8001e90 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7ff f8ed 	bl	8000f6c <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d178      	bne.n	8001e8a <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fe25 	bl	80019ec <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fe40 	bl	8001a2c <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe5b 	bl	8001a6c <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fdf5 	bl	80019b4 <XMC_CAN_NODE_EnableLoopBack>
 8001dca:	e018      	b.n	8001dfe <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dda:	791a      	ldrb	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001de2:	4608      	mov	r0, r1
 8001de4:	4611      	mov	r1, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	f7fe fb0a 	bl	8000400 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fdc5 	bl	8001988 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fe90 	bl	8001b24 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e019      	b.n	8001e3e <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f7ff fa27 	bl	8001280 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f7ff ff10 	bl	8001c58 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001e44:	461a      	mov	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8de      	bhi.n	8001e0a <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fddb 	bl	8001a0c <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fdf6 	bl	8001a4c <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d011      	beq.n	8001e94 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	791a      	ldrb	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	4608      	mov	r0, r1
 8001e80:	4611      	mov	r1, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7fe fabc 	bl	8000400 <XMC_GPIO_Init>
 8001e88:	e004      	b.n	8001e94 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
 8001e8e:	e001      	b.n	8001e94 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8001e90:	2301      	movs	r3, #1
 8001e92:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop

08001ea0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <DAVE_Init+0x30>)
 8001eac:	f7ff fcf0 	bl	8001890 <CLOCK_XMC4_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d104      	bne.n	8001ec4 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <DAVE_Init+0x34>)
 8001ebc:	f7ff ff4c 	bl	8001d58 <CAN_NODE_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	1ffe88c0 	.word	0x1ffe88c0
 8001ed4:	080033a4 	.word	0x080033a4

08001ed8 <XMC_CAN_NODE_GetReceiveErrorCounter>:
 * XMC_CAN_NODE_SetReceiveErrorCounter()
 *
 */

__STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Pos);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	b2db      	uxtb	r3, r3
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop

08001ef4 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0201 	bic.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <XMC_CAN_NODE_Enable>:
 * \par<b>Related API's:</b><br>
 * None
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 0210 	bic.w	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	601a      	str	r2, [r3, #0]
  XMC_CAN_NODE_ResetInitBit(can_node);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe3 	bl	8001f14 <XMC_CAN_NODE_ResetInitBit>
}
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <CAN_NODE_Enable>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_Enable(const CAN_NODE_t *handle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_Enable: null pointer", handle != NULL);
  XMC_CAN_NODE_Enable(handle->node_ptr);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ffe7 	bl	8001f34 <XMC_CAN_NODE_Enable>
}
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <CanSendMessage>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

	void CanSendMessage(uint8_t *data,uint16_t CAN_identifier,int CanBytes)
	{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	460b      	mov	r3, r1
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	817b      	strh	r3, [r7, #10]
		XMC_CAN_MO_t *MO_Ptr;
		const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <CanSendMessage+0xb8>)
 8001f7c:	617b      	str	r3, [r7, #20]
		MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;   //'0' refers to first message object configured
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	613b      	str	r3, [r7, #16]
				                                                     // for the selected can node
		CAN_NODE_Enable(HandlePtr1);
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ffe4 	bl	8001f54 <CAN_NODE_Enable>
		XMC_CAN_NODE_SetInitBit(HandlePtr1->node_ptr);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ffaf 	bl	8001ef4 <XMC_CAN_NODE_SetInitBit>
		CAN_NODE_ConfigBaudrate(HandlePtr1, new_baudrate, new_sampe_point,new_sjw);//400000
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <CanSendMessage+0xbc>)
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <CanSendMessage+0xc0>)
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <CanSendMessage+0xc4>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff fe2c 	bl	8001c00 <CAN_NODE_ConfigBaudrate>
		XMC_CAN_NODE_ResetInitBit(HandlePtr1->node_ptr);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ffb1 	bl	8001f14 <XMC_CAN_NODE_ResetInitBit>

		array_data = data;
 8001fb2:	4a20      	ldr	r2, [pc, #128]	; (8002034 <CanSendMessage+0xc8>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6013      	str	r3, [r2, #0]
		MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ;  //Configure message object type as transmit type
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	761a      	strb	r2, [r3, #24]
		MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS; //configure MO identifier type
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	79d3      	ldrb	r3, [r2, #7]
 8001fc2:	f36f 1345 	bfc	r3, #5, #1
 8001fc6:	71d3      	strb	r3, [r2, #7]
		MO_Ptr->can_data_length = CanBytes; // Configure CAN transmit MO data length field
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	731a      	strb	r2, [r3, #12]
		MO_Ptr->can_identifier =CAN_identifier ; // Example identifier
 8001fd0:	897a      	ldrh	r2, [r7, #10]
 8001fd2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001fd6:	6939      	ldr	r1, [r7, #16]
 8001fd8:	684b      	ldr	r3, [r1, #4]
 8001fda:	f362 031c 	bfi	r3, r2, #0, #29
 8001fde:	604b      	str	r3, [r1, #4]
		MO_Ptr->can_id_mask = 0x7FF;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	6893      	ldr	r3, [r2, #8]
 8001fe4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001fe8:	f361 031c 	bfi	r3, r1, #0, #29
 8001fec:	6093      	str	r3, [r2, #8]
		MO_Ptr->can_priority = XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	79d3      	ldrb	r3, [r2, #7]
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	f361 1387 	bfi	r3, r1, #6, #2
 8001ff8:	71d3      	strb	r3, [r2, #7]
		// Runtime change the MO configuration

		CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[0]);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe2a 	bl	8001c58 <CAN_NODE_MO_Init>
		CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[0],array_data); //CAN Transmit
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <CanSendMessage+0xc8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7ff fe72 	bl	8001cf8 <CAN_NODE_MO_UpdateData>
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe49 	bl	8001cb0 <CAN_NODE_MO_Transmit>




	}
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	080033a4 	.word	0x080033a4
 8002028:	1ffe8850 	.word	0x1ffe8850
 800202c:	1ffe8854 	.word	0x1ffe8854
 8002030:	1ffe8856 	.word	0x1ffe8856
 8002034:	1ffe88e0 	.word	0x1ffe88e0

08002038 <CanNode0_receiveINT>:
	void CanNode0_receiveINT()
		{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
			  XMC_CAN_MO_t *MO_Ptr;
			  const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <CanNode0_receiveINT+0xcc>)
 8002040:	60bb      	str	r3, [r7, #8]
			 // long double current_angle = 5.78899 ;
			  MO_Ptr = HandlePtr1->lmobj_ptr[1]->mo_ptr;   //'0' refers to first message object configured
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	607b      	str	r3, [r7, #4]
			                                                     // for the selected can node


			CAN_NODE_Enable(HandlePtr1);
 800204a:	68b8      	ldr	r0, [r7, #8]
 800204c:	f7ff ff82 	bl	8001f54 <CAN_NODE_Enable>

			// For run time baud rate configuration change
			// Configure new baud rate to 1MHz

			XMC_CAN_NODE_SetInitBit(HandlePtr1->node_ptr);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff4d 	bl	8001ef4 <XMC_CAN_NODE_SetInitBit>
			CAN_NODE_ConfigBaudrate(HandlePtr1, new_baudrate, new_sampe_point,new_sjw);
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <CanNode0_receiveINT+0xd0>)
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <CanNode0_receiveINT+0xd4>)
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <CanNode0_receiveINT+0xd8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	68b8      	ldr	r0, [r7, #8]
 8002068:	f7ff fdca 	bl	8001c00 <CAN_NODE_ConfigBaudrate>
			XMC_CAN_NODE_ResetInitBit(HandlePtr1->node_ptr);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff4f 	bl	8001f14 <XMC_CAN_NODE_ResetInitBit>
	        //Receive the data
			CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[1]);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe2a 	bl	8001cd4 <CAN_NODE_MO_Receive>

			MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;  //Configure message object type as transmit type
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	761a      	strb	r2, [r3, #24]
			MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS; //configure MO identifier type
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	79d3      	ldrb	r3, [r2, #7]
 800208a:	f36f 1345 	bfc	r3, #5, #1
 800208e:	71d3      	strb	r3, [r2, #7]
			MO_Ptr->can_data_length = 8; // Configure CAN transmit MO data length field
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2208      	movs	r2, #8
 8002094:	731a      	strb	r2, [r3, #12]
			received_id=MO_Ptr->can_identifier;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800209e:	461a      	mov	r2, r3
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <CanNode0_receiveINT+0xdc>)
 80020a2:	601a      	str	r2, [r3, #0]
			MO_Ptr->can_identifier =received_id ; // Example identifier
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <CanNode0_receiveINT+0xdc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6853      	ldr	r3, [r2, #4]
 80020b0:	f361 031c 	bfi	r3, r1, #0, #29
 80020b4:	6053      	str	r3, [r2, #4]
			MO_Ptr->can_id_mask = 0x0;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6893      	ldr	r3, [r2, #8]
 80020ba:	f36f 031c 	bfc	r3, #0, #29
 80020be:	6093      	str	r3, [r2, #8]
			MO_Ptr->can_priority = XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	79d3      	ldrb	r3, [r2, #7]
 80020c4:	2102      	movs	r1, #2
 80020c6:	f361 1387 	bfi	r3, r1, #6, #2
 80020ca:	71d3      	strb	r3, [r2, #7]
			// Runtime change the MO configuration
			CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[1]);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fdc1 	bl	8001c58 <CAN_NODE_MO_Init>

			for (int i = 0; i < 8; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e00c      	b.n	80020f6 <CanNode0_receiveINT+0xbe>
			{
				received_data[i] = MO_Ptr->can_data_byte[i];
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	3310      	adds	r3, #16
 80020e4:	7819      	ldrb	r1, [r3, #0]
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <CanNode0_receiveINT+0xe0>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	460a      	mov	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
			MO_Ptr->can_id_mask = 0x0;
			MO_Ptr->can_priority = XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2;
			// Runtime change the MO configuration
			CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[1]);

			for (int i = 0; i < 8; i++)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b07      	cmp	r3, #7
 80020fa:	ddef      	ble.n	80020dc <CanNode0_receiveINT+0xa4>
			{
				received_data[i] = MO_Ptr->can_data_byte[i];
			}


		}
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	080033a4 	.word	0x080033a4
 8002108:	1ffe8850 	.word	0x1ffe8850
 800210c:	1ffe8854 	.word	0x1ffe8854
 8002110:	1ffe8856 	.word	0x1ffe8856
 8002114:	1ffe88d4 	.word	0x1ffe88d4
 8002118:	1ffe88d8 	.word	0x1ffe88d8

0800211c <USB_CAN_printf>:

	void USB_CAN_printf(const char *format, ...)
	{
 800211c:	b40f      	push	{r0, r1, r2, r3}
 800211e:	b580      	push	{r7, lr}
 8002120:	b0c2      	sub	sp, #264	; 0x108
 8002122:	af00      	add	r7, sp, #0
		char outPutString[USBD_VCOM_BUFFSIZE];
		va_list args;
		va_start(args, format);
 8002124:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	601a      	str	r2, [r3, #0]

		vsnprintf(outPutString, USBD_VCOM_BUFFSIZE, format, args);
 800212c:	f107 0208 	add.w	r2, r7, #8
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4610      	mov	r0, r2
 8002134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002138:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f000 f9af 	bl	80024a0 <vsniprintf>
		//result = USBD_VCOM_SendString(S(outPutString));

		va_end(args);
	}
 8002142:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002146:	46bd      	mov	sp, r7
 8002148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800214c:	b004      	add	sp, #16
 800214e:	4770      	bx	lr

08002150 <main>:
int main(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8002156:	f7ff fea3 	bl	8001ea0 <DAVE_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]

  uint8_t can_data[8]={1,2,3,4,5,6,7,8};
 800215e:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <main+0x158>)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	6810      	ldr	r0, [r2, #0]
 8002164:	6851      	ldr	r1, [r2, #4]
 8002166:	c303      	stmia	r3!, {r0, r1}

  if (status != DAVE_STATUS_SUCCESS)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d000      	beq.n	8002170 <main+0x20>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 800216e:	e7fe      	b.n	800216e <main+0x1e>



  while(1U)
  {
	 CanSendMessage(can_data,100,8);
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4618      	mov	r0, r3
 8002174:	2164      	movs	r1, #100	; 0x64
 8002176:	2208      	movs	r2, #8
 8002178:	f7ff fef8 	bl	8001f6c <CanSendMessage>
	 CanNode0_receiveINT();
 800217c:	f7ff ff5c 	bl	8002038 <CanNode0_receiveINT>
	 for(int i=0;i<900000;i++);
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e002      	b.n	800218c <main+0x3c>
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	4a47      	ldr	r2, [pc, #284]	; (80022ac <main+0x15c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	ddf8      	ble.n	8002186 <main+0x36>

		uint8_t Receive_Error = XMC_CAN_NODE_GetReceiveErrorCounter((XMC_CAN_NODE_t *const) &CAN_NODE_0);
 8002194:	4846      	ldr	r0, [pc, #280]	; (80022b0 <main+0x160>)
 8002196:	f7ff fe9f 	bl	8001ed8 <XMC_CAN_NODE_GetReceiveErrorCounter>
 800219a:	4603      	mov	r3, r0
 800219c:	73bb      	strb	r3, [r7, #14]


		CAN_NODE_GetStatus(&CAN_NODE_0);
 800219e:	4844      	ldr	r0, [pc, #272]	; (80022b0 <main+0x160>)
 80021a0:	f7ff fdca 	bl	8001d38 <CAN_NODE_GetStatus>
			USB_CAN_printf("\r \n  \r \n");
 80021a4:	4843      	ldr	r0, [pc, #268]	; (80022b4 <main+0x164>)
 80021a6:	f7ff ffb9 	bl	800211c <USB_CAN_printf>
			for (int i = 32; i >= 0; --i)
 80021aa:	2320      	movs	r3, #32
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	e077      	b.n	80022a0 <main+0x150>
			{
				// Check if the i-th bit is set
				get_data =(get_status & (1 << i));
 80021b0:	2201      	movs	r2, #1
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <main+0x168>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4013      	ands	r3, r2
 80021c0:	4a3e      	ldr	r2, [pc, #248]	; (80022bc <main+0x16c>)
 80021c2:	6013      	str	r3, [r2, #0]
				switch (get_data) {
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <main+0x16c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	d03b      	beq.n	8002244 <main+0xf4>
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d80d      	bhi.n	80021ec <main+0x9c>
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d027      	beq.n	8002224 <main+0xd4>
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d804      	bhi.n	80021e2 <main+0x92>
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d01b      	beq.n	8002214 <main+0xc4>
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d01d      	beq.n	800221c <main+0xcc>
 80021e0:	e050      	b.n	8002284 <main+0x134>
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d026      	beq.n	8002234 <main+0xe4>
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d828      	bhi.n	800223c <main+0xec>
 80021ea:	e01f      	b.n	800222c <main+0xdc>
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d039      	beq.n	8002264 <main+0x114>
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d806      	bhi.n	8002202 <main+0xb2>
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d02d      	beq.n	8002254 <main+0x104>
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d02f      	beq.n	800225c <main+0x10c>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d025      	beq.n	800224c <main+0xfc>
 8002200:	e040      	b.n	8002284 <main+0x134>
 8002202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002206:	d035      	beq.n	8002274 <main+0x124>
 8002208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220c:	d036      	beq.n	800227c <main+0x12c>
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d02c      	beq.n	800226c <main+0x11c>
 8002212:	e037      	b.n	8002284 <main+0x134>

			case (1):
					printf("\r LAST_ERROR_CODE Stuff Error  \r \n");
 8002214:	482a      	ldr	r0, [pc, #168]	; (80022c0 <main+0x170>)
 8002216:	f000 f911 	bl	800243c <puts>
				break;
 800221a:	e033      	b.n	8002284 <main+0x134>
			case (2):
					USB_CAN_printf("\r LAST_ERROR_CODE Form Error  \r \n");
 800221c:	4829      	ldr	r0, [pc, #164]	; (80022c4 <main+0x174>)
 800221e:	f7ff ff7d 	bl	800211c <USB_CAN_printf>
				break;
 8002222:	e02f      	b.n	8002284 <main+0x134>
			case (3):
					USB_CAN_printf("\r LAST_ERROR_CODE Ack Error  \r \n");
 8002224:	4828      	ldr	r0, [pc, #160]	; (80022c8 <main+0x178>)
 8002226:	f7ff ff79 	bl	800211c <USB_CAN_printf>
				break;
 800222a:	e02b      	b.n	8002284 <main+0x134>
			case (4):
					USB_CAN_printf("\r LAST_ERROR_CODE Bit1 Error \r \n");
 800222c:	4827      	ldr	r0, [pc, #156]	; (80022cc <main+0x17c>)
 800222e:	f7ff ff75 	bl	800211c <USB_CAN_printf>
				break;
 8002232:	e027      	b.n	8002284 <main+0x134>
			case (5):
					USB_CAN_printf("\r LAST_ERROR_CODE Bit0 Error \r \n");
 8002234:	4826      	ldr	r0, [pc, #152]	; (80022d0 <main+0x180>)
 8002236:	f7ff ff71 	bl	800211c <USB_CAN_printf>
				break;
 800223a:	e023      	b.n	8002284 <main+0x134>
			case (6):
					USB_CAN_printf("\r LAST_ERROR_CODE CRC Error  \r \n");
 800223c:	4825      	ldr	r0, [pc, #148]	; (80022d4 <main+0x184>)
 800223e:	f7ff ff6d 	bl	800211c <USB_CAN_printf>
				break;
 8002242:	e01f      	b.n	8002284 <main+0x134>
			case (7):
					USB_CAN_printf("\r  CPU write to LEC  \r \n");
 8002244:	4824      	ldr	r0, [pc, #144]	; (80022d8 <main+0x188>)
 8002246:	f7ff ff69 	bl	800211c <USB_CAN_printf>
				break;
 800224a:	e01b      	b.n	8002284 <main+0x134>
			case 8:
					USB_CAN_printf("\r TX OK \r \n ");
 800224c:	4823      	ldr	r0, [pc, #140]	; (80022dc <main+0x18c>)
 800224e:	f7ff ff65 	bl	800211c <USB_CAN_printf>
				break;
 8002252:	e017      	b.n	8002284 <main+0x134>
			case 16:
					USB_CAN_printf("\r RX OK \r \n ");
 8002254:	4822      	ldr	r0, [pc, #136]	; (80022e0 <main+0x190>)
 8002256:	f7ff ff61 	bl	800211c <USB_CAN_printf>
				break;
 800225a:	e013      	b.n	8002284 <main+0x134>
			case 32:
				USB_CAN_printf("\r ALERT WARNING \r \n ");
 800225c:	4821      	ldr	r0, [pc, #132]	; (80022e4 <main+0x194>)
 800225e:	f7ff ff5d 	bl	800211c <USB_CAN_printf>
				break;
 8002262:	e00f      	b.n	8002284 <main+0x134>
			case 64:
				USB_CAN_printf("\r ERROR WARNING\r \n ");
 8002264:	4820      	ldr	r0, [pc, #128]	; (80022e8 <main+0x198>)
 8002266:	f7ff ff59 	bl	800211c <USB_CAN_printf>
				break;
 800226a:	e00b      	b.n	8002284 <main+0x134>
			case 128:
				USB_CAN_printf("\r BUS OFF \r \n ");
 800226c:	481f      	ldr	r0, [pc, #124]	; (80022ec <main+0x19c>)
 800226e:	f7ff ff55 	bl	800211c <USB_CAN_printf>
				break;
 8002272:	e007      	b.n	8002284 <main+0x134>
			case 256:
				USB_CAN_printf("\r LIST_LENGTH_ERROR \r \n ");
 8002274:	481e      	ldr	r0, [pc, #120]	; (80022f0 <main+0x1a0>)
 8002276:	f7ff ff51 	bl	800211c <USB_CAN_printf>
				break;
 800227a:	e003      	b.n	8002284 <main+0x134>
			case 512:
				USB_CAN_printf("\r LIST_OBJECT_ERROR \r \n ");
 800227c:	481d      	ldr	r0, [pc, #116]	; (80022f4 <main+0x1a4>)
 800227e:	f7ff ff4d 	bl	800211c <USB_CAN_printf>
				break;
 8002282:	bf00      	nop
			}
				USB_CAN_printf("\r get status: %d\r \n",get_status);
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <main+0x168>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	481b      	ldr	r0, [pc, #108]	; (80022f8 <main+0x1a8>)
 800228a:	4619      	mov	r1, r3
 800228c:	f7ff ff46 	bl	800211c <USB_CAN_printf>
				USB_CAN_printf("\r Receive Error: %d \r \n",Receive_Error);
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	481a      	ldr	r0, [pc, #104]	; (80022fc <main+0x1ac>)
 8002294:	4619      	mov	r1, r3
 8002296:	f7ff ff41 	bl	800211c <USB_CAN_printf>
		uint8_t Receive_Error = XMC_CAN_NODE_GetReceiveErrorCounter((XMC_CAN_NODE_t *const) &CAN_NODE_0);


		CAN_NODE_GetStatus(&CAN_NODE_0);
			USB_CAN_printf("\r \n  \r \n");
			for (int i = 32; i >= 0; --i)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3b01      	subs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da84      	bge.n	80021b0 <main+0x60>
				break;
			}
				USB_CAN_printf("\r get status: %d\r \n",get_status);
				USB_CAN_printf("\r Receive Error: %d \r \n",Receive_Error);
		}
  }
 80022a6:	e763      	b.n	8002170 <main+0x20>
 80022a8:	0800360c 	.word	0x0800360c
 80022ac:	000dbb9f 	.word	0x000dbb9f
 80022b0:	080033a4 	.word	0x080033a4
 80022b4:	0800344c 	.word	0x0800344c
 80022b8:	1ffe88d0 	.word	0x1ffe88d0
 80022bc:	1ffe88cc 	.word	0x1ffe88cc
 80022c0:	08003458 	.word	0x08003458
 80022c4:	0800347c 	.word	0x0800347c
 80022c8:	080034a0 	.word	0x080034a0
 80022cc:	080034c4 	.word	0x080034c4
 80022d0:	080034e8 	.word	0x080034e8
 80022d4:	0800350c 	.word	0x0800350c
 80022d8:	08003530 	.word	0x08003530
 80022dc:	0800354c 	.word	0x0800354c
 80022e0:	0800355c 	.word	0x0800355c
 80022e4:	0800356c 	.word	0x0800356c
 80022e8:	08003584 	.word	0x08003584
 80022ec:	08003598 	.word	0x08003598
 80022f0:	080035a8 	.word	0x080035a8
 80022f4:	080035c4 	.word	0x080035c4
 80022f8:	080035e0 	.word	0x080035e0
 80022fc:	080035f4 	.word	0x080035f4

08002300 <__errno>:
 8002300:	4b01      	ldr	r3, [pc, #4]	; (8002308 <__errno+0x8>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	1ffe88b8 	.word	0x1ffe88b8

0800230c <__libc_init_array>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <__libc_init_array+0x3c>)
 8002310:	4c0e      	ldr	r4, [pc, #56]	; (800234c <__libc_init_array+0x40>)
 8002312:	1ae4      	subs	r4, r4, r3
 8002314:	10a4      	asrs	r4, r4, #2
 8002316:	2500      	movs	r5, #0
 8002318:	461e      	mov	r6, r3
 800231a:	42a5      	cmp	r5, r4
 800231c:	d004      	beq.n	8002328 <__libc_init_array+0x1c>
 800231e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002322:	4798      	blx	r3
 8002324:	3501      	adds	r5, #1
 8002326:	e7f8      	b.n	800231a <__libc_init_array+0xe>
 8002328:	f7ff fa8a 	bl	8001840 <_init>
 800232c:	4c08      	ldr	r4, [pc, #32]	; (8002350 <__libc_init_array+0x44>)
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <__libc_init_array+0x48>)
 8002330:	1ae4      	subs	r4, r4, r3
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	2500      	movs	r5, #0
 8002336:	461e      	mov	r6, r3
 8002338:	42a5      	cmp	r5, r4
 800233a:	d004      	beq.n	8002346 <__libc_init_array+0x3a>
 800233c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002340:	4798      	blx	r3
 8002342:	3501      	adds	r5, #1
 8002344:	e7f8      	b.n	8002338 <__libc_init_array+0x2c>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	1ffe88bc 	.word	0x1ffe88bc
 800234c:	1ffe88bc 	.word	0x1ffe88bc
 8002350:	1ffe88bc 	.word	0x1ffe88bc
 8002354:	1ffe88bc 	.word	0x1ffe88bc

08002358 <memcpy>:
 8002358:	b510      	push	{r4, lr}
 800235a:	1e43      	subs	r3, r0, #1
 800235c:	440a      	add	r2, r1
 800235e:	4291      	cmp	r1, r2
 8002360:	d004      	beq.n	800236c <memcpy+0x14>
 8002362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800236a:	e7f8      	b.n	800235e <memcpy+0x6>
 800236c:	bd10      	pop	{r4, pc}

0800236e <memset>:
 800236e:	4402      	add	r2, r0
 8002370:	4603      	mov	r3, r0
 8002372:	4293      	cmp	r3, r2
 8002374:	d002      	beq.n	800237c <memset+0xe>
 8002376:	f803 1b01 	strb.w	r1, [r3], #1
 800237a:	e7fa      	b.n	8002372 <memset+0x4>
 800237c:	4770      	bx	lr

0800237e <_puts_r>:
 800237e:	b570      	push	{r4, r5, r6, lr}
 8002380:	460e      	mov	r6, r1
 8002382:	4605      	mov	r5, r0
 8002384:	b118      	cbz	r0, 800238e <_puts_r+0x10>
 8002386:	6983      	ldr	r3, [r0, #24]
 8002388:	b90b      	cbnz	r3, 800238e <_puts_r+0x10>
 800238a:	f000 fa47 	bl	800281c <__sinit>
 800238e:	68ac      	ldr	r4, [r5, #8]
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	0719      	lsls	r1, r3, #28
 8002394:	d501      	bpl.n	800239a <_puts_r+0x1c>
 8002396:	6923      	ldr	r3, [r4, #16]
 8002398:	b983      	cbnz	r3, 80023bc <_puts_r+0x3e>
 800239a:	4628      	mov	r0, r5
 800239c:	4621      	mov	r1, r4
 800239e:	f000 f8e3 	bl	8002568 <__swsetup_r>
 80023a2:	b158      	cbz	r0, 80023bc <_puts_r+0x3e>
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0e      	blt.n	80023cc <_puts_r+0x4e>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	68a3      	ldr	r3, [r4, #8]
 80023be:	f816 2b01 	ldrb.w	r2, [r6], #1
 80023c2:	3b01      	subs	r3, #1
 80023c4:	60a3      	str	r3, [r4, #8]
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d1ef      	bne.n	80023aa <_puts_r+0x2c>
 80023ca:	e016      	b.n	80023fa <_puts_r+0x7c>
 80023cc:	69a2      	ldr	r2, [r4, #24]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	db09      	blt.n	80023e6 <_puts_r+0x68>
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	290a      	cmp	r1, #10
 80023e0:	d1ea      	bne.n	80023b8 <_puts_r+0x3a>
 80023e2:	4628      	mov	r0, r5
 80023e4:	e002      	b.n	80023ec <_puts_r+0x6e>
 80023e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80023ea:	4628      	mov	r0, r5
 80023ec:	4622      	mov	r2, r4
 80023ee:	f000 f867 	bl	80024c0 <__swbuf_r>
 80023f2:	1c42      	adds	r2, r0, #1
 80023f4:	4250      	negs	r0, r2
 80023f6:	4150      	adcs	r0, r2
 80023f8:	e7d3      	b.n	80023a2 <_puts_r+0x24>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	da15      	bge.n	800242a <_puts_r+0xac>
 80023fe:	69a2      	ldr	r2, [r4, #24]
 8002400:	4293      	cmp	r3, r2
 8002402:	db08      	blt.n	8002416 <_puts_r+0x98>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	220a      	movs	r2, #10
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	7819      	ldrb	r1, [r3, #0]
 800240e:	4291      	cmp	r1, r2
 8002410:	d10f      	bne.n	8002432 <_puts_r+0xb4>
 8002412:	4628      	mov	r0, r5
 8002414:	e001      	b.n	800241a <_puts_r+0x9c>
 8002416:	4628      	mov	r0, r5
 8002418:	210a      	movs	r1, #10
 800241a:	4622      	mov	r2, r4
 800241c:	f000 f850 	bl	80024c0 <__swbuf_r>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	4258      	negs	r0, r3
 8002424:	4158      	adcs	r0, r3
 8002426:	b130      	cbz	r0, 8002436 <_puts_r+0xb8>
 8002428:	e7bc      	b.n	80023a4 <_puts_r+0x26>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	220a      	movs	r2, #10
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	200a      	movs	r0, #10
 8002438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800243c <puts>:
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <puts+0xc>)
 800243e:	4601      	mov	r1, r0
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	f7ff bf9c 	b.w	800237e <_puts_r>
 8002446:	bf00      	nop
 8002448:	1ffe88b8 	.word	0x1ffe88b8

0800244c <_vsniprintf_r>:
 800244c:	b530      	push	{r4, r5, lr}
 800244e:	1e14      	subs	r4, r2, #0
 8002450:	b09b      	sub	sp, #108	; 0x6c
 8002452:	4605      	mov	r5, r0
 8002454:	da04      	bge.n	8002460 <_vsniprintf_r+0x14>
 8002456:	238b      	movs	r3, #139	; 0x8b
 8002458:	6003      	str	r3, [r0, #0]
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
 800245e:	e01c      	b.n	800249a <_vsniprintf_r+0x4e>
 8002460:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002464:	f8ad 200c 	strh.w	r2, [sp, #12]
 8002468:	bf14      	ite	ne
 800246a:	f104 32ff 	addne.w	r2, r4, #4294967295
 800246e:	4622      	moveq	r2, r4
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	9205      	str	r2, [sp, #20]
 8002474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002478:	9100      	str	r1, [sp, #0]
 800247a:	9104      	str	r1, [sp, #16]
 800247c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8002480:	4669      	mov	r1, sp
 8002482:	461a      	mov	r2, r3
 8002484:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002486:	f000 fb93 	bl	8002bb0 <_svfiprintf_r>
 800248a:	1c43      	adds	r3, r0, #1
 800248c:	bfbc      	itt	lt
 800248e:	238b      	movlt	r3, #139	; 0x8b
 8002490:	602b      	strlt	r3, [r5, #0]
 8002492:	b114      	cbz	r4, 800249a <_vsniprintf_r+0x4e>
 8002494:	9b00      	ldr	r3, [sp, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	b01b      	add	sp, #108	; 0x6c
 800249c:	bd30      	pop	{r4, r5, pc}
	...

080024a0 <vsniprintf>:
 80024a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <vsniprintf+0x1c>)
 80024a6:	4606      	mov	r6, r0
 80024a8:	460d      	mov	r5, r1
 80024aa:	4614      	mov	r4, r2
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	4631      	mov	r1, r6
 80024b0:	462a      	mov	r2, r5
 80024b2:	4623      	mov	r3, r4
 80024b4:	f7ff ffca 	bl	800244c <_vsniprintf_r>
 80024b8:	b002      	add	sp, #8
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	1ffe88b8 	.word	0x1ffe88b8

080024c0 <__swbuf_r>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	460d      	mov	r5, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	4606      	mov	r6, r0
 80024c8:	b118      	cbz	r0, 80024d2 <__swbuf_r+0x12>
 80024ca:	6983      	ldr	r3, [r0, #24]
 80024cc:	b90b      	cbnz	r3, 80024d2 <__swbuf_r+0x12>
 80024ce:	f000 f9a5 	bl	800281c <__sinit>
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <__swbuf_r+0x9c>)
 80024d4:	429c      	cmp	r4, r3
 80024d6:	d101      	bne.n	80024dc <__swbuf_r+0x1c>
 80024d8:	6874      	ldr	r4, [r6, #4]
 80024da:	e008      	b.n	80024ee <__swbuf_r+0x2e>
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <__swbuf_r+0xa0>)
 80024de:	429c      	cmp	r4, r3
 80024e0:	d101      	bne.n	80024e6 <__swbuf_r+0x26>
 80024e2:	68b4      	ldr	r4, [r6, #8]
 80024e4:	e003      	b.n	80024ee <__swbuf_r+0x2e>
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <__swbuf_r+0xa4>)
 80024e8:	429c      	cmp	r4, r3
 80024ea:	bf08      	it	eq
 80024ec:	68f4      	ldreq	r4, [r6, #12]
 80024ee:	69a3      	ldr	r3, [r4, #24]
 80024f0:	60a3      	str	r3, [r4, #8]
 80024f2:	89a3      	ldrh	r3, [r4, #12]
 80024f4:	071a      	lsls	r2, r3, #28
 80024f6:	d509      	bpl.n	800250c <__swbuf_r+0x4c>
 80024f8:	6923      	ldr	r3, [r4, #16]
 80024fa:	b13b      	cbz	r3, 800250c <__swbuf_r+0x4c>
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	6920      	ldr	r0, [r4, #16]
 8002500:	1a18      	subs	r0, r3, r0
 8002502:	6963      	ldr	r3, [r4, #20]
 8002504:	4298      	cmp	r0, r3
 8002506:	b2ed      	uxtb	r5, r5
 8002508:	db0f      	blt.n	800252a <__swbuf_r+0x6a>
 800250a:	e008      	b.n	800251e <__swbuf_r+0x5e>
 800250c:	4630      	mov	r0, r6
 800250e:	4621      	mov	r1, r4
 8002510:	f000 f82a 	bl	8002568 <__swsetup_r>
 8002514:	2800      	cmp	r0, #0
 8002516:	d0f1      	beq.n	80024fc <__swbuf_r+0x3c>
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	bd70      	pop	{r4, r5, r6, pc}
 800251e:	4630      	mov	r0, r6
 8002520:	4621      	mov	r1, r4
 8002522:	f000 f911 	bl	8002748 <_fflush_r>
 8002526:	2800      	cmp	r0, #0
 8002528:	d1f6      	bne.n	8002518 <__swbuf_r+0x58>
 800252a:	68a3      	ldr	r3, [r4, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60a3      	str	r3, [r4, #8]
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	6022      	str	r2, [r4, #0]
 8002536:	701d      	strb	r5, [r3, #0]
 8002538:	6963      	ldr	r3, [r4, #20]
 800253a:	3001      	adds	r0, #1
 800253c:	4298      	cmp	r0, r3
 800253e:	d004      	beq.n	800254a <__swbuf_r+0x8a>
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	07db      	lsls	r3, r3, #31
 8002544:	d507      	bpl.n	8002556 <__swbuf_r+0x96>
 8002546:	2d0a      	cmp	r5, #10
 8002548:	d105      	bne.n	8002556 <__swbuf_r+0x96>
 800254a:	4630      	mov	r0, r6
 800254c:	4621      	mov	r1, r4
 800254e:	f000 f8fb 	bl	8002748 <_fflush_r>
 8002552:	2800      	cmp	r0, #0
 8002554:	d1e0      	bne.n	8002518 <__swbuf_r+0x58>
 8002556:	4628      	mov	r0, r5
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	bf00      	nop
 800255c:	0800361c 	.word	0x0800361c
 8002560:	0800363c 	.word	0x0800363c
 8002564:	0800365c 	.word	0x0800365c

08002568 <__swsetup_r>:
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <__swsetup_r+0xc8>)
 800256a:	b570      	push	{r4, r5, r6, lr}
 800256c:	681d      	ldr	r5, [r3, #0]
 800256e:	4606      	mov	r6, r0
 8002570:	460c      	mov	r4, r1
 8002572:	b125      	cbz	r5, 800257e <__swsetup_r+0x16>
 8002574:	69ab      	ldr	r3, [r5, #24]
 8002576:	b913      	cbnz	r3, 800257e <__swsetup_r+0x16>
 8002578:	4628      	mov	r0, r5
 800257a:	f000 f94f 	bl	800281c <__sinit>
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <__swsetup_r+0xcc>)
 8002580:	429c      	cmp	r4, r3
 8002582:	d101      	bne.n	8002588 <__swsetup_r+0x20>
 8002584:	686c      	ldr	r4, [r5, #4]
 8002586:	e008      	b.n	800259a <__swsetup_r+0x32>
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <__swsetup_r+0xd0>)
 800258a:	429c      	cmp	r4, r3
 800258c:	d101      	bne.n	8002592 <__swsetup_r+0x2a>
 800258e:	68ac      	ldr	r4, [r5, #8]
 8002590:	e003      	b.n	800259a <__swsetup_r+0x32>
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <__swsetup_r+0xd4>)
 8002594:	429c      	cmp	r4, r3
 8002596:	bf08      	it	eq
 8002598:	68ec      	ldreq	r4, [r5, #12]
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	b29a      	uxth	r2, r3
 800259e:	0711      	lsls	r1, r2, #28
 80025a0:	d41d      	bmi.n	80025de <__swsetup_r+0x76>
 80025a2:	06d5      	lsls	r5, r2, #27
 80025a4:	d402      	bmi.n	80025ac <__swsetup_r+0x44>
 80025a6:	2209      	movs	r2, #9
 80025a8:	6032      	str	r2, [r6, #0]
 80025aa:	e038      	b.n	800261e <__swsetup_r+0xb6>
 80025ac:	0750      	lsls	r0, r2, #29
 80025ae:	d512      	bpl.n	80025d6 <__swsetup_r+0x6e>
 80025b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025b2:	b141      	cbz	r1, 80025c6 <__swsetup_r+0x5e>
 80025b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025b8:	4299      	cmp	r1, r3
 80025ba:	d002      	beq.n	80025c2 <__swsetup_r+0x5a>
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fa03 	bl	80029c8 <_free_r>
 80025c2:	2300      	movs	r3, #0
 80025c4:	6363      	str	r3, [r4, #52]	; 0x34
 80025c6:	89a3      	ldrh	r3, [r4, #12]
 80025c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025cc:	81a3      	strh	r3, [r4, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	6063      	str	r3, [r4, #4]
 80025d2:	6923      	ldr	r3, [r4, #16]
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	81a3      	strh	r3, [r4, #12]
 80025de:	6923      	ldr	r3, [r4, #16]
 80025e0:	b94b      	cbnz	r3, 80025f6 <__swsetup_r+0x8e>
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d003      	beq.n	80025f6 <__swsetup_r+0x8e>
 80025ee:	4630      	mov	r0, r6
 80025f0:	4621      	mov	r1, r4
 80025f2:	f000 f99b 	bl	800292c <__smakebuf_r>
 80025f6:	89a3      	ldrh	r3, [r4, #12]
 80025f8:	f013 0201 	ands.w	r2, r3, #1
 80025fc:	d005      	beq.n	800260a <__swsetup_r+0xa2>
 80025fe:	2200      	movs	r2, #0
 8002600:	60a2      	str	r2, [r4, #8]
 8002602:	6962      	ldr	r2, [r4, #20]
 8002604:	4252      	negs	r2, r2
 8002606:	61a2      	str	r2, [r4, #24]
 8002608:	e003      	b.n	8002612 <__swsetup_r+0xaa>
 800260a:	0799      	lsls	r1, r3, #30
 800260c:	bf58      	it	pl
 800260e:	6962      	ldrpl	r2, [r4, #20]
 8002610:	60a2      	str	r2, [r4, #8]
 8002612:	6922      	ldr	r2, [r4, #16]
 8002614:	b94a      	cbnz	r2, 800262a <__swsetup_r+0xc2>
 8002616:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800261a:	b280      	uxth	r0, r0
 800261c:	b130      	cbz	r0, 800262c <__swsetup_r+0xc4>
 800261e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002622:	81a3      	strh	r3, [r4, #12]
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	bd70      	pop	{r4, r5, r6, pc}
 800262a:	2000      	movs	r0, #0
 800262c:	bd70      	pop	{r4, r5, r6, pc}
 800262e:	bf00      	nop
 8002630:	1ffe88b8 	.word	0x1ffe88b8
 8002634:	0800361c 	.word	0x0800361c
 8002638:	0800363c 	.word	0x0800363c
 800263c:	0800365c 	.word	0x0800365c

08002640 <__sflush_r>:
 8002640:	898a      	ldrh	r2, [r1, #12]
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	4605      	mov	r5, r0
 8002648:	0710      	lsls	r0, r2, #28
 800264a:	460c      	mov	r4, r1
 800264c:	d457      	bmi.n	80026fe <__sflush_r+0xbe>
 800264e:	684b      	ldr	r3, [r1, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	dc02      	bgt.n	800265a <__sflush_r+0x1a>
 8002654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	dd18      	ble.n	800268c <__sflush_r+0x4c>
 800265a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800265c:	b1b6      	cbz	r6, 800268c <__sflush_r+0x4c>
 800265e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002662:	2300      	movs	r3, #0
 8002664:	b292      	uxth	r2, r2
 8002666:	682f      	ldr	r7, [r5, #0]
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	b10a      	cbz	r2, 8002670 <__sflush_r+0x30>
 800266c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800266e:	e010      	b.n	8002692 <__sflush_r+0x52>
 8002670:	6a21      	ldr	r1, [r4, #32]
 8002672:	4628      	mov	r0, r5
 8002674:	2301      	movs	r3, #1
 8002676:	47b0      	blx	r6
 8002678:	1c41      	adds	r1, r0, #1
 800267a:	4602      	mov	r2, r0
 800267c:	d109      	bne.n	8002692 <__sflush_r+0x52>
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	b13b      	cbz	r3, 8002692 <__sflush_r+0x52>
 8002682:	2b1d      	cmp	r3, #29
 8002684:	d001      	beq.n	800268a <__sflush_r+0x4a>
 8002686:	2b16      	cmp	r3, #22
 8002688:	d147      	bne.n	800271a <__sflush_r+0xda>
 800268a:	602f      	str	r7, [r5, #0]
 800268c:	2000      	movs	r0, #0
 800268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	075b      	lsls	r3, r3, #29
 8002696:	d505      	bpl.n	80026a4 <__sflush_r+0x64>
 8002698:	6863      	ldr	r3, [r4, #4]
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800269e:	b10b      	cbz	r3, 80026a4 <__sflush_r+0x64>
 80026a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026a6:	6a21      	ldr	r1, [r4, #32]
 80026a8:	2300      	movs	r3, #0
 80026aa:	4628      	mov	r0, r5
 80026ac:	47b0      	blx	r6
 80026ae:	1c46      	adds	r6, r0, #1
 80026b0:	89a3      	ldrh	r3, [r4, #12]
 80026b2:	d105      	bne.n	80026c0 <__sflush_r+0x80>
 80026b4:	682a      	ldr	r2, [r5, #0]
 80026b6:	b11a      	cbz	r2, 80026c0 <__sflush_r+0x80>
 80026b8:	2a1d      	cmp	r2, #29
 80026ba:	d001      	beq.n	80026c0 <__sflush_r+0x80>
 80026bc:	2a16      	cmp	r2, #22
 80026be:	d119      	bne.n	80026f4 <__sflush_r+0xb4>
 80026c0:	2200      	movs	r2, #0
 80026c2:	6062      	str	r2, [r4, #4]
 80026c4:	04d9      	lsls	r1, r3, #19
 80026c6:	6922      	ldr	r2, [r4, #16]
 80026c8:	6022      	str	r2, [r4, #0]
 80026ca:	d504      	bpl.n	80026d6 <__sflush_r+0x96>
 80026cc:	1c42      	adds	r2, r0, #1
 80026ce:	d101      	bne.n	80026d4 <__sflush_r+0x94>
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	b903      	cbnz	r3, 80026d6 <__sflush_r+0x96>
 80026d4:	6560      	str	r0, [r4, #84]	; 0x54
 80026d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026d8:	602f      	str	r7, [r5, #0]
 80026da:	2900      	cmp	r1, #0
 80026dc:	d0d6      	beq.n	800268c <__sflush_r+0x4c>
 80026de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026e2:	4299      	cmp	r1, r3
 80026e4:	d002      	beq.n	80026ec <__sflush_r+0xac>
 80026e6:	4628      	mov	r0, r5
 80026e8:	f000 f96e 	bl	80029c8 <_free_r>
 80026ec:	2000      	movs	r0, #0
 80026ee:	6360      	str	r0, [r4, #52]	; 0x34
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f8:	81a3      	strh	r3, [r4, #12]
 80026fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fe:	690f      	ldr	r7, [r1, #16]
 8002700:	2f00      	cmp	r7, #0
 8002702:	d0c3      	beq.n	800268c <__sflush_r+0x4c>
 8002704:	0793      	lsls	r3, r2, #30
 8002706:	680e      	ldr	r6, [r1, #0]
 8002708:	bf08      	it	eq
 800270a:	694b      	ldreq	r3, [r1, #20]
 800270c:	600f      	str	r7, [r1, #0]
 800270e:	bf18      	it	ne
 8002710:	2300      	movne	r3, #0
 8002712:	ebc7 0806 	rsb	r8, r7, r6
 8002716:	608b      	str	r3, [r1, #8]
 8002718:	e012      	b.n	8002740 <__sflush_r+0x100>
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	81a3      	strh	r3, [r4, #12]
 8002722:	f04f 30ff 	mov.w	r0, #4294967295
 8002726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800272a:	4628      	mov	r0, r5
 800272c:	6a21      	ldr	r1, [r4, #32]
 800272e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002730:	463a      	mov	r2, r7
 8002732:	4643      	mov	r3, r8
 8002734:	47b0      	blx	r6
 8002736:	2800      	cmp	r0, #0
 8002738:	ddef      	ble.n	800271a <__sflush_r+0xda>
 800273a:	4407      	add	r7, r0
 800273c:	ebc0 0808 	rsb	r8, r0, r8
 8002740:	f1b8 0f00 	cmp.w	r8, #0
 8002744:	dcf1      	bgt.n	800272a <__sflush_r+0xea>
 8002746:	e7a1      	b.n	800268c <__sflush_r+0x4c>

08002748 <_fflush_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	690b      	ldr	r3, [r1, #16]
 800274c:	4605      	mov	r5, r0
 800274e:	460c      	mov	r4, r1
 8002750:	b1db      	cbz	r3, 800278a <_fflush_r+0x42>
 8002752:	b118      	cbz	r0, 800275c <_fflush_r+0x14>
 8002754:	6983      	ldr	r3, [r0, #24]
 8002756:	b90b      	cbnz	r3, 800275c <_fflush_r+0x14>
 8002758:	f000 f860 	bl	800281c <__sinit>
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <_fflush_r+0x48>)
 800275e:	429c      	cmp	r4, r3
 8002760:	d101      	bne.n	8002766 <_fflush_r+0x1e>
 8002762:	686c      	ldr	r4, [r5, #4]
 8002764:	e008      	b.n	8002778 <_fflush_r+0x30>
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <_fflush_r+0x4c>)
 8002768:	429c      	cmp	r4, r3
 800276a:	d101      	bne.n	8002770 <_fflush_r+0x28>
 800276c:	68ac      	ldr	r4, [r5, #8]
 800276e:	e003      	b.n	8002778 <_fflush_r+0x30>
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <_fflush_r+0x50>)
 8002772:	429c      	cmp	r4, r3
 8002774:	bf08      	it	eq
 8002776:	68ec      	ldreq	r4, [r5, #12]
 8002778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800277c:	b12b      	cbz	r3, 800278a <_fflush_r+0x42>
 800277e:	4628      	mov	r0, r5
 8002780:	4621      	mov	r1, r4
 8002782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002786:	f7ff bf5b 	b.w	8002640 <__sflush_r>
 800278a:	2000      	movs	r0, #0
 800278c:	bd38      	pop	{r3, r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	0800361c 	.word	0x0800361c
 8002794:	0800363c 	.word	0x0800363c
 8002798:	0800365c 	.word	0x0800365c

0800279c <_cleanup_r>:
 800279c:	4901      	ldr	r1, [pc, #4]	; (80027a4 <_cleanup_r+0x8>)
 800279e:	f000 b8a7 	b.w	80028f0 <_fwalk_reent>
 80027a2:	bf00      	nop
 80027a4:	08002749 	.word	0x08002749

080027a8 <std.isra.0>:
 80027a8:	2300      	movs	r3, #0
 80027aa:	b510      	push	{r4, lr}
 80027ac:	4604      	mov	r4, r0
 80027ae:	6003      	str	r3, [r0, #0]
 80027b0:	6043      	str	r3, [r0, #4]
 80027b2:	6083      	str	r3, [r0, #8]
 80027b4:	8181      	strh	r1, [r0, #12]
 80027b6:	6643      	str	r3, [r0, #100]	; 0x64
 80027b8:	81c2      	strh	r2, [r0, #14]
 80027ba:	6103      	str	r3, [r0, #16]
 80027bc:	6143      	str	r3, [r0, #20]
 80027be:	6183      	str	r3, [r0, #24]
 80027c0:	4619      	mov	r1, r3
 80027c2:	305c      	adds	r0, #92	; 0x5c
 80027c4:	2208      	movs	r2, #8
 80027c6:	f7ff fdd2 	bl	800236e <memset>
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <std.isra.0+0x38>)
 80027cc:	6263      	str	r3, [r4, #36]	; 0x24
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <std.isra.0+0x3c>)
 80027d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <std.isra.0+0x40>)
 80027d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <std.isra.0+0x44>)
 80027d8:	6224      	str	r4, [r4, #32]
 80027da:	6323      	str	r3, [r4, #48]	; 0x30
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	bf00      	nop
 80027e0:	080030d5 	.word	0x080030d5
 80027e4:	080030f7 	.word	0x080030f7
 80027e8:	0800312f 	.word	0x0800312f
 80027ec:	08003153 	.word	0x08003153

080027f0 <__sfmoreglue>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	2368      	movs	r3, #104	; 0x68
 80027f4:	1e4d      	subs	r5, r1, #1
 80027f6:	435d      	muls	r5, r3
 80027f8:	460e      	mov	r6, r1
 80027fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027fe:	f000 f927 	bl	8002a50 <_malloc_r>
 8002802:	4604      	mov	r4, r0
 8002804:	b140      	cbz	r0, 8002818 <__sfmoreglue+0x28>
 8002806:	2100      	movs	r1, #0
 8002808:	e880 0042 	stmia.w	r0, {r1, r6}
 800280c:	300c      	adds	r0, #12
 800280e:	60a0      	str	r0, [r4, #8]
 8002810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002814:	f7ff fdab 	bl	800236e <memset>
 8002818:	4620      	mov	r0, r4
 800281a:	bd70      	pop	{r4, r5, r6, pc}

0800281c <__sinit>:
 800281c:	6983      	ldr	r3, [r0, #24]
 800281e:	b510      	push	{r4, lr}
 8002820:	4604      	mov	r4, r0
 8002822:	bb33      	cbnz	r3, 8002872 <__sinit+0x56>
 8002824:	6483      	str	r3, [r0, #72]	; 0x48
 8002826:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002828:	6503      	str	r3, [r0, #80]	; 0x50
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <__sinit+0x58>)
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <__sinit+0x5c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6282      	str	r2, [r0, #40]	; 0x28
 8002832:	4298      	cmp	r0, r3
 8002834:	bf04      	itt	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	6183      	streq	r3, [r0, #24]
 800283a:	f000 f81f 	bl	800287c <__sfp>
 800283e:	6060      	str	r0, [r4, #4]
 8002840:	4620      	mov	r0, r4
 8002842:	f000 f81b 	bl	800287c <__sfp>
 8002846:	60a0      	str	r0, [r4, #8]
 8002848:	4620      	mov	r0, r4
 800284a:	f000 f817 	bl	800287c <__sfp>
 800284e:	2104      	movs	r1, #4
 8002850:	60e0      	str	r0, [r4, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	6860      	ldr	r0, [r4, #4]
 8002856:	f7ff ffa7 	bl	80027a8 <std.isra.0>
 800285a:	68a0      	ldr	r0, [r4, #8]
 800285c:	2109      	movs	r1, #9
 800285e:	2201      	movs	r2, #1
 8002860:	f7ff ffa2 	bl	80027a8 <std.isra.0>
 8002864:	68e0      	ldr	r0, [r4, #12]
 8002866:	2112      	movs	r1, #18
 8002868:	2202      	movs	r2, #2
 800286a:	f7ff ff9d 	bl	80027a8 <std.isra.0>
 800286e:	2301      	movs	r3, #1
 8002870:	61a3      	str	r3, [r4, #24]
 8002872:	bd10      	pop	{r4, pc}
 8002874:	08003618 	.word	0x08003618
 8002878:	0800279d 	.word	0x0800279d

0800287c <__sfp>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <__sfp+0x70>)
 8002880:	681e      	ldr	r6, [r3, #0]
 8002882:	69b3      	ldr	r3, [r6, #24]
 8002884:	4607      	mov	r7, r0
 8002886:	b913      	cbnz	r3, 800288e <__sfp+0x12>
 8002888:	4630      	mov	r0, r6
 800288a:	f7ff ffc7 	bl	800281c <__sinit>
 800288e:	3648      	adds	r6, #72	; 0x48
 8002890:	68b4      	ldr	r4, [r6, #8]
 8002892:	6873      	ldr	r3, [r6, #4]
 8002894:	3b01      	subs	r3, #1
 8002896:	d404      	bmi.n	80028a2 <__sfp+0x26>
 8002898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800289c:	b175      	cbz	r5, 80028bc <__sfp+0x40>
 800289e:	3468      	adds	r4, #104	; 0x68
 80028a0:	e7f8      	b.n	8002894 <__sfp+0x18>
 80028a2:	6833      	ldr	r3, [r6, #0]
 80028a4:	b92b      	cbnz	r3, 80028b2 <__sfp+0x36>
 80028a6:	4638      	mov	r0, r7
 80028a8:	2104      	movs	r1, #4
 80028aa:	f7ff ffa1 	bl	80027f0 <__sfmoreglue>
 80028ae:	6030      	str	r0, [r6, #0]
 80028b0:	b108      	cbz	r0, 80028b6 <__sfp+0x3a>
 80028b2:	6836      	ldr	r6, [r6, #0]
 80028b4:	e7ec      	b.n	8002890 <__sfp+0x14>
 80028b6:	230c      	movs	r3, #12
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c0:	81e3      	strh	r3, [r4, #14]
 80028c2:	2301      	movs	r3, #1
 80028c4:	81a3      	strh	r3, [r4, #12]
 80028c6:	6665      	str	r5, [r4, #100]	; 0x64
 80028c8:	6025      	str	r5, [r4, #0]
 80028ca:	60a5      	str	r5, [r4, #8]
 80028cc:	6065      	str	r5, [r4, #4]
 80028ce:	6125      	str	r5, [r4, #16]
 80028d0:	6165      	str	r5, [r4, #20]
 80028d2:	61a5      	str	r5, [r4, #24]
 80028d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028d8:	4629      	mov	r1, r5
 80028da:	2208      	movs	r2, #8
 80028dc:	f7ff fd47 	bl	800236e <memset>
 80028e0:	6365      	str	r5, [r4, #52]	; 0x34
 80028e2:	63a5      	str	r5, [r4, #56]	; 0x38
 80028e4:	64a5      	str	r5, [r4, #72]	; 0x48
 80028e6:	64e5      	str	r5, [r4, #76]	; 0x4c
 80028e8:	4620      	mov	r0, r4
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ec:	08003618 	.word	0x08003618

080028f0 <_fwalk_reent>:
 80028f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028fc:	2600      	movs	r6, #0
 80028fe:	b194      	cbz	r4, 8002926 <_fwalk_reent+0x36>
 8002900:	68a5      	ldr	r5, [r4, #8]
 8002902:	6867      	ldr	r7, [r4, #4]
 8002904:	3f01      	subs	r7, #1
 8002906:	d40c      	bmi.n	8002922 <_fwalk_reent+0x32>
 8002908:	89ab      	ldrh	r3, [r5, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d907      	bls.n	800291e <_fwalk_reent+0x2e>
 800290e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002912:	3301      	adds	r3, #1
 8002914:	d003      	beq.n	800291e <_fwalk_reent+0x2e>
 8002916:	4640      	mov	r0, r8
 8002918:	4629      	mov	r1, r5
 800291a:	47c8      	blx	r9
 800291c:	4306      	orrs	r6, r0
 800291e:	3568      	adds	r5, #104	; 0x68
 8002920:	e7f0      	b.n	8002904 <_fwalk_reent+0x14>
 8002922:	6824      	ldr	r4, [r4, #0]
 8002924:	e7eb      	b.n	80028fe <_fwalk_reent+0xe>
 8002926:	4630      	mov	r0, r6
 8002928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800292c <__smakebuf_r>:
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	898b      	ldrh	r3, [r1, #12]
 8002930:	079d      	lsls	r5, r3, #30
 8002932:	b091      	sub	sp, #68	; 0x44
 8002934:	4606      	mov	r6, r0
 8002936:	460c      	mov	r4, r1
 8002938:	d426      	bmi.n	8002988 <__smakebuf_r+0x5c>
 800293a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800293e:	2900      	cmp	r1, #0
 8002940:	da09      	bge.n	8002956 <__smakebuf_r+0x2a>
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002948:	f04f 0500 	mov.w	r5, #0
 800294c:	bf14      	ite	ne
 800294e:	2740      	movne	r7, #64	; 0x40
 8002950:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8002954:	e00d      	b.n	8002972 <__smakebuf_r+0x46>
 8002956:	aa01      	add	r2, sp, #4
 8002958:	f000 fc22 	bl	80031a0 <_fstat_r>
 800295c:	2800      	cmp	r0, #0
 800295e:	dbf0      	blt.n	8002942 <__smakebuf_r+0x16>
 8002960:	9d02      	ldr	r5, [sp, #8]
 8002962:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8002966:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 800296a:	424d      	negs	r5, r1
 800296c:	414d      	adcs	r5, r1
 800296e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002972:	4630      	mov	r0, r6
 8002974:	4639      	mov	r1, r7
 8002976:	f000 f86b 	bl	8002a50 <_malloc_r>
 800297a:	b960      	cbnz	r0, 8002996 <__smakebuf_r+0x6a>
 800297c:	89a3      	ldrh	r3, [r4, #12]
 800297e:	059a      	lsls	r2, r3, #22
 8002980:	d41d      	bmi.n	80029be <__smakebuf_r+0x92>
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	81a3      	strh	r3, [r4, #12]
 8002988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	6123      	str	r3, [r4, #16]
 8002990:	2301      	movs	r3, #1
 8002992:	6163      	str	r3, [r4, #20]
 8002994:	e013      	b.n	80029be <__smakebuf_r+0x92>
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <__smakebuf_r+0x98>)
 8002998:	62b3      	str	r3, [r6, #40]	; 0x28
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	6020      	str	r0, [r4, #0]
 800299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a2:	81a3      	strh	r3, [r4, #12]
 80029a4:	6120      	str	r0, [r4, #16]
 80029a6:	6167      	str	r7, [r4, #20]
 80029a8:	b14d      	cbz	r5, 80029be <__smakebuf_r+0x92>
 80029aa:	4630      	mov	r0, r6
 80029ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029b0:	f000 fc08 	bl	80031c4 <_isatty_r>
 80029b4:	b118      	cbz	r0, 80029be <__smakebuf_r+0x92>
 80029b6:	89a3      	ldrh	r3, [r4, #12]
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	81a3      	strh	r3, [r4, #12]
 80029be:	b011      	add	sp, #68	; 0x44
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c2:	bf00      	nop
 80029c4:	0800279d 	.word	0x0800279d

080029c8 <_free_r>:
 80029c8:	b530      	push	{r4, r5, lr}
 80029ca:	2900      	cmp	r1, #0
 80029cc:	d03d      	beq.n	8002a4a <_free_r+0x82>
 80029ce:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80029d2:	1f0b      	subs	r3, r1, #4
 80029d4:	491d      	ldr	r1, [pc, #116]	; (8002a4c <_free_r+0x84>)
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	bfb8      	it	lt
 80029da:	189b      	addlt	r3, r3, r2
 80029dc:	680a      	ldr	r2, [r1, #0]
 80029de:	460c      	mov	r4, r1
 80029e0:	b912      	cbnz	r2, 80029e8 <_free_r+0x20>
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	600b      	str	r3, [r1, #0]
 80029e6:	bd30      	pop	{r4, r5, pc}
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d20d      	bcs.n	8002a08 <_free_r+0x40>
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	1858      	adds	r0, r3, r1
 80029f0:	4290      	cmp	r0, r2
 80029f2:	bf01      	itttt	eq
 80029f4:	585a      	ldreq	r2, [r3, r1]
 80029f6:	1852      	addeq	r2, r2, r1
 80029f8:	601a      	streq	r2, [r3, #0]
 80029fa:	6842      	ldreq	r2, [r0, #4]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	6023      	str	r3, [r4, #0]
 8002a00:	bd30      	pop	{r4, r5, pc}
 8002a02:	4299      	cmp	r1, r3
 8002a04:	d803      	bhi.n	8002a0e <_free_r+0x46>
 8002a06:	460a      	mov	r2, r1
 8002a08:	6851      	ldr	r1, [r2, #4]
 8002a0a:	2900      	cmp	r1, #0
 8002a0c:	d1f9      	bne.n	8002a02 <_free_r+0x3a>
 8002a0e:	6814      	ldr	r4, [r2, #0]
 8002a10:	1915      	adds	r5, r2, r4
 8002a12:	429d      	cmp	r5, r3
 8002a14:	d10a      	bne.n	8002a2c <_free_r+0x64>
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4423      	add	r3, r4
 8002a1a:	18d0      	adds	r0, r2, r3
 8002a1c:	4288      	cmp	r0, r1
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	d113      	bne.n	8002a4a <_free_r+0x82>
 8002a22:	6808      	ldr	r0, [r1, #0]
 8002a24:	4403      	add	r3, r0
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	684b      	ldr	r3, [r1, #4]
 8002a2a:	e00d      	b.n	8002a48 <_free_r+0x80>
 8002a2c:	d902      	bls.n	8002a34 <_free_r+0x6c>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	6003      	str	r3, [r0, #0]
 8002a32:	bd30      	pop	{r4, r5, pc}
 8002a34:	681c      	ldr	r4, [r3, #0]
 8002a36:	1918      	adds	r0, r3, r4
 8002a38:	4288      	cmp	r0, r1
 8002a3a:	bf04      	itt	eq
 8002a3c:	6808      	ldreq	r0, [r1, #0]
 8002a3e:	6849      	ldreq	r1, [r1, #4]
 8002a40:	6059      	str	r1, [r3, #4]
 8002a42:	bf04      	itt	eq
 8002a44:	1900      	addeq	r0, r0, r4
 8002a46:	6018      	streq	r0, [r3, #0]
 8002a48:	6053      	str	r3, [r2, #4]
 8002a4a:	bd30      	pop	{r4, r5, pc}
 8002a4c:	1ffe88c8 	.word	0x1ffe88c8

08002a50 <_malloc_r>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	1ccc      	adds	r4, r1, #3
 8002a54:	f024 0403 	bic.w	r4, r4, #3
 8002a58:	3408      	adds	r4, #8
 8002a5a:	2c0c      	cmp	r4, #12
 8002a5c:	bf38      	it	cc
 8002a5e:	240c      	movcc	r4, #12
 8002a60:	2c00      	cmp	r4, #0
 8002a62:	4606      	mov	r6, r0
 8002a64:	da03      	bge.n	8002a6e <_malloc_r+0x1e>
 8002a66:	230c      	movs	r3, #12
 8002a68:	6033      	str	r3, [r6, #0]
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	428c      	cmp	r4, r1
 8002a70:	d3f9      	bcc.n	8002a66 <_malloc_r+0x16>
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <_malloc_r+0xa4>)
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	b1a1      	cbz	r1, 8002aa6 <_malloc_r+0x56>
 8002a7c:	680a      	ldr	r2, [r1, #0]
 8002a7e:	1b12      	subs	r2, r2, r4
 8002a80:	d40e      	bmi.n	8002aa0 <_malloc_r+0x50>
 8002a82:	2a0b      	cmp	r2, #11
 8002a84:	d903      	bls.n	8002a8e <_malloc_r+0x3e>
 8002a86:	600a      	str	r2, [r1, #0]
 8002a88:	188b      	adds	r3, r1, r2
 8002a8a:	508c      	str	r4, [r1, r2]
 8002a8c:	e01f      	b.n	8002ace <_malloc_r+0x7e>
 8002a8e:	428b      	cmp	r3, r1
 8002a90:	bf0d      	iteet	eq
 8002a92:	685a      	ldreq	r2, [r3, #4]
 8002a94:	684a      	ldrne	r2, [r1, #4]
 8002a96:	605a      	strne	r2, [r3, #4]
 8002a98:	6002      	streq	r2, [r0, #0]
 8002a9a:	bf18      	it	ne
 8002a9c:	460b      	movne	r3, r1
 8002a9e:	e016      	b.n	8002ace <_malloc_r+0x7e>
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	6849      	ldr	r1, [r1, #4]
 8002aa4:	e7e9      	b.n	8002a7a <_malloc_r+0x2a>
 8002aa6:	4d14      	ldr	r5, [pc, #80]	; (8002af8 <_malloc_r+0xa8>)
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	b91b      	cbnz	r3, 8002ab4 <_malloc_r+0x64>
 8002aac:	4630      	mov	r0, r6
 8002aae:	f000 fb01 	bl	80030b4 <_sbrk_r>
 8002ab2:	6028      	str	r0, [r5, #0]
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	f000 fafc 	bl	80030b4 <_sbrk_r>
 8002abc:	1c42      	adds	r2, r0, #1
 8002abe:	4603      	mov	r3, r0
 8002ac0:	d0d1      	beq.n	8002a66 <_malloc_r+0x16>
 8002ac2:	1cc5      	adds	r5, r0, #3
 8002ac4:	f025 0503 	bic.w	r5, r5, #3
 8002ac8:	4285      	cmp	r5, r0
 8002aca:	d10a      	bne.n	8002ae2 <_malloc_r+0x92>
 8002acc:	601c      	str	r4, [r3, #0]
 8002ace:	f103 000b 	add.w	r0, r3, #11
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	f020 0007 	bic.w	r0, r0, #7
 8002ad8:	1a82      	subs	r2, r0, r2
 8002ada:	d00a      	beq.n	8002af2 <_malloc_r+0xa2>
 8002adc:	4251      	negs	r1, r2
 8002ade:	5099      	str	r1, [r3, r2]
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	1ae9      	subs	r1, r5, r3
 8002ae6:	f000 fae5 	bl	80030b4 <_sbrk_r>
 8002aea:	3001      	adds	r0, #1
 8002aec:	d0bb      	beq.n	8002a66 <_malloc_r+0x16>
 8002aee:	462b      	mov	r3, r5
 8002af0:	e7ec      	b.n	8002acc <_malloc_r+0x7c>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	1ffe88c8 	.word	0x1ffe88c8
 8002af8:	1ffe88c4 	.word	0x1ffe88c4

08002afc <__ssputs_r>:
 8002afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b00:	688e      	ldr	r6, [r1, #8]
 8002b02:	42b3      	cmp	r3, r6
 8002b04:	4682      	mov	sl, r0
 8002b06:	460c      	mov	r4, r1
 8002b08:	4690      	mov	r8, r2
 8002b0a:	4699      	mov	r9, r3
 8002b0c:	d340      	bcc.n	8002b90 <__ssputs_r+0x94>
 8002b0e:	898a      	ldrh	r2, [r1, #12]
 8002b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b14:	d03a      	beq.n	8002b8c <__ssputs_r+0x90>
 8002b16:	6825      	ldr	r5, [r4, #0]
 8002b18:	6909      	ldr	r1, [r1, #16]
 8002b1a:	1a6f      	subs	r7, r5, r1
 8002b1c:	6965      	ldr	r5, [r4, #20]
 8002b1e:	2302      	movs	r3, #2
 8002b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b24:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b28:	1c7b      	adds	r3, r7, #1
 8002b2a:	444b      	add	r3, r9
 8002b2c:	429d      	cmp	r5, r3
 8002b2e:	bf38      	it	cc
 8002b30:	461d      	movcc	r5, r3
 8002b32:	0553      	lsls	r3, r2, #21
 8002b34:	d50f      	bpl.n	8002b56 <__ssputs_r+0x5a>
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7ff ff8a 	bl	8002a50 <_malloc_r>
 8002b3c:	4606      	mov	r6, r0
 8002b3e:	b198      	cbz	r0, 8002b68 <__ssputs_r+0x6c>
 8002b40:	6921      	ldr	r1, [r4, #16]
 8002b42:	463a      	mov	r2, r7
 8002b44:	f7ff fc08 	bl	8002358 <memcpy>
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	e013      	b.n	8002b7e <__ssputs_r+0x82>
 8002b56:	462a      	mov	r2, r5
 8002b58:	f000 fb80 	bl	800325c <_realloc_r>
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	b970      	cbnz	r0, 8002b7e <__ssputs_r+0x82>
 8002b60:	4650      	mov	r0, sl
 8002b62:	6921      	ldr	r1, [r4, #16]
 8002b64:	f7ff ff30 	bl	80029c8 <_free_r>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	f8ca 3000 	str.w	r3, [sl]
 8002b6e:	89a3      	ldrh	r3, [r4, #12]
 8002b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b74:	81a3      	strh	r3, [r4, #12]
 8002b76:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b7e:	6126      	str	r6, [r4, #16]
 8002b80:	6165      	str	r5, [r4, #20]
 8002b82:	443e      	add	r6, r7
 8002b84:	1bed      	subs	r5, r5, r7
 8002b86:	6026      	str	r6, [r4, #0]
 8002b88:	60a5      	str	r5, [r4, #8]
 8002b8a:	464e      	mov	r6, r9
 8002b8c:	45b1      	cmp	r9, r6
 8002b8e:	d200      	bcs.n	8002b92 <__ssputs_r+0x96>
 8002b90:	464e      	mov	r6, r9
 8002b92:	4632      	mov	r2, r6
 8002b94:	6820      	ldr	r0, [r4, #0]
 8002b96:	4641      	mov	r1, r8
 8002b98:	f000 fb45 	bl	8003226 <memmove>
 8002b9c:	68a3      	ldr	r3, [r4, #8]
 8002b9e:	1b9b      	subs	r3, r3, r6
 8002ba0:	60a3      	str	r3, [r4, #8]
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	441e      	add	r6, r3
 8002ba6:	6026      	str	r6, [r4, #0]
 8002ba8:	2000      	movs	r0, #0
 8002baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002bb0 <_svfiprintf_r>:
 8002bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bb4:	b09d      	sub	sp, #116	; 0x74
 8002bb6:	4606      	mov	r6, r0
 8002bb8:	9303      	str	r3, [sp, #12]
 8002bba:	898b      	ldrh	r3, [r1, #12]
 8002bbc:	061c      	lsls	r4, r3, #24
 8002bbe:	460d      	mov	r5, r1
 8002bc0:	4690      	mov	r8, r2
 8002bc2:	d50c      	bpl.n	8002bde <_svfiprintf_r+0x2e>
 8002bc4:	690b      	ldr	r3, [r1, #16]
 8002bc6:	b953      	cbnz	r3, 8002bde <_svfiprintf_r+0x2e>
 8002bc8:	2140      	movs	r1, #64	; 0x40
 8002bca:	f7ff ff41 	bl	8002a50 <_malloc_r>
 8002bce:	6028      	str	r0, [r5, #0]
 8002bd0:	6128      	str	r0, [r5, #16]
 8002bd2:	b910      	cbnz	r0, 8002bda <_svfiprintf_r+0x2a>
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	6033      	str	r3, [r6, #0]
 8002bd8:	e0cc      	b.n	8002d74 <_svfiprintf_r+0x1c4>
 8002bda:	2340      	movs	r3, #64	; 0x40
 8002bdc:	616b      	str	r3, [r5, #20]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9309      	str	r3, [sp, #36]	; 0x24
 8002be2:	2320      	movs	r3, #32
 8002be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002be8:	2330      	movs	r3, #48	; 0x30
 8002bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bee:	4643      	mov	r3, r8
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bf6:	b91a      	cbnz	r2, 8002c00 <_svfiprintf_r+0x50>
 8002bf8:	ebb4 0908 	subs.w	r9, r4, r8
 8002bfc:	d00f      	beq.n	8002c1e <_svfiprintf_r+0x6e>
 8002bfe:	e002      	b.n	8002c06 <_svfiprintf_r+0x56>
 8002c00:	2a25      	cmp	r2, #37	; 0x25
 8002c02:	d1f5      	bne.n	8002bf0 <_svfiprintf_r+0x40>
 8002c04:	e7f8      	b.n	8002bf8 <_svfiprintf_r+0x48>
 8002c06:	4630      	mov	r0, r6
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	f7ff ff75 	bl	8002afc <__ssputs_r>
 8002c12:	3001      	adds	r0, #1
 8002c14:	f000 80a9 	beq.w	8002d6a <_svfiprintf_r+0x1ba>
 8002c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c1a:	444b      	add	r3, r9
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	7823      	ldrb	r3, [r4, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a2 	beq.w	8002d6a <_svfiprintf_r+0x1ba>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	9304      	str	r3, [sp, #16]
 8002c2e:	9307      	str	r3, [sp, #28]
 8002c30:	9205      	str	r2, [sp, #20]
 8002c32:	9306      	str	r3, [sp, #24]
 8002c34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c38:	931a      	str	r3, [sp, #104]	; 0x68
 8002c3a:	f104 0801 	add.w	r8, r4, #1
 8002c3e:	4644      	mov	r4, r8
 8002c40:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8002d8c <_svfiprintf_r+0x1dc>
 8002c44:	7821      	ldrb	r1, [r4, #0]
 8002c46:	4648      	mov	r0, r9
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f000 fadd 	bl	8003208 <memchr>
 8002c4e:	f108 0801 	add.w	r8, r8, #1
 8002c52:	9b04      	ldr	r3, [sp, #16]
 8002c54:	b130      	cbz	r0, 8002c64 <_svfiprintf_r+0xb4>
 8002c56:	ebc9 0000 	rsb	r0, r9, r0
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4082      	lsls	r2, r0
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	9304      	str	r3, [sp, #16]
 8002c62:	e7ec      	b.n	8002c3e <_svfiprintf_r+0x8e>
 8002c64:	06d8      	lsls	r0, r3, #27
 8002c66:	bf44      	itt	mi
 8002c68:	2220      	movmi	r2, #32
 8002c6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c6e:	0719      	lsls	r1, r3, #28
 8002c70:	bf44      	itt	mi
 8002c72:	222b      	movmi	r2, #43	; 0x2b
 8002c74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c78:	7822      	ldrb	r2, [r4, #0]
 8002c7a:	2a2a      	cmp	r2, #42	; 0x2a
 8002c7c:	d002      	beq.n	8002c84 <_svfiprintf_r+0xd4>
 8002c7e:	9907      	ldr	r1, [sp, #28]
 8002c80:	4623      	mov	r3, r4
 8002c82:	e00e      	b.n	8002ca2 <_svfiprintf_r+0xf2>
 8002c84:	9a03      	ldr	r2, [sp, #12]
 8002c86:	1d11      	adds	r1, r2, #4
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	9103      	str	r1, [sp, #12]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	bfbb      	ittet	lt
 8002c90:	4252      	neglt	r2, r2
 8002c92:	f043 0302 	orrlt.w	r3, r3, #2
 8002c96:	9207      	strge	r2, [sp, #28]
 8002c98:	9207      	strlt	r2, [sp, #28]
 8002c9a:	bfb8      	it	lt
 8002c9c:	9304      	strlt	r3, [sp, #16]
 8002c9e:	3401      	adds	r4, #1
 8002ca0:	e00a      	b.n	8002cb8 <_svfiprintf_r+0x108>
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	7822      	ldrb	r2, [r4, #0]
 8002ca8:	3a30      	subs	r2, #48	; 0x30
 8002caa:	2a09      	cmp	r2, #9
 8002cac:	d803      	bhi.n	8002cb6 <_svfiprintf_r+0x106>
 8002cae:	200a      	movs	r0, #10
 8002cb0:	fb00 2101 	mla	r1, r0, r1, r2
 8002cb4:	e7f5      	b.n	8002ca2 <_svfiprintf_r+0xf2>
 8002cb6:	9107      	str	r1, [sp, #28]
 8002cb8:	7823      	ldrb	r3, [r4, #0]
 8002cba:	2b2e      	cmp	r3, #46	; 0x2e
 8002cbc:	d11a      	bne.n	8002cf4 <_svfiprintf_r+0x144>
 8002cbe:	7863      	ldrb	r3, [r4, #1]
 8002cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc2:	d10a      	bne.n	8002cda <_svfiprintf_r+0x12a>
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	1d1a      	adds	r2, r3, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	9203      	str	r2, [sp, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bfb8      	it	lt
 8002cd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cd4:	3402      	adds	r4, #2
 8002cd6:	9305      	str	r3, [sp, #20]
 8002cd8:	e00c      	b.n	8002cf4 <_svfiprintf_r+0x144>
 8002cda:	1c61      	adds	r1, r4, #1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	3101      	adds	r1, #1
 8002ce2:	7823      	ldrb	r3, [r4, #0]
 8002ce4:	3b30      	subs	r3, #48	; 0x30
 8002ce6:	2b09      	cmp	r3, #9
 8002ce8:	d803      	bhi.n	8002cf2 <_svfiprintf_r+0x142>
 8002cea:	200a      	movs	r0, #10
 8002cec:	fb00 3202 	mla	r2, r0, r2, r3
 8002cf0:	e7f5      	b.n	8002cde <_svfiprintf_r+0x12e>
 8002cf2:	9205      	str	r2, [sp, #20]
 8002cf4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002d90 <_svfiprintf_r+0x1e0>
 8002cf8:	7821      	ldrb	r1, [r4, #0]
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f000 fa83 	bl	8003208 <memchr>
 8002d02:	b138      	cbz	r0, 8002d14 <_svfiprintf_r+0x164>
 8002d04:	9a04      	ldr	r2, [sp, #16]
 8002d06:	ebc8 0000 	rsb	r0, r8, r0
 8002d0a:	2340      	movs	r3, #64	; 0x40
 8002d0c:	4083      	lsls	r3, r0
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	9304      	str	r3, [sp, #16]
 8002d12:	3401      	adds	r4, #1
 8002d14:	7821      	ldrb	r1, [r4, #0]
 8002d16:	481a      	ldr	r0, [pc, #104]	; (8002d80 <_svfiprintf_r+0x1d0>)
 8002d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d1c:	2206      	movs	r2, #6
 8002d1e:	f104 0801 	add.w	r8, r4, #1
 8002d22:	f000 fa71 	bl	8003208 <memchr>
 8002d26:	b188      	cbz	r0, 8002d4c <_svfiprintf_r+0x19c>
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <_svfiprintf_r+0x1d4>)
 8002d2a:	b933      	cbnz	r3, 8002d3a <_svfiprintf_r+0x18a>
 8002d2c:	9b03      	ldr	r3, [sp, #12]
 8002d2e:	3307      	adds	r3, #7
 8002d30:	f023 0307 	bic.w	r3, r3, #7
 8002d34:	3308      	adds	r3, #8
 8002d36:	9303      	str	r3, [sp, #12]
 8002d38:	e013      	b.n	8002d62 <_svfiprintf_r+0x1b2>
 8002d3a:	ab03      	add	r3, sp, #12
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4630      	mov	r0, r6
 8002d40:	a904      	add	r1, sp, #16
 8002d42:	462a      	mov	r2, r5
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <_svfiprintf_r+0x1d8>)
 8002d46:	f3af 8000 	nop.w
 8002d4a:	e007      	b.n	8002d5c <_svfiprintf_r+0x1ac>
 8002d4c:	ab03      	add	r3, sp, #12
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4630      	mov	r0, r6
 8002d52:	a904      	add	r1, sp, #16
 8002d54:	462a      	mov	r2, r5
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <_svfiprintf_r+0x1d8>)
 8002d58:	f000 f892 	bl	8002e80 <_printf_i>
 8002d5c:	1c42      	adds	r2, r0, #1
 8002d5e:	4607      	mov	r7, r0
 8002d60:	d003      	beq.n	8002d6a <_svfiprintf_r+0x1ba>
 8002d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d64:	443b      	add	r3, r7
 8002d66:	9309      	str	r3, [sp, #36]	; 0x24
 8002d68:	e741      	b.n	8002bee <_svfiprintf_r+0x3e>
 8002d6a:	89ab      	ldrh	r3, [r5, #12]
 8002d6c:	065b      	lsls	r3, r3, #25
 8002d6e:	d401      	bmi.n	8002d74 <_svfiprintf_r+0x1c4>
 8002d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d72:	e001      	b.n	8002d78 <_svfiprintf_r+0x1c8>
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	b01d      	add	sp, #116	; 0x74
 8002d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d7e:	bf00      	nop
 8002d80:	08003686 	.word	0x08003686
 8002d84:	00000000 	.word	0x00000000
 8002d88:	08002afd 	.word	0x08002afd
 8002d8c:	0800367c 	.word	0x0800367c
 8002d90:	08003682 	.word	0x08003682

08002d94 <_printf_common>:
 8002d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d98:	4691      	mov	r9, r2
 8002d9a:	461f      	mov	r7, r3
 8002d9c:	688a      	ldr	r2, [r1, #8]
 8002d9e:	690b      	ldr	r3, [r1, #16]
 8002da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bfb8      	it	lt
 8002da8:	4613      	movlt	r3, r2
 8002daa:	f8c9 3000 	str.w	r3, [r9]
 8002dae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002db2:	4606      	mov	r6, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	b112      	cbz	r2, 8002dbe <_printf_common+0x2a>
 8002db8:	3301      	adds	r3, #1
 8002dba:	f8c9 3000 	str.w	r3, [r9]
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	0699      	lsls	r1, r3, #26
 8002dc2:	bf42      	ittt	mi
 8002dc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002dc8:	3302      	addmi	r3, #2
 8002dca:	f8c9 3000 	strmi.w	r3, [r9]
 8002dce:	6825      	ldr	r5, [r4, #0]
 8002dd0:	f015 0506 	ands.w	r5, r5, #6
 8002dd4:	d01c      	beq.n	8002e10 <_printf_common+0x7c>
 8002dd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	3300      	adds	r3, #0
 8002dde:	bf18      	it	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	0692      	lsls	r2, r2, #26
 8002de4:	d51f      	bpl.n	8002e26 <_printf_common+0x92>
 8002de6:	18e1      	adds	r1, r4, r3
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	2030      	movs	r0, #48	; 0x30
 8002dec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002df0:	4422      	add	r2, r4
 8002df2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	e013      	b.n	8002e26 <_printf_common+0x92>
 8002dfe:	4630      	mov	r0, r6
 8002e00:	4639      	mov	r1, r7
 8002e02:	f104 0219 	add.w	r2, r4, #25
 8002e06:	2301      	movs	r3, #1
 8002e08:	47c0      	blx	r8
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d007      	beq.n	8002e1e <_printf_common+0x8a>
 8002e0e:	3501      	adds	r5, #1
 8002e10:	68e3      	ldr	r3, [r4, #12]
 8002e12:	f8d9 2000 	ldr.w	r2, [r9]
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	429d      	cmp	r5, r3
 8002e1a:	dbf0      	blt.n	8002dfe <_printf_common+0x6a>
 8002e1c:	e7db      	b.n	8002dd6 <_printf_common+0x42>
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e26:	4630      	mov	r0, r6
 8002e28:	4639      	mov	r1, r7
 8002e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e2e:	47c0      	blx	r8
 8002e30:	3001      	adds	r0, #1
 8002e32:	d0f4      	beq.n	8002e1e <_printf_common+0x8a>
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	f8d9 5000 	ldr.w	r5, [r9]
 8002e3a:	68e3      	ldr	r3, [r4, #12]
 8002e3c:	f002 0206 	and.w	r2, r2, #6
 8002e40:	2a04      	cmp	r2, #4
 8002e42:	bf08      	it	eq
 8002e44:	1b5d      	subeq	r5, r3, r5
 8002e46:	6922      	ldr	r2, [r4, #16]
 8002e48:	68a3      	ldr	r3, [r4, #8]
 8002e4a:	bf0c      	ite	eq
 8002e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e50:	2500      	movne	r5, #0
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bfc4      	itt	gt
 8002e56:	1a9b      	subgt	r3, r3, r2
 8002e58:	18ed      	addgt	r5, r5, r3
 8002e5a:	f04f 0900 	mov.w	r9, #0
 8002e5e:	45a9      	cmp	r9, r5
 8002e60:	da0a      	bge.n	8002e78 <_printf_common+0xe4>
 8002e62:	4630      	mov	r0, r6
 8002e64:	4639      	mov	r1, r7
 8002e66:	f104 021a 	add.w	r2, r4, #26
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	47c0      	blx	r8
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d0d5      	beq.n	8002e1e <_printf_common+0x8a>
 8002e72:	f109 0901 	add.w	r9, r9, #1
 8002e76:	e7f2      	b.n	8002e5e <_printf_common+0xca>
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002e80 <_printf_i>:
 8002e80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002e84:	460c      	mov	r4, r1
 8002e86:	4617      	mov	r7, r2
 8002e88:	7e22      	ldrb	r2, [r4, #24]
 8002e8a:	2a6e      	cmp	r2, #110	; 0x6e
 8002e8c:	4698      	mov	r8, r3
 8002e8e:	4606      	mov	r6, r0
 8002e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e92:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8002e96:	f000 80a9 	beq.w	8002fec <_printf_i+0x16c>
 8002e9a:	d812      	bhi.n	8002ec2 <_printf_i+0x42>
 8002e9c:	2a63      	cmp	r2, #99	; 0x63
 8002e9e:	d023      	beq.n	8002ee8 <_printf_i+0x68>
 8002ea0:	d80a      	bhi.n	8002eb8 <_printf_i+0x38>
 8002ea2:	2a00      	cmp	r2, #0
 8002ea4:	f000 80b6 	beq.w	8003014 <_printf_i+0x194>
 8002ea8:	2a58      	cmp	r2, #88	; 0x58
 8002eaa:	f040 80c5 	bne.w	8003038 <_printf_i+0x1b8>
 8002eae:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002eb2:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80030ac <_printf_i+0x22c>
 8002eb6:	e051      	b.n	8002f5c <_printf_i+0xdc>
 8002eb8:	2a64      	cmp	r2, #100	; 0x64
 8002eba:	d01e      	beq.n	8002efa <_printf_i+0x7a>
 8002ebc:	2a69      	cmp	r2, #105	; 0x69
 8002ebe:	d01c      	beq.n	8002efa <_printf_i+0x7a>
 8002ec0:	e0ba      	b.n	8003038 <_printf_i+0x1b8>
 8002ec2:	2a73      	cmp	r2, #115	; 0x73
 8002ec4:	f000 80aa 	beq.w	800301c <_printf_i+0x19c>
 8002ec8:	d809      	bhi.n	8002ede <_printf_i+0x5e>
 8002eca:	2a6f      	cmp	r2, #111	; 0x6f
 8002ecc:	d02b      	beq.n	8002f26 <_printf_i+0xa6>
 8002ece:	2a70      	cmp	r2, #112	; 0x70
 8002ed0:	f040 80b2 	bne.w	8003038 <_printf_i+0x1b8>
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	6022      	str	r2, [r4, #0]
 8002edc:	e039      	b.n	8002f52 <_printf_i+0xd2>
 8002ede:	2a75      	cmp	r2, #117	; 0x75
 8002ee0:	d021      	beq.n	8002f26 <_printf_i+0xa6>
 8002ee2:	2a78      	cmp	r2, #120	; 0x78
 8002ee4:	d035      	beq.n	8002f52 <_printf_i+0xd2>
 8002ee6:	e0a7      	b.n	8003038 <_printf_i+0x1b8>
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	1d11      	adds	r1, r2, #4
 8002eec:	6019      	str	r1, [r3, #0]
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef8:	e0a2      	b.n	8003040 <_printf_i+0x1c0>
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f02:	d003      	beq.n	8002f0c <_printf_i+0x8c>
 8002f04:	1d10      	adds	r0, r2, #4
 8002f06:	6018      	str	r0, [r3, #0]
 8002f08:	6813      	ldr	r3, [r2, #0]
 8002f0a:	e005      	b.n	8002f18 <_printf_i+0x98>
 8002f0c:	0645      	lsls	r5, r0, #25
 8002f0e:	d5f9      	bpl.n	8002f04 <_printf_i+0x84>
 8002f10:	1d10      	adds	r0, r2, #4
 8002f12:	6018      	str	r0, [r3, #0]
 8002f14:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da3b      	bge.n	8002f94 <_printf_i+0x114>
 8002f1c:	222d      	movs	r2, #45	; 0x2d
 8002f1e:	425b      	negs	r3, r3
 8002f20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f24:	e036      	b.n	8002f94 <_printf_i+0x114>
 8002f26:	6820      	ldr	r0, [r4, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f2e:	d003      	beq.n	8002f38 <_printf_i+0xb8>
 8002f30:	1d10      	adds	r0, r2, #4
 8002f32:	6018      	str	r0, [r3, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	e004      	b.n	8002f42 <_printf_i+0xc2>
 8002f38:	0640      	lsls	r0, r0, #25
 8002f3a:	d5f9      	bpl.n	8002f30 <_printf_i+0xb0>
 8002f3c:	1d10      	adds	r0, r2, #4
 8002f3e:	6018      	str	r0, [r3, #0]
 8002f40:	8813      	ldrh	r3, [r2, #0]
 8002f42:	7e22      	ldrb	r2, [r4, #24]
 8002f44:	f8df e164 	ldr.w	lr, [pc, #356]	; 80030ac <_printf_i+0x22c>
 8002f48:	2a6f      	cmp	r2, #111	; 0x6f
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2208      	moveq	r2, #8
 8002f4e:	220a      	movne	r2, #10
 8002f50:	e01c      	b.n	8002f8c <_printf_i+0x10c>
 8002f52:	2278      	movs	r2, #120	; 0x78
 8002f54:	f8df e158 	ldr.w	lr, [pc, #344]	; 80030b0 <_printf_i+0x230>
 8002f58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f64:	f100 0504 	add.w	r5, r0, #4
 8002f68:	601d      	str	r5, [r3, #0]
 8002f6a:	d001      	beq.n	8002f70 <_printf_i+0xf0>
 8002f6c:	6803      	ldr	r3, [r0, #0]
 8002f6e:	e002      	b.n	8002f76 <_printf_i+0xf6>
 8002f70:	0655      	lsls	r5, r2, #25
 8002f72:	d5fb      	bpl.n	8002f6c <_printf_i+0xec>
 8002f74:	8803      	ldrh	r3, [r0, #0]
 8002f76:	07d0      	lsls	r0, r2, #31
 8002f78:	bf44      	itt	mi
 8002f7a:	f042 0220 	orrmi.w	r2, r2, #32
 8002f7e:	6022      	strmi	r2, [r4, #0]
 8002f80:	b91b      	cbnz	r3, 8002f8a <_printf_i+0x10a>
 8002f82:	6822      	ldr	r2, [r4, #0]
 8002f84:	f022 0220 	bic.w	r2, r2, #32
 8002f88:	6022      	str	r2, [r4, #0]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002f92:	e002      	b.n	8002f9a <_printf_i+0x11a>
 8002f94:	f8df e114 	ldr.w	lr, [pc, #276]	; 80030ac <_printf_i+0x22c>
 8002f98:	220a      	movs	r2, #10
 8002f9a:	6865      	ldr	r5, [r4, #4]
 8002f9c:	60a5      	str	r5, [r4, #8]
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	bfa2      	ittt	ge
 8002fa2:	6820      	ldrge	r0, [r4, #0]
 8002fa4:	f020 0004 	bicge.w	r0, r0, #4
 8002fa8:	6020      	strge	r0, [r4, #0]
 8002faa:	b903      	cbnz	r3, 8002fae <_printf_i+0x12e>
 8002fac:	b165      	cbz	r5, 8002fc8 <_printf_i+0x148>
 8002fae:	460d      	mov	r5, r1
 8002fb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8002fb4:	fb02 3310 	mls	r3, r2, r0, r3
 8002fb8:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8002fbc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d1f4      	bne.n	8002fb0 <_printf_i+0x130>
 8002fc6:	e000      	b.n	8002fca <_printf_i+0x14a>
 8002fc8:	460d      	mov	r5, r1
 8002fca:	2a08      	cmp	r2, #8
 8002fcc:	d10b      	bne.n	8002fe6 <_printf_i+0x166>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	07da      	lsls	r2, r3, #31
 8002fd2:	d508      	bpl.n	8002fe6 <_printf_i+0x166>
 8002fd4:	6923      	ldr	r3, [r4, #16]
 8002fd6:	6862      	ldr	r2, [r4, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	bfde      	ittt	le
 8002fdc:	2330      	movle	r3, #48	; 0x30
 8002fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fe2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fe6:	1b49      	subs	r1, r1, r5
 8002fe8:	6121      	str	r1, [r4, #16]
 8002fea:	e02e      	b.n	800304a <_printf_i+0x1ca>
 8002fec:	6825      	ldr	r5, [r4, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	6960      	ldr	r0, [r4, #20]
 8002ff2:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002ff6:	d003      	beq.n	8003000 <_printf_i+0x180>
 8002ff8:	1d15      	adds	r5, r2, #4
 8002ffa:	601d      	str	r5, [r3, #0]
 8002ffc:	6813      	ldr	r3, [r2, #0]
 8002ffe:	e008      	b.n	8003012 <_printf_i+0x192>
 8003000:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003004:	f102 0504 	add.w	r5, r2, #4
 8003008:	601d      	str	r5, [r3, #0]
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	d001      	beq.n	8003012 <_printf_i+0x192>
 800300e:	8018      	strh	r0, [r3, #0]
 8003010:	e000      	b.n	8003014 <_printf_i+0x194>
 8003012:	6018      	str	r0, [r3, #0]
 8003014:	2300      	movs	r3, #0
 8003016:	6123      	str	r3, [r4, #16]
 8003018:	460d      	mov	r5, r1
 800301a:	e016      	b.n	800304a <_printf_i+0x1ca>
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	1d11      	adds	r1, r2, #4
 8003020:	6019      	str	r1, [r3, #0]
 8003022:	6815      	ldr	r5, [r2, #0]
 8003024:	6862      	ldr	r2, [r4, #4]
 8003026:	4628      	mov	r0, r5
 8003028:	2100      	movs	r1, #0
 800302a:	f000 f8ed 	bl	8003208 <memchr>
 800302e:	b108      	cbz	r0, 8003034 <_printf_i+0x1b4>
 8003030:	1b40      	subs	r0, r0, r5
 8003032:	6060      	str	r0, [r4, #4]
 8003034:	6863      	ldr	r3, [r4, #4]
 8003036:	e004      	b.n	8003042 <_printf_i+0x1c2>
 8003038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003040:	2301      	movs	r3, #1
 8003042:	6123      	str	r3, [r4, #16]
 8003044:	2300      	movs	r3, #0
 8003046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800304a:	f8cd 8000 	str.w	r8, [sp]
 800304e:	4630      	mov	r0, r6
 8003050:	4621      	mov	r1, r4
 8003052:	aa03      	add	r2, sp, #12
 8003054:	463b      	mov	r3, r7
 8003056:	f7ff fe9d 	bl	8002d94 <_printf_common>
 800305a:	3001      	adds	r0, #1
 800305c:	d102      	bne.n	8003064 <_printf_i+0x1e4>
 800305e:	f04f 30ff 	mov.w	r0, #4294967295
 8003062:	e01f      	b.n	80030a4 <_printf_i+0x224>
 8003064:	4630      	mov	r0, r6
 8003066:	4639      	mov	r1, r7
 8003068:	462a      	mov	r2, r5
 800306a:	6923      	ldr	r3, [r4, #16]
 800306c:	47c0      	blx	r8
 800306e:	3001      	adds	r0, #1
 8003070:	d0f5      	beq.n	800305e <_printf_i+0x1de>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	079b      	lsls	r3, r3, #30
 8003076:	d405      	bmi.n	8003084 <_printf_i+0x204>
 8003078:	68e0      	ldr	r0, [r4, #12]
 800307a:	9b03      	ldr	r3, [sp, #12]
 800307c:	4298      	cmp	r0, r3
 800307e:	bfb8      	it	lt
 8003080:	4618      	movlt	r0, r3
 8003082:	e00f      	b.n	80030a4 <_printf_i+0x224>
 8003084:	2500      	movs	r5, #0
 8003086:	68e3      	ldr	r3, [r4, #12]
 8003088:	9a03      	ldr	r2, [sp, #12]
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	429d      	cmp	r5, r3
 800308e:	daf3      	bge.n	8003078 <_printf_i+0x1f8>
 8003090:	4630      	mov	r0, r6
 8003092:	4639      	mov	r1, r7
 8003094:	f104 0219 	add.w	r2, r4, #25
 8003098:	2301      	movs	r3, #1
 800309a:	47c0      	blx	r8
 800309c:	3001      	adds	r0, #1
 800309e:	d0de      	beq.n	800305e <_printf_i+0x1de>
 80030a0:	3501      	adds	r5, #1
 80030a2:	e7f0      	b.n	8003086 <_printf_i+0x206>
 80030a4:	b004      	add	sp, #16
 80030a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030aa:	bf00      	nop
 80030ac:	0800368d 	.word	0x0800368d
 80030b0:	0800369e 	.word	0x0800369e

080030b4 <_sbrk_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4c06      	ldr	r4, [pc, #24]	; (80030d0 <_sbrk_r+0x1c>)
 80030b8:	2300      	movs	r3, #0
 80030ba:	4605      	mov	r5, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	f7fe fb8a 	bl	80017d8 <_sbrk>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_sbrk_r+0x1a>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_sbrk_r+0x1a>
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	1ffe88e4 	.word	0x1ffe88e4

080030d4 <__sread>:
 80030d4:	b510      	push	{r4, lr}
 80030d6:	460c      	mov	r4, r1
 80030d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030dc:	f000 f8e4 	bl	80032a8 <_read_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	bfab      	itete	ge
 80030e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030e6:	89a3      	ldrhlt	r3, [r4, #12]
 80030e8:	181b      	addge	r3, r3, r0
 80030ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030ee:	bfac      	ite	ge
 80030f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80030f2:	81a3      	strhlt	r3, [r4, #12]
 80030f4:	bd10      	pop	{r4, pc}

080030f6 <__swrite>:
 80030f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fa:	461d      	mov	r5, r3
 80030fc:	898b      	ldrh	r3, [r1, #12]
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	4607      	mov	r7, r0
 8003102:	460c      	mov	r4, r1
 8003104:	4616      	mov	r6, r2
 8003106:	d505      	bpl.n	8003114 <__swrite+0x1e>
 8003108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800310c:	2200      	movs	r2, #0
 800310e:	2302      	movs	r3, #2
 8003110:	f000 f868 	bl	80031e4 <_lseek_r>
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800311a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800311e:	81a3      	strh	r3, [r4, #12]
 8003120:	4638      	mov	r0, r7
 8003122:	4632      	mov	r2, r6
 8003124:	462b      	mov	r3, r5
 8003126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800312a:	f000 b817 	b.w	800315c <_write_r>

0800312e <__sseek>:
 800312e:	b510      	push	{r4, lr}
 8003130:	460c      	mov	r4, r1
 8003132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003136:	f000 f855 	bl	80031e4 <_lseek_r>
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	bf15      	itete	ne
 8003140:	6560      	strne	r0, [r4, #84]	; 0x54
 8003142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800314a:	81a3      	strheq	r3, [r4, #12]
 800314c:	bf18      	it	ne
 800314e:	81a3      	strhne	r3, [r4, #12]
 8003150:	bd10      	pop	{r4, pc}

08003152 <__sclose>:
 8003152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003156:	f000 b813 	b.w	8003180 <_close_r>
	...

0800315c <_write_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4c07      	ldr	r4, [pc, #28]	; (800317c <_write_r+0x20>)
 8003160:	4605      	mov	r5, r0
 8003162:	2000      	movs	r0, #0
 8003164:	6020      	str	r0, [r4, #0]
 8003166:	4608      	mov	r0, r1
 8003168:	4611      	mov	r1, r2
 800316a:	461a      	mov	r2, r3
 800316c:	f000 f8e0 	bl	8003330 <_write>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d102      	bne.n	800317a <_write_r+0x1e>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	b103      	cbz	r3, 800317a <_write_r+0x1e>
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	1ffe88e4 	.word	0x1ffe88e4

08003180 <_close_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4c06      	ldr	r4, [pc, #24]	; (800319c <_close_r+0x1c>)
 8003184:	2300      	movs	r3, #0
 8003186:	4605      	mov	r5, r0
 8003188:	4608      	mov	r0, r1
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	f000 f8a8 	bl	80032e0 <_close>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_close_r+0x1a>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	b103      	cbz	r3, 800319a <_close_r+0x1a>
 8003198:	602b      	str	r3, [r5, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	1ffe88e4 	.word	0x1ffe88e4

080031a0 <_fstat_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4c07      	ldr	r4, [pc, #28]	; (80031c0 <_fstat_r+0x20>)
 80031a4:	2300      	movs	r3, #0
 80031a6:	4605      	mov	r5, r0
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	f000 f89f 	bl	80032f0 <_fstat>
 80031b2:	1c43      	adds	r3, r0, #1
 80031b4:	d102      	bne.n	80031bc <_fstat_r+0x1c>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	b103      	cbz	r3, 80031bc <_fstat_r+0x1c>
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	bd38      	pop	{r3, r4, r5, pc}
 80031be:	bf00      	nop
 80031c0:	1ffe88e4 	.word	0x1ffe88e4

080031c4 <_isatty_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4c06      	ldr	r4, [pc, #24]	; (80031e0 <_isatty_r+0x1c>)
 80031c8:	2300      	movs	r3, #0
 80031ca:	4605      	mov	r5, r0
 80031cc:	4608      	mov	r0, r1
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	f000 f896 	bl	8003300 <_isatty>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d102      	bne.n	80031de <_isatty_r+0x1a>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	b103      	cbz	r3, 80031de <_isatty_r+0x1a>
 80031dc:	602b      	str	r3, [r5, #0]
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	1ffe88e4 	.word	0x1ffe88e4

080031e4 <_lseek_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4c07      	ldr	r4, [pc, #28]	; (8003204 <_lseek_r+0x20>)
 80031e8:	4605      	mov	r5, r0
 80031ea:	2000      	movs	r0, #0
 80031ec:	6020      	str	r0, [r4, #0]
 80031ee:	4608      	mov	r0, r1
 80031f0:	4611      	mov	r1, r2
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 f88c 	bl	8003310 <_lseek>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_lseek_r+0x1e>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_lseek_r+0x1e>
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	1ffe88e4 	.word	0x1ffe88e4

08003208 <memchr>:
 8003208:	b510      	push	{r4, lr}
 800320a:	b2c9      	uxtb	r1, r1
 800320c:	4402      	add	r2, r0
 800320e:	4290      	cmp	r0, r2
 8003210:	4603      	mov	r3, r0
 8003212:	d006      	beq.n	8003222 <memchr+0x1a>
 8003214:	781c      	ldrb	r4, [r3, #0]
 8003216:	428c      	cmp	r4, r1
 8003218:	f100 0001 	add.w	r0, r0, #1
 800321c:	d1f7      	bne.n	800320e <memchr+0x6>
 800321e:	4618      	mov	r0, r3
 8003220:	bd10      	pop	{r4, pc}
 8003222:	2000      	movs	r0, #0
 8003224:	bd10      	pop	{r4, pc}

08003226 <memmove>:
 8003226:	4281      	cmp	r1, r0
 8003228:	b510      	push	{r4, lr}
 800322a:	eb01 0302 	add.w	r3, r1, r2
 800322e:	d301      	bcc.n	8003234 <memmove+0xe>
 8003230:	1e42      	subs	r2, r0, #1
 8003232:	e00b      	b.n	800324c <memmove+0x26>
 8003234:	4298      	cmp	r0, r3
 8003236:	d2fb      	bcs.n	8003230 <memmove+0xa>
 8003238:	1881      	adds	r1, r0, r2
 800323a:	1ad2      	subs	r2, r2, r3
 800323c:	42d3      	cmn	r3, r2
 800323e:	d004      	beq.n	800324a <memmove+0x24>
 8003240:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003244:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003248:	e7f8      	b.n	800323c <memmove+0x16>
 800324a:	bd10      	pop	{r4, pc}
 800324c:	4299      	cmp	r1, r3
 800324e:	d004      	beq.n	800325a <memmove+0x34>
 8003250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003254:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003258:	e7f8      	b.n	800324c <memmove+0x26>
 800325a:	bd10      	pop	{r4, pc}

0800325c <_realloc_r>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	4607      	mov	r7, r0
 8003260:	4615      	mov	r5, r2
 8003262:	460e      	mov	r6, r1
 8003264:	b921      	cbnz	r1, 8003270 <_realloc_r+0x14>
 8003266:	4611      	mov	r1, r2
 8003268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800326c:	f7ff bbf0 	b.w	8002a50 <_malloc_r>
 8003270:	b91a      	cbnz	r2, 800327a <_realloc_r+0x1e>
 8003272:	f7ff fba9 	bl	80029c8 <_free_r>
 8003276:	4628      	mov	r0, r5
 8003278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800327a:	f000 f827 	bl	80032cc <_malloc_usable_size_r>
 800327e:	42a8      	cmp	r0, r5
 8003280:	d20e      	bcs.n	80032a0 <_realloc_r+0x44>
 8003282:	4638      	mov	r0, r7
 8003284:	4629      	mov	r1, r5
 8003286:	f7ff fbe3 	bl	8002a50 <_malloc_r>
 800328a:	4604      	mov	r4, r0
 800328c:	b150      	cbz	r0, 80032a4 <_realloc_r+0x48>
 800328e:	4631      	mov	r1, r6
 8003290:	462a      	mov	r2, r5
 8003292:	f7ff f861 	bl	8002358 <memcpy>
 8003296:	4638      	mov	r0, r7
 8003298:	4631      	mov	r1, r6
 800329a:	f7ff fb95 	bl	80029c8 <_free_r>
 800329e:	e001      	b.n	80032a4 <_realloc_r+0x48>
 80032a0:	4630      	mov	r0, r6
 80032a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a4:	4620      	mov	r0, r4
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032a8 <_read_r>:
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4c07      	ldr	r4, [pc, #28]	; (80032c8 <_read_r+0x20>)
 80032ac:	4605      	mov	r5, r0
 80032ae:	2000      	movs	r0, #0
 80032b0:	6020      	str	r0, [r4, #0]
 80032b2:	4608      	mov	r0, r1
 80032b4:	4611      	mov	r1, r2
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 f832 	bl	8003320 <_read>
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d102      	bne.n	80032c6 <_read_r+0x1e>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	b103      	cbz	r3, 80032c6 <_read_r+0x1e>
 80032c4:	602b      	str	r3, [r5, #0]
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	1ffe88e4 	.word	0x1ffe88e4

080032cc <_malloc_usable_size_r>:
 80032cc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80032d0:	2800      	cmp	r0, #0
 80032d2:	bfbe      	ittt	lt
 80032d4:	1809      	addlt	r1, r1, r0
 80032d6:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80032da:	18c0      	addlt	r0, r0, r3
 80032dc:	3804      	subs	r0, #4
 80032de:	4770      	bx	lr

080032e0 <_close>:
 80032e0:	4b02      	ldr	r3, [pc, #8]	; (80032ec <_close+0xc>)
 80032e2:	2258      	movs	r2, #88	; 0x58
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ea:	4770      	bx	lr
 80032ec:	1ffe88e4 	.word	0x1ffe88e4

080032f0 <_fstat>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <_fstat+0xc>)
 80032f2:	2258      	movs	r2, #88	; 0x58
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295
 80032fa:	4770      	bx	lr
 80032fc:	1ffe88e4 	.word	0x1ffe88e4

08003300 <_isatty>:
 8003300:	4b02      	ldr	r3, [pc, #8]	; (800330c <_isatty+0xc>)
 8003302:	2258      	movs	r2, #88	; 0x58
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	2000      	movs	r0, #0
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	1ffe88e4 	.word	0x1ffe88e4

08003310 <_lseek>:
 8003310:	4b02      	ldr	r3, [pc, #8]	; (800331c <_lseek+0xc>)
 8003312:	2258      	movs	r2, #88	; 0x58
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	4770      	bx	lr
 800331c:	1ffe88e4 	.word	0x1ffe88e4

08003320 <_read>:
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <_read+0xc>)
 8003322:	2258      	movs	r2, #88	; 0x58
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	4770      	bx	lr
 800332c:	1ffe88e4 	.word	0x1ffe88e4

08003330 <_write>:
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <_write+0xc>)
 8003332:	2258      	movs	r2, #88	; 0x58
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	4770      	bx	lr
 800333c:	1ffe88e4 	.word	0x1ffe88e4
 8003340:	01010230 	.word	0x01010230
 8003344:	00010000 	.word	0x00010000
 8003348:	00000000 	.word	0x00000000
 800334c:	00010000 	.word	0x00010000
 8003350:	01010102 	.word	0x01010102

08003354 <CAN_NODE_0_gpio_out>:
 8003354:	48028200 00000000                       ...H....

0800335c <CAN_NODE_0_gpio_out_config>:
 800335c:	00000088 00000001 00000002              ............

08003368 <CAN_NODE_0_gpio_in>:
 8003368:	48028e00 00000003                       ...H....

08003370 <CAN_NODE_0_gpio_in_config>:
	...

0800337c <CAN_NODE_0_BitTimeConfig>:
 800337c:	08954400 0007a120 00021f40              .D.. ...@...

08003388 <CAN_NODE_0_sr>:
 8003388:	00000000                                ....

0800338c <CAN_NODE_0_LMO_01_Config>:
 800338c:	1ffe8810 01000023 00000000              ....#.......

08003398 <CAN_NODE_0_LMO_02_Config>:
 8003398:	1ffe8830 00000022 00000001              0...".......

080033a4 <CAN_NODE_0>:
 80033a4:	1ffe8800 48014200 0800337c 0800338c     .....B.H|3...3..
 80033b4:	08003398 00000000 00000000 00000000     .3..............
	...
 8003430:	08003388 08003354 0800335c 08003368     .3..T3..\3..h3..
 8003440:	08003370 00020001 00000000 200a200d     p3........... . 
 8003450:	0a200d20 00000000 414c200d 455f5453      . ...... LAST_E
 8003460:	524f5252 444f435f 74532045 20666675     RROR_CODE Stuff 
 8003470:	6f727245 0d202072 00000020 414c200d     Error  . .... LA
 8003480:	455f5453 524f5252 444f435f 6f462045     ST_ERROR_CODE Fo
 8003490:	45206d72 726f7272 200d2020 0000000a     rm Error  . ....
 80034a0:	414c200d 455f5453 524f5252 444f435f     . LAST_ERROR_COD
 80034b0:	63412045 7245206b 20726f72 0a200d20     E Ack Error  . .
 80034c0:	00000000 414c200d 455f5453 524f5252     ..... LAST_ERROR
 80034d0:	444f435f 69422045 45203174 726f7272     _CODE Bit1 Error
 80034e0:	0a200d20 00000000 414c200d 455f5453      . ...... LAST_E
 80034f0:	524f5252 444f435f 69422045 45203074     RROR_CODE Bit0 E
 8003500:	726f7272 0a200d20 00000000 414c200d     rror . ...... LA
 8003510:	455f5453 524f5252 444f435f 52432045     ST_ERROR_CODE CR
 8003520:	72452043 20726f72 0a200d20 00000000     C Error  . .....
 8003530:	4320200d 77205550 65746972 206f7420     .  CPU write to 
 8003540:	2043454c 0a200d20 00000000 5854200d     LEC  . ...... TX
 8003550:	204b4f20 200a200d 00000000 5852200d      OK . . ..... RX
 8003560:	204b4f20 200a200d 00000000 4c41200d      OK . . ..... AL
 8003570:	20545245 4e524157 20474e49 200a200d     ERT WARNING . . 
 8003580:	00000000 5245200d 20524f52 4e524157     ..... ERROR WARN
 8003590:	0d474e49 00200a20 5542200d 464f2053     ING. . .. BUS OF
 80035a0:	200d2046 0000200a 494c200d 4c5f5453     F . . ... LIST_L
 80035b0:	54474e45 52455f48 20524f52 200a200d     ENGTH_ERROR . . 
 80035c0:	00000000 494c200d 4f5f5453 43454a42     ..... LIST_OBJEC
 80035d0:	52455f54 20524f52 200a200d 00000000     T_ERROR . . ....
 80035e0:	6567200d 74732074 73757461 6425203a     . get status: %d
 80035f0:	000a200d 6552200d 76696563 72452065     . ... Receive Er
 8003600:	3a726f72 20642520 000a200d 04030201     ror: %d . ......
 8003610:	08070605 00000043                       ....C...

08003618 <_global_impure_ptr>:
 8003618:	1ffe8858                                X...

0800361c <__sf_fake_stdin>:
	...

0800363c <__sf_fake_stdout>:
	...

0800365c <__sf_fake_stderr>:
	...
 800367c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 800368c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 800369c:	31300046 35343332 39383736 64636261     F.0123456789abcd
 80036ac:	00006665                                ef..
