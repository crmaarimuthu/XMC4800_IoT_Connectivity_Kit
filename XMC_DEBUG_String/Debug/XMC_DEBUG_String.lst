
XMC_DEBUG_String.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000153c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000064  1ffe8800  0c00153c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000bc  1ffe8864  0c0015a0  00010864  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000000d0  00000000  00000000  00010868  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f6d  00000000  00000000  00010938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000498  00000000  00000000  000118a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080d  00000000  00000000  00011d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  0001254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000700  00000000  00000000  00012fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  000136ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00013978  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000057f  00000000  00000000  000139e8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00153c 	.word	0x0c00153c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000064 	.word	0x00000064
 8000254:	0c00153c 	.word	0x0c00153c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8864 	.word	0x1ffe8864
 8000264:	000000bc 	.word	0x000000bc
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08000891 	.word	0x08000891
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08000849 	.word	0x08000849

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  {
    __NOP();
 80002aa:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba7      	ldr	r3, [pc, #668]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa4      	ldr	r2, [pc, #656]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000366:	4ba4      	ldr	r3, [pc, #656]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4ba1      	ldr	r3, [pc, #644]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9f      	ldr	r3, [pc, #636]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a9c      	ldr	r2, [pc, #624]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 800038c:	4b9b      	ldr	r3, [pc, #620]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a98      	ldr	r2, [pc, #608]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003a0:	4b97      	ldr	r3, [pc, #604]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a93      	ldr	r2, [pc, #588]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003b4:	4b92      	ldr	r3, [pc, #584]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b90      	ldr	r3, [pc, #576]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d026      	beq.n	800041c <SystemCoreClockSetup+0xc8>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8d      	ldr	r2, [pc, #564]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003d0:	4b8c      	ldr	r3, [pc, #560]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f9e3 	bl	80007a8 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b88      	ldr	r3, [pc, #544]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4984      	ldr	r1, [pc, #528]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003f2:	4a84      	ldr	r2, [pc, #528]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 = 0;
 80003fa:	4b81      	ldr	r3, [pc, #516]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000400:	4a7f      	ldr	r2, [pc, #508]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000402:	4b7f      	ldr	r3, [pc, #508]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800040a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800040c:	bf00      	nop
 800040e:	4b7c      	ldr	r3, [pc, #496]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000416:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800041a:	d1f8      	bne.n	800040e <SystemCoreClockSetup+0xba>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800041c:	4a78      	ldr	r2, [pc, #480]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800041e:	4b78      	ldr	r3, [pc, #480]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000428:	bf00      	nop
 800042a:	4b75      	ldr	r3, [pc, #468]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <SystemCoreClockSetup+0xd6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000436:	4a72      	ldr	r2, [pc, #456]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000438:	4b71      	ldr	r3, [pc, #452]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000442:	4b6f      	ldr	r3, [pc, #444]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000444:	4a71      	ldr	r2, [pc, #452]	; (800060c <SystemCoreClockSetup+0x2b8>)
 8000446:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000448:	4a6d      	ldr	r2, [pc, #436]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800044a:	4b6d      	ldr	r3, [pc, #436]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000452:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000454:	4a6a      	ldr	r2, [pc, #424]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000456:	4b6a      	ldr	r3, [pc, #424]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f023 0310 	bic.w	r3, r3, #16
 800045e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000460:	4a67      	ldr	r2, [pc, #412]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000462:	4b67      	ldr	r3, [pc, #412]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800046c:	bf00      	nop
 800046e:	4b64      	ldr	r3, [pc, #400]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f003 0304 	and.w	r3, r3, #4
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f9      	beq.n	800046e <SystemCoreClockSetup+0x11a>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800047a:	4a61      	ldr	r2, [pc, #388]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800047c:	4b60      	ldr	r3, [pc, #384]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f023 0301 	bic.w	r3, r3, #1
 8000484:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000486:	bf00      	nop
 8000488:	4b5d      	ldr	r3, [pc, #372]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1f9      	bne.n	8000488 <SystemCoreClockSetup+0x134>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 8000494:	4b5e      	ldr	r3, [pc, #376]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 8000496:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800049a:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 800049c:	4b5c      	ldr	r3, [pc, #368]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 800049e:	2200      	movs	r2, #0
 80004a0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 80004a2:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a8:	4b59      	ldr	r3, [pc, #356]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004ae:	4b58      	ldr	r3, [pc, #352]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004b4:	4b56      	ldr	r3, [pc, #344]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004b6:	2203      	movs	r2, #3
 80004b8:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004ba:	4b55      	ldr	r3, [pc, #340]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004bc:	4a55      	ldr	r2, [pc, #340]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004be:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004c0:	4b53      	ldr	r3, [pc, #332]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004c6:	4b52      	ldr	r3, [pc, #328]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004c8:	4a53      	ldr	r2, [pc, #332]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004ca:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004cc:	4a4c      	ldr	r2, [pc, #304]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004ce:	4b4c      	ldr	r3, [pc, #304]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004d6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004da:	4a50      	ldr	r2, [pc, #320]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004dc:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004de:	bf00      	nop
 80004e0:	4b47      	ldr	r3, [pc, #284]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0f9      	beq.n	80004e0 <SystemCoreClockSetup+0x18c>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_48MHZ);
 80004ec:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004f0:	f7ff fed4 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004f4:	4b42      	ldr	r3, [pc, #264]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004f6:	4a4a      	ldr	r2, [pc, #296]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 80004f8:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004fa:	bf00      	nop
 80004fc:	4b40      	ldr	r3, [pc, #256]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <SystemCoreClockSetup+0x1a8>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_72MHZ);
 8000508:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800050c:	f7ff fec6 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000512:	4a44      	ldr	r2, [pc, #272]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000514:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000516:	bf00      	nop
 8000518:	4b39      	ldr	r3, [pc, #228]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <SystemCoreClockSetup+0x1c4>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_96MHZ);
 8000524:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8000528:	f7ff feb8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800052c:	4b34      	ldr	r3, [pc, #208]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 8000530:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000532:	bf00      	nop
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0f9      	beq.n	8000534 <SystemCoreClockSetup+0x1e0>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_120MHZ);
 8000540:	f241 7070 	movw	r0, #6000	; 0x1770
 8000544:	f7ff feaa 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <SystemCoreClockSetup+0x2d8>)
 800054c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 800054e:	bf00      	nop
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0320 	and.w	r3, r3, #32
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f9      	beq.n	8000550 <SystemCoreClockSetup+0x1fc>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_144MHZ);
 800055c:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000560:	f7ff fe9c 	bl	800029c <delay>

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000564:	4b32      	ldr	r3, [pc, #200]	; (8000630 <SystemCoreClockSetup+0x2dc>)
 8000566:	2205      	movs	r2, #5
 8000568:	60da      	str	r2, [r3, #12]
#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800056a:	4a25      	ldr	r2, [pc, #148]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000574:	f023 0302 	bic.w	r3, r3, #2
 8000578:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000582:	2b00      	cmp	r3, #0
 8000584:	d031      	beq.n	80005ea <SystemCoreClockSetup+0x296>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <SystemCoreClockSetup+0x2e0>)
 800058c:	4013      	ands	r3, r2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d007      	beq.n	80005a2 <SystemCoreClockSetup+0x24e>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000592:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059c:	f023 0302 	bic.w	r3, r3, #2
 80005a0:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80005ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80005b0:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80005b2:	f000 f8f9 	bl	80007a8 <OSCHP_GetFrequency>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80005ba:	fba3 2302 	umull	r2, r3, r3, r2
 80005be:	0d1b      	lsrs	r3, r3, #20
 80005c0:	3b01      	subs	r3, #1
 80005c2:	041b      	lsls	r3, r3, #16
 80005c4:	490f      	ldr	r1, [pc, #60]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005c8:	6852      	ldr	r2, [r2, #4]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005d8:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80005da:	bf00      	nop
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80005e4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80005e8:	d1f8      	bne.n	80005dc <SystemCoreClockSetup+0x288>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	e01f      	b.n	8000638 <SystemCoreClockSetup+0x2e4>
 80005f8:	50004200 	.word	0x50004200
 80005fc:	50004400 	.word	0x50004400
 8000600:	50004710 	.word	0x50004710
 8000604:	50004700 	.word	0x50004700
 8000608:	6b5fca6b 	.word	0x6b5fca6b
 800060c:	010b2f00 	.word	0x010b2f00
 8000610:	50004600 	.word	0x50004600
 8000614:	00010005 	.word	0x00010005
 8000618:	01200003 	.word	0x01200003
 800061c:	01052f00 	.word	0x01052f00
 8000620:	01032f00 	.word	0x01032f00
 8000624:	01022f00 	.word	0x01022f00
 8000628:	01012f00 	.word	0x01012f00
 800062c:	01002f00 	.word	0x01002f00
 8000630:	50004160 	.word	0x50004160
 8000634:	00010002 	.word	0x00010002
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000638:	bf00      	nop
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <SystemCoreClockSetup+0x2e6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <SystemCoreClockSetup+0x374>)
 8000656:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000662:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f023 0310 	bic.w	r3, r3, #16
 800066e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800067c:	bf00      	nop
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <SystemCoreClockSetup+0x370>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <SystemCoreClockSetup+0x32a>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f023 0301 	bic.w	r3, r3, #1
 8000694:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000696:	bf00      	nop
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SystemCoreClockSetup+0x370>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f9      	bne.n	8000698 <SystemCoreClockSetup+0x344>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <SystemCoreClockSetup+0x370>)
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <SystemCoreClockSetup+0x370>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ae:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemCoreClockSetup+0x378>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	60da      	str	r2, [r3, #12]
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <SystemCoreClockSetup+0x37c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80006bc:	f000 f80a 	bl	80006d4 <SystemCoreClockUpdate>
}
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	50004710 	.word	0x50004710
 80006c8:	02006300 	.word	0x02006300
 80006cc:	50004160 	.word	0x50004160
 80006d0:	50004600 	.word	0x50004600

080006d4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <SystemCoreClockUpdate+0xc4>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d03e      	beq.n	8000764 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <SystemCoreClockUpdate+0xc8>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <SystemCoreClockUpdate+0xcc>)
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e002      	b.n	80006fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80006f8:	f000 f856 	bl	80007a8 <OSCHP_GetFrequency>
 80006fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemCoreClockUpdate+0xc8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	2b00      	cmp	r3, #0
 8000708:	d020      	beq.n	800074c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <SystemCoreClockUpdate+0xc8>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	3301      	adds	r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemCoreClockUpdate+0xc8>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	3301      	adds	r3, #1
 8000724:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemCoreClockUpdate+0xc8>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	3301      	adds	r3, #1
 8000732:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	fb02 f303 	mul.w	r3, r2, r3
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e00d      	b.n	8000768 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemCoreClockUpdate+0xc8>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000754:	3301      	adds	r3, #1
 8000756:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e001      	b.n	8000768 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <SystemCoreClockUpdate+0xcc>)
 8000766:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <SystemCoreClockUpdate+0xc4>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3301      	adds	r3, #1
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <SystemCoreClockUpdate+0xc4>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	3301      	adds	r3, #1
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <SystemCoreClockUpdate+0xd0>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	50004600 	.word	0x50004600
 800079c:	50004710 	.word	0x50004710
 80007a0:	016e3600 	.word	0x016e3600
 80007a4:	2003ffc0 	.word	0x2003ffc0

080007a8 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <OSCHP_GetFrequency+0x10>)
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	00b71b00 	.word	0x00b71b00

080007bc <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <_sbrk+0x5c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <_sbrk+0x5c>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <_sbrk+0x60>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x5c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3303      	adds	r3, #3
 80007dc:	f023 0303 	bic.w	r3, r3, #3
 80007e0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <_sbrk+0x5c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <_sbrk+0x64>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_sbrk+0x5c>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <_sbrk+0x5c>)
 80007fa:	6013      	str	r3, [r2, #0]
    return (base);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	e006      	b.n	800080e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000800:	f000 f840 	bl	8000884 <__errno>
 8000804:	4602      	mov	r2, r0
 8000806:	230c      	movs	r3, #12
 8000808:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	1ffe8864 	.word	0x1ffe8864
 800081c:	20000000 	.word	0x20000000
 8000820:	2003ffc0 	.word	0x2003ffc0

08000824 <_init>:

/* Init */
void _init(void)
{}
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS; 
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
  return init_status;
 800083a:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800084e:	f7ff ffef 	bl	8000830 <DAVE_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  initialise_monitor_handles();
 8000856:	f000 fcb7 	bl	80011c8 <initialise_monitor_handles>
  XMC_DEBUG("SimTestlab\n")
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <main+0x30>)
 800085c:	f000 f8a4 	bl	80009a8 <puts>
  if (status != DAVE_STATUS_SUCCESS)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <main+0x26>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <main+0x34>)
 8000868:	f000 f89e 	bl	80009a8 <puts>

    while(1U)
    {

    }
 800086c:	e7fe      	b.n	800086c <main+0x24>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  XMC_DEBUG("WELCOME\n")
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <main+0x38>)
 8000870:	f000 f89a 	bl	80009a8 <puts>
  }
 8000874:	e7fb      	b.n	800086e <main+0x26>
 8000876:	bf00      	nop
 8000878:	0800149c 	.word	0x0800149c
 800087c:	080014a8 	.word	0x080014a8
 8000880:	080014c8 	.word	0x080014c8

08000884 <__errno>:
 8000884:	4b01      	ldr	r3, [pc, #4]	; (800088c <__errno+0x8>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	1ffe8860 	.word	0x1ffe8860

08000890 <__libc_init_array>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <__libc_init_array+0x3c>)
 8000894:	4c0e      	ldr	r4, [pc, #56]	; (80008d0 <__libc_init_array+0x40>)
 8000896:	1ae4      	subs	r4, r4, r3
 8000898:	10a4      	asrs	r4, r4, #2
 800089a:	2500      	movs	r5, #0
 800089c:	461e      	mov	r6, r3
 800089e:	42a5      	cmp	r5, r4
 80008a0:	d004      	beq.n	80008ac <__libc_init_array+0x1c>
 80008a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008a6:	4798      	blx	r3
 80008a8:	3501      	adds	r5, #1
 80008aa:	e7f8      	b.n	800089e <__libc_init_array+0xe>
 80008ac:	f7ff ffba 	bl	8000824 <_init>
 80008b0:	4c08      	ldr	r4, [pc, #32]	; (80008d4 <__libc_init_array+0x44>)
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <__libc_init_array+0x48>)
 80008b4:	1ae4      	subs	r4, r4, r3
 80008b6:	10a4      	asrs	r4, r4, #2
 80008b8:	2500      	movs	r5, #0
 80008ba:	461e      	mov	r6, r3
 80008bc:	42a5      	cmp	r5, r4
 80008be:	d004      	beq.n	80008ca <__libc_init_array+0x3a>
 80008c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008c4:	4798      	blx	r3
 80008c6:	3501      	adds	r5, #1
 80008c8:	e7f8      	b.n	80008bc <__libc_init_array+0x2c>
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	1ffe8864 	.word	0x1ffe8864
 80008d0:	1ffe8864 	.word	0x1ffe8864
 80008d4:	1ffe8864 	.word	0x1ffe8864
 80008d8:	1ffe8864 	.word	0x1ffe8864

080008dc <memset>:
 80008dc:	4402      	add	r2, r0
 80008de:	4603      	mov	r3, r0
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d002      	beq.n	80008ea <memset+0xe>
 80008e4:	f803 1b01 	strb.w	r1, [r3], #1
 80008e8:	e7fa      	b.n	80008e0 <memset+0x4>
 80008ea:	4770      	bx	lr

080008ec <_puts_r>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	460e      	mov	r6, r1
 80008f0:	4605      	mov	r5, r0
 80008f2:	b118      	cbz	r0, 80008fc <_puts_r+0x10>
 80008f4:	6983      	ldr	r3, [r0, #24]
 80008f6:	b90b      	cbnz	r3, 80008fc <_puts_r+0x10>
 80008f8:	f000 fa0c 	bl	8000d14 <__sinit>
 80008fc:	68ac      	ldr	r4, [r5, #8]
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	0719      	lsls	r1, r3, #28
 8000902:	d501      	bpl.n	8000908 <_puts_r+0x1c>
 8000904:	6923      	ldr	r3, [r4, #16]
 8000906:	b983      	cbnz	r3, 800092a <_puts_r+0x3e>
 8000908:	4628      	mov	r0, r5
 800090a:	4621      	mov	r1, r4
 800090c:	f000 f8a8 	bl	8000a60 <__swsetup_r>
 8000910:	b158      	cbz	r0, 800092a <_puts_r+0x3e>
 8000912:	f04f 30ff 	mov.w	r0, #4294967295
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0e      	blt.n	800093a <_puts_r+0x4e>
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	68a3      	ldr	r3, [r4, #8]
 800092c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8000930:	3b01      	subs	r3, #1
 8000932:	60a3      	str	r3, [r4, #8]
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1ef      	bne.n	8000918 <_puts_r+0x2c>
 8000938:	e016      	b.n	8000968 <_puts_r+0x7c>
 800093a:	69a2      	ldr	r2, [r4, #24]
 800093c:	4293      	cmp	r3, r2
 800093e:	db09      	blt.n	8000954 <_puts_r+0x68>
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	7819      	ldrb	r1, [r3, #0]
 800094c:	290a      	cmp	r1, #10
 800094e:	d1ea      	bne.n	8000926 <_puts_r+0x3a>
 8000950:	4628      	mov	r0, r5
 8000952:	e002      	b.n	800095a <_puts_r+0x6e>
 8000954:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8000958:	4628      	mov	r0, r5
 800095a:	4622      	mov	r2, r4
 800095c:	f000 f82c 	bl	80009b8 <__swbuf_r>
 8000960:	1c42      	adds	r2, r0, #1
 8000962:	4250      	negs	r0, r2
 8000964:	4150      	adcs	r0, r2
 8000966:	e7d3      	b.n	8000910 <_puts_r+0x24>
 8000968:	2b00      	cmp	r3, #0
 800096a:	da15      	bge.n	8000998 <_puts_r+0xac>
 800096c:	69a2      	ldr	r2, [r4, #24]
 800096e:	4293      	cmp	r3, r2
 8000970:	db08      	blt.n	8000984 <_puts_r+0x98>
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	220a      	movs	r2, #10
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	7819      	ldrb	r1, [r3, #0]
 800097c:	4291      	cmp	r1, r2
 800097e:	d10f      	bne.n	80009a0 <_puts_r+0xb4>
 8000980:	4628      	mov	r0, r5
 8000982:	e001      	b.n	8000988 <_puts_r+0x9c>
 8000984:	4628      	mov	r0, r5
 8000986:	210a      	movs	r1, #10
 8000988:	4622      	mov	r2, r4
 800098a:	f000 f815 	bl	80009b8 <__swbuf_r>
 800098e:	1c43      	adds	r3, r0, #1
 8000990:	4258      	negs	r0, r3
 8000992:	4158      	adcs	r0, r3
 8000994:	b130      	cbz	r0, 80009a4 <_puts_r+0xb8>
 8000996:	e7bc      	b.n	8000912 <_puts_r+0x26>
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	220a      	movs	r2, #10
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	6023      	str	r3, [r4, #0]
 80009a4:	200a      	movs	r0, #10
 80009a6:	bd70      	pop	{r4, r5, r6, pc}

080009a8 <puts>:
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <puts+0xc>)
 80009aa:	4601      	mov	r1, r0
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	f7ff bf9d 	b.w	80008ec <_puts_r>
 80009b2:	bf00      	nop
 80009b4:	1ffe8860 	.word	0x1ffe8860

080009b8 <__swbuf_r>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	460d      	mov	r5, r1
 80009bc:	4614      	mov	r4, r2
 80009be:	4606      	mov	r6, r0
 80009c0:	b118      	cbz	r0, 80009ca <__swbuf_r+0x12>
 80009c2:	6983      	ldr	r3, [r0, #24]
 80009c4:	b90b      	cbnz	r3, 80009ca <__swbuf_r+0x12>
 80009c6:	f000 f9a5 	bl	8000d14 <__sinit>
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <__swbuf_r+0x9c>)
 80009cc:	429c      	cmp	r4, r3
 80009ce:	d101      	bne.n	80009d4 <__swbuf_r+0x1c>
 80009d0:	6874      	ldr	r4, [r6, #4]
 80009d2:	e008      	b.n	80009e6 <__swbuf_r+0x2e>
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <__swbuf_r+0xa0>)
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d101      	bne.n	80009de <__swbuf_r+0x26>
 80009da:	68b4      	ldr	r4, [r6, #8]
 80009dc:	e003      	b.n	80009e6 <__swbuf_r+0x2e>
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <__swbuf_r+0xa4>)
 80009e0:	429c      	cmp	r4, r3
 80009e2:	bf08      	it	eq
 80009e4:	68f4      	ldreq	r4, [r6, #12]
 80009e6:	69a3      	ldr	r3, [r4, #24]
 80009e8:	60a3      	str	r3, [r4, #8]
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	071a      	lsls	r2, r3, #28
 80009ee:	d509      	bpl.n	8000a04 <__swbuf_r+0x4c>
 80009f0:	6923      	ldr	r3, [r4, #16]
 80009f2:	b13b      	cbz	r3, 8000a04 <__swbuf_r+0x4c>
 80009f4:	6823      	ldr	r3, [r4, #0]
 80009f6:	6920      	ldr	r0, [r4, #16]
 80009f8:	1a18      	subs	r0, r3, r0
 80009fa:	6963      	ldr	r3, [r4, #20]
 80009fc:	4298      	cmp	r0, r3
 80009fe:	b2ed      	uxtb	r5, r5
 8000a00:	db0f      	blt.n	8000a22 <__swbuf_r+0x6a>
 8000a02:	e008      	b.n	8000a16 <__swbuf_r+0x5e>
 8000a04:	4630      	mov	r0, r6
 8000a06:	4621      	mov	r1, r4
 8000a08:	f000 f82a 	bl	8000a60 <__swsetup_r>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d0f1      	beq.n	80009f4 <__swbuf_r+0x3c>
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	4630      	mov	r0, r6
 8000a18:	4621      	mov	r1, r4
 8000a1a:	f000 f911 	bl	8000c40 <_fflush_r>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d1f6      	bne.n	8000a10 <__swbuf_r+0x58>
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	60a3      	str	r3, [r4, #8]
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	6022      	str	r2, [r4, #0]
 8000a2e:	701d      	strb	r5, [r3, #0]
 8000a30:	6963      	ldr	r3, [r4, #20]
 8000a32:	3001      	adds	r0, #1
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d004      	beq.n	8000a42 <__swbuf_r+0x8a>
 8000a38:	89a3      	ldrh	r3, [r4, #12]
 8000a3a:	07db      	lsls	r3, r3, #31
 8000a3c:	d507      	bpl.n	8000a4e <__swbuf_r+0x96>
 8000a3e:	2d0a      	cmp	r5, #10
 8000a40:	d105      	bne.n	8000a4e <__swbuf_r+0x96>
 8000a42:	4630      	mov	r0, r6
 8000a44:	4621      	mov	r1, r4
 8000a46:	f000 f8fb 	bl	8000c40 <_fflush_r>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d1e0      	bne.n	8000a10 <__swbuf_r+0x58>
 8000a4e:	4628      	mov	r0, r5
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
 8000a52:	bf00      	nop
 8000a54:	080014d8 	.word	0x080014d8
 8000a58:	080014f8 	.word	0x080014f8
 8000a5c:	08001518 	.word	0x08001518

08000a60 <__swsetup_r>:
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <__swsetup_r+0xc8>)
 8000a62:	b570      	push	{r4, r5, r6, lr}
 8000a64:	681d      	ldr	r5, [r3, #0]
 8000a66:	4606      	mov	r6, r0
 8000a68:	460c      	mov	r4, r1
 8000a6a:	b125      	cbz	r5, 8000a76 <__swsetup_r+0x16>
 8000a6c:	69ab      	ldr	r3, [r5, #24]
 8000a6e:	b913      	cbnz	r3, 8000a76 <__swsetup_r+0x16>
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 f94f 	bl	8000d14 <__sinit>
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <__swsetup_r+0xcc>)
 8000a78:	429c      	cmp	r4, r3
 8000a7a:	d101      	bne.n	8000a80 <__swsetup_r+0x20>
 8000a7c:	686c      	ldr	r4, [r5, #4]
 8000a7e:	e008      	b.n	8000a92 <__swsetup_r+0x32>
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <__swsetup_r+0xd0>)
 8000a82:	429c      	cmp	r4, r3
 8000a84:	d101      	bne.n	8000a8a <__swsetup_r+0x2a>
 8000a86:	68ac      	ldr	r4, [r5, #8]
 8000a88:	e003      	b.n	8000a92 <__swsetup_r+0x32>
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <__swsetup_r+0xd4>)
 8000a8c:	429c      	cmp	r4, r3
 8000a8e:	bf08      	it	eq
 8000a90:	68ec      	ldreq	r4, [r5, #12]
 8000a92:	89a3      	ldrh	r3, [r4, #12]
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	0711      	lsls	r1, r2, #28
 8000a98:	d41d      	bmi.n	8000ad6 <__swsetup_r+0x76>
 8000a9a:	06d5      	lsls	r5, r2, #27
 8000a9c:	d402      	bmi.n	8000aa4 <__swsetup_r+0x44>
 8000a9e:	2209      	movs	r2, #9
 8000aa0:	6032      	str	r2, [r6, #0]
 8000aa2:	e038      	b.n	8000b16 <__swsetup_r+0xb6>
 8000aa4:	0750      	lsls	r0, r2, #29
 8000aa6:	d512      	bpl.n	8000ace <__swsetup_r+0x6e>
 8000aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aaa:	b141      	cbz	r1, 8000abe <__swsetup_r+0x5e>
 8000aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	d002      	beq.n	8000aba <__swsetup_r+0x5a>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	f000 fa03 	bl	8000ec0 <_free_r>
 8000aba:	2300      	movs	r3, #0
 8000abc:	6363      	str	r3, [r4, #52]	; 0x34
 8000abe:	89a3      	ldrh	r3, [r4, #12]
 8000ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ac4:	81a3      	strh	r3, [r4, #12]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	6063      	str	r3, [r4, #4]
 8000aca:	6923      	ldr	r3, [r4, #16]
 8000acc:	6023      	str	r3, [r4, #0]
 8000ace:	89a3      	ldrh	r3, [r4, #12]
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	81a3      	strh	r3, [r4, #12]
 8000ad6:	6923      	ldr	r3, [r4, #16]
 8000ad8:	b94b      	cbnz	r3, 8000aee <__swsetup_r+0x8e>
 8000ada:	89a3      	ldrh	r3, [r4, #12]
 8000adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ae4:	d003      	beq.n	8000aee <__swsetup_r+0x8e>
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f000 f99b 	bl	8000e24 <__smakebuf_r>
 8000aee:	89a3      	ldrh	r3, [r4, #12]
 8000af0:	f013 0201 	ands.w	r2, r3, #1
 8000af4:	d005      	beq.n	8000b02 <__swsetup_r+0xa2>
 8000af6:	2200      	movs	r2, #0
 8000af8:	60a2      	str	r2, [r4, #8]
 8000afa:	6962      	ldr	r2, [r4, #20]
 8000afc:	4252      	negs	r2, r2
 8000afe:	61a2      	str	r2, [r4, #24]
 8000b00:	e003      	b.n	8000b0a <__swsetup_r+0xaa>
 8000b02:	0799      	lsls	r1, r3, #30
 8000b04:	bf58      	it	pl
 8000b06:	6962      	ldrpl	r2, [r4, #20]
 8000b08:	60a2      	str	r2, [r4, #8]
 8000b0a:	6922      	ldr	r2, [r4, #16]
 8000b0c:	b94a      	cbnz	r2, 8000b22 <__swsetup_r+0xc2>
 8000b0e:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8000b12:	b280      	uxth	r0, r0
 8000b14:	b130      	cbz	r0, 8000b24 <__swsetup_r+0xc4>
 8000b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1a:	81a3      	strh	r3, [r4, #12]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	bd70      	pop	{r4, r5, r6, pc}
 8000b22:	2000      	movs	r0, #0
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
 8000b26:	bf00      	nop
 8000b28:	1ffe8860 	.word	0x1ffe8860
 8000b2c:	080014d8 	.word	0x080014d8
 8000b30:	080014f8 	.word	0x080014f8
 8000b34:	08001518 	.word	0x08001518

08000b38 <__sflush_r>:
 8000b38:	898a      	ldrh	r2, [r1, #12]
 8000b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b3e:	4605      	mov	r5, r0
 8000b40:	0710      	lsls	r0, r2, #28
 8000b42:	460c      	mov	r4, r1
 8000b44:	d457      	bmi.n	8000bf6 <__sflush_r+0xbe>
 8000b46:	684b      	ldr	r3, [r1, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dc02      	bgt.n	8000b52 <__sflush_r+0x1a>
 8000b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dd18      	ble.n	8000b84 <__sflush_r+0x4c>
 8000b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b54:	b1b6      	cbz	r6, 8000b84 <__sflush_r+0x4c>
 8000b56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	b292      	uxth	r2, r2
 8000b5e:	682f      	ldr	r7, [r5, #0]
 8000b60:	602b      	str	r3, [r5, #0]
 8000b62:	b10a      	cbz	r2, 8000b68 <__sflush_r+0x30>
 8000b64:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000b66:	e010      	b.n	8000b8a <__sflush_r+0x52>
 8000b68:	6a21      	ldr	r1, [r4, #32]
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	47b0      	blx	r6
 8000b70:	1c41      	adds	r1, r0, #1
 8000b72:	4602      	mov	r2, r0
 8000b74:	d109      	bne.n	8000b8a <__sflush_r+0x52>
 8000b76:	682b      	ldr	r3, [r5, #0]
 8000b78:	b13b      	cbz	r3, 8000b8a <__sflush_r+0x52>
 8000b7a:	2b1d      	cmp	r3, #29
 8000b7c:	d001      	beq.n	8000b82 <__sflush_r+0x4a>
 8000b7e:	2b16      	cmp	r3, #22
 8000b80:	d147      	bne.n	8000c12 <__sflush_r+0xda>
 8000b82:	602f      	str	r7, [r5, #0]
 8000b84:	2000      	movs	r0, #0
 8000b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b8a:	89a3      	ldrh	r3, [r4, #12]
 8000b8c:	075b      	lsls	r3, r3, #29
 8000b8e:	d505      	bpl.n	8000b9c <__sflush_r+0x64>
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b96:	b10b      	cbz	r3, 8000b9c <__sflush_r+0x64>
 8000b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b9a:	1ad2      	subs	r2, r2, r3
 8000b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b9e:	6a21      	ldr	r1, [r4, #32]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	47b0      	blx	r6
 8000ba6:	1c46      	adds	r6, r0, #1
 8000ba8:	89a3      	ldrh	r3, [r4, #12]
 8000baa:	d105      	bne.n	8000bb8 <__sflush_r+0x80>
 8000bac:	682a      	ldr	r2, [r5, #0]
 8000bae:	b11a      	cbz	r2, 8000bb8 <__sflush_r+0x80>
 8000bb0:	2a1d      	cmp	r2, #29
 8000bb2:	d001      	beq.n	8000bb8 <__sflush_r+0x80>
 8000bb4:	2a16      	cmp	r2, #22
 8000bb6:	d119      	bne.n	8000bec <__sflush_r+0xb4>
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6062      	str	r2, [r4, #4]
 8000bbc:	04d9      	lsls	r1, r3, #19
 8000bbe:	6922      	ldr	r2, [r4, #16]
 8000bc0:	6022      	str	r2, [r4, #0]
 8000bc2:	d504      	bpl.n	8000bce <__sflush_r+0x96>
 8000bc4:	1c42      	adds	r2, r0, #1
 8000bc6:	d101      	bne.n	8000bcc <__sflush_r+0x94>
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	b903      	cbnz	r3, 8000bce <__sflush_r+0x96>
 8000bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8000bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bd0:	602f      	str	r7, [r5, #0]
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	d0d6      	beq.n	8000b84 <__sflush_r+0x4c>
 8000bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	d002      	beq.n	8000be4 <__sflush_r+0xac>
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 f96e 	bl	8000ec0 <_free_r>
 8000be4:	2000      	movs	r0, #0
 8000be6:	6360      	str	r0, [r4, #52]	; 0x34
 8000be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	81a3      	strh	r3, [r4, #12]
 8000bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bf6:	690f      	ldr	r7, [r1, #16]
 8000bf8:	2f00      	cmp	r7, #0
 8000bfa:	d0c3      	beq.n	8000b84 <__sflush_r+0x4c>
 8000bfc:	0793      	lsls	r3, r2, #30
 8000bfe:	680e      	ldr	r6, [r1, #0]
 8000c00:	bf08      	it	eq
 8000c02:	694b      	ldreq	r3, [r1, #20]
 8000c04:	600f      	str	r7, [r1, #0]
 8000c06:	bf18      	it	ne
 8000c08:	2300      	movne	r3, #0
 8000c0a:	ebc7 0806 	rsb	r8, r7, r6
 8000c0e:	608b      	str	r3, [r1, #8]
 8000c10:	e012      	b.n	8000c38 <__sflush_r+0x100>
 8000c12:	89a3      	ldrh	r3, [r4, #12]
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	81a3      	strh	r3, [r4, #12]
 8000c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c22:	4628      	mov	r0, r5
 8000c24:	6a21      	ldr	r1, [r4, #32]
 8000c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c28:	463a      	mov	r2, r7
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	47b0      	blx	r6
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	ddef      	ble.n	8000c12 <__sflush_r+0xda>
 8000c32:	4407      	add	r7, r0
 8000c34:	ebc0 0808 	rsb	r8, r0, r8
 8000c38:	f1b8 0f00 	cmp.w	r8, #0
 8000c3c:	dcf1      	bgt.n	8000c22 <__sflush_r+0xea>
 8000c3e:	e7a1      	b.n	8000b84 <__sflush_r+0x4c>

08000c40 <_fflush_r>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	690b      	ldr	r3, [r1, #16]
 8000c44:	4605      	mov	r5, r0
 8000c46:	460c      	mov	r4, r1
 8000c48:	b1db      	cbz	r3, 8000c82 <_fflush_r+0x42>
 8000c4a:	b118      	cbz	r0, 8000c54 <_fflush_r+0x14>
 8000c4c:	6983      	ldr	r3, [r0, #24]
 8000c4e:	b90b      	cbnz	r3, 8000c54 <_fflush_r+0x14>
 8000c50:	f000 f860 	bl	8000d14 <__sinit>
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <_fflush_r+0x48>)
 8000c56:	429c      	cmp	r4, r3
 8000c58:	d101      	bne.n	8000c5e <_fflush_r+0x1e>
 8000c5a:	686c      	ldr	r4, [r5, #4]
 8000c5c:	e008      	b.n	8000c70 <_fflush_r+0x30>
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <_fflush_r+0x4c>)
 8000c60:	429c      	cmp	r4, r3
 8000c62:	d101      	bne.n	8000c68 <_fflush_r+0x28>
 8000c64:	68ac      	ldr	r4, [r5, #8]
 8000c66:	e003      	b.n	8000c70 <_fflush_r+0x30>
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <_fflush_r+0x50>)
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	bf08      	it	eq
 8000c6e:	68ec      	ldreq	r4, [r5, #12]
 8000c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c74:	b12b      	cbz	r3, 8000c82 <_fflush_r+0x42>
 8000c76:	4628      	mov	r0, r5
 8000c78:	4621      	mov	r1, r4
 8000c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c7e:	f7ff bf5b 	b.w	8000b38 <__sflush_r>
 8000c82:	2000      	movs	r0, #0
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop
 8000c88:	080014d8 	.word	0x080014d8
 8000c8c:	080014f8 	.word	0x080014f8
 8000c90:	08001518 	.word	0x08001518

08000c94 <_cleanup_r>:
 8000c94:	4901      	ldr	r1, [pc, #4]	; (8000c9c <_cleanup_r+0x8>)
 8000c96:	f000 b8a7 	b.w	8000de8 <_fwalk_reent>
 8000c9a:	bf00      	nop
 8000c9c:	08000c41 	.word	0x08000c41

08000ca0 <std.isra.0>:
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	b510      	push	{r4, lr}
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	6003      	str	r3, [r0, #0]
 8000ca8:	6043      	str	r3, [r0, #4]
 8000caa:	6083      	str	r3, [r0, #8]
 8000cac:	8181      	strh	r1, [r0, #12]
 8000cae:	6643      	str	r3, [r0, #100]	; 0x64
 8000cb0:	81c2      	strh	r2, [r0, #14]
 8000cb2:	6103      	str	r3, [r0, #16]
 8000cb4:	6143      	str	r3, [r0, #20]
 8000cb6:	6183      	str	r3, [r0, #24]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	305c      	adds	r0, #92	; 0x5c
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	f7ff fe0d 	bl	80008dc <memset>
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <std.isra.0+0x38>)
 8000cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <std.isra.0+0x3c>)
 8000cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <std.isra.0+0x40>)
 8000ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <std.isra.0+0x44>)
 8000cd0:	6224      	str	r4, [r4, #32]
 8000cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8000cd4:	bd10      	pop	{r4, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08001015 	.word	0x08001015
 8000cdc:	08001037 	.word	0x08001037
 8000ce0:	0800106f 	.word	0x0800106f
 8000ce4:	08001093 	.word	0x08001093

08000ce8 <__sfmoreglue>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	2368      	movs	r3, #104	; 0x68
 8000cec:	1e4d      	subs	r5, r1, #1
 8000cee:	435d      	muls	r5, r3
 8000cf0:	460e      	mov	r6, r1
 8000cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cf6:	f000 f927 	bl	8000f48 <_malloc_r>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	b140      	cbz	r0, 8000d10 <__sfmoreglue+0x28>
 8000cfe:	2100      	movs	r1, #0
 8000d00:	e880 0042 	stmia.w	r0, {r1, r6}
 8000d04:	300c      	adds	r0, #12
 8000d06:	60a0      	str	r0, [r4, #8]
 8000d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d0c:	f7ff fde6 	bl	80008dc <memset>
 8000d10:	4620      	mov	r0, r4
 8000d12:	bd70      	pop	{r4, r5, r6, pc}

08000d14 <__sinit>:
 8000d14:	6983      	ldr	r3, [r0, #24]
 8000d16:	b510      	push	{r4, lr}
 8000d18:	4604      	mov	r4, r0
 8000d1a:	bb33      	cbnz	r3, 8000d6a <__sinit+0x56>
 8000d1c:	6483      	str	r3, [r0, #72]	; 0x48
 8000d1e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000d20:	6503      	str	r3, [r0, #80]	; 0x50
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <__sinit+0x58>)
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <__sinit+0x5c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6282      	str	r2, [r0, #40]	; 0x28
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	bf04      	itt	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	6183      	streq	r3, [r0, #24]
 8000d32:	f000 f81f 	bl	8000d74 <__sfp>
 8000d36:	6060      	str	r0, [r4, #4]
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f000 f81b 	bl	8000d74 <__sfp>
 8000d3e:	60a0      	str	r0, [r4, #8]
 8000d40:	4620      	mov	r0, r4
 8000d42:	f000 f817 	bl	8000d74 <__sfp>
 8000d46:	2104      	movs	r1, #4
 8000d48:	60e0      	str	r0, [r4, #12]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	6860      	ldr	r0, [r4, #4]
 8000d4e:	f7ff ffa7 	bl	8000ca0 <std.isra.0>
 8000d52:	68a0      	ldr	r0, [r4, #8]
 8000d54:	2109      	movs	r1, #9
 8000d56:	2201      	movs	r2, #1
 8000d58:	f7ff ffa2 	bl	8000ca0 <std.isra.0>
 8000d5c:	68e0      	ldr	r0, [r4, #12]
 8000d5e:	2112      	movs	r1, #18
 8000d60:	2202      	movs	r2, #2
 8000d62:	f7ff ff9d 	bl	8000ca0 <std.isra.0>
 8000d66:	2301      	movs	r3, #1
 8000d68:	61a3      	str	r3, [r4, #24]
 8000d6a:	bd10      	pop	{r4, pc}
 8000d6c:	080014d4 	.word	0x080014d4
 8000d70:	08000c95 	.word	0x08000c95

08000d74 <__sfp>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <__sfp+0x70>)
 8000d78:	681e      	ldr	r6, [r3, #0]
 8000d7a:	69b3      	ldr	r3, [r6, #24]
 8000d7c:	4607      	mov	r7, r0
 8000d7e:	b913      	cbnz	r3, 8000d86 <__sfp+0x12>
 8000d80:	4630      	mov	r0, r6
 8000d82:	f7ff ffc7 	bl	8000d14 <__sinit>
 8000d86:	3648      	adds	r6, #72	; 0x48
 8000d88:	68b4      	ldr	r4, [r6, #8]
 8000d8a:	6873      	ldr	r3, [r6, #4]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	d404      	bmi.n	8000d9a <__sfp+0x26>
 8000d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d94:	b175      	cbz	r5, 8000db4 <__sfp+0x40>
 8000d96:	3468      	adds	r4, #104	; 0x68
 8000d98:	e7f8      	b.n	8000d8c <__sfp+0x18>
 8000d9a:	6833      	ldr	r3, [r6, #0]
 8000d9c:	b92b      	cbnz	r3, 8000daa <__sfp+0x36>
 8000d9e:	4638      	mov	r0, r7
 8000da0:	2104      	movs	r1, #4
 8000da2:	f7ff ffa1 	bl	8000ce8 <__sfmoreglue>
 8000da6:	6030      	str	r0, [r6, #0]
 8000da8:	b108      	cbz	r0, 8000dae <__sfp+0x3a>
 8000daa:	6836      	ldr	r6, [r6, #0]
 8000dac:	e7ec      	b.n	8000d88 <__sfp+0x14>
 8000dae:	230c      	movs	r3, #12
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db8:	81e3      	strh	r3, [r4, #14]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	81a3      	strh	r3, [r4, #12]
 8000dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8000dc0:	6025      	str	r5, [r4, #0]
 8000dc2:	60a5      	str	r5, [r4, #8]
 8000dc4:	6065      	str	r5, [r4, #4]
 8000dc6:	6125      	str	r5, [r4, #16]
 8000dc8:	6165      	str	r5, [r4, #20]
 8000dca:	61a5      	str	r5, [r4, #24]
 8000dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	f7ff fd82 	bl	80008dc <memset>
 8000dd8:	6365      	str	r5, [r4, #52]	; 0x34
 8000dda:	63a5      	str	r5, [r4, #56]	; 0x38
 8000ddc:	64a5      	str	r5, [r4, #72]	; 0x48
 8000dde:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000de0:	4620      	mov	r0, r4
 8000de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000de4:	080014d4 	.word	0x080014d4

08000de8 <_fwalk_reent>:
 8000de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dec:	4680      	mov	r8, r0
 8000dee:	4689      	mov	r9, r1
 8000df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000df4:	2600      	movs	r6, #0
 8000df6:	b194      	cbz	r4, 8000e1e <_fwalk_reent+0x36>
 8000df8:	68a5      	ldr	r5, [r4, #8]
 8000dfa:	6867      	ldr	r7, [r4, #4]
 8000dfc:	3f01      	subs	r7, #1
 8000dfe:	d40c      	bmi.n	8000e1a <_fwalk_reent+0x32>
 8000e00:	89ab      	ldrh	r3, [r5, #12]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d907      	bls.n	8000e16 <_fwalk_reent+0x2e>
 8000e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	d003      	beq.n	8000e16 <_fwalk_reent+0x2e>
 8000e0e:	4640      	mov	r0, r8
 8000e10:	4629      	mov	r1, r5
 8000e12:	47c8      	blx	r9
 8000e14:	4306      	orrs	r6, r0
 8000e16:	3568      	adds	r5, #104	; 0x68
 8000e18:	e7f0      	b.n	8000dfc <_fwalk_reent+0x14>
 8000e1a:	6824      	ldr	r4, [r4, #0]
 8000e1c:	e7eb      	b.n	8000df6 <_fwalk_reent+0xe>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000e24 <__smakebuf_r>:
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	898b      	ldrh	r3, [r1, #12]
 8000e28:	079d      	lsls	r5, r3, #30
 8000e2a:	b091      	sub	sp, #68	; 0x44
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	d426      	bmi.n	8000e80 <__smakebuf_r+0x5c>
 8000e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e36:	2900      	cmp	r1, #0
 8000e38:	da09      	bge.n	8000e4e <__smakebuf_r+0x2a>
 8000e3a:	89a3      	ldrh	r3, [r4, #12]
 8000e3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e40:	f04f 0500 	mov.w	r5, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2740      	movne	r7, #64	; 0x40
 8000e48:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8000e4c:	e00d      	b.n	8000e6a <__smakebuf_r+0x46>
 8000e4e:	aa01      	add	r2, sp, #4
 8000e50:	f000 f946 	bl	80010e0 <_fstat_r>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	dbf0      	blt.n	8000e3a <__smakebuf_r+0x16>
 8000e58:	9d02      	ldr	r5, [sp, #8]
 8000e5a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8000e5e:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8000e62:	424d      	negs	r5, r1
 8000e64:	414d      	adcs	r5, r1
 8000e66:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	f000 f86b 	bl	8000f48 <_malloc_r>
 8000e72:	b960      	cbnz	r0, 8000e8e <__smakebuf_r+0x6a>
 8000e74:	89a3      	ldrh	r3, [r4, #12]
 8000e76:	059a      	lsls	r2, r3, #22
 8000e78:	d41d      	bmi.n	8000eb6 <__smakebuf_r+0x92>
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	81a3      	strh	r3, [r4, #12]
 8000e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	6123      	str	r3, [r4, #16]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	6163      	str	r3, [r4, #20]
 8000e8c:	e013      	b.n	8000eb6 <__smakebuf_r+0x92>
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <__smakebuf_r+0x98>)
 8000e90:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e92:	89a3      	ldrh	r3, [r4, #12]
 8000e94:	6020      	str	r0, [r4, #0]
 8000e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9a:	81a3      	strh	r3, [r4, #12]
 8000e9c:	6120      	str	r0, [r4, #16]
 8000e9e:	6167      	str	r7, [r4, #20]
 8000ea0:	b14d      	cbz	r5, 8000eb6 <__smakebuf_r+0x92>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ea8:	f000 f92c 	bl	8001104 <_isatty_r>
 8000eac:	b118      	cbz	r0, 8000eb6 <__smakebuf_r+0x92>
 8000eae:	89a3      	ldrh	r3, [r4, #12]
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	81a3      	strh	r3, [r4, #12]
 8000eb6:	b011      	add	sp, #68	; 0x44
 8000eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08000c95 	.word	0x08000c95

08000ec0 <_free_r>:
 8000ec0:	b530      	push	{r4, r5, lr}
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d03d      	beq.n	8000f42 <_free_r+0x82>
 8000ec6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8000eca:	1f0b      	subs	r3, r1, #4
 8000ecc:	491d      	ldr	r1, [pc, #116]	; (8000f44 <_free_r+0x84>)
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	bfb8      	it	lt
 8000ed2:	189b      	addlt	r3, r3, r2
 8000ed4:	680a      	ldr	r2, [r1, #0]
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	b912      	cbnz	r2, 8000ee0 <_free_r+0x20>
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	600b      	str	r3, [r1, #0]
 8000ede:	bd30      	pop	{r4, r5, pc}
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d20d      	bcs.n	8000f00 <_free_r+0x40>
 8000ee4:	6819      	ldr	r1, [r3, #0]
 8000ee6:	1858      	adds	r0, r3, r1
 8000ee8:	4290      	cmp	r0, r2
 8000eea:	bf01      	itttt	eq
 8000eec:	585a      	ldreq	r2, [r3, r1]
 8000eee:	1852      	addeq	r2, r2, r1
 8000ef0:	601a      	streq	r2, [r3, #0]
 8000ef2:	6842      	ldreq	r2, [r0, #4]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	bd30      	pop	{r4, r5, pc}
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d803      	bhi.n	8000f06 <_free_r+0x46>
 8000efe:	460a      	mov	r2, r1
 8000f00:	6851      	ldr	r1, [r2, #4]
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d1f9      	bne.n	8000efa <_free_r+0x3a>
 8000f06:	6814      	ldr	r4, [r2, #0]
 8000f08:	1915      	adds	r5, r2, r4
 8000f0a:	429d      	cmp	r5, r3
 8000f0c:	d10a      	bne.n	8000f24 <_free_r+0x64>
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4423      	add	r3, r4
 8000f12:	18d0      	adds	r0, r2, r3
 8000f14:	4288      	cmp	r0, r1
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	d113      	bne.n	8000f42 <_free_r+0x82>
 8000f1a:	6808      	ldr	r0, [r1, #0]
 8000f1c:	4403      	add	r3, r0
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	684b      	ldr	r3, [r1, #4]
 8000f22:	e00d      	b.n	8000f40 <_free_r+0x80>
 8000f24:	d902      	bls.n	8000f2c <_free_r+0x6c>
 8000f26:	230c      	movs	r3, #12
 8000f28:	6003      	str	r3, [r0, #0]
 8000f2a:	bd30      	pop	{r4, r5, pc}
 8000f2c:	681c      	ldr	r4, [r3, #0]
 8000f2e:	1918      	adds	r0, r3, r4
 8000f30:	4288      	cmp	r0, r1
 8000f32:	bf04      	itt	eq
 8000f34:	6808      	ldreq	r0, [r1, #0]
 8000f36:	6849      	ldreq	r1, [r1, #4]
 8000f38:	6059      	str	r1, [r3, #4]
 8000f3a:	bf04      	itt	eq
 8000f3c:	1900      	addeq	r0, r0, r4
 8000f3e:	6018      	streq	r0, [r3, #0]
 8000f40:	6053      	str	r3, [r2, #4]
 8000f42:	bd30      	pop	{r4, r5, pc}
 8000f44:	1ffe886c 	.word	0x1ffe886c

08000f48 <_malloc_r>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	1ccc      	adds	r4, r1, #3
 8000f4c:	f024 0403 	bic.w	r4, r4, #3
 8000f50:	3408      	adds	r4, #8
 8000f52:	2c0c      	cmp	r4, #12
 8000f54:	bf38      	it	cc
 8000f56:	240c      	movcc	r4, #12
 8000f58:	2c00      	cmp	r4, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	da03      	bge.n	8000f66 <_malloc_r+0x1e>
 8000f5e:	230c      	movs	r3, #12
 8000f60:	6033      	str	r3, [r6, #0]
 8000f62:	2000      	movs	r0, #0
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
 8000f66:	428c      	cmp	r4, r1
 8000f68:	d3f9      	bcc.n	8000f5e <_malloc_r+0x16>
 8000f6a:	4a20      	ldr	r2, [pc, #128]	; (8000fec <_malloc_r+0xa4>)
 8000f6c:	6813      	ldr	r3, [r2, #0]
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	b1a1      	cbz	r1, 8000f9e <_malloc_r+0x56>
 8000f74:	680a      	ldr	r2, [r1, #0]
 8000f76:	1b12      	subs	r2, r2, r4
 8000f78:	d40e      	bmi.n	8000f98 <_malloc_r+0x50>
 8000f7a:	2a0b      	cmp	r2, #11
 8000f7c:	d903      	bls.n	8000f86 <_malloc_r+0x3e>
 8000f7e:	600a      	str	r2, [r1, #0]
 8000f80:	188b      	adds	r3, r1, r2
 8000f82:	508c      	str	r4, [r1, r2]
 8000f84:	e01f      	b.n	8000fc6 <_malloc_r+0x7e>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	bf0d      	iteet	eq
 8000f8a:	685a      	ldreq	r2, [r3, #4]
 8000f8c:	684a      	ldrne	r2, [r1, #4]
 8000f8e:	605a      	strne	r2, [r3, #4]
 8000f90:	6002      	streq	r2, [r0, #0]
 8000f92:	bf18      	it	ne
 8000f94:	460b      	movne	r3, r1
 8000f96:	e016      	b.n	8000fc6 <_malloc_r+0x7e>
 8000f98:	460b      	mov	r3, r1
 8000f9a:	6849      	ldr	r1, [r1, #4]
 8000f9c:	e7e9      	b.n	8000f72 <_malloc_r+0x2a>
 8000f9e:	4d14      	ldr	r5, [pc, #80]	; (8000ff0 <_malloc_r+0xa8>)
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b91b      	cbnz	r3, 8000fac <_malloc_r+0x64>
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f000 f825 	bl	8000ff4 <_sbrk_r>
 8000faa:	6028      	str	r0, [r5, #0]
 8000fac:	4630      	mov	r0, r6
 8000fae:	4621      	mov	r1, r4
 8000fb0:	f000 f820 	bl	8000ff4 <_sbrk_r>
 8000fb4:	1c42      	adds	r2, r0, #1
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	d0d1      	beq.n	8000f5e <_malloc_r+0x16>
 8000fba:	1cc5      	adds	r5, r0, #3
 8000fbc:	f025 0503 	bic.w	r5, r5, #3
 8000fc0:	4285      	cmp	r5, r0
 8000fc2:	d10a      	bne.n	8000fda <_malloc_r+0x92>
 8000fc4:	601c      	str	r4, [r3, #0]
 8000fc6:	f103 000b 	add.w	r0, r3, #11
 8000fca:	1d1a      	adds	r2, r3, #4
 8000fcc:	f020 0007 	bic.w	r0, r0, #7
 8000fd0:	1a82      	subs	r2, r0, r2
 8000fd2:	d00a      	beq.n	8000fea <_malloc_r+0xa2>
 8000fd4:	4251      	negs	r1, r2
 8000fd6:	5099      	str	r1, [r3, r2]
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}
 8000fda:	4630      	mov	r0, r6
 8000fdc:	1ae9      	subs	r1, r5, r3
 8000fde:	f000 f809 	bl	8000ff4 <_sbrk_r>
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d0bb      	beq.n	8000f5e <_malloc_r+0x16>
 8000fe6:	462b      	mov	r3, r5
 8000fe8:	e7ec      	b.n	8000fc4 <_malloc_r+0x7c>
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	1ffe886c 	.word	0x1ffe886c
 8000ff0:	1ffe8868 	.word	0x1ffe8868

08000ff4 <_sbrk_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4c06      	ldr	r4, [pc, #24]	; (8001010 <_sbrk_r+0x1c>)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	6023      	str	r3, [r4, #0]
 8001000:	f7ff fbdc 	bl	80007bc <_sbrk>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d102      	bne.n	800100e <_sbrk_r+0x1a>
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	b103      	cbz	r3, 800100e <_sbrk_r+0x1a>
 800100c:	602b      	str	r3, [r5, #0]
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	1ffe891c 	.word	0x1ffe891c

08001014 <__sread>:
 8001014:	b510      	push	{r4, lr}
 8001016:	460c      	mov	r4, r1
 8001018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800101c:	f000 f894 	bl	8001148 <_read_r>
 8001020:	2800      	cmp	r0, #0
 8001022:	bfab      	itete	ge
 8001024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001026:	89a3      	ldrhlt	r3, [r4, #12]
 8001028:	181b      	addge	r3, r3, r0
 800102a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800102e:	bfac      	ite	ge
 8001030:	6563      	strge	r3, [r4, #84]	; 0x54
 8001032:	81a3      	strhlt	r3, [r4, #12]
 8001034:	bd10      	pop	{r4, pc}

08001036 <__swrite>:
 8001036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103a:	461d      	mov	r5, r3
 800103c:	898b      	ldrh	r3, [r1, #12]
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	4607      	mov	r7, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4616      	mov	r6, r2
 8001046:	d505      	bpl.n	8001054 <__swrite+0x1e>
 8001048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104c:	2200      	movs	r2, #0
 800104e:	2302      	movs	r3, #2
 8001050:	f000 f868 	bl	8001124 <_lseek_r>
 8001054:	89a3      	ldrh	r3, [r4, #12]
 8001056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800105a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800105e:	81a3      	strh	r3, [r4, #12]
 8001060:	4638      	mov	r0, r7
 8001062:	4632      	mov	r2, r6
 8001064:	462b      	mov	r3, r5
 8001066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800106a:	f000 b817 	b.w	800109c <_write_r>

0800106e <__sseek>:
 800106e:	b510      	push	{r4, lr}
 8001070:	460c      	mov	r4, r1
 8001072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001076:	f000 f855 	bl	8001124 <_lseek_r>
 800107a:	1c43      	adds	r3, r0, #1
 800107c:	89a3      	ldrh	r3, [r4, #12]
 800107e:	bf15      	itete	ne
 8001080:	6560      	strne	r0, [r4, #84]	; 0x54
 8001082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800108a:	81a3      	strheq	r3, [r4, #12]
 800108c:	bf18      	it	ne
 800108e:	81a3      	strhne	r3, [r4, #12]
 8001090:	bd10      	pop	{r4, pc}

08001092 <__sclose>:
 8001092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001096:	f000 b813 	b.w	80010c0 <_close_r>
	...

0800109c <_write_r>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	4c07      	ldr	r4, [pc, #28]	; (80010bc <_write_r+0x20>)
 80010a0:	4605      	mov	r5, r0
 80010a2:	2000      	movs	r0, #0
 80010a4:	6020      	str	r0, [r4, #0]
 80010a6:	4608      	mov	r0, r1
 80010a8:	4611      	mov	r1, r2
 80010aa:	461a      	mov	r2, r3
 80010ac:	f000 f957 	bl	800135e <_write>
 80010b0:	1c43      	adds	r3, r0, #1
 80010b2:	d102      	bne.n	80010ba <_write_r+0x1e>
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	b103      	cbz	r3, 80010ba <_write_r+0x1e>
 80010b8:	602b      	str	r3, [r5, #0]
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	1ffe891c 	.word	0x1ffe891c

080010c0 <_close_r>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4c06      	ldr	r4, [pc, #24]	; (80010dc <_close_r+0x1c>)
 80010c4:	2300      	movs	r3, #0
 80010c6:	4605      	mov	r5, r0
 80010c8:	4608      	mov	r0, r1
 80010ca:	6023      	str	r3, [r4, #0]
 80010cc:	f000 f976 	bl	80013bc <_close>
 80010d0:	1c43      	adds	r3, r0, #1
 80010d2:	d102      	bne.n	80010da <_close_r+0x1a>
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	b103      	cbz	r3, 80010da <_close_r+0x1a>
 80010d8:	602b      	str	r3, [r5, #0]
 80010da:	bd38      	pop	{r3, r4, r5, pc}
 80010dc:	1ffe891c 	.word	0x1ffe891c

080010e0 <_fstat_r>:
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	4c07      	ldr	r4, [pc, #28]	; (8001100 <_fstat_r+0x20>)
 80010e4:	2300      	movs	r3, #0
 80010e6:	4605      	mov	r5, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	f000 f9aa 	bl	8001446 <_fstat>
 80010f2:	1c43      	adds	r3, r0, #1
 80010f4:	d102      	bne.n	80010fc <_fstat_r+0x1c>
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	b103      	cbz	r3, 80010fc <_fstat_r+0x1c>
 80010fa:	602b      	str	r3, [r5, #0]
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	bf00      	nop
 8001100:	1ffe891c 	.word	0x1ffe891c

08001104 <_isatty_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4c06      	ldr	r4, [pc, #24]	; (8001120 <_isatty_r+0x1c>)
 8001108:	2300      	movs	r3, #0
 800110a:	4605      	mov	r5, r0
 800110c:	4608      	mov	r0, r1
 800110e:	6023      	str	r3, [r4, #0]
 8001110:	f000 f9a7 	bl	8001462 <_isatty>
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	d102      	bne.n	800111e <_isatty_r+0x1a>
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	b103      	cbz	r3, 800111e <_isatty_r+0x1a>
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	bd38      	pop	{r3, r4, r5, pc}
 8001120:	1ffe891c 	.word	0x1ffe891c

08001124 <_lseek_r>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4c07      	ldr	r4, [pc, #28]	; (8001144 <_lseek_r+0x20>)
 8001128:	4605      	mov	r5, r0
 800112a:	2000      	movs	r0, #0
 800112c:	6020      	str	r0, [r4, #0]
 800112e:	4608      	mov	r0, r1
 8001130:	4611      	mov	r1, r2
 8001132:	461a      	mov	r2, r3
 8001134:	f000 f901 	bl	800133a <_lseek>
 8001138:	1c43      	adds	r3, r0, #1
 800113a:	d102      	bne.n	8001142 <_lseek_r+0x1e>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	b103      	cbz	r3, 8001142 <_lseek_r+0x1e>
 8001140:	602b      	str	r3, [r5, #0]
 8001142:	bd38      	pop	{r3, r4, r5, pc}
 8001144:	1ffe891c 	.word	0x1ffe891c

08001148 <_read_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4c07      	ldr	r4, [pc, #28]	; (8001168 <_read_r+0x20>)
 800114c:	4605      	mov	r5, r0
 800114e:	2000      	movs	r0, #0
 8001150:	6020      	str	r0, [r4, #0]
 8001152:	4608      	mov	r0, r1
 8001154:	4611      	mov	r1, r2
 8001156:	461a      	mov	r2, r3
 8001158:	f000 f898 	bl	800128c <_read>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_read_r+0x1e>
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	b103      	cbz	r3, 8001166 <_read_r+0x1e>
 8001164:	602b      	str	r3, [r5, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	1ffe891c 	.word	0x1ffe891c

0800116c <findslot>:
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <findslot+0x2c>)
 800116e:	b510      	push	{r4, lr}
 8001170:	4604      	mov	r4, r0
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	b118      	cbz	r0, 800117e <findslot+0x12>
 8001176:	6983      	ldr	r3, [r0, #24]
 8001178:	b90b      	cbnz	r3, 800117e <findslot+0x12>
 800117a:	f7ff fdcb 	bl	8000d14 <__sinit>
 800117e:	2c13      	cmp	r4, #19
 8001180:	d807      	bhi.n	8001192 <findslot+0x26>
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <findslot+0x30>)
 8001184:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001188:	3301      	adds	r3, #1
 800118a:	d002      	beq.n	8001192 <findslot+0x26>
 800118c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001190:	bd10      	pop	{r4, pc}
 8001192:	2000      	movs	r0, #0
 8001194:	bd10      	pop	{r4, pc}
 8001196:	bf00      	nop
 8001198:	1ffe8860 	.word	0x1ffe8860
 800119c:	1ffe887c 	.word	0x1ffe887c

080011a0 <error>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	4605      	mov	r5, r0
 80011a4:	f7ff fb6e 	bl	8000884 <__errno>
 80011a8:	2700      	movs	r7, #0
 80011aa:	4606      	mov	r6, r0
 80011ac:	2413      	movs	r4, #19
 80011ae:	4620      	mov	r0, r4
 80011b0:	4639      	mov	r1, r7
 80011b2:	beab      	bkpt	0x00ab
 80011b4:	4604      	mov	r4, r0
 80011b6:	6034      	str	r4, [r6, #0]
 80011b8:	4628      	mov	r0, r5
 80011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011bc <checkerror>:
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d101      	bne.n	80011c4 <checkerror+0x8>
 80011c0:	f7ff bfee 	b.w	80011a0 <error>
 80011c4:	4770      	bx	lr
	...

080011c8 <initialise_monitor_handles>:
 80011c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001268 <initialise_monitor_handles+0xa0>
 80011d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80011d4:	f04f 0803 	mov.w	r8, #3
 80011d8:	2300      	movs	r3, #0
 80011da:	f8cd 800c 	str.w	r8, [sp, #12]
 80011de:	2401      	movs	r4, #1
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	af01      	add	r7, sp, #4
 80011e4:	4620      	mov	r0, r4
 80011e6:	4639      	mov	r1, r7
 80011e8:	beab      	bkpt	0x00ab
 80011ea:	4605      	mov	r5, r0
 80011ec:	4e1a      	ldr	r6, [pc, #104]	; (8001258 <initialise_monitor_handles+0x90>)
 80011ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80011f2:	2304      	movs	r3, #4
 80011f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80011f8:	6035      	str	r5, [r6, #0]
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	4620      	mov	r0, r4
 80011fe:	4639      	mov	r1, r7
 8001200:	beab      	bkpt	0x00ab
 8001202:	4682      	mov	sl, r0
 8001204:	4d15      	ldr	r5, [pc, #84]	; (800125c <initialise_monitor_handles+0x94>)
 8001206:	f8cd 9004 	str.w	r9, [sp, #4]
 800120a:	2308      	movs	r3, #8
 800120c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001210:	f8c5 a000 	str.w	sl, [r5]
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	4620      	mov	r0, r4
 8001218:	4639      	mov	r1, r7
 800121a:	beab      	bkpt	0x00ab
 800121c:	4604      	mov	r4, r0
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <initialise_monitor_handles+0x98>)
 8001220:	6014      	str	r4, [r2, #0]
 8001222:	3401      	adds	r4, #1
 8001224:	bf04      	itt	eq
 8001226:	682b      	ldreq	r3, [r5, #0]
 8001228:	6013      	streq	r3, [r2, #0]
 800122a:	2100      	movs	r1, #0
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <initialise_monitor_handles+0x9c>)
 800122e:	f04f 30ff 	mov.w	r0, #4294967295
 8001232:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
 8001236:	3101      	adds	r1, #1
 8001238:	2914      	cmp	r1, #20
 800123a:	d1f7      	bne.n	800122c <initialise_monitor_handles+0x64>
 800123c:	6831      	ldr	r1, [r6, #0]
 800123e:	6828      	ldr	r0, [r5, #0]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	6019      	str	r1, [r3, #0]
 8001244:	2100      	movs	r1, #0
 8001246:	6059      	str	r1, [r3, #4]
 8001248:	6098      	str	r0, [r3, #8]
 800124a:	60d9      	str	r1, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	6159      	str	r1, [r3, #20]
 8001250:	b004      	add	sp, #16
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	bf00      	nop
 8001258:	1ffe8874 	.word	0x1ffe8874
 800125c:	1ffe8870 	.word	0x1ffe8870
 8001260:	1ffe8878 	.word	0x1ffe8878
 8001264:	1ffe887c 	.word	0x1ffe887c
 8001268:	08001538 	.word	0x08001538

0800126c <_swiread>:
 800126c:	b530      	push	{r4, r5, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	ad01      	add	r5, sp, #4
 8001272:	9001      	str	r0, [sp, #4]
 8001274:	9102      	str	r1, [sp, #8]
 8001276:	9203      	str	r2, [sp, #12]
 8001278:	2406      	movs	r4, #6
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	beab      	bkpt	0x00ab
 8001280:	4604      	mov	r4, r0
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff ff9a 	bl	80011bc <checkerror>
 8001288:	b005      	add	sp, #20
 800128a:	bd30      	pop	{r4, r5, pc}

0800128c <_read>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	460e      	mov	r6, r1
 8001290:	4615      	mov	r5, r2
 8001292:	f7ff ff6b 	bl	800116c <findslot>
 8001296:	4604      	mov	r4, r0
 8001298:	b930      	cbnz	r0, 80012a8 <_read+0x1c>
 800129a:	f7ff faf3 	bl	8000884 <__errno>
 800129e:	2309      	movs	r3, #9
 80012a0:	6003      	str	r3, [r0, #0]
 80012a2:	f04f 30ff 	mov.w	r0, #4294967295
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
 80012a8:	4631      	mov	r1, r6
 80012aa:	462a      	mov	r2, r5
 80012ac:	6800      	ldr	r0, [r0, #0]
 80012ae:	f7ff ffdd 	bl	800126c <_swiread>
 80012b2:	1c43      	adds	r3, r0, #1
 80012b4:	bf1f      	itttt	ne
 80012b6:	6863      	ldrne	r3, [r4, #4]
 80012b8:	1a28      	subne	r0, r5, r0
 80012ba:	181b      	addne	r3, r3, r0
 80012bc:	6063      	strne	r3, [r4, #4]
 80012be:	bd70      	pop	{r4, r5, r6, pc}

080012c0 <_swilseek>:
 80012c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012c2:	460c      	mov	r4, r1
 80012c4:	4616      	mov	r6, r2
 80012c6:	f7ff ff51 	bl	800116c <findslot>
 80012ca:	4605      	mov	r5, r0
 80012cc:	b918      	cbnz	r0, 80012d6 <_swilseek+0x16>
 80012ce:	f7ff fad9 	bl	8000884 <__errno>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e004      	b.n	80012e0 <_swilseek+0x20>
 80012d6:	2e02      	cmp	r6, #2
 80012d8:	d906      	bls.n	80012e8 <_swilseek+0x28>
 80012da:	f7ff fad3 	bl	8000884 <__errno>
 80012de:	2316      	movs	r3, #22
 80012e0:	6003      	str	r3, [r0, #0]
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
 80012e6:	e026      	b.n	8001336 <_swilseek+0x76>
 80012e8:	2e01      	cmp	r6, #1
 80012ea:	d103      	bne.n	80012f4 <_swilseek+0x34>
 80012ec:	6843      	ldr	r3, [r0, #4]
 80012ee:	18e4      	adds	r4, r4, r3
 80012f0:	d511      	bpl.n	8001316 <_swilseek+0x56>
 80012f2:	e7f2      	b.n	80012da <_swilseek+0x1a>
 80012f4:	2e02      	cmp	r6, #2
 80012f6:	d10e      	bne.n	8001316 <_swilseek+0x56>
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6803      	ldr	r3, [r0, #0]
 80012fc:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001300:	260c      	movs	r6, #12
 8001302:	4630      	mov	r0, r6
 8001304:	4639      	mov	r1, r7
 8001306:	beab      	bkpt	0x00ab
 8001308:	4606      	mov	r6, r0
 800130a:	4630      	mov	r0, r6
 800130c:	f7ff ff56 	bl	80011bc <checkerror>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	d0e6      	beq.n	80012e2 <_swilseek+0x22>
 8001314:	4404      	add	r4, r0
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	466f      	mov	r7, sp
 800131a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800131e:	260a      	movs	r6, #10
 8001320:	4630      	mov	r0, r6
 8001322:	4639      	mov	r1, r7
 8001324:	beab      	bkpt	0x00ab
 8001326:	4606      	mov	r6, r0
 8001328:	4630      	mov	r0, r6
 800132a:	f7ff ff47 	bl	80011bc <checkerror>
 800132e:	2800      	cmp	r0, #0
 8001330:	dbd7      	blt.n	80012e2 <_swilseek+0x22>
 8001332:	606c      	str	r4, [r5, #4]
 8001334:	4620      	mov	r0, r4
 8001336:	b003      	add	sp, #12
 8001338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800133a <_lseek>:
 800133a:	f7ff bfc1 	b.w	80012c0 <_swilseek>

0800133e <_swiwrite>:
 800133e:	b530      	push	{r4, r5, lr}
 8001340:	b085      	sub	sp, #20
 8001342:	ad01      	add	r5, sp, #4
 8001344:	9001      	str	r0, [sp, #4]
 8001346:	9102      	str	r1, [sp, #8]
 8001348:	9203      	str	r2, [sp, #12]
 800134a:	2405      	movs	r4, #5
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	beab      	bkpt	0x00ab
 8001352:	4604      	mov	r4, r0
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff ff31 	bl	80011bc <checkerror>
 800135a:	b005      	add	sp, #20
 800135c:	bd30      	pop	{r4, r5, pc}

0800135e <_write>:
 800135e:	b570      	push	{r4, r5, r6, lr}
 8001360:	460e      	mov	r6, r1
 8001362:	4615      	mov	r5, r2
 8001364:	f7ff ff02 	bl	800116c <findslot>
 8001368:	4604      	mov	r4, r0
 800136a:	b920      	cbnz	r0, 8001376 <_write+0x18>
 800136c:	f7ff fa8a 	bl	8000884 <__errno>
 8001370:	2309      	movs	r3, #9
 8001372:	6003      	str	r3, [r0, #0]
 8001374:	e011      	b.n	800139a <_write+0x3c>
 8001376:	462a      	mov	r2, r5
 8001378:	6800      	ldr	r0, [r0, #0]
 800137a:	4631      	mov	r1, r6
 800137c:	f7ff ffdf 	bl	800133e <_swiwrite>
 8001380:	1e02      	subs	r2, r0, #0
 8001382:	db0a      	blt.n	800139a <_write+0x3c>
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	1aa8      	subs	r0, r5, r2
 8001388:	4403      	add	r3, r0
 800138a:	4295      	cmp	r5, r2
 800138c:	6063      	str	r3, [r4, #4]
 800138e:	d106      	bne.n	800139e <_write+0x40>
 8001390:	2000      	movs	r0, #0
 8001392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001396:	f7ff bf03 	b.w	80011a0 <error>
 800139a:	f04f 30ff 	mov.w	r0, #4294967295
 800139e:	bd70      	pop	{r4, r5, r6, pc}

080013a0 <_swiclose>:
 80013a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013a2:	ad02      	add	r5, sp, #8
 80013a4:	2402      	movs	r4, #2
 80013a6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	beab      	bkpt	0x00ab
 80013b0:	4604      	mov	r4, r0
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff ff02 	bl	80011bc <checkerror>
 80013b8:	b003      	add	sp, #12
 80013ba:	bd30      	pop	{r4, r5, pc}

080013bc <_close>:
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	4605      	mov	r5, r0
 80013c0:	f7ff fed4 	bl	800116c <findslot>
 80013c4:	4604      	mov	r4, r0
 80013c6:	b930      	cbnz	r0, 80013d6 <_close+0x1a>
 80013c8:	f7ff fa5c 	bl	8000884 <__errno>
 80013cc:	2309      	movs	r3, #9
 80013ce:	6003      	str	r3, [r0, #0]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
 80013d6:	3d01      	subs	r5, #1
 80013d8:	2d01      	cmp	r5, #1
 80013da:	d809      	bhi.n	80013f0 <_close+0x34>
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_close+0x44>)
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d104      	bne.n	80013f0 <_close+0x34>
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	6003      	str	r3, [r0, #0]
 80013ec:	2000      	movs	r0, #0
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	f7ff ffd5 	bl	80013a0 <_swiclose>
 80013f6:	b910      	cbnz	r0, 80013fe <_close+0x42>
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	bd38      	pop	{r3, r4, r5, pc}
 8001400:	1ffe887c 	.word	0x1ffe887c

08001404 <_swistat>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	460c      	mov	r4, r1
 8001408:	f7ff feb0 	bl	800116c <findslot>
 800140c:	4606      	mov	r6, r0
 800140e:	b930      	cbnz	r0, 800141e <_swistat+0x1a>
 8001410:	f7ff fa38 	bl	8000884 <__errno>
 8001414:	2309      	movs	r3, #9
 8001416:	6003      	str	r3, [r0, #0]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	bd70      	pop	{r4, r5, r6, pc}
 800141e:	6863      	ldr	r3, [r4, #4]
 8001420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001424:	6063      	str	r3, [r4, #4]
 8001426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800142c:	250c      	movs	r5, #12
 800142e:	4628      	mov	r0, r5
 8001430:	4631      	mov	r1, r6
 8001432:	beab      	bkpt	0x00ab
 8001434:	4605      	mov	r5, r0
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff fec0 	bl	80011bc <checkerror>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	bf1c      	itt	ne
 8001440:	6120      	strne	r0, [r4, #16]
 8001442:	2000      	movne	r0, #0
 8001444:	bd70      	pop	{r4, r5, r6, pc}

08001446 <_fstat>:
 8001446:	b538      	push	{r3, r4, r5, lr}
 8001448:	223c      	movs	r2, #60	; 0x3c
 800144a:	4605      	mov	r5, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4608      	mov	r0, r1
 8001450:	2100      	movs	r1, #0
 8001452:	f7ff fa43 	bl	80008dc <memset>
 8001456:	4628      	mov	r0, r5
 8001458:	4621      	mov	r1, r4
 800145a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800145e:	f7ff bfd1 	b.w	8001404 <_swistat>

08001462 <_isatty>:
 8001462:	b570      	push	{r4, r5, r6, lr}
 8001464:	f7ff fe82 	bl	800116c <findslot>
 8001468:	2509      	movs	r5, #9
 800146a:	4604      	mov	r4, r0
 800146c:	b918      	cbnz	r0, 8001476 <_isatty+0x14>
 800146e:	f7ff fa09 	bl	8000884 <__errno>
 8001472:	6005      	str	r5, [r0, #0]
 8001474:	e00f      	b.n	8001496 <_isatty+0x34>
 8001476:	4628      	mov	r0, r5
 8001478:	4621      	mov	r1, r4
 800147a:	beab      	bkpt	0x00ab
 800147c:	4604      	mov	r4, r0
 800147e:	2c01      	cmp	r4, #1
 8001480:	d009      	beq.n	8001496 <_isatty+0x34>
 8001482:	f7ff f9ff 	bl	8000884 <__errno>
 8001486:	2400      	movs	r4, #0
 8001488:	4606      	mov	r6, r0
 800148a:	2513      	movs	r5, #19
 800148c:	4628      	mov	r0, r5
 800148e:	4621      	mov	r1, r4
 8001490:	beab      	bkpt	0x00ab
 8001492:	4605      	mov	r5, r0
 8001494:	6035      	str	r5, [r6, #0]
 8001496:	4620      	mov	r0, r4
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	0000      	movs	r0, r0
 800149c:	546d6953 	.word	0x546d6953
 80014a0:	6c747365 	.word	0x6c747365
 80014a4:	00006261 	.word	0x00006261
 80014a8:	45564144 	.word	0x45564144
 80014ac:	50504120 	.word	0x50504120
 80014b0:	6e692073 	.word	0x6e692073
 80014b4:	61697469 	.word	0x61697469
 80014b8:	617a696c 	.word	0x617a696c
 80014bc:	6e6f6974 	.word	0x6e6f6974
 80014c0:	69616620 	.word	0x69616620
 80014c4:	0064656c 	.word	0x0064656c
 80014c8:	434c4557 	.word	0x434c4557
 80014cc:	00454d4f 	.word	0x00454d4f
 80014d0:	00000043 	.word	0x00000043

080014d4 <_global_impure_ptr>:
 80014d4:	1ffe8800                                ....

080014d8 <__sf_fake_stdin>:
	...

080014f8 <__sf_fake_stdout>:
	...

08001518 <__sf_fake_stderr>:
	...
 8001538:	0074743a                                :tt.
