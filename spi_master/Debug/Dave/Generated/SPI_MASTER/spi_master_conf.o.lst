   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "spi_master_conf.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_SetInputSource,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_SetInputSource:
  25              	.LFB186:
  26              	 .file 1 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  12:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  14:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  21:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  28:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  41:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  42:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  43:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  44:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  46:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  47:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  48:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  49:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  50:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  51:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  52:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  54:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  55:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  56:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  57:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  58:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  59:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  60:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  62:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  63:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  64:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  65:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  67:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  68:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  69:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  70:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  71:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  72:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  73:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  74:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  75:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  76:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  77:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  79:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  80:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  81:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  82:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  83:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  84:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  86:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  87:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  88:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  89:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  90:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  92:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  93:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  94:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-07-01:
  95:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Changed XMC_USIC_CH_SetBaudrateEx() input parameter types
  96:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-09-30:
  98:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_InvalidateReadData(), XMC_USIC_CH_EnableWordLengthControl() and XMC_USIC
  99:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-12-05:
 101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_PutDataEx()
 102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-04-30:
 104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_SetTriggerLimit() and XMC_USIC_CH_RXFIFO_SetTriggerLimit()
 105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-12-05:
 107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S to XMC_USIC_CH_BRG_CLOCK_SOURCE_t
 108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CTQSEL_t
 109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateDivider()
 110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
 112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
 116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
 117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
 119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc1_usic_map.h"
 186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc4_usic_map.h"
 190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 235:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 236:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 237:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 238:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 239:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 240:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 241:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 242:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 243:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 244:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 245:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 246:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 247:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 248:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 249:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 250:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 251:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 252:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 253:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 254:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 255:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 256:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 257:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 258:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 259:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 260:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 261:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 262:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 263:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 264:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 265:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 266:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 267:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 268:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 269:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 270:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 271:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 272:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 273:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 274:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 275:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 276:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 277:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 278:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 279:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 280:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 281:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 282:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 283:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 284:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 285:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 286:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 287:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 288:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 289:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 290:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 291:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 292:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 293:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 294:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 295:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 296:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 297:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 298:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 299:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 300:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 301:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 303:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 304:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 305:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 306:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 307:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 308:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 309:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 310:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 311:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 312:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 313:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 314:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 315:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 316:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 317:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 320:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 321:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 322:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 323:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 324:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 325:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 326:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 327:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 328:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 329:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 330:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 332:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 333:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 334:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 335:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 336:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 337:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 338:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 339:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 340:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 341:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 342:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 343:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 344:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 345:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 346:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 347:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 348:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 349:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 350:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 351:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 352:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 353:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 354:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 355:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 356:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 357:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 358:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 359:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 360:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 361:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 362:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 363:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 364:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 365:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 366:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 367:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 368:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 369:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 370:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 371:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 372:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 373:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 374:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 375:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 376:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 377:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 378:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 379:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 380:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 381:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 382:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 383:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 384:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 385:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 386:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 387:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 388:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 389:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 390:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 393:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 395:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 397:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 398:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 399:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 400:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 401:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 402:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 403:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 404:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 405:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 406:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 407:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 408:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 409:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 410:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 411:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 412:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 413:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 414:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 415:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 416:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 417:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 418:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 419:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 420:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 421:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 422:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 423:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 424:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 425:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 426:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 427:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 428:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 431:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 433:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 435:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos,  /**< Baudrate generator 
 436:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S    = 0x3UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 437:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 438:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 439:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 440:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel input selection for CTQ
 441:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 442:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CTQSEL
 443:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 444:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PDIV = 0x0UL, /**< fCTQIN = fPDIV */
 445:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PPP  = 0x1UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fPPP */
 446:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_SCLK = 0x2UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fSCLK */
 447:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_MCLK = 0x3UL << USIC_CH_BRG_CTQSEL_Pos  /**< fCTQIN = fMCLK */
 448:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CTQSEL_t;
 449:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 450:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 451:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 452:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 453:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 454:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 455:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 456:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 457:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 458:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 459:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 460:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 462:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 463:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 464:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 465:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 466:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 467:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 468:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 469:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 471:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 472:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 473:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 474:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 475:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 476:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 477:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 478:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 479:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 480:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 481:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 482:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 483:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 484:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 485:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 487:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 488:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 489:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 490:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 491:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 492:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 493:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 494:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 495:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 496:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 497:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 498:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 499:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 500:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 501:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 502:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 503:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 504:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 505:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 506:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 507:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma push
 508:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma anon_unions
 509:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 510:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning 586
 511:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 512:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 514:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 515:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 516:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 517:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 518:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 519:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file,
 520:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 521:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 522:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 523:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 524:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 525:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 526:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 527:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 528:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 529:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 530:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 531:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 532:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 533:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 534:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 535:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 536:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 537:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   union
 539:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   {
 540:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 541:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 542:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 543:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 544:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 545:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   };
 546:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 547:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 548:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   union
 550:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   {
 551:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 552:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 553:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 554:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 555:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 556:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   };
 557:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 558:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 559:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 560:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 561:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 562:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 563:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 564:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 565:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 566:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 567:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 568:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 569:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 570:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 571:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 572:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 573:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 574:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 575:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 576:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 577:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 578:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 579:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 581:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 582:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 583:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma pop
 584:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 585:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning restore
 586:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 587:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 588:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 589:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 590:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 591:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 592:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 593:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 594:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 595:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 596:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 597:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 598:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 599:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 600:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 601:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 602:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 603:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 604:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 605:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 606:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 607:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 608:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 609:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 610:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 611:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 612:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 613:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 614:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 615:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 616:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 617:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 618:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 619:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 620:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 621:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 622:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 624:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 625:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 626:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 627:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 628:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 629:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 630:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 631:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 632:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 634:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 635:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 636:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 637:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 639:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 640:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 641:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 642:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 643:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 644:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 645:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 646:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 647:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 648:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 649:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 650:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 651:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 652:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 654:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 655:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 656:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 657:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 658:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 659:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 660:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 661:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 662:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 663:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 664:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 665:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 666:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 667:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 668:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 669:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 670:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 674:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 675:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 677:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 678:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 679:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 681:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 682:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 683:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 684:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 685:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 686:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 687:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 688:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 689:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 690:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 691:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 692:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 693:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 694:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 695:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 698:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 699:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 700:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 701:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 703:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 704:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 706:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 707:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 708:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 709:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 710:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 711:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 712:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 713:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 714:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 715:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 716:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 717:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 719:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 720:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 721:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 722:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 723:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 726:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 728:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 732:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clksel Baudrate generator clock source.
 733:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pppen Enable 2:1 Divider for fPPP.
 734:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Divider Factor to generate fPDIV = fPPP / (pDIV + 1)
 735:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  ctqsel Input selection for CTQ.
 736:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pctq Pre-Divider for Time Quanta Counter. fCTQIN / (PCQT + 1)
 737:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  dctq Denominator for Time Quanta Counter. fTQ / (DCTQ + 1)
 738:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 739:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 741:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate generator of the USIC channel.
 742:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFractionalDivider() \n\n\n
 745:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetBaudrateDivider(XMC_USIC_CH_t *const channel, 
 747:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CLOCK_SOURCE_t clksel,
 748:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     bool pppen,
 749:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pdiv,
 750:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CTQSEL_t ctqsel,
 751:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pctq,
 752:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t dctq);
 753:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 757:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 758:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 759:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 760:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 761:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 762:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 763:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 765:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 766:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 767:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 768:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 769:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 770:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 771:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 772:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 773:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 774:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 775:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 776:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 777:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 778:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 780:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 781:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 783:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 784:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 785:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 786:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 787:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 788:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 789:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 790:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 791:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 792:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 793:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 795:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 796:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 797:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 798:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 799:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 800:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 801:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 802:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 803:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 804:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 805:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 806:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 807:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 808:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 809:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 813:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 814:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 815:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 816:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 817:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 818:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 819:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t pdiv,
 820:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t oversampling,
 821:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 822:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 823:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 824:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 825:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 826:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 827:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 828:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 829:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 830:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 831:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 832:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 833:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 834:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 835:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 836:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 837:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc.
 838:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 839:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 841:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 842:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 843:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 844:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 844 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
  45 000c 1346     	 mov r3,r2
  46 000e BB70     	 strb r3,[r7,#2]
 845:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
  47              	 .loc 1 845 0
  48 0010 F878     	 ldrb r0,[r7,#3]
  49 0012 FB78     	 ldrb r3,[r7,#3]
  50 0014 7A68     	 ldr r2,[r7,#4]
  51 0016 0633     	 adds r3,r3,#6
  52 0018 9B00     	 lsls r3,r3,#2
  53 001a 1344     	 add r3,r3,r2
  54 001c 5B68     	 ldr r3,[r3,#4]
  55 001e 23F00702 	 bic r2,r3,#7
 846:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
  56              	 .loc 1 846 0
  57 0022 BB78     	 ldrb r3,[r7,#2]
 845:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
  58              	 .loc 1 845 0
  59 0024 1A43     	 orrs r2,r2,r3
  60 0026 7968     	 ldr r1,[r7,#4]
  61 0028 831D     	 adds r3,r0,#6
  62 002a 9B00     	 lsls r3,r3,#2
  63 002c 0B44     	 add r3,r3,r1
  64 002e 5A60     	 str r2,[r3,#4]
 847:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
  65              	 .loc 1 847 0
  66 0030 0C37     	 adds r7,r7,#12
  67              	.LCFI3:
  68              	 .cfi_def_cfa_offset 4
  69 0032 BD46     	 mov sp,r7
  70              	.LCFI4:
  71              	 .cfi_def_cfa_register 13
  72              	 
  73 0034 5DF8047B 	 ldr r7,[sp],#4
  74              	.LCFI5:
  75              	 .cfi_restore 7
  76              	 .cfi_def_cfa_offset 0
  77 0038 7047     	 bx lr
  78              	 .cfi_endproc
  79              	.LFE186:
  81 003a 00BF     	 .section .text.XMC_USIC_CH_SetWordLength,"ax",%progbits
  82              	 .align 2
  83              	 .thumb
  84              	 .thumb_func
  86              	XMC_USIC_CH_SetWordLength:
  87              	.LFB202:
 848:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 849:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 850:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 851:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 852:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 853:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 854:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 856:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 857:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 858:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 859:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 860:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 861:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 862:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 863:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 864:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_INSW_Msk;
 865:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 866:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 867:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 868:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 869:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 870:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 871:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 872:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 873:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 875:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 876:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 877:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 878:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 879:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 880:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 881:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 882:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 883:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 884:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 885:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 886:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 887:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 888:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 889:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 890:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 891:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 892:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 893:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 894:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 895:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 896:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 897:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 898:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 899:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 900:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 901:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 902:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 903:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 904:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 905:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 906:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 907:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 908:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 909:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 910:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 911:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 912:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 913:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 914:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 915:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 916:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 917:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 918:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 919:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 920:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 921:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 922:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 923:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 924:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 925:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 926:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 927:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 928:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 929:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 930:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 931:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 932:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 933:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 934:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 935:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 936:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 937:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 938:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 939:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 940:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 941:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 942:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 943:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 944:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 945:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 946:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 947:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 948:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 949:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 950:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 951:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 953:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 954:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 955:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 956:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 957:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &= (uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 958:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 959:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 960:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 961:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 962:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 963:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 964:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 965:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 966:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 968:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 969:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 970:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 973:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 975:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 977:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 979:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 982:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 983:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 984:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 985:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 986:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 987:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 988:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 991:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 993:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 994:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 995:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 996:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 997:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 998:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 999:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1000:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1001:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1002:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1003:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1004:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
1005:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
1006:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
1007:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1008:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
1010:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1011:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
1012:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1013:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
1014:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1016:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1017:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1018:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1019:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1020:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
1024:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
1025:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1026:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1027:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
1028:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1029:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
1030:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1031:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DSEN_Msk;
1032:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1033:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1037:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1038:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
1039:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1040:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1041:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1042:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
1043:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1045:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1046:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1047:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
1048:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1049:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_freq)
1050:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1051:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
1052:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
1053:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1058:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1059:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1060:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1061:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1062:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1064:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1065:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1068:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1070:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1071:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
1072:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1074:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1075:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1081:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1082:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1083:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1084:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1085:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1086:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1087:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1088:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1089:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1090:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1091:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1092:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1093:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1098:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1099:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t transmit_control_information)
1133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
  88              	 .loc 1 1153 0
  89              	 .cfi_startproc
  90              	 
  91              	 
  92              	 
  93 0000 80B4     	 push {r7}
  94              	.LCFI6:
  95              	 .cfi_def_cfa_offset 4
  96              	 .cfi_offset 7,-4
  97 0002 83B0     	 sub sp,sp,#12
  98              	.LCFI7:
  99              	 .cfi_def_cfa_offset 16
 100 0004 00AF     	 add r7,sp,#0
 101              	.LCFI8:
 102              	 .cfi_def_cfa_register 7
 103 0006 7860     	 str r0,[r7,#4]
 104 0008 0B46     	 mov r3,r1
 105 000a FB70     	 strb r3,[r7,#3]
1154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 106              	 .loc 1 1154 0
 107 000c 7B68     	 ldr r3,[r7,#4]
 108 000e 5B6B     	 ldr r3,[r3,#52]
 109 0010 23F07062 	 bic r2,r3,#251658240
1155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 110              	 .loc 1 1155 0
 111 0014 FB78     	 ldrb r3,[r7,#3]
 112 0016 013B     	 subs r3,r3,#1
 113 0018 1B06     	 lsls r3,r3,#24
1154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 114              	 .loc 1 1154 0
 115 001a 1A43     	 orrs r2,r2,r3
 116 001c 7B68     	 ldr r3,[r7,#4]
 117 001e 5A63     	 str r2,[r3,#52]
1156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 118              	 .loc 1 1156 0
 119 0020 0C37     	 adds r7,r7,#12
 120              	.LCFI9:
 121              	 .cfi_def_cfa_offset 4
 122 0022 BD46     	 mov sp,r7
 123              	.LCFI10:
 124              	 .cfi_def_cfa_register 13
 125              	 
 126 0024 5DF8047B 	 ldr r7,[sp],#4
 127              	.LCFI11:
 128              	 .cfi_restore 7
 129              	 .cfi_def_cfa_offset 0
 130 0028 7047     	 bx lr
 131              	 .cfi_endproc
 132              	.LFE202:
 134 002a 00BF     	 .section .text.XMC_USIC_CH_SetFrameLength,"ax",%progbits
 135              	 .align 2
 136              	 .thumb
 137              	 .thumb_func
 139              	XMC_USIC_CH_SetFrameLength:
 140              	.LFB206:
1157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value
1183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly.
1225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 141              	 .loc 1 1230 0
 142              	 .cfi_startproc
 143              	 
 144              	 
 145              	 
 146 0000 80B4     	 push {r7}
 147              	.LCFI12:
 148              	 .cfi_def_cfa_offset 4
 149              	 .cfi_offset 7,-4
 150 0002 83B0     	 sub sp,sp,#12
 151              	.LCFI13:
 152              	 .cfi_def_cfa_offset 16
 153 0004 00AF     	 add r7,sp,#0
 154              	.LCFI14:
 155              	 .cfi_def_cfa_register 7
 156 0006 7860     	 str r0,[r7,#4]
 157 0008 0B46     	 mov r3,r1
 158 000a FB70     	 strb r3,[r7,#3]
1231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 159              	 .loc 1 1231 0
 160 000c 7B68     	 ldr r3,[r7,#4]
 161 000e 5B6B     	 ldr r3,[r3,#52]
 162 0010 23F47C12 	 bic r2,r3,#4128768
1232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 163              	 .loc 1 1232 0
 164 0014 FB78     	 ldrb r3,[r7,#3]
 165 0016 013B     	 subs r3,r3,#1
 166 0018 1B04     	 lsls r3,r3,#16
1231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 167              	 .loc 1 1231 0
 168 001a 1A43     	 orrs r2,r2,r3
 169 001c 7B68     	 ldr r3,[r7,#4]
 170 001e 5A63     	 str r2,[r3,#52]
1233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 171              	 .loc 1 1233 0
 172 0020 0C37     	 adds r7,r7,#12
 173              	.LCFI15:
 174              	 .cfi_def_cfa_offset 4
 175 0022 BD46     	 mov sp,r7
 176              	.LCFI16:
 177              	 .cfi_def_cfa_register 13
 178              	 
 179 0024 5DF8047B 	 ldr r7,[sp],#4
 180              	.LCFI17:
 181              	 .cfi_restore 7
 182              	 .cfi_def_cfa_offset 0
 183 0028 7047     	 bx lr
 184              	 .cfi_endproc
 185              	.LFE206:
 187 002a 00BF     	 .section .text.XMC_USIC_CH_ConfigureShiftClockOutput,"ax",%progbits
 188              	 .align 2
 189              	 .thumb
 190              	 .thumb_func
 192              	XMC_USIC_CH_ConfigureShiftClockOutput:
 193              	.LFB249:
1234:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1236:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1237:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1238:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1239:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1240:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1241:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1245:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1246:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1247:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1248:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1249:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1250:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1251:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1252:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1253:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1254:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1255:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1256:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1257:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1258:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1259:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1260:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1261:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1262:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1263:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1264:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1265:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1266:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1267:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1268:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1269:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1270:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1271:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1272:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
1273:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1274:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1275:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1276:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1277:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1278:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1279:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1280:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1281:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1282:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1283:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1284:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1285:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1286:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1287:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1288:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1290:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1291:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1292:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1293:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1294:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1295:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1296:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1297:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1298:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1299:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1300:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1301:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1302:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1303:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1304:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1305:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1306:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1307:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1309:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1310:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1311:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1312:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1313:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1314:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1315:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1316:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1317:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1320:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1321:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1322:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1323:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1324:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1327:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1328:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1329:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1330:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1331:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1332:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1333:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1334:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte.
1335:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1336:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1337:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1338:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1339:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1340:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1341:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1342:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1343:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1344:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1345:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1346:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1347:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1348:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1349:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1350:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1351:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1352:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1353:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1354:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1355:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1356:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1357:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1358:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1359:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1360:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1361:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1362:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1363:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1364:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1365:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_START_TRANSMISION_MODE_t start_transmision_mode)
1366:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1367:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1368:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1369:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1370:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1371:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1372:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1373:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1374:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1375:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1376:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1377:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1378:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1380:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1381:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1382:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1384:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1385:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1386:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
1387:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1388:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1389:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1390:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1391:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1392:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1393:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1394:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1395:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1396:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1398:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the
1399:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1400:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1401:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1402:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1403:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1405:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1406:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1407:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1408:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1409:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1410:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1411:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1412:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1413:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1414:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1415:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1416:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1417:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1418:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1419:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1420:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1421:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of word length. \n\n
1422:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of word length is enabled, word length is configured based on the
1423:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], word length is con
1424:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1425:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1426:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1427:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1428:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1429:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1430:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableWordLengthControl(XMC_USIC_CH_t *const channel)
1431:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1432:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1433:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_SELMD_Msk |
1434:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_WAMD_Msk |
1435:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                              USIC_CH_TCSR_HPCMD_Msk))) |
1436:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)USIC_CH_TCSR_WLEMD_Msk;
1437:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1438:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1439:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1440:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1443:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1444:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1445:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1446:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1447:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1448:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1449:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1451:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1452:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1453:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1454:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1455:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1456:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1457:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1458:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1459:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1460:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1461:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1462:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1463:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of word length. \n\n
1464:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of word length is disabled, word length has to configured explicitly.
1465:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Word length remains fixed until it is changed again.
1466:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1467:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1468:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl(), XMC_USIC_CH_SetWordLength() \n\n\n
1469:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1470:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableWordLengthControl(XMC_USIC_CH_t *const channel)
1471:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1472:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_WLEMD_Msk;
1473:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1474:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1475:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1476:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1477:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1478:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1480:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1482:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1483:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1484:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1485:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1486:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1487:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1488:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1489:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1490:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1491:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1492:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1493:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1494:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1495:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1496:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1497:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1498:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1499:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1500:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1501:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1502:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1503:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1504:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1505:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1506:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1507:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1508:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1509:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1510:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1511:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1512:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1513:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1514:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1515:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1516:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1517:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1518:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1519:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be
1520:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled.
1521:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1522:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1524:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1525:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1526:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1527:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1528:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1529:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1530:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1531:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1534:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1535:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1536:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1537:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1538:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1539:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1540:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1541:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1542:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1543:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1544:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buffer_status)
1545:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1546:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1547:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1548:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1549:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1550:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1553:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1554:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1557:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1558:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1559:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1560:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1561:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_InvalidateReadData(XMC_USIC_CH_t *const channel)
1562:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1563:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = USIC_CH_FMR_CRDV0_Msk | USIC_CH_FMR_CRDV1_Msk;
1564:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1565:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1566:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1567:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1568:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1569:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1570:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1571:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1572:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1573:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1574:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1575:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1576:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the
1577:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1578:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1579:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1580:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1581:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1582:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1583:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive_level)
1584:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1585:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1586:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1587:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1588:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1589:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1590:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1591:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1592:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1593:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1594:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1595:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1596:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1597:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1598:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1599:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1600:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1601:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1602:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1603:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1604:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1605:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1606:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1607:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1608:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1609:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1610:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1611:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1612:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1613:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1614:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1615:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1616:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1617:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1618:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1619:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1620:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1621:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1622:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1623:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1624:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1625:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1626:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() }
1627:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1628:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1629:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1630:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the
1631:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1632:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1633:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1635:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1637:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1638:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
1639:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1640:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1645:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
1646:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1647:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1648:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1649:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
1650:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1651:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1653:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1654:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
1655:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
1656:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR = (channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) | ((limit << USIC_CH_TBCTR
1658:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1661:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1662:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1663:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1666:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1667:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1668:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1669:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1670:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1671:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
1672:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1673:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1675:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1676:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1677:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1678:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1679:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1680:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1681:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1682:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1683:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1684:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1685:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1686:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1687:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1688:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1689:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1690:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1691:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1692:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1693:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1694:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
1695:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent().
1696:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1697:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1698:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1699:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1700:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1701:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1702:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1703:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1705:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1710:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1711:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1712:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1713:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1714:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1715:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1716:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1717:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1718:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1719:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1720:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1721:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1722:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1723:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1724:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1725:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1727:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1728:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1729:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1730:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1731:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1732:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
1733:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
1734:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1735:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1736:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1737:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1738:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1739:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1740:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1741:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1742:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1743:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1744:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1745:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1746:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1747:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1748:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1749:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1750:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1751:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1752:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1753:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1754:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1759:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1760:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param loc Input location. \n
1761:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1762:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1763:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1764:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit data can be loaded to TBUF by software by writing to the transmit buffer input
1765:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * locations TBUFx (x = 00-31), consisting of 32 consecutive addresses. The data written
1766:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * to one of these input locations is stored in the transmit buffer TBUF. Additionally, the
1767:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * address of the written location is evaluated and can be used for additional control
1768:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * purposes. This 5-bit wide information (named Transmit Control Information TCI) can be
1769:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * used for different purposes in different protocols.
1770:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1771:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableWordLengthControl() \n
1773:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1774:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1775:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataEx(XMC_USIC_CH_t *const channel, const uint16_t data
1776:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1777:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[loc] = data;
1778:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1779:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1780:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1781:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1782:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1783:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1784:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1785:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1786:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1787:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1788:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1789:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1790:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1791:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1792:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1793:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_PutDataEx() \n
1796:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1797:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1798:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1799:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1800:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1801:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1802:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1803:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1804:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1805:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1806:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1809:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1810:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1811:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1812:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1813:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1814:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1815:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1816:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral.
1817:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1818:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1819:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1820:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1821:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1822:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1823:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1824:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t frame_length)
1825:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1826:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1827:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1828:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1829:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1830:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1833:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1834:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1835:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1836:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1837:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1838:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1839:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1840:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1841:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1842:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1843:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1844:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1845:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1846:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1847:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1848:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1849:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1850:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1851:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1852:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1853:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1854:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1855:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1856:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1857:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1858:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1859:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1860:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1861:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1862:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1863:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1864:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1865:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1866:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1867:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1868:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1869:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1870:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1871:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1872:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1873:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1874:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO,
1875:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1876:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1877:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1878:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1879:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1880:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1881:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1882:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1883:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1884:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1885:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1886:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1887:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1888:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n
1889:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1890:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1891:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1892:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1893:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1894:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1895:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1896:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1897:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1898:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1899:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1900:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1901:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1902:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1903:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1908:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1909:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1910:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1911:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1912:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1913:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1914:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1915:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1916:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1917:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1918:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1919:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1920:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1921:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1922:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1923:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1924:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_TBERI_Msk));
1925:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1931:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1932:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1933:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1934:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1936:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1937:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value.
1938:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1939:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of
1940:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1941:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1942:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1943:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1944:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1945:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1946:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t event)
1947:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1949:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1950:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1951:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1952:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1953:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1954:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1955:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1956:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1957:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1958:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1959:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1960:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1961:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1962:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1963:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1964:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1965:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1966:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1967:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1968:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1969:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1970:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1971:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1972:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
1973:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1974:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1975:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1976:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1977:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1982:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1983:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1984:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1985:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1986:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \deprecated { Use XMC_USIC_CH_RXFIFO_SetTriggerLimit() }
1988:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1989:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1990:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1991:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the
1992:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1993:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1994:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1995:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1996:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1997:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1998:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_FIFO_SIZE_t size,
1999:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit);
2000:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2001:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2002:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
2005:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a fifo size -1.
2006:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2007:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2008:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the trigger limit for the TX FIFO. \n\n
2010:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2011:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit() \n\n\n
2013:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2014:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_SetTriggerLimit(XMC_USIC_CH_t *const channel,
2015:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t limit)
2016:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2017:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR = (channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) | ((limit << USIC_CH_RBCTR
2018:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2019:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2020:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2021:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2022:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2023:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
2024:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2025:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2026:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2027:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
2028:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
2029:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing
2030:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
2031:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2032:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
2033:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
2034:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2035:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2036:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
2037:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2038:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
2039:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2040:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
2041:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2042:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2043:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2044:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2045:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2046:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2047:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
2048:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
2049:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
2050:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2051:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2052:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2053:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
2054:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event
2055:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent().
2056:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
2057:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
2058:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2059:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2060:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2061:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2062:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
2063:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2064:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
2065:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2066:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2067:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2068:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2069:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2070:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
2071:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
2072:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
2073:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
2074:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
2075:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2076:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2077:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2078:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
2079:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
2080:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
2081:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
2082:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
2083:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
2084:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
2085:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2086:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
2087:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2088:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2089:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
2090:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2091:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
2092:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
2093:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t service_request);
2094:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2095:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2096:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2097:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2098:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
2099:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
2100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
2103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
2104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
2105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
2106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
2107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
2110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
2112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
2114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
2123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
2124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
2127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
2129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
2131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
2137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
2138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
2141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
2142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
2143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
2146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
2148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
2150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
2156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
2157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
2160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
2161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
2162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
2163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
2166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
2168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
2170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
2176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
2177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
2180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
2181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the
2182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
2183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
2186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
2188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
2190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
2196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
2201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
2202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
2203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
2204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
2205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
2207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
2210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
2212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
2214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_RBERI_Msk |
2215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                         USIC_CH_TRBSR_ARBI_Msk));
2216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
2222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
2228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
2229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value.
2230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
2231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of
2232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
2233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2234:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2235:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
2236:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2237:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
2238:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t event)
2239:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2240:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
2241:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2242:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2243:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2244:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2245:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2246:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2247:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2248:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2249:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
2250:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
2251:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2252:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2253:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
2254:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2255:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
2256:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2257:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
2258:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2259:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2260:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2261:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2262:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2263:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2264:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2265:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2266:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2267:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2268:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2269:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2270:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2271:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2272:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2273:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2274:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2275:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2276:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2277:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2278:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2279:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2280:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2281:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2282:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2283:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2284:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2285:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2286:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2287:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2288:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t passive_level)
2289:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
2290:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2291:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
2292:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2293:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2294:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2295:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2296:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2297:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2298:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2299:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2300:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2301:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2302:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2303:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2304:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2305:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2306:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2307:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2308:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2309:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2310:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2311:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2312:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2313:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2314:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2315:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
2316:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
2317:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 194              	 .loc 1 2317 0
 195              	 .cfi_startproc
 196              	 
 197              	 
 198              	 
 199 0000 80B4     	 push {r7}
 200              	.LCFI18:
 201              	 .cfi_def_cfa_offset 4
 202              	 .cfi_offset 7,-4
 203 0002 85B0     	 sub sp,sp,#20
 204              	.LCFI19:
 205              	 .cfi_def_cfa_offset 24
 206 0004 00AF     	 add r7,sp,#0
 207              	.LCFI20:
 208              	 .cfi_def_cfa_register 7
 209 0006 F860     	 str r0,[r7,#12]
 210 0008 B960     	 str r1,[r7,#8]
 211 000a 7A60     	 str r2,[r7,#4]
2318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 212              	 .loc 1 2318 0
 213 000c FB68     	 ldr r3,[r7,#12]
 214 000e 5B69     	 ldr r3,[r3,#20]
 215 0010 23F05042 	 bic r2,r3,#-805306368
2319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                             USIC_CH_BRG_SCLKOSEL_Msk))) |
2320:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
 216              	 .loc 1 2320 0
 217 0014 BB68     	 ldr r3,[r7,#8]
2319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 218              	 .loc 1 2319 0
 219 0016 1A43     	 orrs r2,r2,r3
 220              	 .loc 1 2320 0
 221 0018 7B68     	 ldr r3,[r7,#4]
 222 001a 1A43     	 orrs r2,r2,r3
2318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 223              	 .loc 1 2318 0
 224 001c FB68     	 ldr r3,[r7,#12]
 225 001e 5A61     	 str r2,[r3,#20]
2321:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2322:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 226              	 .loc 1 2322 0
 227 0020 1437     	 adds r7,r7,#20
 228              	.LCFI21:
 229              	 .cfi_def_cfa_offset 4
 230 0022 BD46     	 mov sp,r7
 231              	.LCFI22:
 232              	 .cfi_def_cfa_register 13
 233              	 
 234 0024 5DF8047B 	 ldr r7,[sp],#4
 235              	.LCFI23:
 236              	 .cfi_restore 7
 237              	 .cfi_def_cfa_offset 0
 238 0028 7047     	 bx lr
 239              	 .cfi_endproc
 240              	.LFE249:
 242 002a 00BF     	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
 243              	 .align 2
 244              	 .thumb
 245              	 .thumb_func
 247              	XMC_USIC_CH_SetMode:
 248              	.LFB250:
2323:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
2324:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
2325:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2326:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2327:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2328:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2329:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2330:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2331:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2332:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2333:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2334:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2335:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2336:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2337:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
2338:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2339:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2340:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
2341:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2342:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 249              	 .loc 1 2342 0
 250              	 .cfi_startproc
 251              	 
 252              	 
 253              	 
 254 0000 80B4     	 push {r7}
 255              	.LCFI24:
 256              	 .cfi_def_cfa_offset 4
 257              	 .cfi_offset 7,-4
 258 0002 83B0     	 sub sp,sp,#12
 259              	.LCFI25:
 260              	 .cfi_def_cfa_offset 16
 261 0004 00AF     	 add r7,sp,#0
 262              	.LCFI26:
 263              	 .cfi_def_cfa_register 7
 264 0006 7860     	 str r0,[r7,#4]
 265 0008 0B46     	 mov r3,r1
 266 000a FB70     	 strb r3,[r7,#3]
2343:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 267              	 .loc 1 2343 0
 268 000c 7B68     	 ldr r3,[r7,#4]
 269 000e 1B6C     	 ldr r3,[r3,#64]
 270 0010 23F00F02 	 bic r2,r3,#15
 271 0014 FB78     	 ldrb r3,[r7,#3]
 272 0016 1A43     	 orrs r2,r2,r3
 273 0018 7B68     	 ldr r3,[r7,#4]
 274 001a 1A64     	 str r2,[r3,#64]
2344:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 275              	 .loc 1 2344 0
 276 001c 0C37     	 adds r7,r7,#12
 277              	.LCFI27:
 278              	 .cfi_def_cfa_offset 4
 279 001e BD46     	 mov sp,r7
 280              	.LCFI28:
 281              	 .cfi_def_cfa_register 13
 282              	 
 283 0020 5DF8047B 	 ldr r7,[sp],#4
 284              	.LCFI29:
 285              	 .cfi_restore 7
 286              	 .cfi_def_cfa_offset 0
 287 0024 7047     	 bx lr
 288              	 .cfi_endproc
 289              	.LFE250:
 291 0026 00BF     	 .section .text.XMC_SPI_CH_Init,"ax",%progbits
 292              	 .align 2
 293              	 .thumb
 294              	 .thumb_func
 296              	XMC_SPI_CH_Init:
 297              	.LFB251:
 298              	 .file 2 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc_spi.h"
   1:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
   2:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @file xmc_spi.h
   3:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
   5:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @cond
   6:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
   9:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  12:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  14:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  21:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  28:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  36:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  41:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Change History
  42:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * --------------
  43:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  44:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Initial
  46:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  47:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-05-20:
  48:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Documentation improved <br>
  49:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and
  50:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  51:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  52:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  53:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-06-20:
  54:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  55:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  56:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-24:
  57:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  58:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  59:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  60:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-27:
  61:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  62:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  63:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-01:
  64:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  65:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  66:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  67:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  68:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-08:
  69:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  70:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  71:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-04-10:
  72:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  73:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  74:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-05-20:
  75:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_EnableDataTransmission() and XMC_SPI_CH_DisableDataTransmission()
  76:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  77:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2019-03-30:
  78:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Fix XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX macro value
  79:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  80:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2019-05-07:
  81:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added normal_divider_mode to XMC_SPI_CH_CONFIG_t configuration structure.
  82:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  83:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetBaudrateEx()
  84:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  85:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2019-09-04:
  86:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *    - Added XMC_SPI_CLOCK_MODE_t enum
  87:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  88:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2020-12-05:
  89:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *    - Added XMC_SPI_CH_InitEx() that allows user select if automatic baudrate configuration shoul
  90:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  91:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @endcond
  92:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  93:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
  94:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
  95:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #ifndef XMC_SPI_H
  96:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI_H
  97:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
  98:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
  99:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * HEADER FILES
 100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #include "xmc_usic.h"
 102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
 105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
 106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup SPI
 110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
 111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module.
 113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
 114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
 115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
 116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
 117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
 118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
 120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * and also for data transaction.<br>
 121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver features:
 122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
 130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * MACROS
 134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC0)
 137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC1)
 142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC2)
 147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * ENUMS
 153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the SPI bus mode
 166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                   (active high) */
 180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   polarity to the M
 182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   (active low)*/
 183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines Slave Select lines
 196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI specific events
 211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI event status
 229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             select(
 234:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 235:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input(D
 236:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 237:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             output 
 238:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 239:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input s
 240:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 241:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             parity 
 242:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 243:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 244:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 245:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 246:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 247:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 248:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 249:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 250:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 251:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             receive
 252:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 253:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             generat
 254:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 255:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 256:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 257:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 258:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 259:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 260:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 261:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 262:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 263:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 264:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 265:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 266:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 267:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 268:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Define data and clock input stages
 269:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 270:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 271:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 272:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */
 273:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 274:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 275:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 276:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 277:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 278:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 279:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 280:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 281:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Define SPI data transfer mode
 282:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 283:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 284:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 285:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */
 286:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 5UL, /**< SPI standard half duplex mode */
 287:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL = 6UL,                /**< SPI half duplex mode with dual data lines */
 288:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD = 7UL                 /**< SPI half duplex mode with quad data lines */
 289:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 290:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 291:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 292:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 293:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 294:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 295:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 296:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 297:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 298:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 299:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 300:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 301:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 302:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 303:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 304:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 305:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 306:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 307:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 308:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI clock modes
 309:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 310:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 311:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* CPOL=0 is a clock which idles at 0, and each cycle consists of a pulse of 1. That is, the leadin
 312:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* CPOL=1 is a clock which idles at 1, and each cycle consists of a pulse of 0. That is, the leadin
 313:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* CPHA=0, the "out" side changes the data on the trailing edge of the preceding clock cycle, while
 314:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****    The out side holds the data valid until the trailing edge of the current clock cycle. For the fi
 315:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* For CPHA=1, the "out" side changes the data on the leading edge of the current clock cycle, whil
 316:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   The out side holds the data valid until the leading edge of the following clock cycle. For the la
 317:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CLOCK_MODE
 318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_0_CPHA_0 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
 320:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_0_CPHA_1 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
 321:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_1_CPHA_0 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
 322:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_1_CPHA_1 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED
 323:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CLOCK_MODE_t;
 324:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 325:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 326:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 327:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** */
 328:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 329:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 330:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 331:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 332:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 333:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 334:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 335:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 336:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 337:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 338:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 339:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 340:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 341:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 342:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 343:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 344:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 345:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 346:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 347:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * DATA STRUCTURES
 348:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** ***************************************************************************************************
 349:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 350:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 351:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 352:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 353:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 354:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 355:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   uint32_t baudrate;							                /**< Module baud rate for communication */
 356:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   bool normal_divider_mode;                       /**< Selects normal divider mode for baudrate gen
 357:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 358:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 359:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                        MSLS signal  */
 360:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 361:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 362:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 363:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 364:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * API PROTOTYPES
 365:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 366:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 367:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #ifdef __cplusplus
 368:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** extern "C" {
 369:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 370:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 371:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 372:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 373:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 374:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 375:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param init_brg Selects if the baudrate generator should be configured automatically.
 376:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 377:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 378:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 379:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 380:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 381:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 382:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 383:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 384:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 385:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 386:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 387:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 388:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 389:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 390:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 391:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 392:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 393:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 394:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 395:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 396:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 397:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 398:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 399:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 400:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 401:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool 
 402:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 403:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 404:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 405:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 406:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 407:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 408:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 409:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 410:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 411:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 412:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 413:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 414:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 415:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 416:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 417:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 418:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 419:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 420:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 421:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 422:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 423:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 424:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 425:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 426:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 427:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 428:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 429:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 430:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 431:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 432:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const
 433:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 299              	 .loc 2 433 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303 0000 80B5     	 push {r7,lr}
 304              	.LCFI30:
 305              	 .cfi_def_cfa_offset 8
 306              	 .cfi_offset 7,-8
 307              	 .cfi_offset 14,-4
 308 0002 82B0     	 sub sp,sp,#8
 309              	.LCFI31:
 310              	 .cfi_def_cfa_offset 16
 311 0004 00AF     	 add r7,sp,#0
 312              	.LCFI32:
 313              	 .cfi_def_cfa_register 7
 314 0006 7860     	 str r0,[r7,#4]
 315 0008 3960     	 str r1,[r7]
 434:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_InitEx(channel, config, true);
 316              	 .loc 2 434 0
 317 000a 7868     	 ldr r0,[r7,#4]
 318 000c 3968     	 ldr r1,[r7]
 319 000e 0122     	 movs r2,#1
 320 0010 FFF7FEFF 	 bl XMC_SPI_CH_InitEx
 435:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 321              	 .loc 2 435 0
 322 0014 0837     	 adds r7,r7,#8
 323              	.LCFI33:
 324              	 .cfi_def_cfa_offset 8
 325 0016 BD46     	 mov sp,r7
 326              	.LCFI34:
 327              	 .cfi_def_cfa_register 13
 328              	 
 329 0018 80BD     	 pop {r7,pc}
 330              	 .cfi_endproc
 331              	.LFE251:
 333 001a 00BF     	 .section .text.XMC_SPI_CH_Start,"ax",%progbits
 334              	 .align 2
 335              	 .thumb
 336              	 .thumb_func
 338              	XMC_SPI_CH_Start:
 339              	.LFB252:
 436:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 437:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 438:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 439:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 440:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 441:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 442:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 443:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 444:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 445:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 446:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 447:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 448:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 449:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 450:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 451:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 340              	 .loc 2 451 0
 341              	 .cfi_startproc
 342              	 
 343              	 
 344 0000 80B5     	 push {r7,lr}
 345              	.LCFI35:
 346              	 .cfi_def_cfa_offset 8
 347              	 .cfi_offset 7,-8
 348              	 .cfi_offset 14,-4
 349 0002 82B0     	 sub sp,sp,#8
 350              	.LCFI36:
 351              	 .cfi_def_cfa_offset 16
 352 0004 00AF     	 add r7,sp,#0
 353              	.LCFI37:
 354              	 .cfi_def_cfa_register 7
 355 0006 7860     	 str r0,[r7,#4]
 452:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 453:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 356              	 .loc 2 453 0
 357 0008 7868     	 ldr r0,[r7,#4]
 358 000a 0121     	 movs r1,#1
 359 000c FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 454:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 360              	 .loc 2 454 0
 361 0010 0837     	 adds r7,r7,#8
 362              	.LCFI38:
 363              	 .cfi_def_cfa_offset 8
 364 0012 BD46     	 mov sp,r7
 365              	.LCFI39:
 366              	 .cfi_def_cfa_register 13
 367              	 
 368 0014 80BD     	 pop {r7,pc}
 369              	 .cfi_endproc
 370              	.LFE252:
 372 0016 00BF     	 .section .text.XMC_SPI_CH_SetBitOrderMsbFirst,"ax",%progbits
 373              	 .align 2
 374              	 .thumb
 375              	 .thumb_func
 377              	XMC_SPI_CH_SetBitOrderMsbFirst:
 378              	.LFB256:
 455:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 456:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 457:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 458:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 459:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 460:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 461:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 462:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 463:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 464:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 465:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 466:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * invoked to start the communication again.
 467:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 468:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 469:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 470:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 471:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 472:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 473:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 474:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 475:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 476:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 477:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 478:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 479:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 480:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 481:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 482:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 483:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 484:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 485:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop(), XMC_USIC_CH_GetSCLKFrequency()
 486:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 487:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 488:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 489:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 490:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 491:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 492:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 493:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 494:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 495:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 496:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 497:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 498:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 499:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 500:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 501:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 502:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop(), XMC_USIC_CH_GetSCLKFrequency()
 503:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 504:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, const uint32_t rate, boo
 505:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 506:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 507:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 508:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 509:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 510:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 511:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 512:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 513:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 514:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 515:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 516:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 517:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 518:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 519:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 520:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 521:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 522:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 523:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 524:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 525:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 526:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 527:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 528:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 529:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 530:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 531:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 532:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 533:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 534:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 535:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 536:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 537:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 538:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 539:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 540:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 541:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 542:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 543:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 544:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 545:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 546:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 547:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 548:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * mode to ensure the proper communication.
 549:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 550:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 551:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 552:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 553:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 554:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 555:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 556:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 557:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 558:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 559:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 560:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 561:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param data Data to be transmitted
 562:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 563:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 564:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 565:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 566:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 567:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 568:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 569:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 570:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 571:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 572:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 573:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 574:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 575:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 576:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 577:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 578:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 579:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 580:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 581:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 582:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 583:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 584:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 585:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 586:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 587:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 588:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 589:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 590:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 591:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 592:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 593:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 594:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 595:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 596:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 597:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /* Transmit dummy data */
 598:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 599:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 600:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 601:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 602:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 603:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 604:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 605:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 606:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 607:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 608:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 609:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 610:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 611:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 612:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 613:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 614:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 615:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 616:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 617:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 618:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 619:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 620:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 621:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 622:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 623:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 624:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * the program.
 625:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 626:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 627:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 628:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 629:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 630:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 631:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 632:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 633:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 634:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 635:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 636:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 637:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 638:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 639:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 640:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 641:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init().
 642:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 643:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 644:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 645:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 646:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 647:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 648:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 379              	 .loc 2 648 0
 380              	 .cfi_startproc
 381              	 
 382              	 
 383              	 
 384 0000 80B4     	 push {r7}
 385              	.LCFI40:
 386              	 .cfi_def_cfa_offset 4
 387              	 .cfi_offset 7,-4
 388 0002 83B0     	 sub sp,sp,#12
 389              	.LCFI41:
 390              	 .cfi_def_cfa_offset 16
 391 0004 00AF     	 add r7,sp,#0
 392              	.LCFI42:
 393              	 .cfi_def_cfa_register 7
 394 0006 7860     	 str r0,[r7,#4]
 649:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 395              	 .loc 2 649 0
 396 0008 7B68     	 ldr r3,[r7,#4]
 397 000a 5B6B     	 ldr r3,[r3,#52]
 398 000c 43F00102 	 orr r2,r3,#1
 399 0010 7B68     	 ldr r3,[r7,#4]
 400 0012 5A63     	 str r2,[r3,#52]
 650:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 401              	 .loc 2 650 0
 402 0014 0C37     	 adds r7,r7,#12
 403              	.LCFI43:
 404              	 .cfi_def_cfa_offset 4
 405 0016 BD46     	 mov sp,r7
 406              	.LCFI44:
 407              	 .cfi_def_cfa_register 13
 408              	 
 409 0018 5DF8047B 	 ldr r7,[sp],#4
 410              	.LCFI45:
 411              	 .cfi_restore 7
 412              	 .cfi_def_cfa_offset 0
 413 001c 7047     	 bx lr
 414              	 .cfi_endproc
 415              	.LFE256:
 417 001e 00BF     	 .section .text.XMC_SPI_CH_SetSlaveSelectDelay,"ax",%progbits
 418              	 .align 2
 419              	 .thumb
 420              	 .thumb_func
 422              	XMC_SPI_CH_SetSlaveSelectDelay:
 423              	.LFB266:
 651:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 652:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 653:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 654:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 655:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 656:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 657:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 658:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 659:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 660:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 661:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 662:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent().
 663:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 664:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 665:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 667:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 668:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 669:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 670:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 671:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 672:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 673:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 674:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 675:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 676:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 677:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 678:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 679:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 680:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 681:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 682:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 683:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 684:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 685:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 686:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 687:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 688:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 689:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 690:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 691:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 692:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 693:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 694:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication.
 695:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 696:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 697:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 698:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 699:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 700:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 701:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   return channel->PSR_SSCMode;
 702:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 703:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 704:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 705:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 706:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 707:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 708:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 709:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 710:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 711:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 712:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 713:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 714:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 715:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 716:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 717:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 718:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 719:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 720:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 721:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 722:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PSCR |= flag;
 723:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 724:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 725:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 726:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 727:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 728:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 729:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 730:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 731:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the generation of Master clock by setting PCR.MCLK bit.\n\n
 732:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This clock can be used as a clock reference for external devices. This is not enabled during ini
 733:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(). Invoke XMC_SPI_CH_EnableMasterClock() to enable as needed in the program, or 
 734:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableMasterClock().
 735:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 736:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 737:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableMasterClock()
 738:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 739:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableMasterClock(XMC_USIC_CH_t *const channel)
 740:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 741:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_MCLK_Msk;
 742:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 743:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 744:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 745:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 746:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 747:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 748:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 749:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 750:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the generation of Master clock by clearing PCR.MCLK bit.\n\n
 751:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This clock can be enabled by invoking XMC_SPI_CH_EnableMasterClock() as needed in the program.
 752:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 753:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 754:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableMasterClock()
 755:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 756:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableMasterClock(XMC_USIC_CH_t *const channel)
 757:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 758:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_MCLK_Msk;
 759:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 760:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #ifdef USIC_CH_PCR_SSCMode_SLPHSEL_Msk
 761:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 762:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 763:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 764:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 765:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 766:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 767:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Data bits are shifted out with the leading edge of the shift clock signal and latched in with th
 768:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 769:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 770:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DataLatchedInLeadingEdge()
 771:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 772:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DataLatchedInTrailingEdge(XMC_USIC_CH_t *const channel)
 773:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 774:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SLPHSEL_Msk;
 775:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 776:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 777:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 778:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 779:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 780:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 781:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 782:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 783:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The first data bit is shifted out when the data shift unit receives a low to high transition fro
 784:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * stage. Subsequent bits are shifted out with the trailing edge of the shift clock signal. Data bi
 785:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * always latched in with the leading edge.
 786:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 787:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 788:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DataLatchedInTrailingEdge()
 789:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 790:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DataLatchedInLeadingEdge(XMC_USIC_CH_t *const channel)
 791:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 792:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= USIC_CH_PCR_SSCMode_SLPHSEL_Msk;
 793:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 794:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 795:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 796:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 797:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 798:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 799:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 800:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 801:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the delay after each word, by setting PCR.TIWEN bit.\n\n
 802:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The inter word delay starts at the end of last SCLK cycle of data word. During this time no cloc
 803:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * generated and MSLS signal stays active. If inter word delay is not enabled, last data bit of a d
 804:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * followed by the first data bit of the next data word. This is not enabled in XMC_SPI_CH_Init(). 
 805:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay() has to be invoked as needed in the program. And can be disable
 806:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableInterwordDelay().
 807:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 808:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 809:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableInterwordDelay()
 810:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 811:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableInterwordDelay(XMC_USIC_CH_t *const channel)
 812:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 813:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_TIWEN_Msk;
 814:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 815:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 816:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 817:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 818:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 819:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 820:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 821:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 822:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the delay after after each word, by clearing PCR.TIWEN bit.\n\n
 823:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * So the last data bit of a data word is directly followed by the first data bit of the next data 
 824:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * be enabled by invoking XMC_SPI_CH_EnableInterwordDelay().
 825:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 826:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 827:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay()
 828:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 829:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableInterwordDelay(XMC_USIC_CH_t *const channel)
 830:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 831:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_TIWEN_Msk;
 832:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 833:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 834:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 835:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 836:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param tinterword_delay_ns delay in terms of nano seconds.
 837:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 838:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 839:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 840:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 841:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields.\n\n
 842:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The inter word delay is dependent on the peripheral clock. The maximum possible value is calcula
 843:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * below formula\n
 844:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *            Maximum inter word delay = ((1 + PCTQ1_max)(1 + DCTQ1_max)) / peripheral clock\n
 845:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *                                       where PCTQ1_max = 3 and DCTQ1_max = 31\n
 846:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * After configuring the inter word delay, this has to be enabled by invoking XMC_SPI_CH_EnableInte
 847:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 848:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 849:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay(),XMC_SPI_CH_SetInterwordDelaySCLK()
 850:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 851:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel, uint32_t tinterword_delay_ns);
 852:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 853:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 854:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 855:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param sclk_period  in terms of clk cycles.
 856:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 857:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 858:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 859:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 860:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the inter word delay by setting PCR.DCTQ1 bit fields.\n\n
 861:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This delay is dependent on the peripheral clock. The maximum possible value supported by this AP
 862:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * is 32 clock cycles.
 863:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * After configuring the inter word delay, this has to be enabled by invoking XMC_SPI_CH_EnableInte
 864:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 865:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 866:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay(),XMC_SPI_CH_EnableInterwordDelay()
 867:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 868:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetInterwordDelaySCLK(XMC_USIC_CH_t *const channel, uint32_t sclk_p
 869:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 870:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 871:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                     USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 872:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                     USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) |
 873:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                          (((sclk_period - 1U) <<  USIC_CH_PCR_SSCMode_DCTQ1_Pos) |
 874:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                           (0x02U <<  USIC_CH_PCR_SSCMode_CTQSEL1_Pos));
 875:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 876:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 877:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 878:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 879:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param sclk_period delay in terms of sclk clock cycles.
 880:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 881:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 882:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 883:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 884:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the leading/trailing delay by setting BRG.DCTQ bit field.\n\n
 885:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This delay is dependent on the peripheral clock. The maximum possible value supported by this AP
 886:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * is 30 clock cycles.
 887:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 888:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 889:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_per
 890:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 424              	 .loc 2 890 0
 425              	 .cfi_startproc
 426              	 
 427              	 
 428              	 
 429 0000 80B4     	 push {r7}
 430              	.LCFI46:
 431              	 .cfi_def_cfa_offset 4
 432              	 .cfi_offset 7,-4
 433 0002 83B0     	 sub sp,sp,#12
 434              	.LCFI47:
 435              	 .cfi_def_cfa_offset 16
 436 0004 00AF     	 add r7,sp,#0
 437              	.LCFI48:
 438              	 .cfi_def_cfa_register 7
 439 0006 7860     	 str r0,[r7,#4]
 440 0008 3960     	 str r1,[r7]
 891:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 892:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 441              	 .loc 2 892 0
 442 000a 7B68     	 ldr r3,[r7,#4]
 443 000c 5B69     	 ldr r3,[r3,#20]
 444 000e 23F4FE42 	 bic r2,r3,#32512
 893:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                    USIC_CH_BRG_PCTQ_Msk)) |
 894:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                  (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 445              	 .loc 2 894 0
 446 0012 3B68     	 ldr r3,[r7]
 447 0014 013B     	 subs r3,r3,#1
 448 0016 9B02     	 lsls r3,r3,#10
 893:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                    USIC_CH_BRG_PCTQ_Msk)) |
 449              	 .loc 2 893 0
 450 0018 1343     	 orrs r3,r3,r2
 451 001a 43F48072 	 orr r2,r3,#256
 892:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                    USIC_CH_BRG_PCTQ_Msk)) |
 452              	 .loc 2 892 0
 453 001e 7B68     	 ldr r3,[r7,#4]
 454 0020 5A61     	 str r2,[r3,#20]
 895:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 455              	 .loc 2 895 0
 456 0022 0C37     	 adds r7,r7,#12
 457              	.LCFI49:
 458              	 .cfi_def_cfa_offset 4
 459 0024 BD46     	 mov sp,r7
 460              	.LCFI50:
 461              	 .cfi_def_cfa_register 13
 462              	 
 463 0026 5DF8047B 	 ldr r7,[sp],#4
 464              	.LCFI51:
 465              	 .cfi_restore 7
 466              	 .cfi_def_cfa_offset 0
 467 002a 7047     	 bx lr
 468              	 .cfi_endproc
 469              	.LFE266:
 471              	 .section .text.XMC_SPI_CH_ConfigureShiftClockOutput,"ax",%progbits
 472              	 .align 2
 473              	 .thumb
 474              	 .thumb_func
 476              	XMC_SPI_CH_ConfigureShiftClockOutput:
 477              	.LFB269:
 896:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 897:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 898:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 899:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 900:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 901:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 902:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 903:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 904:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure to keep MSLS(Slave select signal) active even after finishing the current data frame,
 905:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * by setting PCR.FEM bit.\n\n
 906:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically used during the transmission of multi-data word frames, where there is possibi
 907:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * delivering the data. Frame end mode is enabled in XMC_SPI_CH_Init() during initialization. To di
 908:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableFEM() can be invoked as needed in the program.
 909:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 910:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 911:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableFEM()
 912:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 913:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableFEM(XMC_USIC_CH_t *const channel)
 914:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 915:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_FEM_Msk;
 916:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 917:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 918:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 919:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 920:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 921:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 922:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 923:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 924:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure to disable the MSLS(Slave select signal) if the current data frame is considered as fi
 925:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * by setting PCR.FEM bit.\n\n
 926:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 927:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * When the last bit of a data word has been sent out and the transmit buffer TBUF does not contain
 928:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * considered as frame is ended and MSLS(Slave select signal) is disabled.
 929:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 930:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 931:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableFEM()
 932:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 933:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
 934:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 935:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 936:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 937:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 938:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 939:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 940:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param passive_level polarity and delay of the selected shift clock.\n
 941:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *                      Refer @ref XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t for valid inputs.
 942:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param clock_output shift clock source.\n
 943:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *                     Refer @ref XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t for valid inputs.
 944:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 945:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 946:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 947:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 948:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the shift clock source with the selected polarity and delay by setting BRG.SCLKOSEL a
 949:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * In Master mode operation, shift clock is generated by the internal baud rate generator. This SCL
 950:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * for external slave devices by SCLKOUT signal.\n
 951:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * In Slave mode, the signal is received from the external master. So the DX1(input) stage has to b
 952:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The shift clock output(SCLKOUT) signal polarity can be set relative to SCLK, with the delay of h
 953:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * period. These settings are applicable only in master mode.
 954:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 955:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
 956:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****     const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
 957:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****     const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
 958:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 478              	 .loc 2 958 0
 479              	 .cfi_startproc
 480              	 
 481              	 
 482 0000 80B5     	 push {r7,lr}
 483              	.LCFI52:
 484              	 .cfi_def_cfa_offset 8
 485              	 .cfi_offset 7,-8
 486              	 .cfi_offset 14,-4
 487 0002 84B0     	 sub sp,sp,#16
 488              	.LCFI53:
 489              	 .cfi_def_cfa_offset 24
 490 0004 00AF     	 add r7,sp,#0
 491              	.LCFI54:
 492              	 .cfi_def_cfa_register 7
 493 0006 F860     	 str r0,[r7,#12]
 494 0008 B960     	 str r1,[r7,#8]
 495 000a 7A60     	 str r2,[r7,#4]
 959:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passi
 496              	 .loc 2 959 0
 497 000c F868     	 ldr r0,[r7,#12]
 498 000e B968     	 ldr r1,[r7,#8]
 499 0010 7A68     	 ldr r2,[r7,#4]
 500 0012 FFF7FEFF 	 bl XMC_USIC_CH_ConfigureShiftClockOutput
 960:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                         (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
 961:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 501              	 .loc 2 961 0
 502 0016 1037     	 adds r7,r7,#16
 503              	.LCFI55:
 504              	 .cfi_def_cfa_offset 8
 505 0018 BD46     	 mov sp,r7
 506              	.LCFI56:
 507              	 .cfi_def_cfa_register 13
 508              	 
 509 001a 80BD     	 pop {r7,pc}
 510              	 .cfi_endproc
 511              	.LFE269:
 513              	 .section .text.XMC_SPI_CH_SetWordLength,"ax",%progbits
 514              	 .align 2
 515              	 .thumb
 516              	 .thumb_func
 518              	XMC_SPI_CH_SetWordLength:
 519              	.LFB270:
 962:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 963:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 964:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 965:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 966:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *         \b Range: 1 to 16.
 967:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 968:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 969:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 970:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 971:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the data word length.\n\n
 972:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 973:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 974:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 975:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetFrameLength()
 976:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 977:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_leng
 978:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 520              	 .loc 2 978 0
 521              	 .cfi_startproc
 522              	 
 523              	 
 524 0000 80B5     	 push {r7,lr}
 525              	.LCFI57:
 526              	 .cfi_def_cfa_offset 8
 527              	 .cfi_offset 7,-8
 528              	 .cfi_offset 14,-4
 529 0002 82B0     	 sub sp,sp,#8
 530              	.LCFI58:
 531              	 .cfi_def_cfa_offset 16
 532 0004 00AF     	 add r7,sp,#0
 533              	.LCFI59:
 534              	 .cfi_def_cfa_register 7
 535 0006 7860     	 str r0,[r7,#4]
 536 0008 0B46     	 mov r3,r1
 537 000a FB70     	 strb r3,[r7,#3]
 979:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 538              	 .loc 2 979 0
 539 000c FB78     	 ldrb r3,[r7,#3]
 540 000e 7868     	 ldr r0,[r7,#4]
 541 0010 1946     	 mov r1,r3
 542 0012 FFF7FEFF 	 bl XMC_USIC_CH_SetWordLength
 980:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 543              	 .loc 2 980 0
 544 0016 0837     	 adds r7,r7,#8
 545              	.LCFI60:
 546              	 .cfi_def_cfa_offset 8
 547 0018 BD46     	 mov sp,r7
 548              	.LCFI61:
 549              	 .cfi_def_cfa_register 13
 550              	 
 551 001a 80BD     	 pop {r7,pc}
 552              	 .cfi_endproc
 553              	.LFE270:
 555              	 .section .text.XMC_SPI_CH_SetFrameLength,"ax",%progbits
 556              	 .align 2
 557              	 .thumb
 558              	 .thumb_func
 560              	XMC_SPI_CH_SetFrameLength:
 561              	.LFB271:
 981:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 982:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 983:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 984:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  frame_length Number of bits in a frame. \n
 985:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *                \b Range: 1 to 64. If the value 64 is configured, then the frame does not
 986:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *                automatically end. User should explicitly end the frame.
 987:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 988:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 989:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 990:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 991:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Define the data frame length.\n\n
 992:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the number of bits to be serially transmitted in a frame.
 993:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The frame length should be multiples of word length. If the value is set to 64, the frame does n
 994:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * automatically end. Use XMC_SPI_CH_DisableSlaveSelect() to end the frame after all the data
 995:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * is transmitted.
 996:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 997:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 998:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSele
 999:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
1000:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_le
1001:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 562              	 .loc 2 1001 0
 563              	 .cfi_startproc
 564              	 
 565              	 
 566 0000 80B5     	 push {r7,lr}
 567              	.LCFI62:
 568              	 .cfi_def_cfa_offset 8
 569              	 .cfi_offset 7,-8
 570              	 .cfi_offset 14,-4
 571 0002 82B0     	 sub sp,sp,#8
 572              	.LCFI63:
 573              	 .cfi_def_cfa_offset 16
 574 0004 00AF     	 add r7,sp,#0
 575              	.LCFI64:
 576              	 .cfi_def_cfa_register 7
 577 0006 7860     	 str r0,[r7,#4]
 578 0008 0B46     	 mov r3,r1
 579 000a FB70     	 strb r3,[r7,#3]
1002:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 580              	 .loc 2 1002 0
 581 000c FB78     	 ldrb r3,[r7,#3]
 582 000e 7868     	 ldr r0,[r7,#4]
 583 0010 1946     	 mov r1,r3
 584 0012 FFF7FEFF 	 bl XMC_USIC_CH_SetFrameLength
1003:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 585              	 .loc 2 1003 0
 586 0016 0837     	 adds r7,r7,#8
 587              	.LCFI65:
 588              	 .cfi_def_cfa_offset 8
 589 0018 BD46     	 mov sp,r7
 590              	.LCFI66:
 591              	 .cfi_def_cfa_register 13
 592              	 
 593 001a 80BD     	 pop {r7,pc}
 594              	 .cfi_endproc
 595              	.LFE271:
 597              	 .section .text.XMC_SPI_CH_SetInputSource,"ax",%progbits
 598              	 .align 2
 599              	 .thumb
 600              	 .thumb_func
 602              	XMC_SPI_CH_SetInputSource:
 603              	.LFB276:
1004:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
1005:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
1006:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
1007:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1008:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
1009:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1010:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
1011:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure the handling of start of frame through software, by setting TCSR.SOF bit.\n\n
1012:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This can be used if the software handles the TBUF data without FIFO. If SOF is set, a valid cont
1013:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * considered as first word of a new frame by finishing the currently running frame. For software h
1014:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * it is recommended to configure TCSR.WLEMD as 0. This is not configured during initialization. XM
1015:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * can be called as needed in the program and can be disabled by XMC_SPI_CH_DisableSOF().
1016:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1017:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
1018:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSOF()
1019:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
1020:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableSOF(XMC_USIC_CH_t *const channel)
1021:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
1022:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_SOF_Msk;
1023:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
1024:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
1025:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
1026:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
1027:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1028:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
1029:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1030:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
1031:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the control of the handling start of frame through hardware, by clearing TCSR.SOF bit.\n\n
1032:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Typically this can be disabled, where the transmission control is done by the hardware.
1033:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1034:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
1035:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSOF()
1036:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
1037:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableSOF(XMC_USIC_CH_t *const channel)
1038:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
1039:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_SOF_Msk;
1040:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
1041:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
1042:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
1043:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
1044:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1045:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
1046:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1047:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
1048:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure the handling of end of frame through software, by setting TCSR.EOF bit.\n\n
1049:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid cont
1050:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactiv
1051:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. \n
1052:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \b Note: The API should be called before putting the last data word of the frame to TBUF.
1053:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1054:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
1055:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEOF()
1056:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
1057:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableEOF(XMC_USIC_CH_t *const channel)
1058:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
1059:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_EOF_Msk;
1060:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
1061:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
1062:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
1063:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
1064:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1065:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
1066:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1067:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
1068:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure the handling of end of frame through hardware, by clearing TCSR.EOF bit.\n\n
1069:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Typically this can be disabled, where the transmission control is done by the hardware.
1070:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1071:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
1072:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEOF()
1073:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
1074:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableEOF(XMC_USIC_CH_t *const channel)
1075:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
1076:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_EOF_Msk;
1077:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
1078:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
1079:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
1080:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
1081:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  input SPI channel input stage.\n
1082:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer @ref XMC_SPI_CH_INPUT_t for valid values
1083:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  source Input source select for the input stage.
1084:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *                Range : [0 to 7]
1085:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1086:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
1087:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
1088:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
1089:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Selects the data source for SPI input stage, by configuring DXCR.DSEL bits.\n\n
1090:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
1091:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * input stages like DX0CR, DX1CR etc. This is not done during initialization. This has to be confi
1092:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * the SPI communication.
1093:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
1094:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
1095:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****     const XMC_SPI_CH_INPUT_t input,
1096:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****     const uint8_t source)
1097:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 604              	 .loc 2 1097 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608 0000 80B5     	 push {r7,lr}
 609              	.LCFI67:
 610              	 .cfi_def_cfa_offset 8
 611              	 .cfi_offset 7,-8
 612              	 .cfi_offset 14,-4
 613 0002 82B0     	 sub sp,sp,#8
 614              	.LCFI68:
 615              	 .cfi_def_cfa_offset 16
 616 0004 00AF     	 add r7,sp,#0
 617              	.LCFI69:
 618              	 .cfi_def_cfa_register 7
 619 0006 7860     	 str r0,[r7,#4]
 620 0008 0B46     	 mov r3,r1
 621 000a FB70     	 strb r3,[r7,#3]
 622 000c 1346     	 mov r3,r2
 623 000e BB70     	 strb r3,[r7,#2]
1098:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0
 624              	 .loc 2 1098 0
 625 0010 F878     	 ldrb r0,[r7,#3]
 626 0012 FB78     	 ldrb r3,[r7,#3]
 627 0014 7A68     	 ldr r2,[r7,#4]
 628 0016 0633     	 adds r3,r3,#6
 629 0018 9B00     	 lsls r3,r3,#2
 630 001a 1344     	 add r3,r3,r2
 631 001c 5B68     	 ldr r3,[r3,#4]
 632 001e 23F05003 	 bic r3,r3,#80
 633 0022 43F01002 	 orr r2,r3,#16
 634 0026 7968     	 ldr r1,[r7,#4]
 635 0028 831D     	 adds r3,r0,#6
 636 002a 9B00     	 lsls r3,r3,#2
 637 002c 0B44     	 add r3,r3,r1
 638 002e 5A60     	 str r2,[r3,#4]
1099:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 639              	 .loc 2 1099 0
 640 0030 FA78     	 ldrb r2,[r7,#3]
 641 0032 BB78     	 ldrb r3,[r7,#2]
 642 0034 7868     	 ldr r0,[r7,#4]
 643 0036 1146     	 mov r1,r2
 644 0038 1A46     	 mov r2,r3
 645 003a FFF7FEFF 	 bl XMC_USIC_CH_SetInputSource
1100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 646              	 .loc 2 1100 0
 647 003e 0837     	 adds r7,r7,#8
 648              	.LCFI70:
 649              	 .cfi_def_cfa_offset 8
 650 0040 BD46     	 mov sp,r7
 651              	.LCFI71:
 652              	 .cfi_def_cfa_register 13
 653              	 
 654 0042 80BD     	 pop {r7,pc}
 655              	 .cfi_endproc
 656              	.LFE276:
 658              	 .global SPI_MASTER_0_MOSI
 659              	 .section .rodata.SPI_MASTER_0_MOSI,"a",%progbits
 660              	 .align 2
 663              	SPI_MASTER_0_MOSI:
 664 0000 00810248 	 .word 1208123648
 665 0004 0F       	 .byte 15
 666 0005 000000   	 .space 3
 667              	 .global SPI_MASTER_0_MOSI_Config
 668              	 .section .data.SPI_MASTER_0_MOSI_Config,"aw",%progbits
 669              	 .align 2
 672              	SPI_MASTER_0_MOSI_Config:
 673 0000 A0       	 .byte -96
 674 0001 000000   	 .space 3
 675 0004 01000000 	 .word 1
 676 0008 01       	 .byte 1
 677 0009 000000   	 .space 3
 678 000c 00       	 .byte 0
 679 000d 00000000 	 .space 7
 679      000000
 680              	 .global SPI_MASTER_0_MISO
 681              	 .section .rodata.SPI_MASTER_0_MISO,"a",%progbits
 682              	 .align 2
 685              	SPI_MASTER_0_MISO:
 686 0000 00810248 	 .word 1208123648
 687 0004 0E       	 .byte 14
 688 0005 000000   	 .space 3
 689              	 .global SPI_MASTER_0_MISO_Config
 690              	 .section .bss.SPI_MASTER_0_MISO_Config,"aw",%nobits
 691              	 .align 2
 694              	SPI_MASTER_0_MISO_Config:
 695 0000 00000000 	 .space 20
 695      00000000 
 695      00000000 
 695      00000000 
 695      00000000 
 696              	 .global SPI_MASTER_0_SCLKOUT
 697              	 .section .rodata.SPI_MASTER_0_SCLKOUT,"a",%progbits
 698              	 .align 2
 701              	SPI_MASTER_0_SCLKOUT:
 702 0000 00840248 	 .word 1208124416
 703 0004 00       	 .byte 0
 704 0005 000000   	 .space 3
 705              	 .global SPI_MASTER_0_SCLKOUT_Config
 706              	 .section .rodata.SPI_MASTER_0_SCLKOUT_Config,"a",%progbits
 707              	 .align 2
 710              	SPI_MASTER_0_SCLKOUT_Config:
 711 0000 A0       	 .byte -96
 712 0001 000000   	 .space 3
 713 0004 01000000 	 .word 1
 714 0008 01       	 .byte 1
 715 0009 000000   	 .space 3
 716 000c 00000000 	 .space 8
 716      00000000 
 717              	 .global SPI_MASTER_0_SS_0
 718              	 .section .rodata.SPI_MASTER_0_SS_0,"a",%progbits
 719              	 .align 2
 722              	SPI_MASTER_0_SS_0:
 723 0000 00800248 	 .word 1208123392
 724 0004 06       	 .byte 6
 725 0005 000000   	 .space 3
 726              	 .global SPI_MASTER_0_SS_0_Config
 727              	 .section .rodata.SPI_MASTER_0_SS_0_Config,"a",%progbits
 728              	 .align 2
 731              	SPI_MASTER_0_SS_0_Config:
 732 0000 90       	 .byte -112
 733 0001 000000   	 .space 3
 734 0004 01000000 	 .word 1
 735 0008 01       	 .byte 1
 736 0009 000000   	 .space 3
 737 000c 00000000 	 .space 4
 738 0010 00000100 	 .word 65536
 739              	 .global SPI_MASTER_0_Channel_Config
 740              	 .section .data.SPI_MASTER_0_Channel_Config,"aw",%progbits
 741              	 .align 2
 744              	SPI_MASTER_0_Channel_Config:
 745 0000 400D0300 	 .word 200000
 746 0004 00       	 .space 1
 747 0005 00       	 .byte 0
 748 0006 00       	 .byte 0
 749 0007 00       	 .space 1
 750 0008 0000     	 .short 0
 751 000a 0000     	 .space 2
 752              	 .global SPI_MASTER_0_Config
 753              	 .section .rodata.SPI_MASTER_0_Config,"a",%progbits
 754              	 .align 2
 757              	SPI_MASTER_0_Config:
 758 0000 00000000 	 .word SPI_MASTER_0_Channel_Config
 759 0004 00000000 	 .word SPI_MASTER_0_lInit
 760 0008 00000000 	 .word SPI_MASTER_0_MOSI
 761 000c 00000000 	 .word SPI_MASTER_0_MOSI_Config
 762 0010 00000000 	 .word SPI_MASTER_0_MISO
 763 0014 00000000 	 .word SPI_MASTER_0_MISO_Config
 764 0018 00000000 	 .word 0
 765 001c 00000000 	 .word 0
 766 0020 00000000 	 .word 0
 767 0024 00000000 	 .word 0
 768 0028 00000000 	 .word SPI_MASTER_0_SCLKOUT
 769 002c 00000000 	 .word SPI_MASTER_0_SCLKOUT_Config
 770 0030 00000000 	 .word SPI_MASTER_0_SS_0
 771 0034 00000000 	 .word 0
 772 0038 00000000 	 .word 0
 773 003c 00000000 	 .word 0
 774 0040 00000000 	 .word 0
 775 0044 00000000 	 .word 0
 776 0048 00000000 	 .word 0
 777 004c 00000000 	 .word 0
 778 0050 00000000 	 .word SPI_MASTER_0_SS_0_Config
 779 0054 00000000 	 .word 0
 780 0058 00000000 	 .word 0
 781 005c 00000000 	 .word 0
 782 0060 00000000 	 .word 0
 783 0064 00000000 	 .word 0
 784 0068 00000000 	 .word 0
 785 006c 00000000 	 .word 0
 786 0070 00000000 	 .word 0
 787 0074 00000000 	 .word 0
 788 0078 00000000 	 .word 0
 789 007c 03       	 .byte 3
 790 007d 03       	 .byte 3
 791 007e 0000     	 .space 2
 792 0080 00000000 	 .word 0
 793 0084 02       	 .byte 2
 794 0085 02       	 .byte 2
 795 0086 00       	 .byte 0
 796 0087 01       	 .byte 1
 797 0088 02       	 .byte 2
 798 0089 00       	 .byte 0
 799 008a 00       	 .byte 0
 800 008b 00       	 .space 1
 801              	 .global SPI_MASTER_0_runtime
 802              	 .section .data.SPI_MASTER_0_runtime,"aw",%progbits
 803              	 .align 2
 806              	SPI_MASTER_0_runtime:
 807 0000 08000000 	 .word 8
 808 0004 00000000 	 .space 24
 808      00000000 
 808      00000000 
 808      00000000 
 808      00000000 
 809 001c 00       	 .byte 0
 810 001d 04       	 .byte 4
 811 001e 07       	 .byte 7
 812 001f 00       	 .byte 0
 813 0020 00       	 .byte 0
 814 0021 00       	 .byte 0
 815 0022 01       	 .byte 1
 816 0023 00       	 .space 1
 817              	 .global SPI_MASTER_0
 818              	 .section .data.SPI_MASTER_0,"aw",%progbits
 819              	 .align 2
 822              	SPI_MASTER_0:
 823 0000 00000248 	 .word 1208090624
 824 0004 00000000 	 .word SPI_MASTER_0_Config
 825 0008 00000000 	 .word SPI_MASTER_0_runtime
 826              	 .section .text.SPI_MASTER_0_lInit,"ax",%progbits
 827              	 .align 2
 828              	 .thumb
 829              	 .thumb_func
 831              	SPI_MASTER_0_lInit:
 832              	.LFB312:
 833              	 .file 3 "../Dave/Generated/SPI_MASTER/spi_master_conf.c"
   1:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /**************************************************************************************************
   2:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** * DAVE APP Name : SPI_MASTER       APP Version: 4.3.30
   3:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** *
   4:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** * NOTE:
   5:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** * This file is generated by DAVE. Any manual modification done to this file will be lost when the c
   6:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** ***************************************************************************************************
   7:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
   8:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /**
   9:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * @cond
  10:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  **************************************************************************************************
  11:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  12:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * All rights reserved.
  14:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  15:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * following conditions are met:
  17:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  18:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *   disclaimer.
  20:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  21:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  24:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  27:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  35:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  **************************************************************************************************
  38:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  39:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Change History
  40:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * --------------
  41:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  42:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-02-16:
  43:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Initial version<br>
  44:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  45:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-02-20:
  46:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Guard is generated for dx0_input. This helps to cross check the dynamic mode change suppor
  47:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  48:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-05-08:
  49:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Bug fix for code generation if advanced pin configuration is not enabled.<br>
  50:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Seperate code generation for full duplex mode<br>
  51:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Conditional code generation for parity error<br>
  52:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - XMC_SPI_CH_EnableFEM() and XMC_SPI_CH_SetBitOrderLsbFirst() are generated conditionally<br
  53:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Configuration for Leading/Training is added<br>
  54:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  55:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-06-20:
  56:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Code generation for parity error is generated after selecting the parity type and enabling
  57:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *        interrupt settings tab.<br>
  58:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - word_length is added to SPI_MASTER_DYNAMIC_CONFIG_t, to support runtime change.<br>
  59:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Clock settings are updated with combo. So defined a map locally for clcok settings.
  60:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  61:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-07-07:
  62:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - DYNAMIC_CONFIG_t is renamed as RUNTIME_t
  63:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  64:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-09-01:
  65:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - 'gpio_mode_alternate_function' is renamed as 'gpio_output_alternate_function' and extended
  66:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  67:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-09-30:
  68:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - dummy read are added for setena bit field.
  69:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  70:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2015-10-14:
  71:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - new variable "spi_master_config_mode" to store the actual mode generated during initialisa
  72:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - bug fix: node pointer assignment for protocol event is generated always.  
  73:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - XMC_USIC_CH_TriggerServiceRequest() is generated during init,  
  74:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - receive start disable event is removed from the DMA callback to support the higher baudrat
  75:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  76:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2016-01-20:
  77:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - In DMA mode, TDV flag polling is added to ensure last byte is shifted out from the buffer.
  78:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  79:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * 2019-07-11:
  80:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *     - Configure polarity of slave select signal based on UI setting.
  81:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  82:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * @endcond
  83:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
  84:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  */
  85:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
  86:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /**************************************************************************************************
  87:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * HEADER FILES
  88:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  **************************************************************************************************
  89:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #include "spi_master.h"
  90:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
  91:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /**************************************************************************************************
  92:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** * LOCAL ROUTINES
  93:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** ***************************************************************************************************
  94:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  95:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /*
  96:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Function implements the data transmission. It is called from the transmit interrupt service hand
  97:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Function pushes data to the output block and releases control. It is called again when the previ
  98:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * transmitted. When transmit FIFO is used, the function sets the trigger limit based on the size o
  99:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * transmitted. This makes sure that the CPU usage is optimum.
 100:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
 101:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Note: The API is only meant for internal use. The implementation should not be modified.
 102:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  */
 103:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** extern void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle);
 104:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #endif
 105:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
 106:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /*
 107:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Function implements the data reception. It is called from the receive interrupt service handler.
 108:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Function reads data from the receive block and updates the receive buffer. It is called again wh
 109:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * received again. When receive FIFO is used, the function sets the trigger limit based on the size
 110:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * received. This makes sure that the CPU usage is optimum.
 111:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
 112:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Note: The API is only meant for internal use. The implementation should not be modified.
 113:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  */
 114:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** extern void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle);
 115:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #endif
 116:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #if (SPI_MASTER_PARITY_ERROR == 1U)
 117:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /*
 118:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Function monitors the configured protocol interrupt flags. It is called from the protocol interr
 119:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Function reads the status of the SPI_MASTER channel and checks for configured flags in the APP G
 120:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * function is provided in the APP UI, it will be called when the selected flag is set.
 121:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
 122:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * Note: The API is only meant for internal use. The implementation should not be modified.
 123:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  */
 124:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** extern void SPI_MASTER_lProtocolHandler(const SPI_MASTER_t * const handle);
 125:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** #endif
 126:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /**************************************************************************************************
 127:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** * DATA STRUCTURES
 128:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** ***************************************************************************************************
 129:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 130:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void);
 131:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /* Data Transmit pin from SPI_MASTER */
 132:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_GPIO_t SPI_MASTER_0_MOSI = 
 133:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 134:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .port = (XMC_GPIO_PORT_t *)PORT1_BASE,
 135:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .pin  = (uint8_t)15
 136:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };         
 137:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                       
 138:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** SPI_MASTER_GPIO_CONFIG_t SPI_MASTER_0_MOSI_Config = 
 139:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** { 
 140:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .port_config = 
 141:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   {
 142:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4,
 143:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH,
 144:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE
 145:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   },
 146:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .hw_control = XMC_GPIO_HWCTRL_DISABLED
 147:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 148:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 149:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /* Data Receive pin for SPI_MASTER */
 150:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_GPIO_t SPI_MASTER_0_MISO = 
 151:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 152:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .port = (XMC_GPIO_PORT_t *)PORT1_BASE,
 153:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .pin  = (uint8_t)14
 154:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 155:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 156:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** SPI_MASTER_GPIO_CONFIG_t SPI_MASTER_0_MISO_Config = 
 157:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 158:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .port_config = 
 159:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   {
 160:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .mode = XMC_GPIO_MODE_INPUT_TRISTATE,
 161:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   },
 162:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                         
 163:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 164:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 165:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_GPIO_t SPI_MASTER_0_SCLKOUT = 
 166:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 167:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .port = (XMC_GPIO_PORT_t *)PORT4_BASE,
 168:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .pin  = (uint8_t)0
 169:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };     
 170:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 171:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_GPIO_CONFIG_t SPI_MASTER_0_SCLKOUT_Config = 
 172:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** { 
 173:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .port_config = 
 174:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   {
 175:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4,
 176:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH,
 177:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE
 178:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** }
 179:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 180:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 181:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_GPIO_t SPI_MASTER_0_SS_0 =
 182:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 183:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** .port = (XMC_GPIO_PORT_t *)PORT0_BASE,
 184:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** .pin  = (uint8_t)6
 185:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 186:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 187:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_GPIO_CONFIG_t SPI_MASTER_0_SS_0_Config =
 188:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 189:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** .port_config =
 190:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 191:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2,
 192:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH,
 193:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE
 194:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   },
 195:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .slave_select_ch = XMC_SPI_CH_SLAVE_SELECT_0
 196:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 197:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 198:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** XMC_SPI_CH_CONFIG_t SPI_MASTER_0_Channel_Config =
 199:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 200:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .baudrate = 200000U,
 201:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .bus_mode = (XMC_SPI_CH_BUS_MODE_t)XMC_SPI_CH_BUS_MODE_MASTER,
 202:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .selo_inversion = XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS,
 203:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .parity_mode = XMC_USIC_CH_PARITY_MODE_NONE
 204:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 205:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****               
 206:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 207:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** const SPI_MASTER_CONFIG_t SPI_MASTER_0_Config  = 
 208:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 209:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .channel_config          = &SPI_MASTER_0_Channel_Config,
 210:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .fptr_spi_master_config  = SPI_MASTER_0_lInit,
 211:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* FIFO configuration */
 212:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .tx_fifo_size            = (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
 213:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .rx_fifo_size            = (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
 214:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Clock Settings */
 215:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .shift_clk_passive_level = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED, 
 216:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .slave_select_lines      = (uint8_t)1,
 217:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .leading_trailing_delay  = (uint8_t)2,
 218:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .spi_master_config_mode  = XMC_SPI_CH_MODE_STANDARD, /* spi master initial mode configured mode *
 219:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .transmit_mode           = SPI_MASTER_TRANSFER_MODE_DIRECT,
 220:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .receive_mode            = SPI_MASTER_TRANSFER_MODE_DIRECT,
 221:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****    
 222:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .tx_cbhandler            = NULL,
 223:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .rx_cbhandler            = NULL,
 224:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .parity_cbhandler        = NULL,
 225:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_0_pin              = &SPI_MASTER_0_MOSI, /*!< mosi0 pin pointer*/
 226:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_0_pin_config       = &SPI_MASTER_0_MOSI_Config,
 227:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_1_pin              = &SPI_MASTER_0_MISO,
 228:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_1_pin_config       = &SPI_MASTER_0_MISO_Config,
 229:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_2_pin              = NULL,
 230:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_2_pin_config       = NULL,
 231:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_3_pin              = NULL,
 232:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .mosi_3_pin_config       = NULL,
 233:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .sclk_out_pin_config     = &SPI_MASTER_0_SCLKOUT_Config,
 234:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .sclk_out_pin            = &SPI_MASTER_0_SCLKOUT,
 235:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .slave_select_pin        = {&SPI_MASTER_0_SS_0, NULL,
 236:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                               NULL, NULL,
 237:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                               NULL, NULL,
 238:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                               NULL, NULL
 239:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                              },
 240:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .slave_select_pin_config = {&SPI_MASTER_0_SS_0_Config, NULL,
 241:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                               NULL, NULL,
 242:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                               NULL, NULL,
 243:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                               NULL, NULL
 244:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                              },
 245:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 246:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .tx_sr   = (SPI_MASTER_SR_ID_t)SPI_MASTER_SR_ID_0,
 247:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .rx_sr   = (SPI_MASTER_SR_ID_t)SPI_MASTER_SR_ID_0,
 248:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 249:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                            
 250:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** SPI_MASTER_RUNTIME_t SPI_MASTER_0_runtime =
 251:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 252:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .spi_master_mode = XMC_SPI_CH_MODE_STANDARD, /* spi master transmission mode */
 253:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .word_length     = 8U,
 254:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                        
 255:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   #ifdef USIC1_C0_DX0_P1_14
 256:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .dx0_input = SPI_MASTER_INPUT_E,
 257:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   #else
 258:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .dx0_input = SPI_MASTER_INPUT_INVALID,
 259:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   #endif
 260:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 261:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   #ifdef USIC1_C0_DX0_P1_15
 262:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .dx0_input_half_duplex = SPI_MASTER_INPUT_E,
 263:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   #else
 264:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .dx0_input_half_duplex = SPI_MASTER_INPUT_INVALID,
 265:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   #endif
 266:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                            
 267:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .tx_data_dummy = false,
 268:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .rx_data_dummy = true,
 269:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .tx_busy = false,
 270:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .rx_busy = false
 271:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 272:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                   
 273:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** SPI_MASTER_t SPI_MASTER_0 =
 274:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 275:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .channel = XMC_SPI1_CH0, /* USIC channel */
 276:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .config  = &SPI_MASTER_0_Config, /* spi master configuration structure pointer */
 277:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   .runtime = &SPI_MASTER_0_runtime,
 278:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** };
 279:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                           
 280:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** /*
 281:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * @brief Configure the port registers and data input registers of SPI channel
 282:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  *
 283:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  * @param[in] handle Pointer to an object of SPI_MASTER configuration
 284:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****  */
 285:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
 286:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** {
 834              	 .loc 3 286 0
 835              	 .cfi_startproc
 836              	 
 837              	 
 838 0000 80B5     	 push {r7,lr}
 839              	.LCFI72:
 840              	 .cfi_def_cfa_offset 8
 841              	 .cfi_offset 7,-8
 842              	 .cfi_offset 14,-4
 843 0002 82B0     	 sub sp,sp,#8
 844              	.LCFI73:
 845              	 .cfi_def_cfa_offset 16
 846 0004 00AF     	 add r7,sp,#0
 847              	.LCFI74:
 848              	 .cfi_def_cfa_register 7
 287:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   SPI_MASTER_STATUS_t status;
 288:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   status = SPI_MASTER_STATUS_SUCCESS; 
 849              	 .loc 3 288 0
 850 0006 0023     	 movs r3,#0
 851 0008 FB71     	 strb r3,[r7,#7]
 289:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* LLD initialization */
 290:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_Init(XMC_SPI1_CH0, &SPI_MASTER_0_Channel_Config);
 852              	 .loc 3 290 0
 853 000a 2748     	 ldr r0,.L16
 854 000c 2749     	 ldr r1,.L16+4
 855 000e FFF7FEFF 	 bl XMC_SPI_CH_Init
 291:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                              
 292:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH0);
 856              	 .loc 3 292 0
 857 0012 2548     	 ldr r0,.L16
 858 0014 FFF7FEFF 	 bl XMC_SPI_CH_SetBitOrderMsbFirst
 293:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****           
 294:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_SetWordLength(XMC_SPI1_CH0, (uint8_t)8);
 859              	 .loc 3 294 0
 860 0018 2348     	 ldr r0,.L16
 861 001a 0821     	 movs r1,#8
 862 001c FFF7FEFF 	 bl XMC_SPI_CH_SetWordLength
 295:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 296:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH0, (uint8_t)8);
 863              	 .loc 3 296 0
 864 0020 2148     	 ldr r0,.L16
 865 0022 0821     	 movs r1,#8
 866 0024 FFF7FEFF 	 bl XMC_SPI_CH_SetFrameLength
 297:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 298:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure the clock polarity and clock delay */
 299:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH0,
 867              	 .loc 3 299 0
 868 0028 1F48     	 ldr r0,.L16
 869 002a 0021     	 movs r1,#0
 870 002c 0022     	 movs r2,#0
 871 002e FFF7FEFF 	 bl XMC_SPI_CH_ConfigureShiftClockOutput
 300:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                        XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
 301:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                        XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
 302:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure Leading/Trailing delay */
 303:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH0, 2U);
 872              	 .loc 3 303 0
 873 0032 1D48     	 ldr r0,.L16
 874 0034 0221     	 movs r1,#2
 875 0036 FFF7FEFF 	 bl XMC_SPI_CH_SetSlaveSelectDelay
 304:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 305:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                
 306:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure the input pin properties */
 307:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)14, &SPI_MASTER_0_MISO_Config.port_config);
 876              	 .loc 3 307 0
 877 003a 1D48     	 ldr r0,.L16+8
 878 003c 0E21     	 movs r1,#14
 879 003e 1D4A     	 ldr r2,.L16+12
 880 0040 FFF7FEFF 	 bl XMC_GPIO_Init
 308:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 309:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure the data input line selected */
 310:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_E);
 881              	 .loc 3 310 0
 882 0044 1848     	 ldr r0,.L16
 883 0046 0021     	 movs r1,#0
 884 0048 0422     	 movs r2,#4
 885 004a FFF7FEFF 	 bl XMC_SPI_CH_SetInputSource
 311:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Start the SPI_Channel */
 312:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_Start(XMC_SPI1_CH0);
 886              	 .loc 3 312 0
 887 004e 1648     	 ldr r0,.L16
 888 0050 FFF7FEFF 	 bl XMC_SPI_CH_Start
 313:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 314:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure the output pin properties */
 315:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)15, &SPI_MASTER_0_MOSI_Config.port_config);
 889              	 .loc 3 315 0
 890 0054 1648     	 ldr r0,.L16+8
 891 0056 0F21     	 movs r1,#15
 892 0058 174A     	 ldr r2,.L16+16
 893 005a FFF7FEFF 	 bl XMC_GPIO_Init
 316:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****     
 317:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Initialize SPI SCLK out pin */
 318:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, (uint8_t)0, &SPI_MASTER_0_SCLKOUT_Config.port_config
 894              	 .loc 3 318 0
 895 005e 1748     	 ldr r0,.L16+20
 896 0060 0021     	 movs r1,#0
 897 0062 174A     	 ldr r2,.L16+24
 898 0064 FFF7FEFF 	 bl XMC_GPIO_Init
 319:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 320:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure the pin properties */
 321:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)6, &SPI_MASTER_0_SS_0_Config.port_config);
 899              	 .loc 3 321 0
 900 0068 1648     	 ldr r0,.L16+28
 901 006a 0621     	 movs r1,#6
 902 006c 164A     	 ldr r2,.L16+32
 903 006e FFF7FEFF 	 bl XMC_GPIO_Init
 322:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 904              	 .loc 3 322 0
 905 0072 0D48     	 ldr r0,.L16
 906 0074 4FF48031 	 mov r1,#65536
 907 0078 FFF7FEFF 	 bl XMC_SPI_CH_EnableSlaveSelect
 323:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 324:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 908              	 .loc 3 324 0
 909 007c 0A48     	 ldr r0,.L16
 910 007e 1021     	 movs r1,#16
 911 0080 0022     	 movs r2,#0
 912 0082 FFF7FEFF 	 bl XMC_USIC_CH_SetInterruptNodePointer
 325:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                       XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 326:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                       (uint32_t)SPI_MASTER_SR_ID_0);
 327:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****             
 328:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure transmit FIFO settings */
 329:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_USIC_CH_TXFIFO_Configure(XMC_SPI1_CH0,
 913              	 .loc 3 329 0
 914 0086 0848     	 ldr r0,.L16
 915 0088 0821     	 movs r1,#8
 916 008a 0322     	 movs r2,#3
 917 008c 0123     	 movs r3,#1
 918 008e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Configure
 330:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                8U,
 331:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
 332:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                1U);
 333:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** 
 334:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure the service interrupt nodes for standard transmit FIFO events */
 335:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                
 336:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   /* Configure receive FIFO settings */
 337:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   XMC_USIC_CH_RXFIFO_Configure(XMC_SPI1_CH0,
 919              	 .loc 3 337 0
 920 0092 0548     	 ldr r0,.L16
 921 0094 0021     	 movs r1,#0
 922 0096 0322     	 movs r2,#3
 923 0098 0723     	 movs r3,#7
 924 009a FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Configure
 338:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                0U,
 339:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
 340:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****                                7U);
 341:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****              
 342:../Dave/Generated/SPI_MASTER/spi_master_conf.c ****   return status;
 925              	 .loc 3 342 0
 926 009e FB79     	 ldrb r3,[r7,#7]
 343:../Dave/Generated/SPI_MASTER/spi_master_conf.c **** }
 927              	 .loc 3 343 0
 928 00a0 1846     	 mov r0,r3
 929 00a2 0837     	 adds r7,r7,#8
 930              	.LCFI75:
 931              	 .cfi_def_cfa_offset 8
 932 00a4 BD46     	 mov sp,r7
 933              	.LCFI76:
 934              	 .cfi_def_cfa_register 13
 935              	 
 936 00a6 80BD     	 pop {r7,pc}
 937              	.L17:
 938              	 .align 2
 939              	.L16:
 940 00a8 00000248 	 .word 1208090624
 941 00ac 00000000 	 .word SPI_MASTER_0_Channel_Config
 942 00b0 00810248 	 .word 1208123648
 943 00b4 00000000 	 .word SPI_MASTER_0_MISO_Config
 944 00b8 00000000 	 .word SPI_MASTER_0_MOSI_Config
 945 00bc 00840248 	 .word 1208124416
 946 00c0 00000000 	 .word SPI_MASTER_0_SCLKOUT_Config
 947 00c4 00800248 	 .word 1208123392
 948 00c8 00000000 	 .word SPI_MASTER_0_SS_0_Config
 949              	 .cfi_endproc
 950              	.LFE312:
 952              	 .text
 953              	.Letext0:
 954              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 955              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 956              	 .file 6 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc_gpio.h"
 957              	 .file 7 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc4_gpio.h"
 958              	 .file 8 "../Dave/Generated/SPI_MASTER/spi_master.h"
 959              	 .file 9 "C:/work_mari/XMC4800/spi_master/Libraries/CMSIS/Include/cmsis_gcc.h"
 960              	 .file 10 "C:/work_mari/XMC4800/spi_master/Libraries/CMSIS/Include/core_cm4.h"
 961              	 .file 11 "C:/work_mari/XMC4800/spi_master/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spi_master_conf.c
    {standard input}:20     .text.XMC_USIC_CH_SetInputSource:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_SetInputSource:00000000 XMC_USIC_CH_SetInputSource
    {standard input}:82     .text.XMC_USIC_CH_SetWordLength:00000000 $t
    {standard input}:86     .text.XMC_USIC_CH_SetWordLength:00000000 XMC_USIC_CH_SetWordLength
    {standard input}:135    .text.XMC_USIC_CH_SetFrameLength:00000000 $t
    {standard input}:139    .text.XMC_USIC_CH_SetFrameLength:00000000 XMC_USIC_CH_SetFrameLength
    {standard input}:188    .text.XMC_USIC_CH_ConfigureShiftClockOutput:00000000 $t
    {standard input}:192    .text.XMC_USIC_CH_ConfigureShiftClockOutput:00000000 XMC_USIC_CH_ConfigureShiftClockOutput
    {standard input}:243    .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:247    .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:292    .text.XMC_SPI_CH_Init:00000000 $t
    {standard input}:296    .text.XMC_SPI_CH_Init:00000000 XMC_SPI_CH_Init
    {standard input}:334    .text.XMC_SPI_CH_Start:00000000 $t
    {standard input}:338    .text.XMC_SPI_CH_Start:00000000 XMC_SPI_CH_Start
    {standard input}:373    .text.XMC_SPI_CH_SetBitOrderMsbFirst:00000000 $t
    {standard input}:377    .text.XMC_SPI_CH_SetBitOrderMsbFirst:00000000 XMC_SPI_CH_SetBitOrderMsbFirst
    {standard input}:418    .text.XMC_SPI_CH_SetSlaveSelectDelay:00000000 $t
    {standard input}:422    .text.XMC_SPI_CH_SetSlaveSelectDelay:00000000 XMC_SPI_CH_SetSlaveSelectDelay
    {standard input}:472    .text.XMC_SPI_CH_ConfigureShiftClockOutput:00000000 $t
    {standard input}:476    .text.XMC_SPI_CH_ConfigureShiftClockOutput:00000000 XMC_SPI_CH_ConfigureShiftClockOutput
    {standard input}:514    .text.XMC_SPI_CH_SetWordLength:00000000 $t
    {standard input}:518    .text.XMC_SPI_CH_SetWordLength:00000000 XMC_SPI_CH_SetWordLength
    {standard input}:556    .text.XMC_SPI_CH_SetFrameLength:00000000 $t
    {standard input}:560    .text.XMC_SPI_CH_SetFrameLength:00000000 XMC_SPI_CH_SetFrameLength
    {standard input}:598    .text.XMC_SPI_CH_SetInputSource:00000000 $t
    {standard input}:602    .text.XMC_SPI_CH_SetInputSource:00000000 XMC_SPI_CH_SetInputSource
    {standard input}:663    .rodata.SPI_MASTER_0_MOSI:00000000 SPI_MASTER_0_MOSI
    {standard input}:660    .rodata.SPI_MASTER_0_MOSI:00000000 $d
    {standard input}:672    .data.SPI_MASTER_0_MOSI_Config:00000000 SPI_MASTER_0_MOSI_Config
    {standard input}:669    .data.SPI_MASTER_0_MOSI_Config:00000000 $d
    {standard input}:685    .rodata.SPI_MASTER_0_MISO:00000000 SPI_MASTER_0_MISO
    {standard input}:682    .rodata.SPI_MASTER_0_MISO:00000000 $d
    {standard input}:694    .bss.SPI_MASTER_0_MISO_Config:00000000 SPI_MASTER_0_MISO_Config
    {standard input}:691    .bss.SPI_MASTER_0_MISO_Config:00000000 $d
    {standard input}:701    .rodata.SPI_MASTER_0_SCLKOUT:00000000 SPI_MASTER_0_SCLKOUT
    {standard input}:698    .rodata.SPI_MASTER_0_SCLKOUT:00000000 $d
    {standard input}:710    .rodata.SPI_MASTER_0_SCLKOUT_Config:00000000 SPI_MASTER_0_SCLKOUT_Config
    {standard input}:707    .rodata.SPI_MASTER_0_SCLKOUT_Config:00000000 $d
    {standard input}:722    .rodata.SPI_MASTER_0_SS_0:00000000 SPI_MASTER_0_SS_0
    {standard input}:719    .rodata.SPI_MASTER_0_SS_0:00000000 $d
    {standard input}:731    .rodata.SPI_MASTER_0_SS_0_Config:00000000 SPI_MASTER_0_SS_0_Config
    {standard input}:728    .rodata.SPI_MASTER_0_SS_0_Config:00000000 $d
    {standard input}:744    .data.SPI_MASTER_0_Channel_Config:00000000 SPI_MASTER_0_Channel_Config
    {standard input}:741    .data.SPI_MASTER_0_Channel_Config:00000000 $d
    {standard input}:757    .rodata.SPI_MASTER_0_Config:00000000 SPI_MASTER_0_Config
    {standard input}:754    .rodata.SPI_MASTER_0_Config:00000000 $d
    {standard input}:831    .text.SPI_MASTER_0_lInit:00000000 SPI_MASTER_0_lInit
    {standard input}:806    .data.SPI_MASTER_0_runtime:00000000 SPI_MASTER_0_runtime
    {standard input}:803    .data.SPI_MASTER_0_runtime:00000000 $d
    {standard input}:822    .data.SPI_MASTER_0:00000000 SPI_MASTER_0
    {standard input}:819    .data.SPI_MASTER_0:00000000 $d
    {standard input}:827    .text.SPI_MASTER_0_lInit:00000000 $t
    {standard input}:940    .text.SPI_MASTER_0_lInit:000000a8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SPI_CH_InitEx
XMC_GPIO_Init
XMC_SPI_CH_EnableSlaveSelect
XMC_USIC_CH_SetInterruptNodePointer
XMC_USIC_CH_TXFIFO_Configure
XMC_USIC_CH_RXFIFO_Configure
