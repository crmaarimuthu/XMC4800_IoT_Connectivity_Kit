
spi_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d74  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000054  1ffe8800  0c002d74  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000018  1ffe8854  0c002dc8  00010854  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000008b8  00000000  00000000  00010858  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ad80  00000000  00000000  00011110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001782  00000000  00000000  0001be90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035cb  00000000  00000000  0001d612  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002500  00000000  00000000  00020be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d7e  00000000  00000000  000230e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c36  00000000  00000000  00028e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  0002da94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000322  00000000  00000000  0002e25c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002d74 	.word	0x0c002d74
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000054 	.word	0x00000054
 8000254:	0c002d74 	.word	0x0c002d74
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8854 	.word	0x1ffe8854
 8000264:	00000018 	.word	0x00000018
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08002c29 	.word	0x08002c29
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08002afd 	.word	0x08002afd

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f000 f805 	bl	80002bc <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f002 fb6d 	bl	8002990 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c2:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <SystemCoreSetup+0x64>)
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <SystemCoreSetup+0x68>)
 80002c8:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002ce:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f023 0308 	bic.w	r3, r3, #8
 80002ea:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <SystemCoreSetup+0x6c>)
 80002ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002f2:	3314      	adds	r3, #20
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f023 030f 	bic.w	r3, r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <SystemCoreSetup+0x6c>)
 800030a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800030e:	3314      	adds	r3, #20
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	08000000 	.word	0x08000000
 8000328:	58001000 	.word	0x58001000

0800032c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d03e      	beq.n	80003bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e002      	b.n	8000356 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000350:	f002 fb00 	bl	8002954 <OSCHP_GetFrequency>
 8000354:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000356:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	2b00      	cmp	r3, #0
 8000360:	d020      	beq.n	80003a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800036a:	0e1b      	lsrs	r3, r3, #24
 800036c:	3301      	adds	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	3301      	adds	r3, #1
 800038a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e00d      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ac:	3301      	adds	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e001      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 80003be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	3301      	adds	r3, #1
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SystemCoreClockUpdate+0xd0>)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	50004600 	.word	0x50004600
 80003f4:	50004710 	.word	0x50004710
 80003f8:	016e3600 	.word	0x016e3600
 80003fc:	2003ffc0 	.word	0x2003ffc0

08000400 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	460b      	mov	r3, r1
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	089b      	lsrs	r3, r3, #2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4618      	mov	r0, r3
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	089b      	lsrs	r3, r3, #2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3204      	adds	r2, #4
 8000422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	f003 0303 	and.w	r3, r3, #3
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	4619      	mov	r1, r3
 8000430:	23f8      	movs	r3, #248	; 0xf8
 8000432:	408b      	lsls	r3, r1
 8000434:	43db      	mvns	r3, r3
 8000436:	ea02 0103 	and.w	r1, r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	1d02      	adds	r2, r0, #4
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4619      	mov	r1, r3
 800044c:	2303      	movs	r3, #3
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	401a      	ands	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4a3a      	ldr	r2, [pc, #232]	; (8000544 <XMC_GPIO_Init+0x144>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <XMC_GPIO_Init+0x68>
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4a39      	ldr	r2, [pc, #228]	; (8000548 <XMC_GPIO_Init+0x148>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d10a      	bne.n	800047e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800046c:	7afb      	ldrb	r3, [r7, #11]
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	661a      	str	r2, [r3, #96]	; 0x60
 800047c:	e042      	b.n	8000504 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	b25b      	sxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	da3c      	bge.n	8000504 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	409a      	lsls	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3210      	adds	r2, #16
 80004aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4619      	mov	r1, r3
 80004b8:	2307      	movs	r3, #7
 80004ba:	408b      	lsls	r3, r1
 80004bc:	43db      	mvns	r3, r3
 80004be:	ea02 0103 	and.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f100 0210 	add.w	r2, r0, #16
 80004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3210      	adds	r2, #16
 80004e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7a1b      	ldrb	r3, [r3, #8]
 80004e8:	4619      	mov	r1, r3
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	f003 0307 	and.w	r3, r3, #7
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	ea42 0103 	orr.w	r1, r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	f100 0210 	add.w	r2, r0, #16
 8000500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	089b      	lsrs	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4618      	mov	r0, r3
 800050c:	7afb      	ldrb	r3, [r7, #11]
 800050e:	089b      	lsrs	r3, r3, #2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3204      	adds	r2, #4
 8000518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	f003 0303 	and.w	r3, r3, #3
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	ea42 0103 	orr.w	r1, r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1d02      	adds	r2, r0, #4
 8000536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	48028e00 	.word	0x48028e00
 8000548:	48028f00 	.word	0x48028f00

0800054c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2003ffc0 	.word	0x2003ffc0

08000564 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <XMC_SCU_GetMirrorStatus+0x14>)
 800056a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	50004000 	.word	0x50004000

0800057c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000584:	f7ff fed2 	bl	800032c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <XMC_SCU_lDelay+0x3c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <XMC_SCU_lDelay+0x40>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9a      	lsrs	r2, r3, #18
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e003      	b.n	80005aa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80005a2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3f7      	bcc.n	80005a2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2003ffc0 	.word	0x2003ffc0
 80005bc:	431bde83 	.word	0x431bde83

080005c0 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80005c6:	685b      	ldr	r3, [r3, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	50004074 	.word	0x50004074

080005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60d3      	str	r3, [r2, #12]
}
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	50004074 	.word	0x50004074

080005f4 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f8c5 	bl	800078c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000602:	f000 facb 	bl	8000b9c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	79db      	ldrb	r3, [r3, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00a      	beq.n	8000624 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800060e:	f000 fb03 	bl	8000c18 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000612:	bf00      	nop
 8000614:	f000 faee 	bl	8000bf4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000618:	4603      	mov	r3, r0
 800061a:	f083 0301 	eor.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f7      	bne.n	8000614 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7a5b      	ldrb	r3, [r3, #9]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f929 	bl	8000880 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800062e:	bf00      	nop
 8000630:	f7ff ff98 	bl	8000564 <XMC_SCU_GetMirrorStatus>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1fa      	bne.n	8000630 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fa86 	bl	8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7c1b      	ldrb	r3, [r3, #16]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f937 	bl	80008bc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7c5b      	ldrb	r3, [r3, #17]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f95a 	bl	800090c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7c9b      	ldrb	r3, [r3, #18]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f941 	bl	80008e4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7cdb      	ldrb	r3, [r3, #19]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f964 	bl	8000934 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	799b      	ldrb	r3, [r3, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000674:	f000 fb08 	bl	8000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000678:	bf00      	nop
 800067a:	f000 fb2d 	bl	8000cd8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800067e:	4603      	mov	r3, r0
 8000680:	f083 0301 	eor.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	799b      	ldrb	r3, [r3, #6]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d017      	beq.n	80006d0 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80006a0:	f000 fb3e 	bl	8000d20 <XMC_SCU_CLOCK_DisableSystemPll>
 80006a4:	e014      	b.n	80006d0 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80006a6:	f000 fb2b 	bl	8000d00 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8899      	ldrh	r1, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006b6:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006bc:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4608      	mov	r0, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	462a      	mov	r2, r5
 80006ca:	4623      	mov	r3, r4
 80006cc:	f000 fb38 	bl	8000d40 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006d8:	d103      	bne.n	80006e2 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 80006da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006de:	f000 f855 	bl	800078c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80006e2:	f7ff fe23 	bl	800032c <SystemCoreClockUpdate>
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}

080006ec <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	0f1b      	lsrs	r3, r3, #28
 80006f8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000700:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000710:	4413      	add	r3, r2
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	50004414 	.word	0x50004414

08000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0f1b      	lsrs	r3, r3, #28
 8000730:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000738:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	461a      	mov	r2, r3
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000748:	4413      	add	r3, r2
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4013      	ands	r3, r2
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	5000440c 	.word	0x5000440c

0800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000770:	f7ff feec 	bl	800054c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000774:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000778:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	50004600 	.word	0x50004600

0800078c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000794:	4906      	ldr	r1, [pc, #24]	; (80007b0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	50004600 	.word	0x50004600

080007b4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80007bc:	4906      	ldr	r1, [pc, #24]	; (80007d8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	50004600 	.word	0x50004600

080007dc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	50004600 	.word	0x50004600

08000804 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d108      	bne.n	8000826 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	60d3      	str	r3, [r2, #12]
 8000824:	e007      	b.n	8000836 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	60d3      	str	r3, [r2, #12]
  }
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004710 	.word	0x50004710

08000844 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800084e:	bf00      	nop
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800085e:	4907      	ldr	r1, [pc, #28]	; (800087c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000868:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800086a:	4313      	orrs	r3, r2
 800086c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	50004000 	.word	0x50004000
 800087c:	50004300 	.word	0x50004300

08000880 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800088a:	bf00      	nop
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800088e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f8      	bne.n	800088c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800089a:	4907      	ldr	r1, [pc, #28]	; (80008b8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004000 	.word	0x50004000
 80008b8:	50004300 	.word	0x50004300

080008bc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	50004600 	.word	0x50004600

080008e4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008fa:	4313      	orrs	r3, r2
 80008fc:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	50004600 	.word	0x50004600

0800090c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000922:	4313      	orrs	r3, r2
 8000924:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	50004600 	.word	0x50004600

08000934 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800094a:	4313      	orrs	r3, r2
 800094c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	50004600 	.word	0x50004600

0800095c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000964:	4906      	ldr	r1, [pc, #24]	; (8000980 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000972:	4313      	orrs	r3, r2
 8000974:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	50004600 	.word	0x50004600

08000984 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800099a:	4313      	orrs	r3, r2
 800099c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	50004600 	.word	0x50004600

080009ac <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009b4:	4906      	ldr	r1, [pc, #24]	; (80009d0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009c2:	4313      	orrs	r3, r2
 80009c4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	50004600 	.word	0x50004600

080009d4 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80009dc:	4906      	ldr	r1, [pc, #24]	; (80009f8 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80009e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e2:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80009ea:	4313      	orrs	r3, r2
 80009ec:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	50004600 	.word	0x50004600

080009fc <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0f1b      	lsrs	r3, r3, #28
 8000a08:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a10:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000a20:	4413      	add	r3, r2
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	50004648 	.word	0x50004648

08000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	0f1b      	lsrs	r3, r3, #28
 8000a40:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a48:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	50004640 	.word	0x50004640

08000a7c <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8a:	f023 0302 	bic.w	r3, r3, #2
 8000a8e:	6153      	str	r3, [r2, #20]
}
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	50004710 	.word	0x50004710

08000a9c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000ab2:	bf00      	nop
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000acc:	491e      	ldr	r1, [pc, #120]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000ada:	4313      	orrs	r3, r2
 8000adc:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f023 0310 	bic.w	r3, r3, #16
 8000af4:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b00:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000b02:	bf00      	nop
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f9      	beq.n	8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000b1c:	bf00      	nop
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f9      	bne.n	8000b1e <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b34:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000b38:	2208      	movs	r2, #8
 8000b3a:	60da      	str	r2, [r3, #12]
}
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	50004710 	.word	0x50004710
 8000b4c:	50004160 	.word	0x50004160

08000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b64:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10e      	bne.n	8000b8a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b76:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b78:	2064      	movs	r0, #100	; 0x64
 8000b7a:	f7ff fcff 	bl	800057c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b88:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f7ff fcf6 	bl	800057c <XMC_SCU_lDelay>
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	50004710 	.word	0x50004710

08000b9c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000bb2:	bf00      	nop
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f9      	beq.n	8000bb4 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000bd4:	bf00      	nop
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f9      	bne.n	8000bd6 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	50004200 	.word	0x50004200
 8000bf0:	50004400 	.word	0x50004400

08000bf4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	50004300 	.word	0x50004300

08000c18 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000c1c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c20:	f7ff fcda 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c2e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000c30:	bf00      	nop
 8000c32:	f7ff fcc5 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f8      	beq.n	8000c32 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000c40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c44:	f7ff fcc8 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000c4e:	bf00      	nop
 8000c50:	f7ff fcb6 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f8      	beq.n	8000c50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000c5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c62:	f7ff fcb9 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c72:	bf00      	nop
 8000c74:	f7ff fca4 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f8      	beq.n	8000c74 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	50004300 	.word	0x50004300

08000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c98:	4d0d      	ldr	r5, [pc, #52]	; (8000cd0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ca2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ca6:	f001 fe55 	bl	8002954 <OSCHP_GetFrequency>
 8000caa:	4602      	mov	r2, r0
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000cae:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb2:	0d1b      	lsrs	r3, r3, #20
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000cb8:	4323      	orrs	r3, r4
 8000cba:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000cbe:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000cc6:	6053      	str	r3, [r2, #4]
}
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	50004710 	.word	0x50004710
 8000cd0:	50004700 	.word	0x50004700
 8000cd4:	6b5fca6b 	.word	0x6b5fca6b

08000cd8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000ce4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ce8:	bf0c      	ite	eq
 8000cea:	2301      	moveq	r3, #1
 8000cec:	2300      	movne	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	50004710 	.word	0x50004710

08000d00 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	f023 0302 	bic.w	r3, r3, #2
 8000d12:	6053      	str	r3, [r2, #4]
}
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	50004710 	.word	0x50004710

08000d20 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	6053      	str	r3, [r2, #4]
}
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	50004710 	.word	0x50004710

08000d40 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60ba      	str	r2, [r7, #8]
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	81fb      	strh	r3, [r7, #14]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fd55 	bl	8000804 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000d5a:	7b7b      	ldrb	r3, [r7, #13]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	f040 808b 	bne.w	8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d109      	bne.n	8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000d68:	f001 fdf4 	bl	8002954 <OSCHP_GetFrequency>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000d70:	fba3 2302 	umull	r2, r3, r3, r2
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	059b      	lsls	r3, r3, #22
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e002      	b.n	8000d82 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d7c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d80:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	fb02 f203 	mul.w	r2, r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	0d9b      	lsrs	r3, r3, #22
 8000d9e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da0:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000dac:	bf00      	nop
 8000dae:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000dba:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000dc6:	4940      	ldr	r1, [pc, #256]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000dce:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	0212      	lsls	r2, r2, #8
 8000dd6:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000dde:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000dea:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000df6:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f023 0310 	bic.w	r3, r3, #16
 8000e00:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000e02:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000e0e:	bf00      	nop
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f9      	beq.n	8000e10 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000e28:	bf00      	nop
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f9      	bne.n	8000e2a <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	0d9b      	lsrs	r3, r3, #22
 8000e42:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e44:	6a3a      	ldr	r2, [r7, #32]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d202      	bcs.n	8000e52 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e4c:	6938      	ldr	r0, [r7, #16]
 8000e4e:	f000 f845 	bl	8000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	085b      	lsrs	r3, r3, #1
 8000e56:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	0d9b      	lsrs	r3, r3, #22
 8000e60:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e62:	6a3a      	ldr	r2, [r7, #32]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d202      	bcs.n	8000e70 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e6a:	6938      	ldr	r0, [r7, #16]
 8000e6c:	f000 f836 	bl	8000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000e70:	6a38      	ldr	r0, [r7, #32]
 8000e72:	f000 f833 	bl	8000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e76:	e01c      	b.n	8000eb2 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e78:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e86:	4313      	orrs	r3, r2
 8000e88:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e8a:	bf00      	nop
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f9      	beq.n	8000e8c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000ea4:	bf00      	nop
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f9      	beq.n	8000ea6 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	60da      	str	r2, [r3, #12]
}
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	aaaaaaab 	.word	0xaaaaaaab
 8000ec8:	50004710 	.word	0x50004710
 8000ecc:	f08080ff 	.word	0xf08080ff
 8000ed0:	88888889 	.word	0x88888889
 8000ed4:	b60b60b7 	.word	0xb60b60b7
 8000ed8:	50004160 	.word	0x50004160

08000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ee4:	490b      	ldr	r1, [pc, #44]	; (8000f14 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000ef8:	bf00      	nop
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f9      	beq.n	8000efa <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000f06:	2032      	movs	r0, #50	; 0x32
 8000f08:	f7ff fb38 	bl	800057c <XMC_SCU_lDelay>
}
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	50004710 	.word	0x50004710

08000f18 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
 8000f24:	4613      	mov	r3, r2
 8000f26:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3204      	adds	r2, #4
 8000f3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	23f8      	movs	r3, #248	; 0xf8
 8000f4c:	408b      	lsls	r3, r1
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	ea02 0103 	and.w	r1, r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1d02      	adds	r2, r0, #4
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3204      	adds	r2, #4
 8000f70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	78f9      	ldrb	r1, [r7, #3]
 8000f78:	f001 0103 	and.w	r1, r1, #3
 8000f7c:	00c9      	lsls	r1, r1, #3
 8000f7e:	408b      	lsls	r3, r1
 8000f80:	ea42 0103 	orr.w	r1, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1d02      	adds	r2, r0, #4
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	408b      	lsls	r3, r1
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
 8000fc4:	78f9      	ldrb	r1, [r7, #3]
 8000fc6:	0049      	lsls	r1, r1, #1
 8000fc8:	408b      	lsls	r3, r1
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fee:	b2db      	uxtb	r3, r3
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f023 020f 	bic.w	r2, r3, #15
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 f8a2 	bl	800117c <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	795b      	ldrb	r3, [r3, #5]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d115      	bne.n	800106c <XMC_SPI_CH_InitEx+0x48>
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d012      	beq.n	800106c <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	4619      	mov	r1, r3
 8001056:	2202      	movs	r2, #2
 8001058:	f000 f94e 	bl	80012f8 <XMC_USIC_CH_SetBaudrateEx>
 800105c:	e006      	b.n	800106c <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	4619      	mov	r1, r3
 8001066:	2202      	movs	r2, #2
 8001068:	f000 f8d4 	bl	8001214 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <XMC_SPI_CH_InitEx+0x88>)
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d107      	bne.n	8001092 <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8001086:	f043 030b 	orr.w	r3, r3, #11
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	891b      	ldrh	r3, [r3, #8]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	073f0102 	.word	0x073f0102

080010b0 <XMC_SPI_CH_SetBaudrate>:

XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_STATUS_t status;

  status = XMC_SPI_CH_STATUS_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]

  if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 80010be:	f7ff fb55 	bl	800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010c2:	4603      	mov	r3, r0
 80010c4:	085a      	lsrs	r2, r3, #1
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d309      	bcc.n	80010e0 <XMC_SPI_CH_SetBaudrate+0x30>
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	2202      	movs	r2, #2
 80010d2:	f000 f89f 	bl	8001214 <XMC_USIC_CH_SetBaudrate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <XMC_SPI_CH_SetBaudrate+0x30>
    {
      status = XMC_SPI_CH_STATUS_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop

080010ec <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001126:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001132:	81fb      	strh	r3, [r7, #14]
 8001134:	e003      	b.n	800113e <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800113c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800113e:	89fb      	ldrh	r3, [r7, #14]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <XMC_SPI_CH_Stop>:
                         (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_PCTQ1_Msk) |
                         (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_DCTQ1_Msk);
}

XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

  if (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff3f 	bl	8000fdc <XMC_USIC_CH_GetTransmitBufferStatus>
 800115e:	4603      	mov	r3, r0
 8001160:	2b80      	cmp	r3, #128	; 0x80
 8001162:	d102      	bne.n	800116a <XMC_SPI_CH_Stop+0x1e>
  {
    status = XMC_SPI_CH_STATUS_BUSY;
 8001164:	2302      	movs	r3, #2
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e003      	b.n	8001172 <XMC_SPI_CH_Stop+0x26>
  }
  else
  {

    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	2100      	movs	r1, #0
 800116e:	f7ff ff45 	bl	8000ffc <XMC_USIC_CH_SetMode>
  }

  return status;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <XMC_USIC_CH_Enable+0x74>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d003      	beq.n	8001194 <XMC_USIC_CH_Enable+0x18>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <XMC_USIC_CH_Enable+0x78>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d103      	bne.n	800119c <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <XMC_USIC_CH_Enable+0x7c>)
 8001196:	f000 f99d 	bl	80014d4 <XMC_USIC_Enable>
 800119a:	e016      	b.n	80011ca <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <XMC_USIC_CH_Enable+0x80>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d003      	beq.n	80011ac <XMC_USIC_CH_Enable+0x30>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a16      	ldr	r2, [pc, #88]	; (8001200 <XMC_USIC_CH_Enable+0x84>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d103      	bne.n	80011b4 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80011ac:	4815      	ldr	r0, [pc, #84]	; (8001204 <XMC_USIC_CH_Enable+0x88>)
 80011ae:	f000 f991 	bl	80014d4 <XMC_USIC_Enable>
 80011b2:	e00a      	b.n	80011ca <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <XMC_USIC_CH_Enable+0x8c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d003      	beq.n	80011c4 <XMC_USIC_CH_Enable+0x48>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <XMC_USIC_CH_Enable+0x90>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d102      	bne.n	80011ca <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <XMC_USIC_CH_Enable+0x94>)
 80011c6:	f000 f985 	bl	80014d4 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80011d0:	bf00      	nop
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f023 020f 	bic.w	r2, r3, #15
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40030000 	.word	0x40030000
 80011f4:	40030200 	.word	0x40030200
 80011f8:	40030008 	.word	0x40030008
 80011fc:	48020000 	.word	0x48020000
 8001200:	48020200 	.word	0x48020200
 8001204:	48020008 	.word	0x48020008
 8001208:	48024000 	.word	0x48024000
 800120c:	48024200 	.word	0x48024200
 8001210:	48024008 	.word	0x48024008

08001214 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b63      	cmp	r3, #99	; 0x63
 8001224:	d95a      	bls.n	80012dc <XMC_USIC_CH_SetBaudrate+0xc8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d057      	beq.n	80012dc <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 800122c:	f7ff fa9e 	bl	800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001230:	4602      	mov	r2, r0
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001234:	fba3 2302 	umull	r2, r3, r3, r2
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4a2c      	ldr	r2, [pc, #176]	; (80012f0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	095b      	lsrs	r3, r3, #5
 8001246:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001252:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001256:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
 800125e:	e022      	b.n	80012a6 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001264:	fb02 f203 	mul.w	r2, r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	0a9b      	lsrs	r3, r3, #10
 800127a:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001282:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d809      	bhi.n	80012a0 <XMC_USIC_CH_SetBaudrate+0x8c>
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	429a      	cmp	r2, r3
 8001292:	d205      	bcs.n	80012a0 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a2:	3b01      	subs	r3, #1
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
 80012a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1d9      	bne.n	8001260 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80012b0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <XMC_USIC_CH_SetBaudrate+0xe0>)
 80012be:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	3a01      	subs	r2, #1
 80012c4:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80012c6:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	3b01      	subs	r3, #1
 80012cc:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80012ce:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012da:	e002      	b.n	80012e2 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 80012e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	51eb851f 	.word	0x51eb851f
 80012f4:	fc0080ef 	.word	0xfc0080ef

080012f8 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001304:	f7ff fa32 	bl	800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001308:	4603      	mov	r3, r0
 800130a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800131a:	6a3a      	ldr	r2, [r7, #32]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	429a      	cmp	r2, r3
 8001320:	dd5f      	ble.n	80013e2 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001322:	6a3a      	ldr	r2, [r7, #32]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	fb92 f3f3 	sdiv	r3, r2, r3
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 800132c:	e010      	b.n	8001350 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	3301      	adds	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	461a      	mov	r2, r3
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	fb03 f302 	mul.w	r3, r3, r2
 8001344:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	fb92 f3f3 	sdiv	r3, r2, r3
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001356:	4293      	cmp	r3, r2
 8001358:	d8e9      	bhi.n	800132e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	3301      	adds	r3, #1
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001392:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1acb      	subs	r3, r1, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	bfb8      	it	lt
 80013a0:	425b      	neglt	r3, r3
 80013a2:	429a      	cmp	r2, r3
 80013a4:	da02      	bge.n	80013ac <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	3301      	adds	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80013ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ae:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80013c4:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	3a01      	subs	r2, #1
 80013ca:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80013cc:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	3b01      	subs	r3, #1
 80013d2:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80013d4:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013e0:	e002      	b.n	80013e8 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 80013e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3730      	adds	r7, #48	; 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	fc0080ef 	.word	0xfc0080ef

080013f8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	4613      	mov	r3, r2
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800140e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001420:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	0211      	lsls	r1, r2, #8
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800142e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8001430:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	f8ffc0c0 	.word	0xf8ffc0c0

08001448 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800145e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001470:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	0211      	lsls	r1, r2, #8
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 800147e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001480:	4313      	orrs	r3, r2
 8001482:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	efffc0c0 	.word	0xefffc0c0

0800149c <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	699a      	ldr	r2, [r3, #24]
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	2107      	movs	r1, #7
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <XMC_USIC_Enable+0xac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 80014e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014e8:	f7ff fa88 	bl	80009fc <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 80014ec:	bf00      	nop
 80014ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014f2:	f7ff fa9f 	bl	8000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f8      	bne.n	80014ee <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80014fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001500:	f7ff f8f4 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001504:	bf00      	nop
 8001506:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800150a:	f7ff f90b 	bl	8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f8      	bne.n	8001506 <XMC_USIC_Enable+0x32>
 8001514:	e030      	b.n	8001578 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <XMC_USIC_Enable+0xb0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d114      	bne.n	8001548 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800151e:	481a      	ldr	r0, [pc, #104]	; (8001588 <XMC_USIC_Enable+0xb4>)
 8001520:	f7ff fa6c 	bl	80009fc <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001524:	bf00      	nop
 8001526:	4818      	ldr	r0, [pc, #96]	; (8001588 <XMC_USIC_Enable+0xb4>)
 8001528:	f7ff fa84 	bl	8000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <XMC_USIC_Enable+0xb4>)
 8001534:	f7ff f8da 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001538:	bf00      	nop
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <XMC_USIC_Enable+0xb4>)
 800153c:	f7ff f8f2 	bl	8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f9      	bne.n	800153a <XMC_USIC_Enable+0x66>
 8001546:	e017      	b.n	8001578 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <XMC_USIC_Enable+0xb8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d113      	bne.n	8001578 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <XMC_USIC_Enable+0xbc>)
 8001552:	f7ff fa53 	bl	80009fc <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8001556:	bf00      	nop
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <XMC_USIC_Enable+0xbc>)
 800155a:	f7ff fa6b 	bl	8000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f9      	bne.n	8001558 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <XMC_USIC_Enable+0xbc>)
 8001566:	f7ff f8c1 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 800156a:	bf00      	nop
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <XMC_USIC_Enable+0xbc>)
 800156e:	f7ff f8d9 	bl	8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40030008 	.word	0x40030008
 8001584:	48020008 	.word	0x48020008
 8001588:	10000080 	.word	0x10000080
 800158c:	48024008 	.word	0x48024008
 8001590:	10000100 	.word	0x10000100

08001594 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
 80015ac:	4613      	mov	r3, r2
 80015ae:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80015b0:	78f8      	ldrb	r0, [r7, #3]
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	3306      	adds	r3, #6
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80015c2:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80015c4:	431a      	orrs	r2, r3
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	1d83      	adds	r3, r0, #6
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t transmit_control_information)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	460b      	mov	r3, r1
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 80015ea:	8979      	ldrh	r1, [r7, #10]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	3220      	adds	r2, #32
 80015f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t frame_length)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	460b      	mov	r3, r1
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 800164a:	8979      	ldrh	r1, [r7, #10]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	3260      	adds	r2, #96	; 0x60
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800166e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800168a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
    const uint32_t event)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8001718:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 800171a:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f023 020f 	bic.w	r2, r3, #15
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	2101      	movs	r1, #1
 8001764:	f7ff ffe4 	bl	8001730 <XMC_USIC_CH_SetMode>
}
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop

08001770 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop

0800179c <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 80017ec:	4313      	orrs	r3, r2
 80017ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	f7ff ff77 	bl	8001704 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
 8001828:	4613      	mov	r3, r2
 800182a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 800182c:	78f8      	ldrb	r0, [r7, #3]
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	3306      	adds	r3, #6
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800183e:	f043 0210 	orr.w	r2, r3, #16
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	1d83      	adds	r3, r0, #6
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	78bb      	ldrb	r3, [r7, #2]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	f7ff fea3 	bl	80015a0 <XMC_USIC_CH_SetInputSource>
}
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4798      	blx	r3
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop

08001880 <SPI_MASTER_SetMode>:
/*
 * Change the SPI mode of communication.
 */
SPI_MASTER_STATUS_t SPI_MASTER_SetMode(SPI_MASTER_t* const handle,
                                       const XMC_SPI_CH_MODE_t mode)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Configure:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_SUCCESS;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]

  if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d022      	beq.n	80018ea <SPI_MASTER_SetMode+0x6a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	7fdb      	ldrb	r3, [r3, #31]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f083 0301 	eor.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <SPI_MASTER_SetMode+0x6a>
  {
    if (handle->runtime->spi_master_mode != mode)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	7f1b      	ldrb	r3, [r3, #28]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d011      	beq.n	80018e8 <SPI_MASTER_SetMode+0x68>
    {
      status =  SPI_MASTER_lValidateModeChange(handle, mode);
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f000 fe8d 	bl	80025e8 <SPI_MASTER_lValidateModeChange>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]

      if (SPI_MASTER_STATUS_SUCCESS == status)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <SPI_MASTER_SetMode+0x68>
      {
        handle->runtime->spi_master_mode = mode;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	771a      	strb	r2, [r3, #28]

        /* This changes the operating mode and related settings */
        SPI_MASTER_lPortConfig(handle);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fc57 	bl	8002194 <SPI_MASTER_lPortConfig>

  status = SPI_MASTER_STATUS_SUCCESS;

  if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
  {
    if (handle->runtime->spi_master_mode != mode)
 80018e6:	e002      	b.n	80018ee <SPI_MASTER_SetMode+0x6e>
 80018e8:	e001      	b.n	80018ee <SPI_MASTER_SetMode+0x6e>
      }
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUSY;
 80018ea:	2302      	movs	r3, #2
 80018ec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <SPI_MASTER_SetBaudRate>:

/*
 * Set the baud rate during runtime.
 */
SPI_MASTER_STATUS_t SPI_MASTER_SetBaudRate(SPI_MASTER_t* const handle, const uint32_t baud_rate)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;

  if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03f      	beq.n	8001996 <SPI_MASTER_SetBaudRate+0x9e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	7fdb      	ldrb	r3, [r3, #31]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f083 0301 	eor.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d036      	beq.n	8001996 <SPI_MASTER_SetBaudRate+0x9e>
  {
    /* Stops the SPI channel */
    status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_Stop(handle->channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fc0d 	bl	800114c <XMC_SPI_CH_Stop>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]

    if (SPI_MASTER_STATUS_SUCCESS == status)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d12b      	bne.n	8001994 <SPI_MASTER_SetBaudRate+0x9c>
    {
      /* Set all the pins as input */
      SPI_MASTER_lPortModeReset(handle);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fda5 	bl	800248c <SPI_MASTER_lPortModeReset>

      /* Update the new baud rate */
      status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_SetBaudrate(handle->channel, baud_rate);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	f7ff fbb1 	bl	80010b0 <XMC_SPI_CH_SetBaudrate>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]

      if (SPI_MASTER_STATUS_SUCCESS == status)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <SPI_MASTER_SetBaudRate+0x74>
      {
        /* Configure Leading/Trailing delay */
        XMC_SPI_CH_SetSlaveSelectDelay(handle->channel, (uint32_t)handle->config->leading_trailing_delay);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff ff34 	bl	80017d4 <XMC_SPI_CH_SetSlaveSelectDelay>
      }

      /* Configure the clock polarity and clock delay */
      XMC_SPI_CH_ConfigureShiftClockOutput(handle->channel,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
                                           handle->config->shift_clk_passive_level,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
        /* Configure Leading/Trailing delay */
        XMC_SPI_CH_SetSlaveSelectDelay(handle->channel, (uint32_t)handle->config->leading_trailing_delay);
      }

      /* Configure the clock polarity and clock delay */
      XMC_SPI_CH_ConfigureShiftClockOutput(handle->channel,
 8001974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	2200      	movs	r2, #0
 800197e:	f7ff ff3f 	bl	8001800 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                           handle->config->shift_clk_passive_level,
                                           XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
      /* Start the SPI channel */
      XMC_SPI_CH_Start(handle->channel);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fee6 	bl	8001758 <XMC_SPI_CH_Start>

      /* Set the mode of the according the generated configuration */
      SPI_MASTER_lPortModeSet(handle);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fca9 	bl	80022e4 <SPI_MASTER_lPortModeSet>
  if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
  {
    /* Stops the SPI channel */
    status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_Stop(handle->channel);

    if (SPI_MASTER_STATUS_SUCCESS == status)
 8001992:	e002      	b.n	800199a <SPI_MASTER_SetBaudRate+0xa2>
 8001994:	e001      	b.n	800199a <SPI_MASTER_SetBaudRate+0xa2>
      SPI_MASTER_lPortModeSet(handle);
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <SPI_MASTER_Transmit>:

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d106      	bne.n	80019ce <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	f000 f821 	bl	8001a0c <SPI_MASTER_lStartTransmitPolling>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d106      	bne.n	8001a02 <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	f000 f915 	bl	8001c28 <SPI_MASTER_lStartReceivePolling>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <SPI_MASTER_lStartTransmitPolling>:
}
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lStartTransmitPolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint16_t data;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
                                                            Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  status = SPI_MASTER_STATUS_BUSY;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	617b      	str	r3, [r7, #20]
  data = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	83bb      	strh	r3, [r7, #28]

  XMC_ASSERT("SPI_MASTER_lStartTransmitPolling:handle NULL" , (handle != NULL));

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80f0 	beq.w	8001c12 <SPI_MASTER_lStartTransmitPolling+0x206>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80ec 	beq.w	8001c12 <SPI_MASTER_lStartTransmitPolling+0x206>
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f083 0301 	eor.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80e1 	beq.w	8001c10 <SPI_MASTER_lStartTransmitPolling+0x204>
    {
      if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d901      	bls.n	8001a5c <SPI_MASTER_lStartTransmitPolling+0x50>
      {
        bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
      }

      runtime_handle->tx_busy = true;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]
      /* Obtain the address of data, size of data */
      runtime_handle->tx_data = dataptr;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	fa03 f202 	lsl.w	r2, r3, r2
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	605a      	str	r2, [r3, #4]
      /* Initialize to first index and set the busy flag */
      runtime_handle->tx_data_index = 0U;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	7f1b      	ldrb	r3, [r3, #28]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff fe6f 	bl	8001770 <XMC_SPI_CH_SetTransmitMode>

      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d04b      	beq.n	8001b36 <SPI_MASTER_lStartTransmitPolling+0x12a>
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fddc 	bl	8001660 <XMC_USIC_CH_TXFIFO_Flush>

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001aa8:	e03e      	b.n	8001b28 <SPI_MASTER_lStartTransmitPolling+0x11c>
        {
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8001aaa:	bf00      	nop
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fde3 	bl	800167c <XMC_USIC_CH_TXFIFO_IsFull>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f7      	bne.n	8001aac <SPI_MASTER_lStartTransmitPolling+0xa0>
          {
              /* Wait until FIFO is having space for next entry */
          }
          if (runtime_handle->tx_data_dummy == true)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00b      	beq.n	8001ae0 <SPI_MASTER_lStartTransmitPolling+0xd4>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	7f1b      	ldrb	r3, [r3, #28]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f7ff fdaf 	bl	800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8001ade:	e01d      	b.n	8001b1c <SPI_MASTER_lStartTransmitPolling+0x110>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <SPI_MASTER_lStartTransmitPolling+0xea>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	83bb      	strh	r3, [r7, #28]
 8001af4:	e006      	b.n	8001b04 <SPI_MASTER_lStartTransmitPolling+0xf8>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	7f1b      	ldrb	r3, [r3, #28]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461c      	mov	r4, r3
 8001b10:	8bbb      	ldrh	r3, [r7, #28]
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	4622      	mov	r2, r4
 8001b18:	f7ff fd90 	bl	800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	441a      	add	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	609a      	str	r2, [r3, #8]
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3ba      	bcc.n	8001aaa <SPI_MASTER_lStartTransmitPolling+0x9e>
 8001b34:	e056      	b.n	8001be4 <SPI_MASTER_lStartTransmitPolling+0x1d8>
      }
      else
      {
        do
        {
          while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b36:	bf00      	nop
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fd5f 	bl	8001600 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b80      	cmp	r3, #128	; 0x80
 8001b46:	d0f7      	beq.n	8001b38 <SPI_MASTER_lStartTransmitPolling+0x12c>
          {
          }

          if (runtime_handle->tx_data_dummy == true)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <SPI_MASTER_lStartTransmitPolling+0x160>
          {
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, runtime_handle->spi_master_mode);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	7f1b      	ldrb	r3, [r3, #28]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff fd39 	bl	80015dc <XMC_USIC_CH_WriteToTBUFTCI>
 8001b6a:	e01d      	b.n	8001ba8 <SPI_MASTER_lStartTransmitPolling+0x19c>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <SPI_MASTER_lStartTransmitPolling+0x176>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	83bb      	strh	r3, [r7, #28]
 8001b80:	e006      	b.n	8001b90 <SPI_MASTER_lStartTransmitPolling+0x184>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, runtime_handle->spi_master_mode);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	7f1b      	ldrb	r3, [r3, #28]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461c      	mov	r4, r3
 8001b9c:	8bbb      	ldrh	r3, [r7, #28]
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	f7ff fd1a 	bl	80015dc <XMC_USIC_CH_WriteToTBUFTCI>
          }
          (runtime_handle->tx_data_index)+=bytes_per_word;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	441a      	add	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	609a      	str	r2, [r3, #8]

          while ((XMC_SPI_CH_GetStatusFlag(handle->channel) & (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION) == 0U)
 8001bb4:	bf00      	nop
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fdee 	bl	800179c <XMC_SPI_CH_GetStatusFlag>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f5      	beq.n	8001bb6 <SPI_MASTER_lStartTransmitPolling+0x1aa>
          {

          }
          XMC_SPI_CH_ClearStatusFlag(handle->channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd4:	f7ff fdee 	bl	80017b4 <XMC_SPI_CH_ClearStatusFlag>
        } while(runtime_handle->tx_data_index < runtime_handle->tx_data_count);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3a8      	bcc.n	8001b36 <SPI_MASTER_lStartTransmitPolling+0x12a>
      }

      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001be4:	bf00      	nop
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fd08 	bl	8001600 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b80      	cmp	r3, #128	; 0x80
 8001bf4:	d0f7      	beq.n	8001be6 <SPI_MASTER_lStartTransmitPolling+0x1da>
      {
      }

      runtime_handle->tx_busy = false;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data_count = 0U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
      runtime_handle->tx_data_index = 0U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
      status = SPI_MASTER_STATUS_SUCCESS;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 8001c0e:	e002      	b.n	8001c16 <SPI_MASTER_lStartTransmitPolling+0x20a>
 8001c10:	e001      	b.n	8001c16 <SPI_MASTER_lStartTransmitPolling+0x20a>
      status = SPI_MASTER_STATUS_SUCCESS;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001c12:	2303      	movs	r3, #3
 8001c14:	77fb      	strb	r3, [r7, #31]
  }
  runtime_handle->rx_data_dummy = true;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  return status;
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3724      	adds	r7, #36	; 0x24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <SPI_MASTER_lStartReceivePolling>:
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lStartReceivePolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_lStartReceivePolling:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	613b      	str	r3, [r7, #16]

  if ((dataptr != NULL) && (count > 0U))
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d033      	beq.n	8001cac <SPI_MASTER_lStartReceivePolling+0x84>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d030      	beq.n	8001cac <SPI_MASTER_lStartReceivePolling+0x84>
  {
    /*Check data pointer is valid or not*/
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	7fdb      	ldrb	r3, [r3, #31]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d027      	beq.n	8001caa <SPI_MASTER_lStartReceivePolling+0x82>
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01e      	beq.n	8001caa <SPI_MASTER_lStartReceivePolling+0x82>
    {
      runtime_handle->rx_busy = true;
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	77da      	strb	r2, [r3, #31]
      runtime_handle->rx_data = dataptr;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	615a      	str	r2, [r3, #20]
      runtime_handle->tx_data = &dummy_data[0];
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <SPI_MASTER_lStartReceivePolling+0x94>)
 8001c7c:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_dummy = true;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = false;
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

      status = SPI_MASTER_lReceivePolling(handle, count);
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	f000 f871 	bl	8001d78 <SPI_MASTER_lReceivePolling>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]

      runtime_handle->tx_data_dummy = false;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_busy = false;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	77da      	strb	r2, [r3, #31]
  runtime_handle = handle->runtime;

  if ((dataptr != NULL) && (count > 0U))
  {
    /*Check data pointer is valid or not*/
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001ca8:	e002      	b.n	8001cb0 <SPI_MASTER_lStartReceivePolling+0x88>
 8001caa:	e001      	b.n	8001cb0 <SPI_MASTER_lStartReceivePolling+0x88>
      runtime_handle->rx_busy = false;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001cac:	2303      	movs	r3, #3
 8001cae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	1ffe8800 	.word	0x1ffe8800

08001cc0 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	7f1b      	ldrb	r3, [r3, #28]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d142      	bne.n	8001d68 <SPI_MASTER_Transfer+0xa8>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03b      	beq.n	8001d60 <SPI_MASTER_Transfer+0xa0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d038      	beq.n	8001d60 <SPI_MASTER_Transfer+0xa0>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d035      	beq.n	8001d60 <SPI_MASTER_Transfer+0xa0>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	7fdb      	ldrb	r3, [r3, #31]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d02c      	beq.n	8001d5e <SPI_MASTER_Transfer+0x9e>
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d023      	beq.n	8001d5e <SPI_MASTER_Transfer+0x9e>
      {
        runtime_handle->rx_busy = true;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
        }
#endif
#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d109      	bne.n	8001d5e <SPI_MASTER_Transfer+0x9e>
        {
          status = SPI_MASTER_lReceivePolling(handle, count);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	f000 f813 	bl	8001d78 <SPI_MASTER_lReceivePolling>
 8001d52:	4603      	mov	r3, r0
 8001d54:	75fb      	strb	r3, [r7, #23]
          runtime_handle->rx_busy = false;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	77da      	strb	r2, [r3, #31]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001d5c:	e003      	b.n	8001d66 <SPI_MASTER_Transfer+0xa6>
 8001d5e:	e002      	b.n	8001d66 <SPI_MASTER_Transfer+0xa6>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001d60:	2303      	movs	r3, #3
 8001d62:	75fb      	strb	r3, [r7, #23]
 8001d64:	e002      	b.n	8001d6c <SPI_MASTER_Transfer+0xac>
 8001d66:	e001      	b.n	8001d6c <SPI_MASTER_Transfer+0xac>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <SPI_MASTER_lReceivePolling>:
}
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
                                                           Specify the number of bytes for the configured word length */
  uint16_t data;

  runtime_handle = handle->runtime;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	827b      	strh	r3, [r7, #18]
  runtime_handle->rx_data_index = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d901      	bls.n	8001daa <SPI_MASTER_lReceivePolling+0x32>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001da6:	2302      	movs	r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
  }

  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	fa03 f202 	lsl.w	r2, r3, r2
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	60da      	str	r2, [r3, #12]

  XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	7f1b      	ldrb	r3, [r3, #28]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7ff fcd2 	bl	8001770 <XMC_SPI_CH_SetTransmitMode>

    /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80d6 	beq.w	8001f86 <SPI_MASTER_lReceivePolling+0x20e>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fc60 	bl	80016a4 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f9c5 	bl	8002178 <SPI_MASTER_lStdRBUFFlush>

    if (runtime_handle->tx_data_dummy == true)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <SPI_MASTER_lReceivePolling+0x9a>
    {
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	7f1b      	ldrb	r3, [r3, #28]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4610      	mov	r0, r2
 8001e06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7ff fc16 	bl	800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8001e10:	e01d      	b.n	8001e4e <SPI_MASTER_lReceivePolling+0xd6>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <SPI_MASTER_lReceivePolling+0xb0>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4413      	add	r3, r2
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	827b      	strh	r3, [r7, #18]
 8001e26:	e006      	b.n	8001e36 <SPI_MASTER_lReceivePolling+0xbe>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	7f1b      	ldrb	r3, [r3, #28]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461c      	mov	r4, r3
 8001e42:	8a7b      	ldrh	r3, [r7, #18]
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	4622      	mov	r2, r4
 8001e4a:	f7ff fbf7 	bl	800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	441a      	add	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	609a      	str	r2, [r3, #8]


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8001e5a:	e061      	b.n	8001f20 <SPI_MASTER_lReceivePolling+0x1a8>
    {
      if (runtime_handle->tx_data_dummy == true)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00b      	beq.n	8001e80 <SPI_MASTER_lReceivePolling+0x108>
      {
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	7f1b      	ldrb	r3, [r3, #28]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f7ff fbdf 	bl	800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8001e7e:	e01d      	b.n	8001ebc <SPI_MASTER_lReceivePolling+0x144>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d107      	bne.n	8001e96 <SPI_MASTER_lReceivePolling+0x11e>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	827b      	strh	r3, [r7, #18]
 8001e94:	e006      	b.n	8001ea4 <SPI_MASTER_lReceivePolling+0x12c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	7f1b      	ldrb	r3, [r3, #28]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461c      	mov	r4, r3
 8001eb0:	8a7b      	ldrh	r3, [r7, #18]
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	f7ff fbc0 	bl	800163c <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
      }

      while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8001ebc:	bf00      	nop
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fbfc 	bl	80016c0 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f7      	bne.n	8001ebe <SPI_MASTER_lReceivePolling+0x146>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f920 	bl	8001118 <XMC_SPI_CH_GetReceivedData>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	8a7a      	ldrh	r2, [r7, #18]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d10a      	bne.n	8001f08 <SPI_MASTER_lReceivePolling+0x190>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	3301      	adds	r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	8a7a      	ldrh	r2, [r7, #18]
 8001f00:	0a12      	lsrs	r2, r2, #8
 8001f02:	b292      	uxth	r2, r2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	441a      	add	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	441a      	add	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d397      	bcc.n	8001e5c <SPI_MASTER_lReceivePolling+0xe4>

      (runtime_handle->rx_data_index)+= bytes_per_word;
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }

    while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8001f2c:	bf00      	nop
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fbc4 	bl	80016c0 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f7      	bne.n	8001f2e <SPI_MASTER_lReceivePolling+0x1b6>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f8e8 	bl	8001118 <XMC_SPI_CH_GetReceivedData>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	8a7a      	ldrh	r2, [r7, #18]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10a      	bne.n	8001f78 <SPI_MASTER_lReceivePolling+0x200>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	8a7a      	ldrh	r2, [r7, #18]
 8001f70:	0a12      	lsrs	r2, r2, #8
 8001f72:	b292      	uxth	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
    }

    XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	2105      	movs	r1, #5
 8001f80:	f7ff fbb2 	bl	80016e8 <XMC_USIC_CH_RXFIFO_ClearEvent>
 8001f84:	e0e9      	b.n	800215a <SPI_MASTER_lReceivePolling+0x3e2>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f8f4 	bl	8002178 <SPI_MASTER_lStdRBUFFlush>

    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001f90:	bf00      	nop
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fb32 	bl	8001600 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b80      	cmp	r3, #128	; 0x80
 8001fa0:	d0f7      	beq.n	8001f92 <SPI_MASTER_lReceivePolling+0x21a>
    {
    }

    if (runtime_handle->tx_data_dummy == true)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <SPI_MASTER_lReceivePolling+0x24e>
    {
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fb0c 	bl	80015dc <XMC_USIC_CH_WriteToTBUFTCI>
 8001fc4:	e01d      	b.n	8002002 <SPI_MASTER_lReceivePolling+0x28a>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d107      	bne.n	8001fdc <SPI_MASTER_lReceivePolling+0x264>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	827b      	strh	r3, [r7, #18]
 8001fda:	e006      	b.n	8001fea <SPI_MASTER_lReceivePolling+0x272>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	7f1b      	ldrb	r3, [r3, #28]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461c      	mov	r4, r3
 8001ff6:	8a7b      	ldrh	r3, [r7, #18]
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	f7ff faed 	bl	80015dc <XMC_USIC_CH_WriteToTBUFTCI>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	441a      	add	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	609a      	str	r2, [r3, #8]

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 800200e:	e071      	b.n	80020f4 <SPI_MASTER_lReceivePolling+0x37c>
    {
      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002010:	bf00      	nop
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff faf2 	bl	8001600 <XMC_USIC_CH_GetTransmitBufferStatus>
 800201c:	4603      	mov	r3, r0
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d0f7      	beq.n	8002012 <SPI_MASTER_lReceivePolling+0x29a>
      {

      }

      if (runtime_handle->tx_data_dummy == true)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <SPI_MASTER_lReceivePolling+0x2ce>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	7f1b      	ldrb	r3, [r3, #28]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800203e:	461a      	mov	r2, r3
 8002040:	f7ff facc 	bl	80015dc <XMC_USIC_CH_WriteToTBUFTCI>
 8002044:	e01d      	b.n	8002082 <SPI_MASTER_lReceivePolling+0x30a>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d107      	bne.n	800205c <SPI_MASTER_lReceivePolling+0x2e4>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	827b      	strh	r3, [r7, #18]
 800205a:	e006      	b.n	800206a <SPI_MASTER_lReceivePolling+0x2f2>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	7f1b      	ldrb	r3, [r3, #28]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461c      	mov	r4, r3
 8002076:	8a7b      	ldrh	r3, [r7, #18]
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	4622      	mov	r2, r4
 800207e:	f7ff faad 	bl	80015dc <XMC_USIC_CH_WriteToTBUFTCI>
      }

      while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8002082:	bf00      	nop
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fac9 	bl	8001620 <XMC_USIC_CH_GetReceiveBufferStatus>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f7      	beq.n	8002084 <SPI_MASTER_lReceivePolling+0x30c>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f83d 	bl	8001118 <XMC_SPI_CH_GetReceivedData>
 800209e:	4603      	mov	r3, r0
 80020a0:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	8a7a      	ldrh	r2, [r7, #18]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d10a      	bne.n	80020ce <SPI_MASTER_lReceivePolling+0x356>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	8a7a      	ldrh	r2, [r7, #18]
 80020c6:	0a12      	lsrs	r2, r2, #8
 80020c8:	b292      	uxth	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	441a      	add	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	441a      	add	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80020f0:	f7ff fb60 	bl	80017b4 <XMC_SPI_CH_ClearStatusFlag>
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d387      	bcc.n	8002010 <SPI_MASTER_lReceivePolling+0x298>
      (runtime_handle->tx_data_index)+= bytes_per_word;

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
    }

    while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8002100:	bf00      	nop
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fa8a 	bl	8001620 <XMC_USIC_CH_GetReceiveBufferStatus>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f7      	beq.n	8002102 <SPI_MASTER_lReceivePolling+0x38a>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fffe 	bl	8001118 <XMC_SPI_CH_GetReceivedData>
 800211c:	4603      	mov	r3, r0
 800211e:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4413      	add	r3, r2
 800212a:	8a7a      	ldrh	r2, [r7, #18]
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d10a      	bne.n	800214c <SPI_MASTER_lReceivePolling+0x3d4>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	3301      	adds	r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	8a7a      	ldrh	r2, [r7, #18]
 8002144:	0a12      	lsrs	r2, r2, #8
 8002146:	b292      	uxth	r2, r2
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	701a      	strb	r2, [r3, #0]
    }

    XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002156:	f7ff fb2d 	bl	80017b4 <XMC_SPI_CH_ClearStatusFlag>
  }
  runtime_handle->rx_data_count = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
  runtime_handle->rx_data_index = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]

  return SPI_MASTER_STATUS_SUCCESS;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop

08002178 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe ffc9 	bl	8001118 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe ffc6 	bl	8001118 <XMC_SPI_CH_GetReceivedData>
}
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <SPI_MASTER_lPortConfig>:

/*
 * This is used to reconfigure the registers while changing the SPI mode dynamically
 */
static void SPI_MASTER_lPortConfig(const SPI_MASTER_t* handle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  switch (handle->runtime->spi_master_mode)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	7f1b      	ldrb	r3, [r3, #28]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	f200 8098 	bhi.w	80022da <SPI_MASTER_lPortConfig+0x146>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <SPI_MASTER_lPortConfig+0x1c>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021d1 	.word	0x080021d1
 80021b4:	080022db 	.word	0x080022db
 80021b8:	080022db 	.word	0x080022db
 80021bc:	080022db 	.word	0x080022db
 80021c0:	080022db 	.word	0x080022db
 80021c4:	08002235 	.word	0x08002235
 80021c8:	08002265 	.word	0x08002265
 80021cc:	08002265 	.word	0x08002265
  {
    case XMC_SPI_CH_MODE_STANDARD:
      /* Configure the data input line selected */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)(handle->runtime->dx0_input));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	7f5b      	ldrb	r3, [r3, #29]
 80021da:	4610      	mov	r0, r2
 80021dc:	2100      	movs	r1, #0
 80021de:	461a      	mov	r2, r3
 80021e0:	f7ff fb1c 	bl	800181c <XMC_SPI_CH_SetInputSource>
      /* Configure the pin as input */
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	791b      	ldrb	r3, [r3, #4]
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	2200      	movs	r2, #0
 80021fa:	f7fe fe8d 	bl	8000f18 <XMC_GPIO_SetMode>
      /* Disable the HW control of the PINs */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	681a      	ldr	r2, [r3, #0]
                                  handle->config->mosi_0_pin->pin,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
      /* Configure the data input line selected */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)(handle->runtime->dx0_input));
      /* Configure the pin as input */
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
      /* Disable the HW control of the PINs */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	2200      	movs	r2, #0
 8002214:	f7fe fec0 	bl	8000f98 <XMC_GPIO_SetHardwareControl>
                                  handle->config->mosi_0_pin->pin,
                                  XMC_GPIO_HWCTRL_DISABLED);
      XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	681a      	ldr	r2, [r3, #0]
                                  handle->config->mosi_1_pin->pin,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
      /* Disable the HW control of the PINs */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
                                  handle->config->mosi_0_pin->pin,
                                  XMC_GPIO_HWCTRL_DISABLED);
      XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
 8002226:	791b      	ldrb	r3, [r3, #4]
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	2200      	movs	r2, #0
 800222e:	f7fe feb3 	bl	8000f98 <XMC_GPIO_SetHardwareControl>
                                  handle->config->mosi_1_pin->pin,
                                  XMC_GPIO_HWCTRL_DISABLED);

      break;
 8002232:	e053      	b.n	80022dc <SPI_MASTER_lPortConfig+0x148>

    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      /* Configure the data input line selected */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)(handle->runtime->dx0_input_half_duplex));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	7f9b      	ldrb	r3, [r3, #30]
 800223e:	4610      	mov	r0, r2
 8002240:	2100      	movs	r1, #0
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff faea 	bl	800181c <XMC_SPI_CH_SetInputSource>
      /* Disable the HW control of the PINs */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	681a      	ldr	r2, [r3, #0]
                                  handle->config->mosi_0_pin->pin,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	689b      	ldr	r3, [r3, #8]

    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      /* Configure the data input line selected */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)(handle->runtime->dx0_input_half_duplex));
      /* Disable the HW control of the PINs */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	2200      	movs	r2, #0
 800225e:	f7fe fe9b 	bl	8000f98 <XMC_GPIO_SetHardwareControl>
                                  handle->config->mosi_0_pin->pin,
                                  XMC_GPIO_HWCTRL_DISABLED);
      break;
 8002262:	e03b      	b.n	80022dc <SPI_MASTER_lPortConfig+0x148>

    case XMC_SPI_CH_MODE_DUAL:
    case XMC_SPI_CH_MODE_QUAD:
      /* Configure the data input line for loopback mode */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_G);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	2100      	movs	r1, #0
 800226c:	2206      	movs	r2, #6
 800226e:	f7ff fad5 	bl	800181c <XMC_SPI_CH_SetInputSource>
      /* Configure the pin as input */
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_1_pin->pin,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
    case XMC_SPI_CH_MODE_DUAL:
    case XMC_SPI_CH_MODE_QUAD:
      /* Configure the data input line for loopback mode */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_G);
      /* Configure the pin as input */
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 8002280:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
    case XMC_SPI_CH_MODE_DUAL:
    case XMC_SPI_CH_MODE_QUAD:
      /* Configure the data input line for loopback mode */
      XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_G);
      /* Configure the pin as input */
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4608      	mov	r0, r1
 800228c:	4611      	mov	r1, r2
 800228e:	461a      	mov	r2, r3
 8002290:	f7fe fe42 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);

      /* Configure the Hardware control mode selected for the pin */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	6819      	ldr	r1, [r3, #0]
                                  handle->config->mosi_0_pin->pin,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);

      /* Configure the Hardware control mode selected for the pin */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 80022a2:	791a      	ldrb	r2, [r3, #4]
                                  handle->config->mosi_0_pin->pin,
                                  handle->config->mosi_0_pin_config->hw_control);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);

      /* Configure the Hardware control mode selected for the pin */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	f7fe fe71 	bl	8000f98 <XMC_GPIO_SetHardwareControl>
                                  handle->config->mosi_0_pin->pin,
                                  handle->config->mosi_0_pin_config->hw_control);
      XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	6819      	ldr	r1, [r3, #0]
                                  handle->config->mosi_1_pin->pin,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]

      /* Configure the Hardware control mode selected for the pin */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
                                  handle->config->mosi_0_pin->pin,
                                  handle->config->mosi_0_pin_config->hw_control);
      XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
 80022c4:	791a      	ldrb	r2, [r3, #4]
                                  handle->config->mosi_1_pin->pin,
                                  handle->config->mosi_1_pin_config->hw_control);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]

      /* Configure the Hardware control mode selected for the pin */
      XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
                                  handle->config->mosi_0_pin->pin,
                                  handle->config->mosi_0_pin_config->hw_control);
      XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
 80022cc:	7b1b      	ldrb	r3, [r3, #12]
 80022ce:	4608      	mov	r0, r1
 80022d0:	4611      	mov	r1, r2
 80022d2:	461a      	mov	r2, r3
 80022d4:	f7fe fe60 	bl	8000f98 <XMC_GPIO_SetHardwareControl>
                                  handle->config->mosi_1_pin->pin,
                                  handle->config->mosi_1_pin_config->hw_control);
      break;
 80022d8:	e000      	b.n	80022dc <SPI_MASTER_lPortConfig+0x148>

    default:
      break;
 80022da:	bf00      	nop
  }
}
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop

080022e4 <SPI_MASTER_lPortModeSet>:

/*
 * This is used to reassign the mode for ports after updating the baud rate
 */
static void SPI_MASTER_lPortModeSet(const SPI_MASTER_t* handle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e01a      	b.n	8002328 <SPI_MASTER_lPortModeSet+0x44>
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	320c      	adds	r2, #12
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	6818      	ldr	r0, [r3, #0]
                     handle->config->slave_select_pin[ss_line]->pin,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	320c      	adds	r2, #12
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 800230c:	7919      	ldrb	r1, [r3, #4]
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	3214      	adds	r2, #20
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	f7fe fdfb 	bl	8000f18 <XMC_GPIO_SetMode>
static void SPI_MASTER_lPortModeSet(const SPI_MASTER_t* handle)
{
  uint32_t ss_line;

  /* Configure the ports with actual mode */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002330:	461a      	mov	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8dc      	bhi.n	80022f2 <SPI_MASTER_lPortModeSet+0xe>
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	6819      	ldr	r1, [r3, #0]
                   handle->config->sclk_out_pin->pin,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
 8002346:	791a      	ldrb	r2, [r3, #4]
                   handle->config->sclk_out_pin->pin,
                   handle->config->sclk_out_pin_config->port_config.mode);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     handle->config->slave_select_pin_config[ss_line]->port_config.mode);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	f7fe fddf 	bl	8000f18 <XMC_GPIO_SetMode>
                   handle->config->sclk_out_pin->pin,
                   handle->config->sclk_out_pin_config->port_config.mode);

  switch (handle->runtime->spi_master_mode)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	7f1b      	ldrb	r3, [r3, #28]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b07      	cmp	r3, #7
 8002364:	f200 808e 	bhi.w	8002484 <SPI_MASTER_lPortModeSet+0x1a0>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <SPI_MASTER_lPortModeSet+0x8c>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002391 	.word	0x08002391
 8002374:	08002485 	.word	0x08002485
 8002378:	08002485 	.word	0x08002485
 800237c:	08002485 	.word	0x08002485
 8002380:	08002485 	.word	0x08002485
 8002384:	08002391 	.word	0x08002391
 8002388:	080023b5 	.word	0x080023b5
 800238c:	080023fb 	.word	0x080023fb
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_0_pin->pin,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	689b      	ldr	r3, [r3, #8]

  switch (handle->runtime->spi_master_mode)
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 800239e:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]

  switch (handle->runtime->spi_master_mode)
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7fe fdb3 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      break;
 80023b2:	e068      	b.n	8002486 <SPI_MASTER_lPortModeSet+0x1a2>

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_0_pin->pin,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80023c2:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4608      	mov	r0, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7fe fda1 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_1_pin->pin,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80023e4:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7fe fd90 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      break;
 80023f8:	e045      	b.n	8002486 <SPI_MASTER_lPortModeSet+0x1a2>

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_0_pin->pin,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 8002408:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      break;

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4608      	mov	r0, r1
 8002414:	4611      	mov	r1, r2
 8002416:	461a      	mov	r2, r3
 8002418:	f7fe fd7e 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_1_pin->pin,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	691b      	ldr	r3, [r3, #16]

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 800242a:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	695b      	ldr	r3, [r3, #20]

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	f7fe fd6d 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_2_pin->pin,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
 800244c:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
                       handle->config->mosi_0_pin->pin,
                       handle->config->mosi_0_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4608      	mov	r0, r1
 8002458:	4611      	mov	r1, r2
 800245a:	461a      	mov	r2, r3
 800245c:	f7fe fd5c 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	6819      	ldr	r1, [r3, #0]
                       handle->config->mosi_3_pin->pin,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
 800246e:	791a      	ldrb	r2, [r3, #4]
                       handle->config->mosi_3_pin->pin,
                       handle->config->mosi_3_pin_config->port_config.mode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                       handle->config->mosi_1_pin->pin,
                       handle->config->mosi_1_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
                       handle->config->mosi_2_pin->pin,
                       handle->config->mosi_2_pin_config->port_config.mode);
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	f7fe fd4b 	bl	8000f18 <XMC_GPIO_SetMode>
                       handle->config->mosi_3_pin->pin,
                       handle->config->mosi_3_pin_config->port_config.mode);
      break;
 8002482:	e000      	b.n	8002486 <SPI_MASTER_lPortModeSet+0x1a2>

    default:
      break;
 8002484:	bf00      	nop
  }
}
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <SPI_MASTER_lPortModeReset>:

/*
 * This is used to make the ports as input during update of the baud rate, to avoid the noise in output ports
 */
static void SPI_MASTER_lPortModeReset(const SPI_MASTER_t* handle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t ss_line;

  /* Configure the ports as input */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e015      	b.n	80024c6 <SPI_MASTER_lPortModeReset+0x3a>
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	320c      	adds	r2, #12
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	6819      	ldr	r1, [r3, #0]
                     handle->config->slave_select_pin[ss_line]->pin,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	320c      	adds	r2, #12
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  uint32_t ss_line;

  /* Configure the ports as input */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
  {
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
 80024b4:	791b      	ldrb	r3, [r3, #4]
 80024b6:	4608      	mov	r0, r1
 80024b8:	4619      	mov	r1, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	f7fe fd2c 	bl	8000f18 <XMC_GPIO_SetMode>
static void SPI_MASTER_lPortModeReset(const SPI_MASTER_t* handle)
{
  uint32_t ss_line;

  /* Configure the ports as input */
  for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d8e1      	bhi.n	800249a <SPI_MASTER_lPortModeReset+0xe>
    XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
                     handle->config->slave_select_pin[ss_line]->pin,
                     XMC_GPIO_MODE_INPUT_TRISTATE);
  }

  XMC_GPIO_SetMode(handle->config->sclk_out_pin->port, handle->config->sclk_out_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	2200      	movs	r2, #0
 80024ec:	f7fe fd14 	bl	8000f18 <XMC_GPIO_SetMode>

  switch (handle->runtime->spi_master_mode)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	7f1b      	ldrb	r3, [r3, #28]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b07      	cmp	r3, #7
 80024fa:	d871      	bhi.n	80025e0 <SPI_MASTER_lPortModeReset+0x154>
 80024fc:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <SPI_MASTER_lPortModeReset+0x78>)
 80024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002502:	bf00      	nop
 8002504:	08002525 	.word	0x08002525
 8002508:	080025e1 	.word	0x080025e1
 800250c:	080025e1 	.word	0x080025e1
 8002510:	080025e1 	.word	0x080025e1
 8002514:	080025e1 	.word	0x080025e1
 8002518:	08002525 	.word	0x08002525
 800251c:	08002541 	.word	0x08002541
 8002520:	08002577 	.word	0x08002577
  {
    case XMC_SPI_CH_MODE_STANDARD:
    case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	791b      	ldrb	r3, [r3, #4]
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	2200      	movs	r2, #0
 800253a:	f7fe fced 	bl	8000f18 <XMC_GPIO_SetMode>
      break;
 800253e:	e050      	b.n	80025e2 <SPI_MASTER_lPortModeReset+0x156>

    case XMC_SPI_CH_MODE_DUAL:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	2200      	movs	r2, #0
 8002556:	f7fe fcdf 	bl	8000f18 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	791b      	ldrb	r3, [r3, #4]
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	2200      	movs	r2, #0
 8002570:	f7fe fcd2 	bl	8000f18 <XMC_GPIO_SetMode>
      break;
 8002574:	e035      	b.n	80025e2 <SPI_MASTER_lPortModeReset+0x156>

    case XMC_SPI_CH_MODE_QUAD:
      XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	791b      	ldrb	r3, [r3, #4]
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	2200      	movs	r2, #0
 800258c:	f7fe fcc4 	bl	8000f18 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	2200      	movs	r2, #0
 80025a6:	f7fe fcb7 	bl	8000f18 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_2_pin->port, handle->config->mosi_2_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	f7fe fcaa 	bl	8000f18 <XMC_GPIO_SetMode>
      XMC_GPIO_SetMode(handle->config->mosi_3_pin->port, handle->config->mosi_3_pin->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	791b      	ldrb	r3, [r3, #4]
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	f7fe fc9d 	bl	8000f18 <XMC_GPIO_SetMode>
      break;
 80025de:	e000      	b.n	80025e2 <SPI_MASTER_lPortModeReset+0x156>

    default:
      break;
 80025e0:	bf00      	nop
  }
}
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <SPI_MASTER_lValidateModeChange>:

/*
 * This is used check whether the mode change is valid or not
 */
static SPI_MASTER_STATUS_t SPI_MASTER_lValidateModeChange(const SPI_MASTER_t * handle, XMC_SPI_CH_MODE_t mode)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_SUCCESS;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]

  if ((handle->config->spi_master_config_mode == XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002600:	2b05      	cmp	r3, #5
 8002602:	d006      	beq.n	8002612 <SPI_MASTER_lValidateModeChange+0x2a>
      (handle->config->spi_master_config_mode < mode))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
{
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_SUCCESS;

  if ((handle->config->spi_master_config_mode == XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX) ||
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	429a      	cmp	r2, r3
 8002610:	d902      	bls.n	8002618 <SPI_MASTER_lValidateModeChange+0x30>
      (handle->config->spi_master_config_mode < mode))
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e020      	b.n	800265a <SPI_MASTER_lValidateModeChange+0x72>
  }
  else if (handle->config->spi_master_config_mode == XMC_SPI_CH_MODE_STANDARD)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <SPI_MASTER_lValidateModeChange+0x48>
  {
    if (XMC_SPI_CH_MODE_DUAL <= mode)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d917      	bls.n	800265a <SPI_MASTER_lValidateModeChange+0x72>
    {
      status = SPI_MASTER_STATUS_FAILURE;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e014      	b.n	800265a <SPI_MASTER_lValidateModeChange+0x72>
    }
  }
  else
  {
    if ((mode == XMC_SPI_CH_MODE_STANDARD) && (handle->runtime->dx0_input == SPI_MASTER_INPUT_INVALID))
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <SPI_MASTER_lValidateModeChange+0x5e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	7f5b      	ldrb	r3, [r3, #29]
 800263c:	2b07      	cmp	r3, #7
 800263e:	d102      	bne.n	8002646 <SPI_MASTER_lValidateModeChange+0x5e>
    {
      status = SPI_MASTER_STATUS_FAILURE;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e009      	b.n	800265a <SPI_MASTER_lValidateModeChange+0x72>
    }

    else if ((mode == XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX) && (handle->runtime->dx0_input_half_duplex == SPI_MASTER_INPUT_INVALID))
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d106      	bne.n	800265a <SPI_MASTER_lValidateModeChange+0x72>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	7f9b      	ldrb	r3, [r3, #30]
 8002652:	2b07      	cmp	r3, #7
 8002654:	d101      	bne.n	800265a <SPI_MASTER_lValidateModeChange+0x72>
    {
      status = SPI_MASTER_STATUS_FAILURE;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* added to abide MISRA */
    }
  }
  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
 8002674:	4613      	mov	r3, r2
 8002676:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002678:	78f8      	ldrb	r0, [r7, #3]
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	3306      	adds	r3, #6
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800268a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800268c:	431a      	orrs	r2, r3
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	1d83      	adds	r3, r0, #6
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop

080026a4 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8002710:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 8002712:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f023 020f 	bic.w	r2, r3, #15
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop

08002750 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	f7fe fc60 	bl	8001024 <XMC_SPI_CH_InitEx>
}
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	2101      	movs	r1, #1
 8002778:	f7ff ffd6 	bl	8002728 <XMC_USIC_CH_SetMode>
}
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop

08002784 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop

080027a4 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 80027bc:	4313      	orrs	r3, r2
 80027be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	f7ff ff8b 	bl	80026fc <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7ff ff51 	bl	80026a4 <XMC_USIC_CH_SetWordLength>
}
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4619      	mov	r1, r3
 800281a:	f7ff ff59 	bl	80026d0 <XMC_USIC_CH_SetFrameLength>
}
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
 8002830:	4613      	mov	r3, r2
 8002832:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8002834:	78f8      	ldrb	r0, [r7, #3]
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	3306      	adds	r3, #6
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	1d83      	adds	r3, r0, #6
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	78bb      	ldrb	r3, [r7, #2]
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	f7ff ff03 	bl	8002668 <XMC_USIC_CH_SetInputSource>
}
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 800286e:	2300      	movs	r3, #0
 8002870:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH0, &SPI_MASTER_0_Channel_Config);
 8002872:	4827      	ldr	r0, [pc, #156]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 8002874:	4927      	ldr	r1, [pc, #156]	; (8002914 <SPI_MASTER_0_lInit+0xac>)
 8002876:	f7ff ff6b 	bl	8002750 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH0);
 800287a:	4825      	ldr	r0, [pc, #148]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 800287c:	f7ff ff82 	bl	8002784 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH0, (uint8_t)8);
 8002880:	4823      	ldr	r0, [pc, #140]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 8002882:	2108      	movs	r1, #8
 8002884:	f7ff ffb2 	bl	80027ec <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH0, (uint8_t)8);
 8002888:	4821      	ldr	r0, [pc, #132]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 800288a:	2108      	movs	r1, #8
 800288c:	f7ff ffbc 	bl	8002808 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH0,
 8002890:	481f      	ldr	r0, [pc, #124]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 8002892:	2100      	movs	r1, #0
 8002894:	2200      	movs	r2, #0
 8002896:	f7ff ff9b 	bl	80027d0 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH0, 2U);
 800289a:	481d      	ldr	r0, [pc, #116]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 800289c:	2102      	movs	r1, #2
 800289e:	f7ff ff81 	bl	80027a4 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)14, &SPI_MASTER_0_MISO_Config.port_config);
 80028a2:	481d      	ldr	r0, [pc, #116]	; (8002918 <SPI_MASTER_0_lInit+0xb0>)
 80028a4:	210e      	movs	r1, #14
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <SPI_MASTER_0_lInit+0xb4>)
 80028a8:	f7fd fdaa 	bl	8000400 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_E);
 80028ac:	4818      	ldr	r0, [pc, #96]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 80028ae:	2100      	movs	r1, #0
 80028b0:	2204      	movs	r2, #4
 80028b2:	f7ff ffb7 	bl	8002824 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH0);
 80028b6:	4816      	ldr	r0, [pc, #88]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 80028b8:	f7ff ff58 	bl	800276c <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)15, &SPI_MASTER_0_MOSI_Config.port_config);
 80028bc:	4816      	ldr	r0, [pc, #88]	; (8002918 <SPI_MASTER_0_lInit+0xb0>)
 80028be:	210f      	movs	r1, #15
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <SPI_MASTER_0_lInit+0xb8>)
 80028c2:	f7fd fd9d 	bl	8000400 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, (uint8_t)0, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 80028c6:	4817      	ldr	r0, [pc, #92]	; (8002924 <SPI_MASTER_0_lInit+0xbc>)
 80028c8:	2100      	movs	r1, #0
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <SPI_MASTER_0_lInit+0xc0>)
 80028cc:	f7fd fd98 	bl	8000400 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)6, &SPI_MASTER_0_SS_0_Config.port_config);
 80028d0:	4816      	ldr	r0, [pc, #88]	; (800292c <SPI_MASTER_0_lInit+0xc4>)
 80028d2:	2106      	movs	r1, #6
 80028d4:	4a16      	ldr	r2, [pc, #88]	; (8002930 <SPI_MASTER_0_lInit+0xc8>)
 80028d6:	f7fd fd93 	bl	8000400 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 80028da:	480d      	ldr	r0, [pc, #52]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 80028dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80028e0:	f7fe fc04 	bl	80010ec <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 80028e4:	480a      	ldr	r0, [pc, #40]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 80028e6:	2110      	movs	r1, #16
 80028e8:	2200      	movs	r2, #0
 80028ea:	f7fe fdd7 	bl	800149c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI1_CH0,
 80028ee:	4808      	ldr	r0, [pc, #32]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 80028f0:	2108      	movs	r1, #8
 80028f2:	2203      	movs	r2, #3
 80028f4:	2301      	movs	r3, #1
 80028f6:	f7fe fd7f 	bl	80013f8 <XMC_USIC_CH_TXFIFO_Configure>
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI1_CH0,
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <SPI_MASTER_0_lInit+0xa8>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	2203      	movs	r2, #3
 8002900:	2307      	movs	r3, #7
 8002902:	f7fe fda1 	bl	8001448 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               7U);
             
  return status;
 8002906:	79fb      	ldrb	r3, [r7, #7]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	48020000 	.word	0x48020000
 8002914:	1ffe8818 	.word	0x1ffe8818
 8002918:	48028100 	.word	0x48028100
 800291c:	1ffe8854 	.word	0x1ffe8854
 8002920:	1ffe8804 	.word	0x1ffe8804
 8002924:	48028400 	.word	0x48028400
 8002928:	08002c8c 	.word	0x08002c8c
 800292c:	48028000 	.word	0x48028000
 8002930:	08002ca8 	.word	0x08002ca8

08002934 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]

  return (status);
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <OSCHP_GetFrequency+0x10>)
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	00b71b00 	.word	0x00b71b00

08002968 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8002970:	4906      	ldr	r1, [pc, #24]	; (800298c <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4313      	orrs	r3, r2
 800297e:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	50004600 	.word	0x50004600

08002990 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <SystemCoreClockSetup+0x60>)
 8002998:	1d3c      	adds	r4, r7, #4
 800299a:	461d      	mov	r5, r3
 800299c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800299e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fe24 	bl	80005f4 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fd ff49 	bl	8000844 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 80029b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80029b6:	f7fd fefd 	bl	80007b4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 80029ba:	2006      	movs	r0, #6
 80029bc:	f7fd ffce 	bl	800095c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80029c0:	f7fe f85c 	bl	8000a7c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 80029c4:	2003      	movs	r0, #3
 80029c6:	2164      	movs	r1, #100	; 0x64
 80029c8:	f7fe f868 	bl	8000a9c <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff ffcb 	bl	8002968 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 80029d2:	2002      	movs	r0, #2
 80029d4:	f7fd fffe 	bl	80009d4 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fd feff 	bl	80007dc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fd ffe4 	bl	80009ac <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fd ffcd 	bl	8000984 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdb0      	pop	{r4, r5, r7, pc}
 80029f0:	08002d48 	.word	0x08002d48

080029f4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80029fe:	4809      	ldr	r0, [pc, #36]	; (8002a24 <DAVE_Init+0x30>)
 8002a00:	f7ff ff98 	bl	8002934 <CLOCK_XMC4_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d104      	bne.n	8002a18 <DAVE_Init+0x24>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 8002a0e:	4806      	ldr	r0, [pc, #24]	; (8002a28 <DAVE_Init+0x34>)
 8002a10:	f7fe ff26 	bl	8001860 <SPI_MASTER_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002a18:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	1ffe8868 	.word	0x1ffe8868
 8002a28:	1ffe8848 	.word	0x1ffe8848

08002a2c <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <SPI_MASTER_GetFlagStatus>:
 * @endcode<BR>
 *
 */

__STATIC_INLINE uint32_t SPI_MASTER_GetFlagStatus(const SPI_MASTER_t* handle, const uint32_t flag)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("SPI_MASTER_GetFlagStatus:handle NULL" , (handle != NULL));
  return (XMC_SPI_CH_GetStatusFlag(handle->channel) & flag);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ffda 	bl	8002a58 <XMC_SPI_CH_GetStatusFlag>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	4013      	ands	r3, r2
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <SPI_MASTER_ClearFlag>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE void SPI_MASTER_ClearFlag(const SPI_MASTER_t* handle, const uint32_t flag_mask)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    XMC_ASSERT("SPI_MASTER_ClearFlag:handle NULL" , (handle != NULL));
    XMC_SPI_CH_ClearStatusFlag(handle->channel, flag_mask);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	f7ff ffd3 	bl	8002a70 <XMC_SPI_CH_ClearStatusFlag>
}
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	3214      	adds	r2, #20
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	4608      	mov	r0, r1
 8002af0:	4619      	mov	r1, r3
 8002af2:	f7fe fafb 	bl	80010ec <XMC_SPI_CH_EnableSlaveSelect>
}
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b090      	sub	sp, #64	; 0x40
 8002b00:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  uint32_t baud_rate = 200U;
 8002b02:	23c8      	movs	r3, #200	; 0xc8
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8002b06:	f7ff ff75 	bl	80029f4 <DAVE_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t ReadData1[10];
  uint8_t SendData1[10] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA};
 8002b10:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <main+0x11c>)
 8002b12:	f107 0318 	add.w	r3, r7, #24
 8002b16:	6810      	ldr	r0, [r2, #0]
 8002b18:	6851      	ldr	r1, [r2, #4]
 8002b1a:	c303      	stmia	r3!, {r0, r1}
 8002b1c:	8912      	ldrh	r2, [r2, #8]
 8002b1e:	801a      	strh	r2, [r3, #0]
  uint8_t ReadData2[10];
  uint8_t SendData2[10] = {0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1};
 8002b20:	4a3e      	ldr	r2, [pc, #248]	; (8002c1c <main+0x120>)
 8002b22:	463b      	mov	r3, r7
 8002b24:	6810      	ldr	r0, [r2, #0]
 8002b26:	6851      	ldr	r1, [r2, #4]
 8002b28:	c303      	stmia	r3!, {r0, r1}
 8002b2a:	8912      	ldrh	r2, [r2, #8]
 8002b2c:	801a      	strh	r2, [r3, #0]
  uint32_t status1 = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t status2 = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
  if (status != DAVE_STATUS_SUCCESS)
 8002b36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d000      	beq.n	8002b40 <main+0x44>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8002b3e:	e7fe      	b.n	8002b3e <main+0x42>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
	SPI_MASTER_SetMode(&SPI_MASTER_0, XMC_SPI_CH_MODE_STANDARD);
 8002b40:	4837      	ldr	r0, [pc, #220]	; (8002c20 <main+0x124>)
 8002b42:	2100      	movs	r1, #0
 8002b44:	f7fe fe9c 	bl	8001880 <SPI_MASTER_SetMode>
	XMC_USIC_CH_SetFrameLength(XMC_SPI0_CH0,8);
 8002b48:	4836      	ldr	r0, [pc, #216]	; (8002c24 <main+0x128>)
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	f7ff ff6e 	bl	8002a2c <XMC_USIC_CH_SetFrameLength>
	SPI_MASTER_SetBaudRate(&SPI_MASTER_0, baud_rate);
 8002b50:	4833      	ldr	r0, [pc, #204]	; (8002c20 <main+0x124>)
 8002b52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b54:	f7fe fed0 	bl	80018f8 <SPI_MASTER_SetBaudRate>
  while(1U)
  {
	  /*******METHOD-1*******/
	  SPI_MASTER_Receive(&SPI_MASTER_0, ReadData1, 10U);
 8002b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5c:	4830      	ldr	r0, [pc, #192]	; (8002c20 <main+0x124>)
 8002b5e:	4619      	mov	r1, r3
 8002b60:	220a      	movs	r2, #10
 8002b62:	f7fe ff39 	bl	80019d8 <SPI_MASTER_Receive>
	  SPI_MASTER_Transmit(&SPI_MASTER_0, SendData1, 10U);
 8002b66:	f107 0318 	add.w	r3, r7, #24
 8002b6a:	482d      	ldr	r0, [pc, #180]	; (8002c20 <main+0x124>)
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	220a      	movs	r2, #10
 8002b70:	f7fe ff18 	bl	80019a4 <SPI_MASTER_Transmit>
	  while(SPI_MASTER_0.runtime->rx_busy);
 8002b74:	bf00      	nop
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <main+0x124>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	7fdb      	ldrb	r3, [r3, #31]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f9      	bne.n	8002b76 <main+0x7a>
	  while(SPI_MASTER_0.runtime->tx_busy);
 8002b82:	bf00      	nop
 8002b84:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <main+0x124>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f8      	bne.n	8002b84 <main+0x88>

	  /*******METHOD-2*******/

	  /* Clear the flags */
	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8002b92:	4823      	ldr	r0, [pc, #140]	; (8002c20 <main+0x124>)
 8002b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b98:	f7ff ff8c 	bl	8002ab4 <SPI_MASTER_ClearFlag>
	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8002b9c:	4820      	ldr	r0, [pc, #128]	; (8002c20 <main+0x124>)
 8002b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ba2:	f7ff ff87 	bl	8002ab4 <SPI_MASTER_ClearFlag>
	  /* Send Write Enable Command */
	  SPI_MASTER_Transfer(&SPI_MASTER_0, SendData2, ReadData2, 10);
 8002ba6:	463a      	mov	r2, r7
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	481c      	ldr	r0, [pc, #112]	; (8002c20 <main+0x124>)
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	f7ff f884 	bl	8001cc0 <SPI_MASTER_Transfer>
	  while(SPI_MASTER_0.runtime->rx_busy);
 8002bb8:	bf00      	nop
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <main+0x124>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	7fdb      	ldrb	r3, [r3, #31]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <main+0xbe>
	  while(SPI_MASTER_0.runtime->tx_busy);
 8002bc6:	bf00      	nop
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <main+0x124>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f8      	bne.n	8002bc8 <main+0xcc>
	  do
	  {
		  status1 = SPI_MASTER_GetFlagStatus(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8002bd6:	4812      	ldr	r0, [pc, #72]	; (8002c20 <main+0x124>)
 8002bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bdc:	f7ff ff58 	bl	8002a90 <SPI_MASTER_GetFlagStatus>
 8002be0:	6378      	str	r0, [r7, #52]	; 0x34
		  status2 = SPI_MASTER_GetFlagStatus(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8002be2:	480f      	ldr	r0, [pc, #60]	; (8002c20 <main+0x124>)
 8002be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002be8:	f7ff ff52 	bl	8002a90 <SPI_MASTER_GetFlagStatus>
 8002bec:	6338      	str	r0, [r7, #48]	; 0x30
	  } while(((status1 == 0) && (status2 == 0)));
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <main+0xfe>
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0ed      	beq.n	8002bd6 <main+0xda>
	  /* Clear the flags */
	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8002bfa:	4809      	ldr	r0, [pc, #36]	; (8002c20 <main+0x124>)
 8002bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c00:	f7ff ff58 	bl	8002ab4 <SPI_MASTER_ClearFlag>
	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8002c04:	4806      	ldr	r0, [pc, #24]	; (8002c20 <main+0x124>)
 8002c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c0a:	f7ff ff53 	bl	8002ab4 <SPI_MASTER_ClearFlag>
	  /* Enable the Slave Select Line */
	  SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
 8002c0e:	4804      	ldr	r0, [pc, #16]	; (8002c20 <main+0x124>)
 8002c10:	2100      	movs	r1, #0
 8002c12:	f7ff ff5d 	bl	8002ad0 <SPI_MASTER_EnableSlaveSelectSignal>
  }
 8002c16:	e79f      	b.n	8002b58 <main+0x5c>
 8002c18:	08002d5c 	.word	0x08002d5c
 8002c1c:	08002d68 	.word	0x08002d68
 8002c20:	1ffe8848 	.word	0x1ffe8848
 8002c24:	40030000 	.word	0x40030000

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <__libc_init_array+0x3c>)
 8002c2c:	4c0e      	ldr	r4, [pc, #56]	; (8002c68 <__libc_init_array+0x40>)
 8002c2e:	1ae4      	subs	r4, r4, r3
 8002c30:	10a4      	asrs	r4, r4, #2
 8002c32:	2500      	movs	r5, #0
 8002c34:	461e      	mov	r6, r3
 8002c36:	42a5      	cmp	r5, r4
 8002c38:	d004      	beq.n	8002c44 <__libc_init_array+0x1c>
 8002c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c3e:	4798      	blx	r3
 8002c40:	3501      	adds	r5, #1
 8002c42:	e7f8      	b.n	8002c36 <__libc_init_array+0xe>
 8002c44:	f7fe fca6 	bl	8001594 <_init>
 8002c48:	4c08      	ldr	r4, [pc, #32]	; (8002c6c <__libc_init_array+0x44>)
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <__libc_init_array+0x48>)
 8002c4c:	1ae4      	subs	r4, r4, r3
 8002c4e:	10a4      	asrs	r4, r4, #2
 8002c50:	2500      	movs	r5, #0
 8002c52:	461e      	mov	r6, r3
 8002c54:	42a5      	cmp	r5, r4
 8002c56:	d004      	beq.n	8002c62 <__libc_init_array+0x3a>
 8002c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c5c:	4798      	blx	r3
 8002c5e:	3501      	adds	r5, #1
 8002c60:	e7f8      	b.n	8002c54 <__libc_init_array+0x2c>
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	1ffe8854 	.word	0x1ffe8854
 8002c68:	1ffe8854 	.word	0x1ffe8854
 8002c6c:	1ffe8854 	.word	0x1ffe8854
 8002c70:	1ffe8854 	.word	0x1ffe8854

08002c74 <SPI_MASTER_0_MOSI>:
 8002c74:	48028100 0000000f                       ...H....

08002c7c <SPI_MASTER_0_MISO>:
 8002c7c:	48028100 0000000e                       ...H....

08002c84 <SPI_MASTER_0_SCLKOUT>:
 8002c84:	48028400 00000000                       ...H....

08002c8c <SPI_MASTER_0_SCLKOUT_Config>:
 8002c8c:	000000a0 00000001 00000001 00000000     ................
 8002c9c:	00000000                                ....

08002ca0 <SPI_MASTER_0_SS_0>:
 8002ca0:	48028000 00000006                       ...H....

08002ca8 <SPI_MASTER_0_SS_0_Config>:
 8002ca8:	00000090 00000001 00000001 00000000     ................
 8002cb8:	00010000                                ....

08002cbc <SPI_MASTER_0_Config>:
 8002cbc:	1ffe8818 08002869 08002c74 1ffe8804     ....i(..t,......
 8002ccc:	08002c7c 1ffe8854 00000000 00000000     |,..T...........
	...
 8002ce4:	08002c84 08002c8c 08002ca0 00000000     .,...,...,......
	...
 8002d0c:	08002ca8 00000000 00000000 00000000     .,..............
	...
 8002d38:	00000303 00000000 01000202 00000002     ................
 8002d48:	01010230 00010000 00000000 00010000     0...............
 8002d58:	01010102 04030201 08070605 00000a09     ................
 8002d68:	0708090a 03040506 00000102              ............
