   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_SetFrameLength,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_SetFrameLength:
  25              	.LFB206:
  26              	 .file 1 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  12:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  14:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  21:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  28:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  41:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  42:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  43:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  44:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  46:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  47:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  48:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  49:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  50:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  51:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  52:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  54:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  55:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  56:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  57:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  58:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  59:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  60:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  62:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  63:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  64:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  65:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  67:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  68:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  69:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  70:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  71:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  72:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  73:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  74:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  75:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  76:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  77:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  79:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  80:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  81:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  82:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  83:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  84:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  86:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  87:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  88:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  89:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  90:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  92:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  93:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  94:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-07-01:
  95:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Changed XMC_USIC_CH_SetBaudrateEx() input parameter types
  96:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-09-30:
  98:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_InvalidateReadData(), XMC_USIC_CH_EnableWordLengthControl() and XMC_USIC
  99:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-12-05:
 101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_PutDataEx()
 102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-04-30:
 104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_TXFIFO_SetTriggerLimit() and XMC_USIC_CH_RXFIFO_SetTriggerLimit()
 105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 2020-12-05:
 107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S to XMC_USIC_CH_BRG_CLOCK_SOURCE_t
 108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_BRG_CTQSEL_t
 109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateDivider()
 110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
 112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
 116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
 117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
 119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc1_usic_map.h"
 186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc4_usic_map.h"
 190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 235:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 236:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 237:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 238:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 239:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 240:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 241:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 242:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 243:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 244:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 245:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 246:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 247:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 248:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 249:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 250:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 251:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 252:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 253:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 254:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 255:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 256:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 257:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 258:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 259:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 260:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 261:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 262:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 263:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 264:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 265:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 266:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 267:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 268:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 269:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 270:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 271:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 272:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 273:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 274:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 275:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 276:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 277:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 278:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 279:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 280:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 281:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 282:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 283:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 284:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 285:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 286:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 287:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 288:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 289:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 290:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 291:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 292:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 293:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 294:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 295:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 296:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 297:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 298:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 299:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 300:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 301:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 303:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 304:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 305:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 306:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 307:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 308:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 309:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 310:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 311:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 312:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 313:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 314:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 315:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 316:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 317:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 320:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 321:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 322:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 323:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 324:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 325:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 326:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 327:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 328:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 329:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 330:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 332:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 333:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 334:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 335:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 336:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 337:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 338:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 339:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 340:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 341:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 342:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 343:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 344:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 345:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 346:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 347:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 348:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 349:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 350:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 351:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 352:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 353:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 354:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 355:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 356:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 357:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 358:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 359:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 360:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 361:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 362:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 363:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 364:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 365:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 366:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 367:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 368:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 369:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 370:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 371:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 372:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 373:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 374:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 375:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 376:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 377:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 378:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 379:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 380:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 381:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 382:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 383:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 384:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 385:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 386:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 387:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 388:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 389:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 390:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 393:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 395:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 397:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 398:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 399:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 400:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 401:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 402:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 403:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 404:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 405:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 406:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 407:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 408:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 409:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 410:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 411:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 412:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 413:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 414:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 415:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 416:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 417:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 418:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 419:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 420:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 421:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 422:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 423:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 424:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 425:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 426:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 427:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 428:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 431:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 433:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 435:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos,  /**< Baudrate generator 
 436:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1S    = 0x3UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 437:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 438:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 439:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 440:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel input selection for CTQ
 441:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 442:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CTQSEL
 443:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 444:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PDIV = 0x0UL, /**< fCTQIN = fPDIV */
 445:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_PPP  = 0x1UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fPPP */
 446:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_SCLK = 0x2UL << USIC_CH_BRG_CTQSEL_Pos,  /**< fCTQIN = fSCLK */
 447:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CTQSEL_MCLK = 0x3UL << USIC_CH_BRG_CTQSEL_Pos  /**< fCTQIN = fMCLK */
 448:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CTQSEL_t;
 449:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 450:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 451:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 452:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 453:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 454:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 455:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 456:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 457:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 458:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 459:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 460:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 462:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 463:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 464:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 465:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 466:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 467:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 468:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 469:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 471:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 472:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 473:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 474:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 475:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 476:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 477:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 478:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 479:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 480:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 481:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 482:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 483:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 484:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 485:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 487:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 488:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 489:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 490:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 491:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 492:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 493:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** */
 494:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 495:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 496:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 497:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 498:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 499:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 500:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 501:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 502:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 503:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 504:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 505:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 506:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 507:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma push
 508:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma anon_unions
 509:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 510:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning 586
 511:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 512:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 514:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 515:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 516:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 517:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 518:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 519:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file,
 520:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 521:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 522:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 523:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 524:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 525:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 526:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 527:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 528:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 529:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 530:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 531:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 532:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 533:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 534:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 535:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 536:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 537:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   union
 539:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   {
 540:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 541:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 542:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 543:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 544:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 545:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   };
 546:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 547:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 548:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   union
 550:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   {
 551:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 552:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 553:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 554:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 555:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 556:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   };
 557:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 558:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 559:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 560:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 561:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 562:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 563:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 564:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 565:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 566:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 567:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 568:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 569:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 570:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 571:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 572:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 573:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 574:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 575:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 576:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 577:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 578:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 579:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 581:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 582:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 583:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma pop
 584:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 585:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #pragma warning restore
 586:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 587:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 588:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 589:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 590:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 591:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 592:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 593:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 594:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 595:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 596:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 597:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 598:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 599:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 600:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 601:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 602:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 603:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 604:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 605:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 606:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 607:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 608:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 609:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 610:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 611:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 612:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 613:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 614:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 615:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 616:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)
 617:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 618:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 619:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)
 620:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 621:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 622:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 624:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 625:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 626:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 627:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 628:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 629:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 630:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 631:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 632:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 634:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 635:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 636:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 637:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 639:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 640:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 641:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 642:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 643:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 644:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 645:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 646:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 647:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 648:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 649:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 650:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 651:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 652:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 654:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 655:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 656:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 657:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 658:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 659:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 660:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 661:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 662:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 663:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 664:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 665:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 666:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 667:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 668:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 669:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 670:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 674:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 675:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 677:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 678:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 679:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 681:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 682:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 683:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 684:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 685:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 686:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 687:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 688:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 689:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 690:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 691:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 692:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 693:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 694:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 695:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 698:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 699:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 700:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 701:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 703:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 704:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 706:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 707:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 708:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 709:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 710:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 711:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 712:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 713:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 714:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 715:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 716:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 717:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 719:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 720:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 721:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 722:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 723:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 726:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 728:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 732:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clksel Baudrate generator clock source.
 733:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pppen Enable 2:1 Divider for fPPP.
 734:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Divider Factor to generate fPDIV = fPPP / (pDIV + 1)
 735:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  ctqsel Input selection for CTQ.
 736:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pctq Pre-Divider for Time Quanta Counter. fCTQIN / (PCQT + 1)
 737:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  dctq Denominator for Time Quanta Counter. fTQ / (DCTQ + 1)
 738:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 739:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 741:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate generator of the USIC channel.
 742:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFractionalDivider() \n\n\n
 745:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetBaudrateDivider(XMC_USIC_CH_t *const channel, 
 747:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CLOCK_SOURCE_t clksel,
 748:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     bool pppen,
 749:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pdiv,
 750:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     XMC_USIC_CH_BRG_CTQSEL_t ctqsel,
 751:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t pctq,
 752:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     uint32_t dctq);
 753:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 757:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 758:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 759:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 760:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 761:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 762:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 763:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 765:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 766:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 767:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 768:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 769:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 770:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 771:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 772:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 773:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 774:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 775:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 776:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 777:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 778:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 780:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 781:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 783:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 784:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 785:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 786:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 787:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 788:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 789:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 790:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 791:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png
 792:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png
 793:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 795:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 796:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 797:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 798:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 799:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 800:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 801:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 802:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 803:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 804:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 805:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 806:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 807:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 808:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 809:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 813:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 814:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 815:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 816:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 817:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 818:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 819:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t pdiv,
 820:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t oversampling,
 821:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 822:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 823:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 824:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 825:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 826:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 827:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 828:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 829:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 830:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 831:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 832:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 833:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 834:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 835:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 836:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 837:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc.
 838:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 839:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 841:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 842:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 843:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 844:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 845:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 846:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                                     ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 847:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 848:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 849:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 850:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 851:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 852:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 853:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 854:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 856:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 857:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 858:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 859:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 860:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 861:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 862:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 863:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 864:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_INSW_Msk;
 865:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 866:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 867:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 868:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 869:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 870:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 871:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 872:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 873:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 875:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 876:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 877:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 878:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 879:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 880:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 881:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 882:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 883:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 884:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 885:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 886:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 887:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 888:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 889:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 890:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 891:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 892:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 893:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 894:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 895:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 896:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 897:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 898:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 899:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 900:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 901:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 902:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 903:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 904:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 905:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 906:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 907:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 908:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 909:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 910:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 911:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 912:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 913:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 914:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 915:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 916:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 917:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 918:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 919:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 920:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 921:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 922:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 923:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 924:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 925:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 926:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 927:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 928:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 929:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 930:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 931:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 932:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 933:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 934:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 935:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 936:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 937:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 938:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 939:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 940:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 941:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 942:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 943:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 944:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 945:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 946:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 947:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 948:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 949:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 950:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 951:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 953:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 954:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 955:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 956:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 957:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &= (uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 958:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 959:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
 960:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 961:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 962:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 963:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 964:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 965:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 966:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 968:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 969:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 970:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 973:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 975:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 977:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 979:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 982:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 983:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 984:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 985:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 986:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 987:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 988:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 991:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 993:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
 994:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 995:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
 996:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
 997:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 998:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 999:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1000:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1001:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1002:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1003:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1004:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
1005:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
1006:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
1007:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1008:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
1010:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1011:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
1012:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1013:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DSEN_Msk;
1014:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1016:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1017:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1018:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1019:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1020:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
1024:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
1025:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1026:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1027:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
1028:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1029:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
1030:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1031:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &= (uint32_t)~USIC_CH_DXCR_DSEN_Msk;
1032:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1033:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1037:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1038:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
1039:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1040:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1041:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1042:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
1043:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1045:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1046:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1047:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
1048:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1049:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_freq)
1050:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1051:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
1052:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
1053:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1058:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
1059:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
1060:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1061:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1062:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1064:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1065:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1068:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1070:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_t input,
1071:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
1072:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1074:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1075:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1081:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1082:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1083:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1084:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1085:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1086:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1087:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1088:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1089:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1090:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1091:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1092:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1093:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1098:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1099:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint16_t data,
1132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****     const uint32_t transmit_control_information)
1133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value
1183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
1209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
1211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly.
1225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  *
1226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 1230 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
  45              	 .loc 1 1231 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e 5B6B     	 ldr r3,[r3,#52]
  48 0010 23F47C12 	 bic r2,r3,#4128768
1232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
  49              	 .loc 1 1232 0
  50 0014 FB78     	 ldrb r3,[r7,#3]
  51 0016 013B     	 subs r3,r3,#1
  52 0018 1B04     	 lsls r3,r3,#16
1231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
  53              	 .loc 1 1231 0
  54 001a 1A43     	 orrs r2,r2,r3
  55 001c 7B68     	 ldr r3,[r7,#4]
  56 001e 5A63     	 str r2,[r3,#52]
1233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_usic.h **** }
  57              	 .loc 1 1233 0
  58 0020 0C37     	 adds r7,r7,#12
  59              	.LCFI3:
  60              	 .cfi_def_cfa_offset 4
  61 0022 BD46     	 mov sp,r7
  62              	.LCFI4:
  63              	 .cfi_def_cfa_register 13
  64              	 
  65 0024 5DF8047B 	 ldr r7,[sp],#4
  66              	.LCFI5:
  67              	 .cfi_restore 7
  68              	 .cfi_def_cfa_offset 0
  69 0028 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE206:
  73 002a 00BF     	 .section .text.XMC_SPI_CH_GetStatusFlag,"ax",%progbits
  74              	 .align 2
  75              	 .thumb
  76              	 .thumb_func
  78              	XMC_SPI_CH_GetStatusFlag:
  79              	.LFB257:
  80              	 .file 2 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc_spi.h"
   1:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
   2:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @file xmc_spi.h
   3:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @date 2020-12-05
   4:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
   5:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @cond
   6:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
   9:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  12:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  14:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  21:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  28:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  36:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  41:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Change History
  42:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * --------------
  43:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  44:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Initial
  46:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  47:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-05-20:
  48:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Documentation improved <br>
  49:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and
  50:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  51:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  52:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  53:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-06-20:
  54:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  55:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  56:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-24:
  57:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  58:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  59:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  60:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-27:
  61:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  62:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  63:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-01:
  64:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  65:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  66:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  67:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  68:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-08:
  69:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  70:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  71:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-04-10:
  72:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  73:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  74:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-05-20:
  75:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_EnableDataTransmission() and XMC_SPI_CH_DisableDataTransmission()
  76:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  77:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2019-03-30:
  78:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Fix XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX macro value
  79:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  80:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2019-05-07:
  81:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added normal_divider_mode to XMC_SPI_CH_CONFIG_t configuration structure.
  82:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  83:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetBaudrateEx()
  84:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  85:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2019-09-04:
  86:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *    - Added XMC_SPI_CLOCK_MODE_t enum
  87:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  88:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 2020-12-05:
  89:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *    - Added XMC_SPI_CH_InitEx() that allows user select if automatic baudrate configuration shoul
  90:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  91:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @endcond
  92:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
  93:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
  94:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
  95:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #ifndef XMC_SPI_H
  96:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI_H
  97:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
  98:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
  99:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * HEADER FILES
 100:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 101:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #include "xmc_usic.h"
 102:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 103:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 104:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
 105:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
 106:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 107:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 108:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 109:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup SPI
 110:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
 111:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 112:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module.
 113:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
 114:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
 115:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
 116:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
 117:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
 118:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 119:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
 120:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * and also for data transaction.<br>
 121:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver features:
 122:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 123:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 124:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 125:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 126:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 127:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 128:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 129:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
 130:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 131:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 132:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 133:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * MACROS
 134:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 135:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 136:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC0)
 137:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 138:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 139:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 140:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 141:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC1)
 142:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 143:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 144:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 145:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 146:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC2)
 147:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 148:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 149:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 150:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 151:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 152:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * ENUMS
 153:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 154:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 155:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 156:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 157:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 158:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 159:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 160:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 161:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 162:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 163:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 164:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 165:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the SPI bus mode
 166:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 167:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 168:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 169:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 170:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 171:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 172:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 173:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 174:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 175:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 176:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 177:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 178:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 179:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                   (active high) */
 180:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 181:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   polarity to the M
 182:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   (active low)*/
 183:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 184:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 185:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 186:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 187:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 188:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 189:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 190:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 191:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 192:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 193:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 194:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 195:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines Slave Select lines
 196:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 197:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 198:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 199:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 200:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 201:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 202:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 203:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 204:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 205:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 206:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 207:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 208:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 209:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 210:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI specific events
 211:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 212:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 213:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 214:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 215:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 216:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 217:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 218:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 219:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 220:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 221:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 222:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 223:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 224:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 225:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 226:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 227:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 228:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI event status
 229:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 230:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 231:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 232:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 233:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             select(
 234:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 235:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input(D
 236:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 237:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             output 
 238:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 239:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input s
 240:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 241:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             parity 
 242:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 243:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 244:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 245:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 246:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 247:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 248:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 249:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 250:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 251:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             receive
 252:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 253:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             generat
 254:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 255:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 256:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 257:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 258:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 259:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 260:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 261:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 262:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 263:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 264:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 265:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 266:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 267:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 268:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Define data and clock input stages
 269:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 270:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 271:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 272:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */
 273:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 274:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 275:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 276:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 277:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 278:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 279:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 280:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 281:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Define SPI data transfer mode
 282:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 283:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 284:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 285:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */
 286:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 5UL, /**< SPI standard half duplex mode */
 287:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL = 6UL,                /**< SPI half duplex mode with dual data lines */
 288:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD = 7UL                 /**< SPI half duplex mode with quad data lines */
 289:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 290:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 291:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 292:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 293:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 294:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 295:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 296:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 297:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 298:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 299:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 300:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 301:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 302:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 303:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 304:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 305:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 306:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 307:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 308:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI clock modes
 309:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 310:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 311:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* CPOL=0 is a clock which idles at 0, and each cycle consists of a pulse of 1. That is, the leadin
 312:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* CPOL=1 is a clock which idles at 1, and each cycle consists of a pulse of 0. That is, the leadin
 313:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* CPHA=0, the "out" side changes the data on the trailing edge of the preceding clock cycle, while
 314:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****    The out side holds the data valid until the trailing edge of the current clock cycle. For the fi
 315:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /* For CPHA=1, the "out" side changes the data on the leading edge of the current clock cycle, whil
 316:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   The out side holds the data valid until the leading edge of the following clock cycle. For the la
 317:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CLOCK_MODE
 318:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 319:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_0_CPHA_0 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
 320:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_0_CPHA_1 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
 321:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_1_CPHA_0 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
 322:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CPOL_1_CPHA_1 = XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED
 323:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CLOCK_MODE_t;
 324:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 325:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 326:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 327:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** */
 328:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 329:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 330:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 331:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 332:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 333:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 334:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 335:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 336:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 337:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 338:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 339:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 340:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 341:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 342:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 343:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 344:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 345:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 346:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 347:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * DATA STRUCTURES
 348:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** ***************************************************************************************************
 349:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 350:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 351:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 352:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 353:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 354:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 355:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   uint32_t baudrate;							                /**< Module baud rate for communication */
 356:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   bool normal_divider_mode;                       /**< Selects normal divider mode for baudrate gen
 357:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 358:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 359:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                                                        MSLS signal  */
 360:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 361:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 362:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 363:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 364:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * API PROTOTYPES
 365:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 366:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 367:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #ifdef __cplusplus
 368:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** extern "C" {
 369:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 370:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 371:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 372:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 373:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 374:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 375:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param init_brg Selects if the baudrate generator should be configured automatically.
 376:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 377:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 378:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 379:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 380:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 381:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 382:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 383:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 384:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 385:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 386:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 387:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 388:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 389:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 390:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 391:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 392:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 393:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 394:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 395:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 396:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 397:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 398:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 399:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 400:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 401:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool 
 402:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 403:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 404:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 405:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 406:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 407:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 408:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 409:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 410:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 411:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 412:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 413:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 414:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 415:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 416:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 417:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 418:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 419:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 420:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 421:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 422:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 423:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 424:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 425:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 426:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 427:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 428:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 429:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 430:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 431:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 432:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const
 433:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 434:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_InitEx(channel, config, true);
 435:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 436:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 437:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 438:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 439:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 440:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 441:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 442:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 443:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 444:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 445:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 446:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 447:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 448:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 449:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 450:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 451:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 452:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 453:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 454:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 455:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 456:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 457:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 458:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 459:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 460:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 461:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 462:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 463:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 464:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 465:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 466:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * invoked to start the communication again.
 467:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 468:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 469:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 470:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 471:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 472:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 473:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 474:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 475:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 476:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 477:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 478:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 479:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 480:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 481:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 482:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 483:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 484:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 485:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop(), XMC_USIC_CH_GetSCLKFrequency()
 486:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 487:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 488:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 489:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 490:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 491:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 492:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 493:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 494:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 495:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 496:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 497:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 498:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 499:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 500:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 501:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 502:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop(), XMC_USIC_CH_GetSCLKFrequency()
 503:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 504:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, const uint32_t rate, boo
 505:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 506:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 507:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 508:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 509:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 510:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 511:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 512:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 513:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 514:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 515:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 516:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 517:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 518:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 519:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 520:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 521:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 522:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 523:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 524:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 525:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 526:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 527:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 528:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 529:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 530:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 531:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 532:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 533:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 534:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 535:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 536:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 537:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 538:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 539:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 540:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 541:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 542:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 543:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 544:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 545:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 546:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 547:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 548:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * mode to ensure the proper communication.
 549:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 550:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 551:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 552:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 553:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 554:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 555:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 556:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 557:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 558:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 559:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 560:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 561:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param data Data to be transmitted
 562:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 563:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 564:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 565:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 566:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 567:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 568:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 569:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 570:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 571:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 572:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 573:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 574:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 575:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 576:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 577:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 578:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 579:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 580:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 581:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 582:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 583:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 584:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 585:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 586:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 587:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 588:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 589:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 590:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 591:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 592:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 593:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 594:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 595:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 596:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 597:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   /* Transmit dummy data */
 598:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 599:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 600:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 601:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 602:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 603:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 604:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 605:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 606:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 607:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 608:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 609:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 610:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 611:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 612:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 613:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 614:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 615:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 616:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 617:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 618:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 619:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 620:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 621:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 622:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 623:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 624:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * the program.
 625:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 626:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 627:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 628:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 629:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 630:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 631:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 632:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 633:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 634:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 635:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 636:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 637:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 638:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 639:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 640:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 641:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init().
 642:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 643:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 644:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 645:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 646:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 647:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 648:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 649:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 650:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 651:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 652:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 653:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 654:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 655:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 656:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 657:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 658:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 659:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 660:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 661:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 662:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent().
 663:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 664:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 665:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 667:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 668:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 669:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 670:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 671:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 672:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 673:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 674:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 675:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 676:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 677:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 678:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 679:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 680:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 681:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 682:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 683:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 684:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 685:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 686:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 687:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 688:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 689:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 690:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 691:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 692:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 693:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 694:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication.
 695:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 696:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 697:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 698:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 699:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 700:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
  81              	 .loc 2 700 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	 
  86 0000 80B4     	 push {r7}
  87              	.LCFI6:
  88              	 .cfi_def_cfa_offset 4
  89              	 .cfi_offset 7,-4
  90 0002 83B0     	 sub sp,sp,#12
  91              	.LCFI7:
  92              	 .cfi_def_cfa_offset 16
  93 0004 00AF     	 add r7,sp,#0
  94              	.LCFI8:
  95              	 .cfi_def_cfa_register 7
  96 0006 7860     	 str r0,[r7,#4]
 701:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   return channel->PSR_SSCMode;
  97              	 .loc 2 701 0
  98 0008 7B68     	 ldr r3,[r7,#4]
  99 000a 9B6C     	 ldr r3,[r3,#72]
 702:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 100              	 .loc 2 702 0
 101 000c 1846     	 mov r0,r3
 102 000e 0C37     	 adds r7,r7,#12
 103              	.LCFI9:
 104              	 .cfi_def_cfa_offset 4
 105 0010 BD46     	 mov sp,r7
 106              	.LCFI10:
 107              	 .cfi_def_cfa_register 13
 108              	 
 109 0012 5DF8047B 	 ldr r7,[sp],#4
 110              	.LCFI11:
 111              	 .cfi_restore 7
 112              	 .cfi_def_cfa_offset 0
 113 0016 7047     	 bx lr
 114              	 .cfi_endproc
 115              	.LFE257:
 117              	 .section .text.XMC_SPI_CH_ClearStatusFlag,"ax",%progbits
 118              	 .align 2
 119              	 .thumb
 120              	 .thumb_func
 122              	XMC_SPI_CH_ClearStatusFlag:
 123              	.LFB258:
 703:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** 
 704:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** /**
 705:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 706:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 707:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 708:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 709:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 710:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 711:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 712:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 713:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 714:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 715:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 716:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  *
 717:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 718:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 719:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****  */
 720:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 721:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** {
 124              	 .loc 2 721 0
 125              	 .cfi_startproc
 126              	 
 127              	 
 128              	 
 129 0000 80B4     	 push {r7}
 130              	.LCFI12:
 131              	 .cfi_def_cfa_offset 4
 132              	 .cfi_offset 7,-4
 133 0002 83B0     	 sub sp,sp,#12
 134              	.LCFI13:
 135              	 .cfi_def_cfa_offset 16
 136 0004 00AF     	 add r7,sp,#0
 137              	.LCFI14:
 138              	 .cfi_def_cfa_register 7
 139 0006 7860     	 str r0,[r7,#4]
 140 0008 3960     	 str r1,[r7]
 722:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PSCR |= flag;
 141              	 .loc 2 722 0
 142 000a 7B68     	 ldr r3,[r7,#4]
 143 000c DA6C     	 ldr r2,[r3,#76]
 144 000e 3B68     	 ldr r3,[r7]
 145 0010 1A43     	 orrs r2,r2,r3
 146 0012 7B68     	 ldr r3,[r7,#4]
 147 0014 DA64     	 str r2,[r3,#76]
 723:C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc\xmc_spi.h **** }
 148              	 .loc 2 723 0
 149 0016 0C37     	 adds r7,r7,#12
 150              	.LCFI15:
 151              	 .cfi_def_cfa_offset 4
 152 0018 BD46     	 mov sp,r7
 153              	.LCFI16:
 154              	 .cfi_def_cfa_register 13
 155              	 
 156 001a 5DF8047B 	 ldr r7,[sp],#4
 157              	.LCFI17:
 158              	 .cfi_restore 7
 159              	 .cfi_def_cfa_offset 0
 160 001e 7047     	 bx lr
 161              	 .cfi_endproc
 162              	.LFE258:
 164              	 .section .text.SPI_MASTER_GetFlagStatus,"ax",%progbits
 165              	 .align 2
 166              	 .thumb
 167              	 .thumb_func
 169              	SPI_MASTER_GetFlagStatus:
 170              	.LFB290:
 171              	 .file 3 "C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER/spi_master.h"
   1:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
   2:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @file spi_master.h
   3:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @date 2016-06-20
   4:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
   5:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * NOTE:
   6:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
   8:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @cond
   9:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  **************************************************************************************************
  10:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * SPI_MASTER v4.3.30 - Configures the properties of USIC channel to support SPI mode of communicat
  11:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  12:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * All rights reserved.
  14:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  15:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * following conditions are met:
  17:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  18:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   disclaimer.
  20:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  21:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  24:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   products derived from this software without specific prior written permission.
  26:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  27:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  35:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  **************************************************************************************************
  38:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  39:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Change History
  40:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * --------------
  41:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  42:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-02-16:
  43:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - Initial version<br>
  44:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  45:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-02-20:
  46:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - Added 'SPI_MASTER_INPUT_INVALID' in SPI_MASTER_INPUT_t to support dynamic mode change from
  47:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       as well<br>
  48:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  49:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-05-08:
  50:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - SPI_MASTER_SetBaudRate() and SPI_MASTER_Transfer() are added<br>
  51:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - C++ guard applied to API section only<br>
  52:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - File guard updated according to the guidelines<br>
  53:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - "SPI_MASTER_STATUS_BUFFER_INVALID" is added in SPI_MASTER_STATUS_t enum<br>
  54:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - "leading_trailing_delay" is added in APP config structure<br>
  55:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - "tx_data_dummy" is added in Dynamic config structure to support SPI_MASTER_Transfer() API<
  56:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - XMC_ASSERT() are for NULL handle check in inline APIs<br>
  57:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - SPI_MASTER_lTransmitHandler(), SPI_MASTER_lReceiveHandler(), SPI_MASTER_lProtocolHandler()
  58:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       spi_master_conf.c file<br>
  59:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  60:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-06-20:
  61:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - For SPI_MASTER_Transfer(), SPI_MASTER_Receive(), SPI_MASTER_Transmit() APIs, the input dat
  62:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       from 16-bit to 8-bit.
  63:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - word_length fields is added in SPI_MASTER_DYNAMIC_CONFIG_t, to support runtime change.
  64:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - Abort API are updated to return the status.
  65:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  66:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-07-07:
  67:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - DYNAMIC_CONFIG_t is renamed as RUNTIME_t
  68:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  69:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-09-30:
  70:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - New SPI_MASTER_STATUS_MODE_MISMATCH item is added in SPI_MASTER_STATUS_t
  71:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  72:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-10-08:
  73:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - SPI_MASTER_DMA_MAXCOUNT is exposed to the user.
  74:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - dx0_input_half_duplex is added to support while changing the mode to half duplex mode.
  75:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - SPI_MASTER_IsTxBusy() and SPI_MASTER_IsRxBusy() APIs are added to return the current state
  76:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - Documentation update.
  77:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  78:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2015-10-14:
  79:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - new variable "spi_master_config_mode" to store the actual mode generated during initialisa
  80:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  81:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2016-04-07:
  82:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - runtime variable are made as volatile.
  83:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  84:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 2021-01-08:
  85:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     - Modified check for minimum XMCLib version
  86:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  87:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcond
  88:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
  89:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
  90:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
  91:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #ifndef SPI_MASTER_H
  92:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #define SPI_MASTER_H
  93:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**************************************************************************************************
  94:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * HEADER FILES
  95:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  **************************************************************************************************
  96:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #include "xmc_gpio.h"
  97:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #include "xmc_scu.h"
  98:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #include "xmc_spi.h"
  99:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #include "DAVE_Common.h"
 100:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #include "spi_master_conf.h"
 101:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 102:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if((SPI_MASTER_DMA_TRANSMIT_MODE == 1U) || (SPI_MASTER_DMA_RECEIVE_MODE == 1U))
 103:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #include "GLOBAL_DMA/global_dma.h"
 104:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 105:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 106:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**************************************************************************************************
 107:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * MACROS
 108:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  **************************************************************************************************
 109:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #define SPI_MASTER_XMC_LIB_MAJOR_VERSION 2
 110:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #define SPI_MASTER_XMC_LIB_MINOR_VERSION 1
 111:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #define SPI_MASTER_XMC_LIB_PATCH_VERSION 6
 112:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 113:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if !((XMC_LIB_MAJOR_VERSION > SPI_MASTER_XMC_LIB_MAJOR_VERSION) ||\
 114:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****       ((XMC_LIB_MAJOR_VERSION == SPI_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > SPI_
 115:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****       ((XMC_LIB_MAJOR_VERSION == SPI_MASTER_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == SPI
 116:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #error "SPI_MASTER requires XMC Peripheral Library v2.1.6 or higher"
 117:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 118:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 119:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /*
 120:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Represents the maximum data size for DMA transaction*/
 121:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #define SPI_MASTER_DMA_MAXCOUNT (4095U)
 122:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**************************************************************************************************
 123:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * ENUMS
 124:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  **************************************************************************************************
 125:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 126:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @ingroup SPI_MASTER_enumerations
 127:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @{
 128:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 129:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 130:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Return status of the SPI_MASTER APP
 131:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 132:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef enum SPI_MASTER_STATUS
 133:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 134:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_STATUS_SUCCESS = 0U,   /**< Status success */
 135:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_STATUS_FAILURE,        /**< Status failure */
 136:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_STATUS_BUSY,           /**< Busy state */
 137:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_STATUS_BUFFER_INVALID,  /**< If input buffer and length is invalid */
 138:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 139:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                          e.g, If SPI_MASTER_StartTransmitDMA is invoked for an inst
 140:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                          which has transmit mode configured as "Interrupt", will
 141:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                          return this status.*/
 142:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_STATUS_t;
 143:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 144:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 145:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Service ID for Transmit, Receive and Parity events
 146:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 147:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef enum SPI_MASTER_SR_ID
 148:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 149:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_0 = 0U, /**< SR-0 */
 150:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_1,      /**< SR-1 */
 151:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_2,      /**< SR-2 */
 152:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_3,      /**< SR-3 */
 153:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_4,      /**< SR-4 */
 154:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_5       /**< SR-5 */
 155:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_SR_ID_t;
 156:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 157:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 158:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Slave select signals
 159:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 160:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef enum SPI_MASTER_SS_SIGNAL
 161:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 162:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_0 = 0U, /**< Slave select 0 */
 163:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_1,      /**< Slave select 1 */
 164:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_2,      /**< Slave select 2 */
 165:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_3,      /**< Slave select 3 */
 166:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_4,      /**< Slave select 4 */
 167:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_5,      /**< Slave select 5 */
 168:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_6,      /**< Slave select 6 */
 169:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SS_SIGNAL_7       /**< Slave select 7 */
 170:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_SS_SIGNAL_t;
 171:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 172:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 173:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Enum type which defines Receive input list
 174:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 175:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef enum SPI_MASTER_INPUT
 176:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 177:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_A = 0U, /**< Input-A */
 178:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_B,      /**< Input-B */
 179:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_C,      /**< Input-C */
 180:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_D,      /**< Input-D */
 181:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_E,      /**< Input-E */
 182:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_F,      /**< Input-F */
 183:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_G,      /**< Input-G */
 184:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_INVALID /**< This is to check during mode switch */
 185:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_INPUT_t;
 186:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 187:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 188:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 189:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 190:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef enum SPI_MASTER_TRANSFER_MODE
 191:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 192:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 193:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 194:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 195:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_TRANSFER_MODE_t;
 196:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 197:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @}
 198:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 199:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 200:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef void (*SPI_MASTER_functionhandler)(void);
 201:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef SPI_MASTER_STATUS_t (*SPI_MASTER_lInit_functionhandler)(void);
 202:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 203:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**************************************************************************************************
 204:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** * DATA STRUCTURES
 205:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** ***************************************************************************************************
 206:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 207:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** * @ingroup SPI_MASTER_datastructures
 208:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** * @{
 209:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** */
 210:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 211:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 212:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Port pin selection for communication
 213:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 214:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef struct SPI_MASTER_GPIO
 215:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 216:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_GPIO_PORT_t* port;  /**< Reference to the port configuration */
 217:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint8_t pin;  /**< Selected pin */
 218:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_GPIO_t;
 219:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 220:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 221:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Pin configuration for the selected pins
 222:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 223:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef struct SPI_MASTER_GPIO_CONFIG
 224:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 225:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_GPIO_CONFIG_t port_config;  /**< Properties of the port pin */
 226:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_GPIO_HWCTRL_t hw_control;  /**<  hardware control characteristics of the pin */
 227:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_SPI_CH_SLAVE_SELECT_t slave_select_ch;  /**<  Indicates the mapped slave select line  */
 228:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_GPIO_CONFIG_t;
 229:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 230:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 231:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Configuration parameters of SPI_MASTER APP
 232:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 233:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  typedef struct SPI_MASTER_CONFIG
 234:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 235:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_SPI_CH_CONFIG_t * const channel_config;         /**< Reference to SPI configuration structure
 236:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_lInit_functionhandler fptr_spi_master_config;  /**< Function pointer to configure the 
 237:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 238:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   /* Port configuration */
 239:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_t* const mosi_0_pin;               /**< Reference to mosi 0 pin */
 240:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_CONFIG_t* const mosi_0_pin_config; /**< Reference to mosi 0 pin configurati
 241:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_t* const mosi_1_pin;               /**< Reference to mosi 1 pin */
 242:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_CONFIG_t* const mosi_1_pin_config; /**< Reference to mosi 1 pin configurati
 243:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_t* const mosi_2_pin;               /**< Reference to mosi 2 pin */
 244:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_CONFIG_t* const mosi_2_pin_config; /**< Reference to mosi 2 pin configurati
 245:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_t* const mosi_3_pin;               /**< Reference to mosi 3 pin */
 246:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_CONFIG_t* const mosi_3_pin_config; /**< Reference to mosi 3 pin configurati
 247:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_t* const sclk_out_pin;             /**< Reference to sclk out pin */
 248:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_CONFIG_t* const sclk_out_pin_config;/**< Reference to shift clock pin confi
 249:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_t* const slave_select_pin[8];      /**< Reference to slave select pin */
 250:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_GPIO_CONFIG_t* const slave_select_pin_config[8]; /**< Reference to slave select 
 251:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_functionhandler tx_cbhandler;            /**< callback handler for end of transmission
 252:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_functionhandler rx_cbhandler;            /**< callback handler for end of reception */
 253:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_functionhandler parity_cbhandler;        /**< callback handler for end of parity error
 254:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   /* FIFO configuration */
 255:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;               /**< Number of FIFO entries assigned to the t
 256:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;               /**< Number of FIFO entries assigned to the r
 257:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 258:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   /* Clock Settings */
 259:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t shift_clk_passive_level; /**< Baudrate Generator shift
 260:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_TRANSFER_MODE_t transmit_mode;           /**< Indicates how the transmit mode is being
 261:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_TRANSFER_MODE_t receive_mode;            /**< Indicates how the receive mode is being 
 262:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_SPI_CH_MODE_t  spi_master_config_mode;          /**< Defines the SPI transmit mode being used
 263:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint8_t slave_select_lines;                         /**< Number of slave select lines being used 
 264:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint8_t leading_trailing_delay;                     /**< Delay before and after each frame in ter
 265:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_t tx_sr;                           /**< Service request number assigned to trans
 266:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_t rx_sr;                           /**< Service request number assigned to recei
 267:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_SR_ID_t parity_sr;                       /**< Service request number assigned to recei
 268:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_CONFIG_t;
 269:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 270:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 271:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Structure to hold the dynamic variables for the SPI_MASTER communication.
 272:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 273:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef struct SPI_MASTER_RUNTIME
 274:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 275:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint32_t word_length;                              /**< Indicates the length of the data word */
 276:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint32_t tx_data_count;                            /**< Number of bytes of data to be transmitted
 277:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile uint32_t tx_data_index;                   /**< Index to the byte to be transmitted next 
 278:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                           buffer */
 279:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint32_t rx_data_count;                            /**< Number of bytes of data to be received*/
 280:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile uint32_t rx_data_index;                   /**< Indicates the number of bytes currently a
 281:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                           rx_data buffer */
 282:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint8_t* rx_data;                                  /**< Pointer to the receive data buffer*/
 283:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   uint8_t* tx_data;                                  /**< Pointer to the transmit data buffer*/
 284:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile XMC_SPI_CH_MODE_t  spi_master_mode;       /**< Defines the SPI transmit mode being used 
 285:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_t dx0_input;                      /**< DX0 input channel used for Rx input, This
 286:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                           mode is changed to full duplex mode */
 287:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_INPUT_t dx0_input_half_duplex;          /**< DX0 input channel used for Rx input, This
 288:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                           mode is changed to half duplex mode */
 289:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile bool  rx_busy;                            /**< Status flag to indicate busy when a recep
 290:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile bool  tx_busy;                            /**< Status flag to indicate busy when a trans
 291:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile bool  tx_data_dummy;                      /**< Status flag to indicate, dummy data is be
 292:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   volatile bool  rx_data_dummy;                      /**< Status flag to indicate, receive data has
 293:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                           not */
 294:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  } SPI_MASTER_RUNTIME_t;
 295:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 296:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 297:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 298:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Initialization parameters of SPI_MASTER APP
 299:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 300:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** typedef struct SPI_MASTER
 301:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 302:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_USIC_CH_t* const channel; /**< Reference to SPI channel */
 303:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const SPI_MASTER_CONFIG_t * const config; /**< Reference to the SPI_MASTER configuration structur
 304:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   SPI_MASTER_RUNTIME_t * const runtime;  /**< Reference to SPI_MASTER dynamic configuration structu
 305:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if ((SPI_MASTER_DMA_TRANSMIT_MODE == 1U) || (SPI_MASTER_DMA_RECEIVE_MODE == 1U))
 306:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const GLOBAL_DMA_t * const global_dma;
 307:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 308:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
 309:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const XMC_DMA_CH_CONFIG_t * const dma_ch_tx_config; /**< Reference to the DMA configuration struc
 310:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 311:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 312:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const XMC_DMA_CH_CONFIG_t * const dma_ch_rx_config; /**< Reference to the DMA configuration struc
 313:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const GLOBAL_DMA_t * const global_dma_rx;
 314:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const uint8_t dma_ch_rx_number;
 315:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 316:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
 317:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   const uint8_t dma_ch_tx_number;
 318:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 319:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** } SPI_MASTER_t;
 320:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 321:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 322:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @}
 323:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 324:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**************************************************************************************************
 325:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** * API Prototypes
 326:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** ***************************************************************************************************
 327:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #ifdef __cplusplus
 328:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** extern "C" {
 329:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 330:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 331:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @ingroup SPI_MASTER_apidoc
 332:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @{
 333:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 334:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 335:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Get SPI_MASTER APP version
 336:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 337:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 338:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 339:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * The function can be used to check application software compatibility with a
 340:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * specific version of the APP.
 341:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 342:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 343:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 344:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 345:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 346:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 347:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 348:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_APP_VERSION_t app_version;
 349:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 350:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 351:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 352:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   app_version = SPI_MASTER_GetAppVersion();
 353:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 354:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if (app_version.major != 4U)
 355:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 356:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     // Probably, not the right version.
 357:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 358:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 359:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   while(1U)
 360:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 361:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 362:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   return 1;
 363:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 364:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
 365:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 366:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** DAVE_APP_VERSION_t SPI_MASTER_GetAppVersion(void);
 367:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 368:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 369:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Initialize the SPI channel as per the configuration made in GUI.
 370:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 371:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return SPI_MASTER_STATUS_t: Status of SPI_MASTER driver initialization.\n
 372:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                    SPI_MASTER_STATUS_SUCCESS - on successful initialization.\n
 373:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                    SPI_MASTER_STATUS_FAILURE - if initialization fails.\n
 374:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 375:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 376:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Initializes IO pins used for the SPI_MASTER communication and configures USIC registers based on
 377:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * provided in the GUI. Calculates divider values PDIV and STEP for a precise baudrate. It also ena
 378:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * interrupt flags and service request values.
 379:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 380:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 381:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 382:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 383:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 384:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 385:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  int main(void)
 386:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  {
 387:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    DAVE_STATUS_t status;
 388:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 389:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 390:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 391:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    if(status == DAVE_STATUS_SUCCESS)
 392:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 393:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *        while(1U)
 394:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *        {
 395:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *        }
 396:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 397:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    else
 398:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 399:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     XMC_DEBUG("main: Application initialization failed");
 400:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     while(1U)
 401:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 402:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 403:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 404:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     return 1U;
 405:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 406:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  @endcode
 407:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 408:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle);
 409:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 410:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 411:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Set the communication mode along with required port configuration.
 412:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 413:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle handle Pointer to static and dynamic content of APP configuration.
 414:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param mode SPI working mode
 415:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 416:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 417:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS  : if updation of settings are successful\n
 418:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_FAILURE  : if mode is not supported by the selected pins\n
 419:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUSY     : if SPI channel is busy with transmit or receive operation\
 420:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 421:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 422:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 423:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * To change the mode of communication, it is advised to generate the code in Quad/Dual mode initia
 424:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the mode will be taken care by the APP.
 425:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <ul>
 426:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <li>If code is generated for Quad mode, it is possible to change to other modes like Dual, Half 
 427:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <li>If code is generated for Dual mode, it is possible to change to other modes like Half Duplex
 428:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <li>If code is generated for full-duplex mode, it is possible to change to Half Duplex only </li
 429:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * </ul>
 430:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * 
 431:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 432:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 433:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 434:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 435:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 436:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 437:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 438:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //Precondition:
 439:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //Configure the SPI_MASTER APP operation mode as 'Quad SPI'.
 440:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //Description:
 441:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //The following code changes the SPI master device mode to Full duplex mode and starts sending 
 442:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //the buffer.
 443:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 444:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 445:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 446:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 447:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 448:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   SPI_MASTER_STATUS_t spi_status;
 449:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon DAVE application.";
 450:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 451:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 452:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 453:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 454:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    spi_status = SPI_MASTER_SetMode(&SPI_MASTER_0, XMC_SPI_CH_MODE_STANDARD);
 455:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    if(spi_status == SPI_MASTER_STATUS_SUCCESS)
 456:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 457:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data));
 458:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 459:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 460:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 461:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 462:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
 463:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
 464:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 465:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 466:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 467:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 468:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 469:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
 470:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 471:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 472:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_SetMode(SPI_MASTER_t* const handle, const XMC_SPI_CH_MODE_t mode);
 473:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 474:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 475:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Set the required baud rate during runtime.
 476:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 477:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle handle Pointer to static and dynamic content of APP configuration.
 478:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param baud_rate required baud rate
 479:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 480:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 481:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS  : if updation of baud rate is successful\n
 482:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_FAILURE  : if updation is failed\n
 483:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUSY     : if SPI channel is busy with other operation\n
 484:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 485:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 486:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 487:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * While setting the baud rate to avoid noise of the port pins, all the pins are changed to input. 
 488:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * required baud again ports are initialised with the configured settings.
 489:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 490:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 491:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 492:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 493:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 494:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 495:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 496:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //Description:
 497:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //The following code changes the SPI master baud rate to 9600 and starts sending the data store
 498:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  //the buffer.
 499:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 500:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 501:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 502:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 503:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   SPI_MASTER_STATUS_t spi_status;
 504:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon DAVE application.";
 505:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint32_t baud_rate;
 506:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 507:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 508:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 509:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 510:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     baud_rate = 9600U;
 511:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 512:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     spi_status = SPI_MASTER_SetBaudRate(&SPI_MASTER_0, baud_rate);
 513:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 514:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(spi_status == SPI_MASTER_STATUS_SUCCESS)
 515:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 516:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data));
 517:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 518:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 519:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 520:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 521:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
 522:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
 523:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 524:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 525:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 526:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 527:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 528:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
 529:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 530:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_SetBaudRate(SPI_MASTER_t* const handle, const uint32_t baud_rate);
 531:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 532:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 533:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Transmits the specified number of data words and execute the callback defined in GUI, if 
 534:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 535:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 536:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param dataptr Pointer to data
 537:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param count number of data words (word length configured) to be transmitted
 538:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 539:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 540:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS : if transmit is successful\n
 541:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUSY : if SPI channel is busy with other operation
 542:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 543:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 544:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 545:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** * Transmits data using the SPI channel as a master device. Transmission is accomplished using the t
 546:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * as configured in the UI.<br>
 547:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <b>Interrupt:</b><br>
 548:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 549:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 550:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 551:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 552:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 553:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * and status of transmission. This function only registers a data transmission request if
 554:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 555:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 556:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 557:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 558:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 559:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 560:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 561:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 562:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 563:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 564:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the completion of data transmission or use SPI_MASTER_IsTxBusy() API.<br>
 565:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <b>DMA:</b><br>
 566:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * DMA mode is available only in XMC4x family of microcontrollers. A DMA channel is configured to p
 567:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * data to the SPI channel transmit buffer. This removes the load off the CPU. This API will only c
 568:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * and enable the DMA channel by specifying the data buffer and count of bytes to transmit. Rest is
 569:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * care without the CPU's intervention. User can configure a callback function in the APP UI. When 
 570:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * transmission is complete, the callback function will be executed. FIFO will not be used in DMA m
 571:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Receive start interrupt is configured for triggering the DMA channel. So each byte is transmitte
 572:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the background through the DMA channel.
 573:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 574:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * verify if the transmission is complete.
 575:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <b>Direct:</b><br>
 576:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 577:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 578:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 579:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 580:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 581:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 582:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 583:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 584:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
 585:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Transmits "Infineon" to the slave device.
 586:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 587:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 588:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 589:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 590:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 591:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 592:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon";
 593:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 594:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 595:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 596:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 597:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data)) == SPI_MASTER_STATUS_SUC
 598:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 599:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       while(SPI_MASTER_0.runtime->tx_busy)
 600:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
 601:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
 602:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 603:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 604:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 605:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 606:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
 607:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
 608:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 609:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 610:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 611:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 612:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 613:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR> </p>
 614:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 615:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 616:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_
 617:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 618:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 619:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Receives the specified number of data words and execute the callback defined in GUI, if e
 620:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 621:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 622:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param dataptr Pointer to data in which value is written
 623:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param count number of data words (word length configured) to be read
 624:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 625:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 626:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS : if read is successful\n
 627:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUSY : if SPI channel is busy with other operation
 628:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 629:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 630:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Data will be received from the SPI slave synchronously. After the requested number of data bytes
 631:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * optionally, the user configured callback function will be executed.
 632:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 633:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <b>Interrupt:</b><br>
 634:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 635:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 636:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 637:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 638:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 639:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * after calling the API, will be placed in the user buffer.
 640:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * When all the requested number of data bytes are received, the configured callback
 641:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function will be executed.
 642:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If a callback function is not configured, the user has to poll for the value of the
 643:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 644:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * requested number of data bytes are received.
 645:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <br>
 646:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <b>DMA:</b><br>
 647:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 648:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 649:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 650:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * enabled. Receive FIFO will not be used when the receive mode is DMA.
 651:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 652:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * after calling the API, will be placed in the user buffer.
 653:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * When all the requested number of data bytes are received, the configured callback
 654:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function will be executed.
 655:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If a callback function is not configured, the user has to poll for the value of the
 656:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 657:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * requested number of data bytes are received.
 658:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <br>
 659:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <b>Direct</b><br>
 660:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 661:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 662:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 663:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 664:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * after calling the API, will be placed in the user buffer.
 665:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 666:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 667:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 668:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 669:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 670:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 671:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 672:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 673:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
 674:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Receives 10 bytes of data from slave.
 675:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 676:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 677:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 678:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 679:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t ReadData[10];
 680:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 681:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status =  DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 682:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 683:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 684:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 10U))
 685:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 686:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       while(SPI_MASTER_0.runtime->rx_busy)
 687:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
 688:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
 689:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 690:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 691:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 692:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 693:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
 694:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
 695:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 696:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 697:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 698:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 699:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 700:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
 701:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 702:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t
 703:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 704:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 705:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Transmits and Receives the specified number of data words and execute the receive callbac
 706:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *        in GUI.
 707:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 708:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 709:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param tx_dataptr Pointer to data buffer which has to be send
 710:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param rx_dataptr Pointer to data buffer where the received data has to be stored.
 711:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param count number of data words (word length configured) to be read and write
 712:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 713:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 714:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS   : if transfer of data is successful\n
 715:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_FAILURE   : if transfer of data is failed (or) in other than standard
 716:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUFFER_INVALID : if passed buffers are NULL pointers (or) length of d
 717:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 718:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 719:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Transmits and receives data simultaneously using the SPI channel as a master device. API is appl
 720:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <i>Full duplex</> operation mode. Data transfer happens based on the individual modes configured
 721:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * reception.<br>
 722:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Two data pins MOSI and MISO will be used for receiving and transmitting data respectively. A cal
 723:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * configured to execute after completing the transfer when 'Interrupt' or 'DMA' mode is used. The 
 724:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * should be configured for <i>End of receive/transfer callback</i> in the 'Interrupt Settings' tab
 725:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function will be executed when the last word of data is received.
 726:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 727:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 728:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 729:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 730:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 731:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 732:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 733:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 734:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Precondition: Operation mode should be 'Full Duplex"
 735:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
 736:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Transmits and Receives 10 bytes of data from slave in parallel.
 737:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 738:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 739:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 740:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 741:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t ReadData[10];
 742:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t SendData[10] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA};
 743:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 744:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status =  DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 745:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 746:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 747:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 748:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_Transfer(&SPI_MASTER_0, SendData, ReadData, 10);
 749:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 750:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 751:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 752:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     XMC_DEBUG("main: Application initialization failed");
 753:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     while(1U)
 754:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 755:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 756:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 757:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 758:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 759:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
 760:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 761:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
 762:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                         uint8_t* tx_dataptr,
 763:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                         uint8_t* rx_dataptr,
 764:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                         uint32_t count);
 765:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 766:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
 767:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 768:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Receives the specified number of data words and execute the callback defined in GUI, if e
 769:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 770:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 771:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param dataptr Pointer to data in which value is written
 772:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param count number of data words (word length configured) to be read
 773:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 774:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 775:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS : if read is successful\n
 776:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUSY : if SPI channel is busy with other operation
 777:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_MODE_MISMATCH if receive mode is DMA.
 778:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 779:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 780:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * After receiving the specified number of words (word length configured), the user configured call
 781:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * is executed, if it is enabled. If a callback function is not configured on the APP UI, the user 
 782:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the status of rx_busy variable of the APP handle structure. Based on the UI configuration, eithe
 783:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * buffer or receive FIFO is used for data reception. An interrupt is configured for received data 
 784:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function only registers a request to receive a number of data bytes from a SPI channel. If FIFO 
 785:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.
 786:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <a href="..\group___architecture___description.html#spi_master_receive_irq_flow_chart">Click her
 787:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 788:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 789:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 790:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 791:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 792:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 793:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 794:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 795:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 796:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 797:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 798:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t ReadData[10];
 799:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 800:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status =  DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 801:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 802:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 803:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(SPI_MASTER_StartReceiveIRQ(&SPI_MASTER_0, ReadData, 10U))
 804:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 805:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       while(SPI_MASTER_0.runtime->rx_busy)
 806:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
 807:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
 808:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       SPI_MASTER_Transmit(&SPI_MASTER_0, ReadData, 10U);
 809:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 810:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 811:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 812:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 813:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
 814:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
 815:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 816:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 817:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 818:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 819:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 820:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
 821:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 822:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, 
 823:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 824:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 825:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if(SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
 826:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 827:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Transmits the specified number of data words and execute the callback defined in GUI, if 
 828:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 829:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 830:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param dataptr Pointer to data
 831:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param count number of data words (word length configured) to be transmitted
 832:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 833:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t
 834:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_SUCCESS : if transmit is successful\n
 835:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUSY : if SPI channel is busy with other operation
 836:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_BUFFER_INVALID : if the data_ptr is NULL or count is 0. \n
 837:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *          SPI_MASTER_STATUS_MODE_MISMATCH : if transmit mode is DMA.
 838:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 839:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 840:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 841:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * The data transmission is accomplished using transmit interrupt. After transmitting the total dat
 842:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function is executed. If transmit FIFO is enabled, the trigger limit is set to 1. So the transmi
 843:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * generated when all the data in FIFO is moved from FIFO. The function uses APP handle's dynamic s
 844:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the data pointer, count, data index and status of transmission. This function only registers a d
 845:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * request if there is no active transmission in progress. Actual data transmission happens in the 
 846:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * service routine. A trigger is generated for the transmit interrupt to start loading the data. If
 847:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * configured, the data is filled into the FIFO with trigger limit set to 1. Transmit interrupt wil
 848:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * when the transmit FIFO is empty. At this point of time, if there is some more data to be transmi
 849:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * to the FIFO again. When FIFO is not enabled, data is transmitted one byte at a time. On transmis
 850:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 851:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <a href="..\group___architecture___description.html#spi_master_transmit_irq_flow_chart">Click he
 852:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 853:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 854:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
 855:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 856:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
 857:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 858:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Pre-condition:
 859:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Transmit mode should be configured as "Interrupt".
 860:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
 861:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Transmits "Infineon" data to slave.
 862:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 863:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
 864:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
 865:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
 866:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 867:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon";
 868:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 869:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
 870:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
 871:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 872:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(SPI_MASTER_StartTransmitIRQ(&SPI_MASTER_0, Send_Data, sizeof(Send_Data)) == SPI_MASTER_ST
 873:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 874:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       while(SPI_MASTER_0.runtime->tx_busy)
 875:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
 876:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
 877:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 878:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 879:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
 880:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 881:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
 882:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
 883:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
 884:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
 885:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
 886:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
 887:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
 888:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR> </p>
 889:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 890:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 891:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t *addr, ui
 892:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 893:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 894:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 895:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 896:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 897:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Registers a request for receiving data over SPI_MASTER channel using DMA.
 898:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 899:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 900:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param  handle  Pointer to SPI_MASTER_t handle structure
 901:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 902:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param  count  Total no of bytes to be received.\n
 903:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                \b Range: minimum= 1, maximum= 4096.
 904:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 905:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t: Status for receive request.\n
 906:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_SUCCESS if the request is accepted.\n
 907:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_BUSY if a reception is in progress.\n
 908:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is
 909:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_MODE_MISMATCH : if receive mode is Interrupt \n
 910:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 911:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 912:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 913:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 914:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * optionally, the user configured callback function will be executed.
 915:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 916:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * When all the requested number of data bytes are received, the configured callback
 917:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * function will be executed.
 918:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If a callback function is not configured, the user has to poll for the value of the
 919:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 920:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * requested number of data bytes are received.
 921:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 922:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <a href="..\group___architecture___description.html#spi_master_receive_dma_flow_chart">Click her
 923:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 924:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 925:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 926:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 927:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 928:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 929:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   //Pre condition:
 930:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   //Receive mode should be configured to "DMA"
 931:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   //Description: Receive 10 bytes from slave.
 932:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 933:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 934:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   int main(void)
 935:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
 936:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_STATUS_t init_status;
 937:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     uint8_t ReadData[10];
 938:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 939:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     init_status = (SPI_MASTER_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0);
 940:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(init_status == SPI_MASTER_STATUS_SUCCESS)
 941:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 942:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       if(SPI_MASTER_StartReceiveDMA(&SPI_MASTER_0, ReadData, 10) == SPI_MASTER_STATUS_SUCCESS)
 943:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
 944:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *         while(SPI_MASTER_0.runtime->rx_busy)
 945:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *         {
 946:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *         }
 947:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
 948:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 949:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     else
 950:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
 951:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 952:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      while(1U)
 953:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      {
 954:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      }
 955:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
 956:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      return 1U;
 957:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  }
 958:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  @endcode
 959:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 960:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
 961:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *addr, ui
 962:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
 963:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
 964:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
 965:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
 966:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Registers a request for transmitting data over SPI_MASTER channel using DMA.
 967:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 968:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param  handle  SPI_MASTER APP handle pointer of type @ref SPI_MASTER_t
 969:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 970:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param  count Total number of words to be transmitted.\n
 971:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \b Range: minimum= 1, maximum= 4096.
 972:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 973:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  SPI_MASTER_STATUS_t: Status of transmit request.\n
 974:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_SUCCESS if the request is accepted.\n
 975:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_BUSY if a transmission is in progress.\n
 976:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER__STATUS_BUFFER_INVALID if the data_ptr is NULL or count i
 977:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *                        @ref SPI_MASTER_STATUS_MODE_MISMATCH : if transmit mode is Interrupt \n
 978:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 979:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 980:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * request is registered.
 981:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 982:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
 983:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 984:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * is fully transmitted, the callback function will be executed.
 985:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 986:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 987:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * data transmission happens through DMA channel. A maximum of 4095 bytes can be transmitted in one
 988:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * is because of the DMA single block size. Callback function is executed when all the data bytes a
 989:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 990:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for the completion of data tran
 991:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 992:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * multiple calls to this API.
 993:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <a href="..\group___architecture___description.html#spi_master_transmit_dma_flow_chart">Click he
 994:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 995:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
 996:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
 997:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 998:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
 999:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   //Pre-condition:
1000:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   //Transmit mode should be configured as "DMA".
1001:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   //Description: Transmits "Infineon" data to the slave
1002:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1003:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1004:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   int main(void)
1005:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1006:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_STATUS_t init_status;
1007:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     uint8_t Send_Data[] = "Infineon";
1008:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1009:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     init_status = (SPI_MASTER_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0);
1010:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(init_status == SPI_MASTER_STATUS_SUCCESS)
1011:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
1012:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       if(SPI_MASTER_StartTransmitDMA(&SPI_MASTER_0, Send_Data, sizeof(Send_Data)) == SPI_MASTER_
1013:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
1014:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *         while(SPI_MASTER_0.runtime->tx_busy)
1015:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *         {
1016:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *         }
1017:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
1018:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
1019:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     else
1020:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
1021:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1022:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      while(1U)
1023:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      {
1024:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      }
1025:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
1026:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *      return 1U;
1027:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *  }
1028:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode
1029:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1030:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
1031:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *addr, ui
1032:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** #endif
1033:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1034:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
1035:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Returns the state of the specified interrupt flag.
1036:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1037:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
1038:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param flag Interrupt for which status is required
1039:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *             Use type @ref XMC_SPI_CH_STATUS_FLAG_t for the bitmask of events.
1040:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return  uint32_t status of the interrupt
1041:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1042:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1043:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
1044:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Returns the status of the events, by reading PSR register. This indicates the status of the all 
1045:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * SPI communication.
1046:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1047:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1048:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
1049:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
1050:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
1051:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1052:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
1053:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //It transmits "Infineon" to the SPI slave. After calling the transmit API, it will poll for the
1054:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //indication flag to know the data has shifted out or not.
1055:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1056:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
1057:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
1058:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
1059:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon";
1060:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1061:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
1062:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
1063:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1064:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data));
1065:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     while(SPI_MASTER_GetFlagStatus(&SPI_MASTER_0, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATI
1066:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1067:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
1068:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1069:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
1070:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
1071:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
1072:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
1073:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1074:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
1075:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
1076:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
1077:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1078:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
1079:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1080:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** __STATIC_INLINE uint32_t SPI_MASTER_GetFlagStatus(const SPI_MASTER_t* handle, const uint32_t flag)
1081:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 172              	 .loc 3 1081 0
 173              	 .cfi_startproc
 174              	 
 175              	 
 176 0000 80B5     	 push {r7,lr}
 177              	.LCFI18:
 178              	 .cfi_def_cfa_offset 8
 179              	 .cfi_offset 7,-8
 180              	 .cfi_offset 14,-4
 181 0002 82B0     	 sub sp,sp,#8
 182              	.LCFI19:
 183              	 .cfi_def_cfa_offset 16
 184 0004 00AF     	 add r7,sp,#0
 185              	.LCFI20:
 186              	 .cfi_def_cfa_register 7
 187 0006 7860     	 str r0,[r7,#4]
 188 0008 3960     	 str r1,[r7]
1082:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_ASSERT("SPI_MASTER_GetFlagStatus:handle NULL" , (handle != NULL));
1083:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   return (XMC_SPI_CH_GetStatusFlag(handle->channel) & flag);
 189              	 .loc 3 1083 0
 190 000a 7B68     	 ldr r3,[r7,#4]
 191 000c 1B68     	 ldr r3,[r3]
 192 000e 1846     	 mov r0,r3
 193 0010 FFF7FEFF 	 bl XMC_SPI_CH_GetStatusFlag
 194 0014 0246     	 mov r2,r0
 195 0016 3B68     	 ldr r3,[r7]
 196 0018 1340     	 ands r3,r3,r2
1084:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** }
 197              	 .loc 3 1084 0
 198 001a 1846     	 mov r0,r3
 199 001c 0837     	 adds r7,r7,#8
 200              	.LCFI21:
 201              	 .cfi_def_cfa_offset 8
 202 001e BD46     	 mov sp,r7
 203              	.LCFI22:
 204              	 .cfi_def_cfa_register 13
 205              	 
 206 0020 80BD     	 pop {r7,pc}
 207              	 .cfi_endproc
 208              	.LFE290:
 210 0022 00BF     	 .section .text.SPI_MASTER_ClearFlag,"ax",%progbits
 211              	 .align 2
 212              	 .thumb
 213              	 .thumb_func
 215              	SPI_MASTER_ClearFlag:
 216              	.LFB291:
1085:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1086:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
1087:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Clears the status of the specified interrupt flags.
1088:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1089:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
1090:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param flag_mask Interrupt for which status has to be cleared
1091:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *             Use type @ref XMC_SPI_CH_STATUS_FLAG_t for the bitmask of events.
1092:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1093:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
1094:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * During communication the events occurred has to be cleared to get the successive events.\n
1095:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
1096:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * to be cleared after transmission of each data word. Otherwise next event is not considered as va
1097:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1098:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1099:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
1100:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
1101:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
1102:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1103:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
1104:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //It transmits "Infineon" to the SPI slave. After calling the transmit API, it will poll for the
1105:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //indication flag to know the data has shifted out or not, and clears the flag.
1106:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1107:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
1108:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
1109:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
1110:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon";
1111:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1112:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
1113:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
1114:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1115:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data));
1116:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     while(SPI_MASTER_GetFlagStatus(&SPI_MASTER_0, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIF
1117:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_ClearFlag(&SPI_MASTER_0, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATI
1118:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1119:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
1120:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1121:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
1122:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
1123:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
1124:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
1125:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1126:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
1127:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
1128:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
1129:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
1130:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** __STATIC_INLINE void SPI_MASTER_ClearFlag(const SPI_MASTER_t* handle, const uint32_t flag_mask)
1131:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 217              	 .loc 3 1131 0
 218              	 .cfi_startproc
 219              	 
 220              	 
 221 0000 80B5     	 push {r7,lr}
 222              	.LCFI23:
 223              	 .cfi_def_cfa_offset 8
 224              	 .cfi_offset 7,-8
 225              	 .cfi_offset 14,-4
 226 0002 82B0     	 sub sp,sp,#8
 227              	.LCFI24:
 228              	 .cfi_def_cfa_offset 16
 229 0004 00AF     	 add r7,sp,#0
 230              	.LCFI25:
 231              	 .cfi_def_cfa_register 7
 232 0006 7860     	 str r0,[r7,#4]
 233 0008 3960     	 str r1,[r7]
1132:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****     XMC_ASSERT("SPI_MASTER_ClearFlag:handle NULL" , (handle != NULL));
1133:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****     XMC_SPI_CH_ClearStatusFlag(handle->channel, flag_mask);
 234              	 .loc 3 1133 0
 235 000a 7B68     	 ldr r3,[r7,#4]
 236 000c 1B68     	 ldr r3,[r3]
 237 000e 1846     	 mov r0,r3
 238 0010 3968     	 ldr r1,[r7]
 239 0012 FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
1134:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** }
 240              	 .loc 3 1134 0
 241 0016 0837     	 adds r7,r7,#8
 242              	.LCFI26:
 243              	 .cfi_def_cfa_offset 8
 244 0018 BD46     	 mov sp,r7
 245              	.LCFI27:
 246              	 .cfi_def_cfa_register 13
 247              	 
 248 001a 80BD     	 pop {r7,pc}
 249              	 .cfi_endproc
 250              	.LFE291:
 252              	 .section .text.SPI_MASTER_EnableSlaveSelectSignal,"ax",%progbits
 253              	 .align 2
 254              	 .thumb
 255              	 .thumb_func
 257              	SPI_MASTER_EnableSlaveSelectSignal:
 258              	.LFB294:
1135:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1136:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
1137:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief return the txbusy flag state
1138:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
1139:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return bool : status of txbusy flag
1140:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1141:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1142:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
1143:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * This is used to check whether any transmit process is going or not. If no process is going then 
1144:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the new request is accepted. SPI_MASTER_AbortTransmit() can be used to stop the current process 
1145:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * start the new request.
1146:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1147:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1148:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
1149:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1150:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
1151:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
1152:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1153:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
1154:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Transmits "Infineon" to the slave device.
1155:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1156:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1157:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
1158:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
1159:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
1160:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1161:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon";
1162:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1163:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
1164:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
1165:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1166:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data)) == SPI_MASTER_STATUS_SUC
1167:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
1168:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       while(SPI_MASTER_IsTxBusy(&SPI_MASTER_0))
1169:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
1170:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
1171:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
1172:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1173:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
1174:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1175:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
1176:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
1177:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
1178:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
1179:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1180:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
1181:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
1182:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR> </p>
1183:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1184:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
1185:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** __STATIC_INLINE bool SPI_MASTER_IsTxBusy(const SPI_MASTER_t* const handle)
1186:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
1187:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
1188:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   return (handle->runtime->tx_busy);
1189:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** }
1190:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1191:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
1192:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief return the rxbusy flag state
1193:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
1194:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @return bool : status of rxbusy flag
1195:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1196:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1197:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
1198:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * This is used to check whether any receive process is going or not. If no process is going then o
1199:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * the new request is accepted. SPI_MASTER_AbortReceive() can be used to stop the current process a
1200:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * start the new request.
1201:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1202:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1203:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
1204:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1205:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
1206:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
1207:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1208:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
1209:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Receives 10 bytes of data from slave.
1210:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1211:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
1212:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
1213:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
1214:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t ReadData[10];
1215:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1216:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status =  DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
1217:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
1218:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1219:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     if(SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 10U))
1220:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     {
1221:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       while(SPI_MASTER_IsRxBusy(&SPI_MASTER_0))
1222:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       {
1223:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *       }
1224:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     }
1225:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1226:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
1227:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1228:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
1229:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
1230:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
1231:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
1232:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1233:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
1234:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
1235:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
1236:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
1237:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** __STATIC_INLINE bool SPI_MASTER_IsRxBusy(const SPI_MASTER_t* const handle)
1238:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
1239:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
1240:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****   return (handle->runtime->rx_busy);
1241:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** }
1242:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1243:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** 
1244:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** /**
1245:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @brief Enables the specified slave select line
1246:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1247:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
1248:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @param slave which slave signal has to be enabled
1249:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1250:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * \par<b>Description:</b><br>
1251:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Each slave is connected with one slave select signal. At a time only one slave can be communicat
1252:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * required slave to start the communication.
1253:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * <BR>
1254:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1255:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Example Usage:
1256:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * Generate code for multiple slave by configuring in "Advanced settings tab". Transmit the data to
1257:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @code
1258:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1259:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * #include "DAVE.h"
1260:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1261:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Precondition:
1262:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Configure to use two slaves".
1263:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Description:
1264:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * //Transmits 10 bytes of data to slave-0 and disables the slave-o. Then enable the slave-1 and tr
1265:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1266:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * int main(void)
1267:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * {
1268:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   DAVE_STATUS_t status;
1269:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   uint8_t Send_Data[] = "Infineon";
1270:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1271:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   status = DAVE_Init();    // SPI_MASTER_Init() is called from DAVE_Init()
1272:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   if(status == DAVE_STATUS_SUCCESS)
1273:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1274:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data));
1275:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_DisableSlaveSelectSignal(&SPI_MASTER_0);
1276:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_1);
1277:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *     SPI_MASTER_Transmit(&SPI_MASTER_0, Send_Data, sizeof(Send_Data));
1278:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1279:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   else
1280:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   {
1281:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    XMC_DEBUG("main: Application initialization failed");
1282:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    while(1U)
1283:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    {
1284:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    }
1285:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *   }
1286:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *    return 1U;
1287:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * }
1288:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  * @endcode<BR>
1289:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  *
1290:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****  */
1291:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** __STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTE
1292:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** {
 259              	 .loc 3 1292 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263 0000 80B5     	 push {r7,lr}
 264              	.LCFI28:
 265              	 .cfi_def_cfa_offset 8
 266              	 .cfi_offset 7,-8
 267              	 .cfi_offset 14,-4
 268 0002 82B0     	 sub sp,sp,#8
 269              	.LCFI29:
 270              	 .cfi_def_cfa_offset 16
 271 0004 00AF     	 add r7,sp,#0
 272              	.LCFI30:
 273              	 .cfi_def_cfa_register 7
 274 0006 7860     	 str r0,[r7,#4]
 275 0008 0B46     	 mov r3,r1
 276 000a FB70     	 strb r3,[r7,#3]
1293:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****     XMC_ASSERT("SPI_MASTER_EnableSlaveSelectSignal:handle NULL" , (handle != NULL));
1294:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****     XMC_ASSERT("SPI_MASTER_EnableSlaveSelectSignal:Invalid Slave selection" , ((slave == SPI_MASTER
1295:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1296:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1297:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1298:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1299:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1300:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1301:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                                (slave == SPI_MASTER
1302:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****                                                                               );
1303:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h ****     XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->s
 277              	 .loc 3 1303 0
 278 000c 7B68     	 ldr r3,[r7,#4]
 279 000e 1968     	 ldr r1,[r3]
 280 0010 7B68     	 ldr r3,[r7,#4]
 281 0012 5B68     	 ldr r3,[r3,#4]
 282 0014 FA78     	 ldrb r2,[r7,#3]
 283 0016 1432     	 adds r2,r2,#20
 284 0018 53F82230 	 ldr r3,[r3,r2,lsl#2]
 285 001c 1B69     	 ldr r3,[r3,#16]
 286 001e 0846     	 mov r0,r1
 287 0020 1946     	 mov r1,r3
 288 0022 FFF7FEFF 	 bl XMC_SPI_CH_EnableSlaveSelect
1304:C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER\spi_master.h **** }
 289              	 .loc 3 1304 0
 290 0026 0837     	 adds r7,r7,#8
 291              	.LCFI31:
 292              	 .cfi_def_cfa_offset 8
 293 0028 BD46     	 mov sp,r7
 294              	.LCFI32:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 002a 80BD     	 pop {r7,pc}
 298              	 .cfi_endproc
 299              	.LFE294:
 301              	 .section .rodata
 302              	 .align 2
 303              	.LC0:
 304 0000 01       	 .byte 1
 305 0001 02       	 .byte 2
 306 0002 03       	 .byte 3
 307 0003 04       	 .byte 4
 308 0004 05       	 .byte 5
 309 0005 06       	 .byte 6
 310 0006 07       	 .byte 7
 311 0007 08       	 .byte 8
 312 0008 09       	 .byte 9
 313 0009 0A       	 .byte 10
 314 000a 0000     	 .align 2
 315              	.LC1:
 316 000c 0A       	 .byte 10
 317 000d 09       	 .byte 9
 318 000e 08       	 .byte 8
 319 000f 07       	 .byte 7
 320 0010 06       	 .byte 6
 321 0011 05       	 .byte 5
 322 0012 04       	 .byte 4
 323 0013 03       	 .byte 3
 324 0014 02       	 .byte 2
 325 0015 01       	 .byte 1
 326 0016 0000     	 .section .text.main,"ax",%progbits
 327              	 .align 2
 328              	 .global main
 329              	 .thumb
 330              	 .thumb_func
 332              	main:
 333              	.LFB312:
 334              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2024 Aug 25 05:21:44
   5:../main.c     ****  *  Author: admin
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** 
   9:../main.c     **** 
  10:../main.c     **** 
  11:../main.c     **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
  12:../main.c     **** 
  13:../main.c     **** /**
  14:../main.c     **** 
  15:../main.c     ****  * @brief main() - Application entry point
  16:../main.c     ****  *
  17:../main.c     ****  * <b>Details of function</b><br>
  18:../main.c     ****  * This routine is the application entry point. It is invoked by the device startup code. It is res
  19:../main.c     ****  * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder fo
  20:../main.c     ****  * code.
  21:../main.c     ****  */
  22:../main.c     **** 
  23:../main.c     **** int main(void)
  24:../main.c     **** {
 335              	 .loc 4 24 0
 336              	 .cfi_startproc
 337              	 
 338              	 
 339 0000 80B5     	 push {r7,lr}
 340              	.LCFI33:
 341              	 .cfi_def_cfa_offset 8
 342              	 .cfi_offset 7,-8
 343              	 .cfi_offset 14,-4
 344 0002 90B0     	 sub sp,sp,#64
 345              	.LCFI34:
 346              	 .cfi_def_cfa_offset 72
 347 0004 00AF     	 add r7,sp,#0
 348              	.LCFI35:
 349              	 .cfi_def_cfa_register 7
  25:../main.c     ****   DAVE_STATUS_t status;
  26:../main.c     ****   uint32_t baud_rate = 200U;
 350              	 .loc 4 26 0
 351 0006 C823     	 movs r3,#200
 352 0008 FB63     	 str r3,[r7,#60]
  27:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 353              	 .loc 4 27 0
 354 000a FFF7FEFF 	 bl DAVE_Init
 355 000e 0346     	 mov r3,r0
 356 0010 87F83B30 	 strb r3,[r7,#59]
  28:../main.c     ****   uint8_t ReadData1[10];
  29:../main.c     ****   uint8_t SendData1[10] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA};
 357              	 .loc 4 29 0
 358 0014 414A     	 ldr r2,.L19
 359 0016 07F11803 	 add r3,r7,#24
 360 001a 1068     	 ldr r0,[r2]
 361 001c 5168     	 ldr r1,[r2,#4]
 362 001e 03C3     	 stmia r3!,{r0,r1}
 363 0020 1289     	 ldrh r2,[r2,#8]
 364 0022 1A80     	 strh r2,[r3]
  30:../main.c     ****   uint8_t ReadData2[10];
  31:../main.c     ****   uint8_t SendData2[10] = {0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1};
 365              	 .loc 4 31 0
 366 0024 3E4A     	 ldr r2,.L19+4
 367 0026 3B46     	 mov r3,r7
 368 0028 1068     	 ldr r0,[r2]
 369 002a 5168     	 ldr r1,[r2,#4]
 370 002c 03C3     	 stmia r3!,{r0,r1}
 371 002e 1289     	 ldrh r2,[r2,#8]
 372 0030 1A80     	 strh r2,[r3]
  32:../main.c     ****   uint32_t status1 = 0;
 373              	 .loc 4 32 0
 374 0032 0023     	 movs r3,#0
 375 0034 7B63     	 str r3,[r7,#52]
  33:../main.c     ****   uint32_t status2 = 0;
 376              	 .loc 4 33 0
 377 0036 0023     	 movs r3,#0
 378 0038 3B63     	 str r3,[r7,#48]
  34:../main.c     ****   if (status != DAVE_STATUS_SUCCESS)
 379              	 .loc 4 34 0
 380 003a 97F83B30 	 ldrb r3,[r7,#59]
 381 003e 002B     	 cmp r3,#0
 382 0040 00D0     	 beq .L10
 383              	.L11:
  35:../main.c     ****   {
  36:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
  37:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
  38:../main.c     **** 
  39:../main.c     ****     while(1U)
  40:../main.c     ****     {
  41:../main.c     **** 
  42:../main.c     ****     }
 384              	 .loc 4 42 0 discriminator 1
 385 0042 FEE7     	 b .L11
 386              	.L10:
  43:../main.c     ****   }
  44:../main.c     **** 
  45:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
  46:../main.c     **** 	SPI_MASTER_SetMode(&SPI_MASTER_0, XMC_SPI_CH_MODE_STANDARD);
 387              	 .loc 4 46 0
 388 0044 3748     	 ldr r0,.L19+8
 389 0046 0021     	 movs r1,#0
 390 0048 FFF7FEFF 	 bl SPI_MASTER_SetMode
  47:../main.c     **** 	XMC_USIC_CH_SetFrameLength(XMC_SPI0_CH0,8);
 391              	 .loc 4 47 0
 392 004c 3648     	 ldr r0,.L19+12
 393 004e 0821     	 movs r1,#8
 394 0050 FFF7FEFF 	 bl XMC_USIC_CH_SetFrameLength
  48:../main.c     **** 	SPI_MASTER_SetBaudRate(&SPI_MASTER_0, baud_rate);
 395              	 .loc 4 48 0
 396 0054 3348     	 ldr r0,.L19+8
 397 0056 F96B     	 ldr r1,[r7,#60]
 398 0058 FFF7FEFF 	 bl SPI_MASTER_SetBaudRate
 399              	.L18:
  49:../main.c     ****   while(1U)
  50:../main.c     ****   {
  51:../main.c     **** 	  /*******METHOD-1*******/
  52:../main.c     **** 	  SPI_MASTER_Receive(&SPI_MASTER_0, ReadData1, 10U);
 400              	 .loc 4 52 0
 401 005c 07F12403 	 add r3,r7,#36
 402 0060 3048     	 ldr r0,.L19+8
 403 0062 1946     	 mov r1,r3
 404 0064 0A22     	 movs r2,#10
 405 0066 FFF7FEFF 	 bl SPI_MASTER_Receive
  53:../main.c     **** 	  SPI_MASTER_Transmit(&SPI_MASTER_0, SendData1, 10U);
 406              	 .loc 4 53 0
 407 006a 07F11803 	 add r3,r7,#24
 408 006e 2D48     	 ldr r0,.L19+8
 409 0070 1946     	 mov r1,r3
 410 0072 0A22     	 movs r2,#10
 411 0074 FFF7FEFF 	 bl SPI_MASTER_Transmit
  54:../main.c     **** 	  while(SPI_MASTER_0.runtime->rx_busy);
 412              	 .loc 4 54 0
 413 0078 00BF     	 nop
 414              	.L12:
 415              	 .loc 4 54 0 is_stmt 0 discriminator 1
 416 007a 2A4B     	 ldr r3,.L19+8
 417 007c 9B68     	 ldr r3,[r3,#8]
 418 007e DB7F     	 ldrb r3,[r3,#31]
 419 0080 DBB2     	 uxtb r3,r3
 420 0082 002B     	 cmp r3,#0
 421 0084 F9D1     	 bne .L12
  55:../main.c     **** 	  while(SPI_MASTER_0.runtime->tx_busy);
 422              	 .loc 4 55 0 is_stmt 1
 423 0086 00BF     	 nop
 424              	.L13:
 425              	 .loc 4 55 0 is_stmt 0 discriminator 1
 426 0088 264B     	 ldr r3,.L19+8
 427 008a 9B68     	 ldr r3,[r3,#8]
 428 008c 93F82030 	 ldrb r3,[r3,#32]
 429 0090 DBB2     	 uxtb r3,r3
 430 0092 002B     	 cmp r3,#0
 431 0094 F8D1     	 bne .L13
  56:../main.c     **** 
  57:../main.c     **** 	  /*******METHOD-2*******/
  58:../main.c     **** 
  59:../main.c     **** 	  /* Clear the flags */
  60:../main.c     **** 	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 432              	 .loc 4 60 0 is_stmt 1
 433 0096 2348     	 ldr r0,.L19+8
 434 0098 4FF40041 	 mov r1,#32768
 435 009c FFF7FEFF 	 bl SPI_MASTER_ClearFlag
  61:../main.c     **** 	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION);
 436              	 .loc 4 61 0
 437 00a0 2048     	 ldr r0,.L19+8
 438 00a2 4FF48041 	 mov r1,#16384
 439 00a6 FFF7FEFF 	 bl SPI_MASTER_ClearFlag
  62:../main.c     **** 	  /* Send Write Enable Command */
  63:../main.c     **** 	  SPI_MASTER_Transfer(&SPI_MASTER_0, SendData2, ReadData2, 10);
 440              	 .loc 4 63 0
 441 00aa 3A46     	 mov r2,r7
 442 00ac 07F10C03 	 add r3,r7,#12
 443 00b0 1C48     	 ldr r0,.L19+8
 444 00b2 1146     	 mov r1,r2
 445 00b4 1A46     	 mov r2,r3
 446 00b6 0A23     	 movs r3,#10
 447 00b8 FFF7FEFF 	 bl SPI_MASTER_Transfer
  64:../main.c     **** 	  while(SPI_MASTER_0.runtime->rx_busy);
 448              	 .loc 4 64 0
 449 00bc 00BF     	 nop
 450              	.L14:
 451              	 .loc 4 64 0 is_stmt 0 discriminator 1
 452 00be 194B     	 ldr r3,.L19+8
 453 00c0 9B68     	 ldr r3,[r3,#8]
 454 00c2 DB7F     	 ldrb r3,[r3,#31]
 455 00c4 DBB2     	 uxtb r3,r3
 456 00c6 002B     	 cmp r3,#0
 457 00c8 F9D1     	 bne .L14
  65:../main.c     **** 	  while(SPI_MASTER_0.runtime->tx_busy);
 458              	 .loc 4 65 0 is_stmt 1
 459 00ca 00BF     	 nop
 460              	.L15:
 461              	 .loc 4 65 0 is_stmt 0 discriminator 1
 462 00cc 154B     	 ldr r3,.L19+8
 463 00ce 9B68     	 ldr r3,[r3,#8]
 464 00d0 93F82030 	 ldrb r3,[r3,#32]
 465 00d4 DBB2     	 uxtb r3,r3
 466 00d6 002B     	 cmp r3,#0
 467 00d8 F8D1     	 bne .L15
 468              	.L17:
  66:../main.c     **** 	  do
  67:../main.c     **** 	  {
  68:../main.c     **** 		  status1 = SPI_MASTER_GetFlagStatus(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_IND
 469              	 .loc 4 68 0 is_stmt 1 discriminator 2
 470 00da 1248     	 ldr r0,.L19+8
 471 00dc 4FF40041 	 mov r1,#32768
 472 00e0 FFF7FEFF 	 bl SPI_MASTER_GetFlagStatus
 473 00e4 7863     	 str r0,[r7,#52]
  69:../main.c     **** 		  status2 = SPI_MASTER_GetFlagStatus(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION);
 474              	 .loc 4 69 0 discriminator 2
 475 00e6 0F48     	 ldr r0,.L19+8
 476 00e8 4FF48041 	 mov r1,#16384
 477 00ec FFF7FEFF 	 bl SPI_MASTER_GetFlagStatus
 478 00f0 3863     	 str r0,[r7,#48]
  70:../main.c     **** 	  } while(((status1 == 0) && (status2 == 0)));
 479              	 .loc 4 70 0 discriminator 2
 480 00f2 7B6B     	 ldr r3,[r7,#52]
 481 00f4 002B     	 cmp r3,#0
 482 00f6 02D1     	 bne .L16
 483              	 .loc 4 70 0 is_stmt 0 discriminator 1
 484 00f8 3B6B     	 ldr r3,[r7,#48]
 485 00fa 002B     	 cmp r3,#0
 486 00fc EDD0     	 beq .L17
 487              	.L16:
  71:../main.c     **** 	  /* Clear the flags */
  72:../main.c     **** 	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 488              	 .loc 4 72 0 is_stmt 1
 489 00fe 0948     	 ldr r0,.L19+8
 490 0100 4FF40041 	 mov r1,#32768
 491 0104 FFF7FEFF 	 bl SPI_MASTER_ClearFlag
  73:../main.c     **** 	  SPI_MASTER_ClearFlag(&SPI_MASTER_0,XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION);
 492              	 .loc 4 73 0
 493 0108 0648     	 ldr r0,.L19+8
 494 010a 4FF48041 	 mov r1,#16384
 495 010e FFF7FEFF 	 bl SPI_MASTER_ClearFlag
  74:../main.c     **** 	  /* Enable the Slave Select Line */
  75:../main.c     **** 	  SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_0, SPI_MASTER_SS_SIGNAL_0);
 496              	 .loc 4 75 0
 497 0112 0448     	 ldr r0,.L19+8
 498 0114 0021     	 movs r1,#0
 499 0116 FFF7FEFF 	 bl SPI_MASTER_EnableSlaveSelectSignal
  76:../main.c     ****   }
 500              	 .loc 4 76 0
 501 011a 9FE7     	 b .L18
 502              	.L20:
 503              	 .align 2
 504              	.L19:
 505 011c 00000000 	 .word .LC0
 506 0120 0C000000 	 .word .LC1
 507 0124 00000000 	 .word SPI_MASTER_0
 508 0128 00000340 	 .word 1073938432
 509              	 .cfi_endproc
 510              	.LFE312:
 512              	 .text
 513              	.Letext0:
 514              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 515              	 .file 6 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 516              	 .file 7 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc_gpio.h"
 517              	 .file 8 "C:/work_mari/XMC4800/spi_master/Libraries/XMCLib/inc/xmc4_gpio.h"
 518              	 .file 9 "C:/work_mari/XMC4800/spi_master/Dave/Generated/DAVE.h"
 519              	 .file 10 "C:/work_mari/XMC4800/spi_master/Libraries/CMSIS/Include/cmsis_gcc.h"
 520              	 .file 11 "C:/work_mari/XMC4800/spi_master/Libraries/CMSIS/Include/core_cm4.h"
 521              	 .file 12 "C:/work_mari/XMC4800/spi_master/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
 522              	 .file 13 "C:/work_mari/XMC4800/spi_master/Dave/Generated/SPI_MASTER/spi_master_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_USIC_CH_SetFrameLength:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_SetFrameLength:00000000 XMC_USIC_CH_SetFrameLength
    {standard input}:74     .text.XMC_SPI_CH_GetStatusFlag:00000000 $t
    {standard input}:78     .text.XMC_SPI_CH_GetStatusFlag:00000000 XMC_SPI_CH_GetStatusFlag
    {standard input}:118    .text.XMC_SPI_CH_ClearStatusFlag:00000000 $t
    {standard input}:122    .text.XMC_SPI_CH_ClearStatusFlag:00000000 XMC_SPI_CH_ClearStatusFlag
    {standard input}:165    .text.SPI_MASTER_GetFlagStatus:00000000 $t
    {standard input}:169    .text.SPI_MASTER_GetFlagStatus:00000000 SPI_MASTER_GetFlagStatus
    {standard input}:211    .text.SPI_MASTER_ClearFlag:00000000 $t
    {standard input}:215    .text.SPI_MASTER_ClearFlag:00000000 SPI_MASTER_ClearFlag
    {standard input}:253    .text.SPI_MASTER_EnableSlaveSelectSignal:00000000 $t
    {standard input}:257    .text.SPI_MASTER_EnableSlaveSelectSignal:00000000 SPI_MASTER_EnableSlaveSelectSignal
    {standard input}:302    .rodata:00000000 $d
    {standard input}:327    .text.main:00000000 $t
    {standard input}:332    .text.main:00000000 main
    {standard input}:505    .text.main:0000011c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SPI_CH_EnableSlaveSelect
DAVE_Init
SPI_MASTER_SetMode
SPI_MASTER_SetBaudRate
SPI_MASTER_Receive
SPI_MASTER_Transmit
SPI_MASTER_Transfer
SPI_MASTER_0
