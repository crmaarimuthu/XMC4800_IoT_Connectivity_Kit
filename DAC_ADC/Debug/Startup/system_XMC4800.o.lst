   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "system_XMC4800.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global SystemCoreClock
  20              	 .section .no_init,"aw",%progbits
  21              	 .align 2
  24              	SystemCoreClock:
  25 0000 00000000 	 .space 4
  26              	 .global g_chipid
  27              	 .align 2
  30              	g_chipid:
  31 0004 00000000 	 .space 16
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .text.delay,"ax",%progbits
  33              	 .align 2
  34              	 .thumb
  35              	 .thumb_func
  37              	delay:
  38              	.LFB133:
  39              	 .file 1 "../Startup/system_XMC4800.c"
   1:../Startup/system_XMC4800.c **** /**************************************************************************************************
   2:../Startup/system_XMC4800.c ****  * @file     system_XMC4800.c
   3:../Startup/system_XMC4800.c ****  * @brief    CMSIS Cortex-M4 Device Peripheral Access Layer Header File for the Infineon XMC4800 De
   4:../Startup/system_XMC4800.c ****  * @version  V1.0.8
   5:../Startup/system_XMC4800.c ****  * @date     27. Aug 2020
   6:../Startup/system_XMC4800.c ****  *
   7:../Startup/system_XMC4800.c ****  * @cond
   8:../Startup/system_XMC4800.c ****  **************************************************************************************************
   9:../Startup/system_XMC4800.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Startup/system_XMC4800.c ****  * All rights reserved.                        
  11:../Startup/system_XMC4800.c ****  *                                             
  12:../Startup/system_XMC4800.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Startup/system_XMC4800.c ****  * 
  14:../Startup/system_XMC4800.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Startup/system_XMC4800.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Startup/system_XMC4800.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Startup/system_XMC4800.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Startup/system_XMC4800.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Startup/system_XMC4800.c ****  * do so, all subject to the following:
  20:../Startup/system_XMC4800.c ****  * 
  21:../Startup/system_XMC4800.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Startup/system_XMC4800.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Startup/system_XMC4800.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Startup/system_XMC4800.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Startup/system_XMC4800.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Startup/system_XMC4800.c ****  * a source language processor.
  27:../Startup/system_XMC4800.c ****  * 
  28:../Startup/system_XMC4800.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Startup/system_XMC4800.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Startup/system_XMC4800.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Startup/system_XMC4800.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Startup/system_XMC4800.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Startup/system_XMC4800.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Startup/system_XMC4800.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Startup/system_XMC4800.c ****  *                                                                              
  36:../Startup/system_XMC4800.c ****  * To improve the quality of the software, users are encouraged to share 
  37:../Startup/system_XMC4800.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG 
  38:../Startup/system_XMC4800.c ****  * at XMCSupport@infineon.com.
  39:../Startup/system_XMC4800.c ****  **************************************************************************************************
  40:../Startup/system_XMC4800.c ****  *
  41:../Startup/system_XMC4800.c ****  ********************** Version History ***************************************
  42:../Startup/system_XMC4800.c ****  * V1.0.0, 22. May 2015, Initial version
  43:../Startup/system_XMC4800.c ****  * V1.0.1, 26. Jan 2016, Disable trap generation from clock unit
  44:../Startup/system_XMC4800.c ****  * V1.0.2, 01. Jun 2016, Fix masking of OSCHPCTRL value
  45:../Startup/system_XMC4800.c ****  * V1.0.3, 09. Feb 2017, Fix activation of USBPLL when SDMMC clock is enabled 
  46:../Startup/system_XMC4800.c ****  * V1.0.4, 19. Jun 2017, Rely on cmsis_compiler.h instead of defining __WEAK
  47:../Startup/system_XMC4800.c ****  * V1.0.5, 26. Sep 2017, Disable FPU if FPU_USED is zero    
  48:../Startup/system_XMC4800.c ****  * V1.0.6, 29. Oct 2018, Fix variable location of SystemCoreClock and g_chipid for ARMCC compiler
  49:../Startup/system_XMC4800.c ****  * V1.0.7, 02. Dec 2019, Fix including device header file following the convention: angle brackets 
  50:../Startup/system_XMC4800.c ****  *                       Fix external clock monitoring pin settings
  51:../Startup/system_XMC4800.c ****  * V1.0.8, 27. Aug 2020. Fix K1 divider input clock for PLL in prescaler mode
  52:../Startup/system_XMC4800.c ****  *                       Added compiler checks for input VCO and VCO frequencies
  53:../Startup/system_XMC4800.c ****  *                       Added wait for K2 divider ready after updating the K2 divider in the PLL r
  54:../Startup/system_XMC4800.c ****  ******************************************************************************
  55:../Startup/system_XMC4800.c **** * @endcond
  56:../Startup/system_XMC4800.c **** */
  57:../Startup/system_XMC4800.c **** 
  58:../Startup/system_XMC4800.c **** /*******************************************************************************
  59:../Startup/system_XMC4800.c ****  * Default clock initialization
  60:../Startup/system_XMC4800.c ****  * fPLL = 288MHz => fSYS = 144MHz => fCPU = 144MHz
  61:../Startup/system_XMC4800.c ****  *                                => fPB  = 144MHz
  62:../Startup/system_XMC4800.c ****  *                                => fCCU = 144MHz
  63:../Startup/system_XMC4800.c ****  *                                => fETH = 72MHz
  64:../Startup/system_XMC4800.c ****  *               => fUSB = 48MHz
  65:../Startup/system_XMC4800.c ****  *               => fEBU = 72MHz
  66:../Startup/system_XMC4800.c ****  *
  67:../Startup/system_XMC4800.c ****  * fUSBPLL = 200MHz => fECAT = 100MHz
  68:../Startup/system_XMC4800.c ****  *
  69:../Startup/system_XMC4800.c ****  * fOFI = 24MHz => fWDT = 24MHz
  70:../Startup/system_XMC4800.c ****  *******************************************************************************/
  71:../Startup/system_XMC4800.c **** 
  72:../Startup/system_XMC4800.c **** /*******************************************************************************
  73:../Startup/system_XMC4800.c ****  * HEADER FILES
  74:../Startup/system_XMC4800.c ****  *******************************************************************************/
  75:../Startup/system_XMC4800.c **** #include <string.h>
  76:../Startup/system_XMC4800.c **** 
  77:../Startup/system_XMC4800.c **** #include "XMC4800.h"
  78:../Startup/system_XMC4800.c **** #include "system_XMC4800.h"
  79:../Startup/system_XMC4800.c **** 
  80:../Startup/system_XMC4800.c **** /*******************************************************************************
  81:../Startup/system_XMC4800.c ****  * MACROS
  82:../Startup/system_XMC4800.c ****  *******************************************************************************/
  83:../Startup/system_XMC4800.c **** #define CHIPID_LOC ((uint8_t *)0x20000000UL)
  84:../Startup/system_XMC4800.c **** 
  85:../Startup/system_XMC4800.c **** #define PMU_FLASH_WS          (0x4U)
  86:../Startup/system_XMC4800.c **** 
  87:../Startup/system_XMC4800.c **** #define FOSCREF               (2500000U)
  88:../Startup/system_XMC4800.c **** 
  89:../Startup/system_XMC4800.c **** #define DELAY_CNT_50US_50MHZ  (2500UL)
  90:../Startup/system_XMC4800.c **** #define DELAY_CNT_150US_50MHZ (7500UL)
  91:../Startup/system_XMC4800.c **** #define DELAY_CNT_50US_48MHZ  (2400UL)
  92:../Startup/system_XMC4800.c **** #define DELAY_CNT_50US_72MHZ  (3600UL)
  93:../Startup/system_XMC4800.c **** #define DELAY_CNT_50US_96MHZ  (4800UL)
  94:../Startup/system_XMC4800.c **** #define DELAY_CNT_50US_120MHZ (6000UL)
  95:../Startup/system_XMC4800.c **** #define DELAY_CNT_50US_144MHZ (7200UL)
  96:../Startup/system_XMC4800.c **** 
  97:../Startup/system_XMC4800.c **** #define VCO_INPUT_MIN         (4000000UL)
  98:../Startup/system_XMC4800.c **** #define VCO_INPUT_MAX         (16000000UL)
  99:../Startup/system_XMC4800.c **** #define VCO_MIN               (260000000UL)
 100:../Startup/system_XMC4800.c **** #define VCO_MAX               (520000000UL)
 101:../Startup/system_XMC4800.c **** 
 102:../Startup/system_XMC4800.c **** #define SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 103:../Startup/system_XMC4800.c ****                                      SCU_PLL_PLLSTAT_PLLLV_Msk | \
 104:../Startup/system_XMC4800.c ****                                      SCU_PLL_PLLSTAT_PLLSP_Msk)
 105:../Startup/system_XMC4800.c **** 
 106:../Startup/system_XMC4800.c **** /*
 107:../Startup/system_XMC4800.c **** //-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
 108:../Startup/system_XMC4800.c **** */
 109:../Startup/system_XMC4800.c **** 
 110:../Startup/system_XMC4800.c **** /*
 111:../Startup/system_XMC4800.c **** // <h> Clock configuration
 112:../Startup/system_XMC4800.c **** */
 113:../Startup/system_XMC4800.c **** 
 114:../Startup/system_XMC4800.c **** /*
 115:../Startup/system_XMC4800.c **** //    <o> External crystal frequency [Hz]
 116:../Startup/system_XMC4800.c **** //       <8000000=> 8MHz
 117:../Startup/system_XMC4800.c **** //       <12000000=> 12MHz
 118:../Startup/system_XMC4800.c **** //       <16000000=> 16MHz
 119:../Startup/system_XMC4800.c **** //    <i> Defines external crystal frequency
 120:../Startup/system_XMC4800.c **** //    <i> Default: 8MHz
 121:../Startup/system_XMC4800.c **** */
 122:../Startup/system_XMC4800.c **** #define OSCHP_FREQUENCY (12000000U)
 123:../Startup/system_XMC4800.c **** 
 124:../Startup/system_XMC4800.c **** /* USB PLL settings, fUSBPLL = 200MHz */
 125:../Startup/system_XMC4800.c **** /* Note: Implicit divider of 2, fUSBPLLVCO = 400MHz */
 126:../Startup/system_XMC4800.c **** #if OSCHP_FREQUENCY == 8000000U
 127:../Startup/system_XMC4800.c **** #define USB_PDIV (1U)
 128:../Startup/system_XMC4800.c **** #define USB_NDIV (99U)
 129:../Startup/system_XMC4800.c **** 
 130:../Startup/system_XMC4800.c **** #elif OSCHP_FREQUENCY == 12000000U
 131:../Startup/system_XMC4800.c **** #define USB_PDIV (2U)
 132:../Startup/system_XMC4800.c **** #define USB_NDIV (99U)
 133:../Startup/system_XMC4800.c **** 
 134:../Startup/system_XMC4800.c **** #elif OSCHP_FREQUENCY == 16000000U
 135:../Startup/system_XMC4800.c **** #define USB_PDIV (3U)
 136:../Startup/system_XMC4800.c **** #define USB_NDIV (99U)
 137:../Startup/system_XMC4800.c **** 
 138:../Startup/system_XMC4800.c **** #else
 139:../Startup/system_XMC4800.c **** #error "External crystal frequency not supported"
 140:../Startup/system_XMC4800.c **** 
 141:../Startup/system_XMC4800.c **** #endif
 142:../Startup/system_XMC4800.c **** 
 143:../Startup/system_XMC4800.c **** #define USB_VCO ((OSCHP_FREQUENCY / (USB_PDIV + 1UL)) * (USB_NDIV + 1UL))
 144:../Startup/system_XMC4800.c **** #define USB_VCO_INPUT (OSCHP_FREQUENCY / (USB_PDIV + 1UL))
 145:../Startup/system_XMC4800.c **** 
 146:../Startup/system_XMC4800.c **** /*
 147:../Startup/system_XMC4800.c **** //    <o> Backup clock calibration mode
 148:../Startup/system_XMC4800.c **** //       <0=> Factory calibration
 149:../Startup/system_XMC4800.c **** //       <1=> Automatic calibration
 150:../Startup/system_XMC4800.c **** //    <i> Default: Automatic calibration
 151:../Startup/system_XMC4800.c **** */
 152:../Startup/system_XMC4800.c **** #define FOFI_CALIBRATION_MODE 1
 153:../Startup/system_XMC4800.c **** #define FOFI_CALIBRATION_MODE_FACTORY 0
 154:../Startup/system_XMC4800.c **** #define FOFI_CALIBRATION_MODE_AUTOMATIC 1
 155:../Startup/system_XMC4800.c **** 
 156:../Startup/system_XMC4800.c **** /*
 157:../Startup/system_XMC4800.c **** //    <o> Standby clock (fSTDBY) source selection
 158:../Startup/system_XMC4800.c **** //       <0=> Internal slow oscillator (32768Hz)
 159:../Startup/system_XMC4800.c **** //       <1=> External crystal (32768Hz)
 160:../Startup/system_XMC4800.c **** //    <i> Default: Internal slow oscillator (32768Hz)
 161:../Startup/system_XMC4800.c **** */
 162:../Startup/system_XMC4800.c **** #define STDBY_CLOCK_SRC 0
 163:../Startup/system_XMC4800.c **** #define STDBY_CLOCK_SRC_OSI 0
 164:../Startup/system_XMC4800.c **** #define STDBY_CLOCK_SRC_OSCULP 1
 165:../Startup/system_XMC4800.c **** 
 166:../Startup/system_XMC4800.c **** /*
 167:../Startup/system_XMC4800.c **** //    <o> PLL clock source selection
 168:../Startup/system_XMC4800.c **** //       <0=> External crystal
 169:../Startup/system_XMC4800.c **** //       <1=> Internal fast oscillator
 170:../Startup/system_XMC4800.c **** //    <i> Default: External crystal
 171:../Startup/system_XMC4800.c **** */
 172:../Startup/system_XMC4800.c **** #define PLL_CLOCK_SRC 0
 173:../Startup/system_XMC4800.c **** #define PLL_CLOCK_SRC_EXT_XTAL 0
 174:../Startup/system_XMC4800.c **** #define PLL_CLOCK_SRC_OFI 1
 175:../Startup/system_XMC4800.c **** 
 176:../Startup/system_XMC4800.c **** /* PLL settings, fPLL = 288MHz */
 177:../Startup/system_XMC4800.c **** #if PLL_CLOCK_SRC == PLL_CLOCK_SRC_EXT_XTAL
 178:../Startup/system_XMC4800.c **** #if OSCHP_FREQUENCY == 8000000U
 179:../Startup/system_XMC4800.c **** #define PLL_PDIV (1U)
 180:../Startup/system_XMC4800.c **** #define PLL_NDIV (71U)
 181:../Startup/system_XMC4800.c **** #define PLL_K2DIV (0U)
 182:../Startup/system_XMC4800.c **** 
 183:../Startup/system_XMC4800.c **** #elif OSCHP_FREQUENCY == 12000000U
 184:../Startup/system_XMC4800.c **** #define PLL_PDIV (1U)
 185:../Startup/system_XMC4800.c **** #define PLL_NDIV (47U)
 186:../Startup/system_XMC4800.c **** #define PLL_K2DIV (0U)
 187:../Startup/system_XMC4800.c **** 
 188:../Startup/system_XMC4800.c **** #elif OSCHP_FREQUENCY == 16000000U
 189:../Startup/system_XMC4800.c **** #define PLL_PDIV (1U)
 190:../Startup/system_XMC4800.c **** #define PLL_NDIV (35U)
 191:../Startup/system_XMC4800.c **** #define PLL_K2DIV (0U)
 192:../Startup/system_XMC4800.c **** 
 193:../Startup/system_XMC4800.c **** #else
 194:../Startup/system_XMC4800.c **** #error "External crystal frequency not supported"
 195:../Startup/system_XMC4800.c **** 
 196:../Startup/system_XMC4800.c **** #endif
 197:../Startup/system_XMC4800.c **** 
 198:../Startup/system_XMC4800.c **** #define VCO ((OSCHP_FREQUENCY / (PLL_PDIV + 1UL)) * (PLL_NDIV + 1UL))
 199:../Startup/system_XMC4800.c **** #define VCO_INPUT (OSCHP_FREQUENCY / (PLL_PDIV + 1UL))
 200:../Startup/system_XMC4800.c **** 
 201:../Startup/system_XMC4800.c **** #else /* PLL_CLOCK_SRC == PLL_CLOCK_SRC_EXT_XTAL */
 202:../Startup/system_XMC4800.c **** #define PLL_PDIV (1U)
 203:../Startup/system_XMC4800.c **** #define PLL_NDIV (23U)
 204:../Startup/system_XMC4800.c **** #define PLL_K2DIV (0U)
 205:../Startup/system_XMC4800.c **** 
 206:../Startup/system_XMC4800.c **** #define VCO ((OFI_FREQUENCY / (PLL_PDIV + 1UL)) * (PLL_NDIV + 1UL))
 207:../Startup/system_XMC4800.c **** #define VCO_INPUT (OFI_FREQUENCY / (PLL_PDIV + 1UL))
 208:../Startup/system_XMC4800.c **** 
 209:../Startup/system_XMC4800.c **** #endif /* PLL_CLOCK_SRC == PLL_CLOCK_SRC_OFI */
 210:../Startup/system_XMC4800.c **** 
 211:../Startup/system_XMC4800.c **** #if (VCO_INPUT < VCO_INPUT_MIN) || (VCO_INPUT > VCO_INPUT_MAX)
 212:../Startup/system_XMC4800.c **** #error VCO_INPUT frequency out of range.
 213:../Startup/system_XMC4800.c **** #endif
 214:../Startup/system_XMC4800.c **** 
 215:../Startup/system_XMC4800.c **** #if (VCO < VCO_MIN) || (VCO > VCO_MAX)
 216:../Startup/system_XMC4800.c **** #error VCO frequency out of range.
 217:../Startup/system_XMC4800.c **** #endif
 218:../Startup/system_XMC4800.c **** 
 219:../Startup/system_XMC4800.c **** #if (USB_VCO_INPUT < VCO_INPUT_MIN) || (USB_VCO_INPUT > VCO_INPUT_MAX)
 220:../Startup/system_XMC4800.c **** #error USB_VCO_INPUT frequency out of range.
 221:../Startup/system_XMC4800.c **** #endif
 222:../Startup/system_XMC4800.c **** 
 223:../Startup/system_XMC4800.c **** #if (USB_VCO < VCO_MIN) || (USB_VCO > VCO_MAX)
 224:../Startup/system_XMC4800.c **** #error USB_VCO frequency out of range.
 225:../Startup/system_XMC4800.c **** #endif
 226:../Startup/system_XMC4800.c **** 
 227:../Startup/system_XMC4800.c **** #define PLL_K2DIV_24MHZ  ((VCO / OFI_FREQUENCY) - 1UL)
 228:../Startup/system_XMC4800.c **** #define PLL_K2DIV_48MHZ  ((VCO / 48000000U) - 1UL)
 229:../Startup/system_XMC4800.c **** #define PLL_K2DIV_72MHZ  ((VCO / 72000000U) - 1UL)
 230:../Startup/system_XMC4800.c **** #define PLL_K2DIV_96MHZ  ((VCO / 96000000U) - 1UL)
 231:../Startup/system_XMC4800.c **** #define PLL_K2DIV_120MHZ ((VCO / 120000000U) - 1UL)
 232:../Startup/system_XMC4800.c **** 
 233:../Startup/system_XMC4800.c **** #define SCU_CLK_CLKCLR_ENABLE_USBCLK SCU_CLK_CLKCLR_USBCDI_Msk
 234:../Startup/system_XMC4800.c **** #define SCU_CLK_CLKCLR_ENABLE_MMCCLK SCU_CLK_CLKCLR_MMCCDI_Msk
 235:../Startup/system_XMC4800.c **** #define SCU_CLK_CLKCLR_ENABLE_ETHCLK SCU_CLK_CLKCLR_ETH0CDI_Msk
 236:../Startup/system_XMC4800.c **** #define SCU_CLK_CLKCLR_ENABLE_EBUCLK SCU_CLK_CLKCLR_EBUCDI_Msk
 237:../Startup/system_XMC4800.c **** #define SCU_CLK_CLKCLR_ENABLE_CCUCLK SCU_CLK_CLKCLR_CCUCDI_Msk
 238:../Startup/system_XMC4800.c **** 
 239:../Startup/system_XMC4800.c **** #define SCU_CLK_SYSCLKCR_SYSSEL_OFI      (0U << SCU_CLK_SYSCLKCR_SYSSEL_Pos)
 240:../Startup/system_XMC4800.c **** #define SCU_CLK_SYSCLKCR_SYSSEL_PLL      (1U << SCU_CLK_SYSCLKCR_SYSSEL_Pos)
 241:../Startup/system_XMC4800.c **** 
 242:../Startup/system_XMC4800.c **** #define SCU_CLK_USBCLKCR_USBSEL_USBPLL   (0U << SCU_CLK_USBCLKCR_USBSEL_Pos)
 243:../Startup/system_XMC4800.c **** #define SCU_CLK_USBCLKCR_USBSEL_PLL      (1U << SCU_CLK_USBCLKCR_USBSEL_Pos)
 244:../Startup/system_XMC4800.c **** 
 245:../Startup/system_XMC4800.c **** #define SCU_CLK_ECATCLKCR_ECATSEL_USBPLL (0U << SCU_CLK_ECATCLKCR_ECATSEL_Pos)
 246:../Startup/system_XMC4800.c **** #define SCU_CLK_ECATCLKCR_ECATSEL_PLL    (1U << SCU_CLK_ECATCLKCR_ECATSEL_Pos)
 247:../Startup/system_XMC4800.c **** 
 248:../Startup/system_XMC4800.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_OFI      (0U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 249:../Startup/system_XMC4800.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_STANDBY  (1U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 250:../Startup/system_XMC4800.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_PLL      (2U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 251:../Startup/system_XMC4800.c **** 
 252:../Startup/system_XMC4800.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_SYS      (0U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 253:../Startup/system_XMC4800.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_USBPLL   (2U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 254:../Startup/system_XMC4800.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_PLL      (3U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 255:../Startup/system_XMC4800.c **** 
 256:../Startup/system_XMC4800.c **** #define EXTCLK_PIN_P0_8  (1)
 257:../Startup/system_XMC4800.c **** #define EXTCLK_PIN_P1_15 (2)
 258:../Startup/system_XMC4800.c **** 
 259:../Startup/system_XMC4800.c **** /*
 260:../Startup/system_XMC4800.c **** //    <h> Clock tree
 261:../Startup/system_XMC4800.c **** //        <o1.16> System clock source selection
 262:../Startup/system_XMC4800.c **** //                      <0=> fOFI
 263:../Startup/system_XMC4800.c **** //                      <1=> fPLL
 264:../Startup/system_XMC4800.c **** //                      <i> Default: fPLL
 265:../Startup/system_XMC4800.c **** //        <o1.0..7> System clock divider <1-256><#-1>
 266:../Startup/system_XMC4800.c **** //                      <i> Default: 2
 267:../Startup/system_XMC4800.c **** //        <o2.0> CPU clock divider
 268:../Startup/system_XMC4800.c **** //                      <0=> fCPU = fSYS
 269:../Startup/system_XMC4800.c **** //                      <1=> fCPU = fSYS / 2
 270:../Startup/system_XMC4800.c **** //                      <i> Default: fCPU = fSYS
 271:../Startup/system_XMC4800.c **** //        <o3.0>  Peripheral clock divider
 272:../Startup/system_XMC4800.c **** //                      <0=> fPB = fCPU
 273:../Startup/system_XMC4800.c **** //                      <1=> fPB = fCPU / 2
 274:../Startup/system_XMC4800.c **** //                      <i> Default: fPB = fCPU
 275:../Startup/system_XMC4800.c **** //        <o4.0>  CCU clock divider
 276:../Startup/system_XMC4800.c **** //                      <0=> fCCU = fCPU
 277:../Startup/system_XMC4800.c **** //                      <1=> fCCU = fCPU / 2
 278:../Startup/system_XMC4800.c **** //                      <i> Default: fCCU = fCPU
 279:../Startup/system_XMC4800.c **** //        <e.5> Enable WDT clock
 280:../Startup/system_XMC4800.c **** //             <o5.16..17> WDT clock source <0=> fOFI
 281:../Startup/system_XMC4800.c **** //                                          <1=> fSTDBY
 282:../Startup/system_XMC4800.c **** //                                          <2=> fPLL
 283:../Startup/system_XMC4800.c **** //                      <i> Default: fOFI
 284:../Startup/system_XMC4800.c **** //             <o5.0..7> WDT clock divider <1-256><#-1>
 285:../Startup/system_XMC4800.c **** //                      <i> Default: 1
 286:../Startup/system_XMC4800.c **** //        </e>
 287:../Startup/system_XMC4800.c **** //        <e.3> Enable EBU clock
 288:../Startup/system_XMC4800.c **** //             <o6.0..5>  EBU clock divider  <1-64><#-1>
 289:../Startup/system_XMC4800.c **** //             <i> Default: 4
 290:../Startup/system_XMC4800.c **** //        </e>
 291:../Startup/system_XMC4800.c **** //        <e.2> Enable ETH clock
 292:../Startup/system_XMC4800.c **** //        </e>
 293:../Startup/system_XMC4800.c **** //        <e.1> Enable MMC clock
 294:../Startup/system_XMC4800.c **** //        </e>
 295:../Startup/system_XMC4800.c **** //        <e.0> Enable USB clock
 296:../Startup/system_XMC4800.c **** //             <o7.16> USB clock source <0=> fUSBPLL
 297:../Startup/system_XMC4800.c **** //                                      <1=> fPLL
 298:../Startup/system_XMC4800.c **** //             <i> Default: fPLL
 299:../Startup/system_XMC4800.c **** //             <o7.0..2> USB clock source divider <1-8><#-1>
 300:../Startup/system_XMC4800.c **** //             <i> Default: 6
 301:../Startup/system_XMC4800.c **** //        </e>
 302:../Startup/system_XMC4800.c **** //        <h> EtherCAT Clock Control 
 303:../Startup/system_XMC4800.c **** //        	   <o8.16..17> ECAT clock source <0=> fUSBPLL
 304:../Startup/system_XMC4800.c **** //                                           <1=> fPLL
 305:../Startup/system_XMC4800.c **** //                                           <i> Default: fUSBPLL
 306:../Startup/system_XMC4800.c **** //             <o8.0..1> ECAT clock divider  <1-4><#-1>
 307:../Startup/system_XMC4800.c **** //                                           <i> Default: 2
 308:../Startup/system_XMC4800.c **** //        </h>
 309:../Startup/system_XMC4800.c **** //        <h> External Clock Control
 310:../Startup/system_XMC4800.c **** //             <o9.0..1> External Clock Source Selection
 311:../Startup/system_XMC4800.c **** //                  <0=> fSYS
 312:../Startup/system_XMC4800.c **** //                  <2=> fUSB
 313:../Startup/system_XMC4800.c **** //                  <3=> fPLL
 314:../Startup/system_XMC4800.c **** //                  <i> Default: fPLL
 315:../Startup/system_XMC4800.c **** //             <o9.16..24> External Clock divider <1-512><#-1>
 316:../Startup/system_XMC4800.c **** //                  <i> Default: 288
 317:../Startup/system_XMC4800.c **** //                  <i> Only valid for USB PLL and PLL clocks
 318:../Startup/system_XMC4800.c **** //             <o10.0> External Clock Pin Selection
 319:../Startup/system_XMC4800.c **** //                  <0=> Disabled
 320:../Startup/system_XMC4800.c **** //                  <1=> P0.8
 321:../Startup/system_XMC4800.c **** //                  <2=> P1.15
 322:../Startup/system_XMC4800.c **** //                  <i> Default: Disabled
 323:../Startup/system_XMC4800.c **** //        </h>
 324:../Startup/system_XMC4800.c **** //    </h>
 325:../Startup/system_XMC4800.c **** */
 326:../Startup/system_XMC4800.c **** #define __CLKSET    (0x00000000UL)
 327:../Startup/system_XMC4800.c **** #define __SYSCLKCR  (0x00010001UL)
 328:../Startup/system_XMC4800.c **** #define __CPUCLKCR  (0x00000000UL)
 329:../Startup/system_XMC4800.c **** #define __PBCLKCR   (0x00000000UL)
 330:../Startup/system_XMC4800.c **** #define __CCUCLKCR  (0x00000000UL)
 331:../Startup/system_XMC4800.c **** #define __WDTCLKCR  (0x00000000UL)
 332:../Startup/system_XMC4800.c **** #define __EBUCLKCR  (0x00000003UL)
 333:../Startup/system_XMC4800.c **** #define __USBCLKCR  (0x00010005UL)
 334:../Startup/system_XMC4800.c **** #define __ECATCLKCR (0x00000001UL)
 335:../Startup/system_XMC4800.c **** #define __EXTCLKCR  (0x01200003UL)
 336:../Startup/system_XMC4800.c **** #define __EXTCLKPIN (0U)
 337:../Startup/system_XMC4800.c **** 
 338:../Startup/system_XMC4800.c **** /*
 339:../Startup/system_XMC4800.c **** // </h>
 340:../Startup/system_XMC4800.c **** */
 341:../Startup/system_XMC4800.c **** 
 342:../Startup/system_XMC4800.c **** /*
 343:../Startup/system_XMC4800.c **** //-------- <<< end of configuration section >>> ------------------
 344:../Startup/system_XMC4800.c **** */
 345:../Startup/system_XMC4800.c **** 
 346:../Startup/system_XMC4800.c **** #define ENABLE_PLL \
 347:../Startup/system_XMC4800.c ****     (((__SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk) == SCU_CLK_SYSCLKCR_SYSSEL_PLL) || \
 348:../Startup/system_XMC4800.c ****      ((__ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) == SCU_CLK_ECATCLKCR_ECATSEL_PLL) || \
 349:../Startup/system_XMC4800.c ****      ((__CLKSET & SCU_CLK_CLKSET_EBUCEN_Msk) != 0) || \
 350:../Startup/system_XMC4800.c ****      (((__CLKSET & SCU_CLK_CLKSET_USBCEN_Msk) != 0) && ((__USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk) 
 351:../Startup/system_XMC4800.c ****      (((__CLKSET & SCU_CLK_CLKSET_WDTCEN_Msk) != 0) && ((__WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk) 
 352:../Startup/system_XMC4800.c **** 
 353:../Startup/system_XMC4800.c **** #define ENABLE_USBPLL \
 354:../Startup/system_XMC4800.c ****     (((__ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) == SCU_CLK_ECATCLKCR_ECATSEL_USBPLL) || \
 355:../Startup/system_XMC4800.c ****      (((__CLKSET & SCU_CLK_CLKSET_USBCEN_Msk) != 0) && ((__USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk) 
 356:../Startup/system_XMC4800.c ****      (((__CLKSET & SCU_CLK_CLKSET_MMCCEN_Msk) != 0) && ((__USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk) 
 357:../Startup/system_XMC4800.c **** 
 358:../Startup/system_XMC4800.c **** /*******************************************************************************
 359:../Startup/system_XMC4800.c ****  * GLOBAL VARIABLES
 360:../Startup/system_XMC4800.c ****  *******************************************************************************/
 361:../Startup/system_XMC4800.c **** #if defined ( __CC_ARM )
 362:../Startup/system_XMC4800.c **** #if defined(XMC4800_E196x2048) || defined(XMC4800_F144x2048) || defined(XMC4800_F100x2048)
 363:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((at(0x2003FFC0)));
 364:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((at(0x2003FFC4)));
 365:../Startup/system_XMC4800.c **** #elif defined(XMC4800_E196x1536) || defined(XMC4800_F144x1536) || defined(XMC4800_F100x1536)
 366:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((at(0x2002CFC0)));
 367:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((at(0x2002CFC4)));
 368:../Startup/system_XMC4800.c **** #elif defined(XMC4800_E196x1024) || defined(XMC4800_F144x1024) || defined(XMC4800_F100x1024)
 369:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((at(0x2001FFC0)));
 370:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((at(0x2001FFC4)));
 371:../Startup/system_XMC4800.c **** #else
 372:../Startup/system_XMC4800.c **** #error "system_XMC4800.c: device not supported" 
 373:../Startup/system_XMC4800.c **** #endif
 374:../Startup/system_XMC4800.c **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 375:../Startup/system_XMC4800.c **** #if defined(XMC4800_E196x2048) || defined(XMC4800_F144x2048) || defined(XMC4800_F100x2048)
 376:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((section(".bss.ARM.__at_0x2003FFC0")));
 377:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((section(".bss.ARM.__at_0x2003FFC0")));
 378:../Startup/system_XMC4800.c **** #elif defined(XMC4800_E196x1536) || defined(XMC4800_F144x1536) || defined(XMC4800_F100x1536)
 379:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((section(".bss.ARM.__at_0x2002CFC0")));
 380:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((section(".bss.ARM.__at_0x2002CFC4")));
 381:../Startup/system_XMC4800.c **** #elif defined(XMC4800_E196x1024) || defined(XMC4800_F144x1024) || defined(XMC4800_F100x1024)
 382:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((section(".bss.ARM.__at_0x2001FFC0")));
 383:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((section(".bss.ARM.__at_0x2001FFC4")));
 384:../Startup/system_XMC4800.c **** #else
 385:../Startup/system_XMC4800.c **** #error "system_XMC4800.c: device not supported" 
 386:../Startup/system_XMC4800.c **** #endif
 387:../Startup/system_XMC4800.c **** #elif defined ( __ICCARM__ )
 388:../Startup/system_XMC4800.c **** #if defined(XMC4800_E196x2048) || defined(XMC4800_F144x2048) || defined(XMC4800_F100x2048) || \
 389:../Startup/system_XMC4800.c ****     defined(XMC4800_E196x1536) || defined(XMC4800_F144x1536) || defined(XMC4800_F100x1536) || \
 390:../Startup/system_XMC4800.c ****     defined(XMC4800_E196x1024) || defined(XMC4800_F144x1024) || defined(XMC4800_F100x1024)
 391:../Startup/system_XMC4800.c **** __no_init uint32_t SystemCoreClock;
 392:../Startup/system_XMC4800.c **** __no_init uint8_t g_chipid[16];
 393:../Startup/system_XMC4800.c **** #else
 394:../Startup/system_XMC4800.c **** #error "system_XMC4800.c: device not supported" 
 395:../Startup/system_XMC4800.c **** #endif    
 396:../Startup/system_XMC4800.c **** #elif defined ( __GNUC__ )
 397:../Startup/system_XMC4800.c **** #if defined(XMC4800_E196x2048) || defined(XMC4800_F144x2048) || defined(XMC4800_F100x2048) || \
 398:../Startup/system_XMC4800.c ****     defined(XMC4800_E196x1536) || defined(XMC4800_F144x1536) || defined(XMC4800_F100x1536) || \
 399:../Startup/system_XMC4800.c ****     defined(XMC4800_E196x1024) || defined(XMC4800_F144x1024) || defined(XMC4800_F100x1024)
 400:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
 401:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __attribute__((section(".no_init")));
 402:../Startup/system_XMC4800.c **** #else
 403:../Startup/system_XMC4800.c **** #error "system_XMC4800.c: device not supported" 
 404:../Startup/system_XMC4800.c **** #endif    
 405:../Startup/system_XMC4800.c **** #elif defined ( __TASKING__ )
 406:../Startup/system_XMC4800.c **** #if defined(XMC4800_E196x2048) || defined(XMC4800_F144x2048) || defined(XMC4800_F100x2048)
 407:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __at( 0x2003FFC0 );
 408:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __at( 0x2003FFC4 );
 409:../Startup/system_XMC4800.c **** #elif defined(XMC4800_E196x1536) || defined(XMC4800_F144x1536) || defined(XMC4800_F100x1536)
 410:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __at( 0x2002CFC0 );
 411:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __at( 0x2002CFC4 );
 412:../Startup/system_XMC4800.c **** #elif defined(XMC4800_E196x1024) || defined(XMC4800_F144x1024) || defined(XMC4800_F100x1024)
 413:../Startup/system_XMC4800.c **** uint32_t SystemCoreClock __at( 0x2001FFC0 );
 414:../Startup/system_XMC4800.c **** uint8_t g_chipid[16] __at( 0x2001FFC4 );
 415:../Startup/system_XMC4800.c **** #else
 416:../Startup/system_XMC4800.c **** #error "system_XMC4800.c: device not supported" 
 417:../Startup/system_XMC4800.c **** #endif    
 418:../Startup/system_XMC4800.c **** #else
 419:../Startup/system_XMC4800.c **** #error "system_XMC4800.c: compiler not supported" 
 420:../Startup/system_XMC4800.c **** #endif    
 421:../Startup/system_XMC4800.c **** 
 422:../Startup/system_XMC4800.c **** extern uint32_t __Vectors;
 423:../Startup/system_XMC4800.c **** 
 424:../Startup/system_XMC4800.c **** /*******************************************************************************
 425:../Startup/system_XMC4800.c ****  * LOCAL FUNCTIONS
 426:../Startup/system_XMC4800.c ****  *******************************************************************************/
 427:../Startup/system_XMC4800.c **** static void delay(uint32_t cycles)
 428:../Startup/system_XMC4800.c **** {
  40              	 .loc 1 428 0
  41              	 .cfi_startproc
  42              	 
  43              	 
  44              	 
  45 0000 80B4     	 push {r7}
  46              	.LCFI0:
  47              	 .cfi_def_cfa_offset 4
  48              	 .cfi_offset 7,-4
  49 0002 85B0     	 sub sp,sp,#20
  50              	.LCFI1:
  51              	 .cfi_def_cfa_offset 24
  52 0004 00AF     	 add r7,sp,#0
  53              	.LCFI2:
  54              	 .cfi_def_cfa_register 7
  55 0006 7860     	 str r0,[r7,#4]
 429:../Startup/system_XMC4800.c ****   volatile uint32_t i;
 430:../Startup/system_XMC4800.c **** 
 431:../Startup/system_XMC4800.c ****   for(i = 0UL; i < cycles ;++i)
  56              	 .loc 1 431 0
  57 0008 0023     	 movs r3,#0
  58 000a FB60     	 str r3,[r7,#12]
  59 000c 03E0     	 b .L2
  60              	.L3:
 432:../Startup/system_XMC4800.c ****   {
 433:../Startup/system_XMC4800.c ****     __NOP();
  61              	 .loc 1 433 0 discriminator 3
  62              	
  63 000e 00BF     	 nop
  64              	
 431:../Startup/system_XMC4800.c ****   {
  65              	 .loc 1 431 0 discriminator 3
  66              	 .thumb
  67 0010 FB68     	 ldr r3,[r7,#12]
  68 0012 0133     	 adds r3,r3,#1
  69 0014 FB60     	 str r3,[r7,#12]
  70              	.L2:
 431:../Startup/system_XMC4800.c ****   {
  71              	 .loc 1 431 0 is_stmt 0 discriminator 1
  72 0016 FA68     	 ldr r2,[r7,#12]
  73 0018 7B68     	 ldr r3,[r7,#4]
  74 001a 9A42     	 cmp r2,r3
  75 001c F7D3     	 bcc .L3
 434:../Startup/system_XMC4800.c ****   }
 435:../Startup/system_XMC4800.c **** }
  76              	 .loc 1 435 0 is_stmt 1
  77 001e 1437     	 adds r7,r7,#20
  78              	.LCFI3:
  79              	 .cfi_def_cfa_offset 4
  80 0020 BD46     	 mov sp,r7
  81              	.LCFI4:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 0022 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI5:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 0026 7047     	 bx lr
  89              	 .cfi_endproc
  90              	.LFE133:
  92              	 .section .text.SystemInit,"ax",%progbits
  93              	 .align 2
  94              	 .weak SystemInit
  95              	 .thumb
  96              	 .thumb_func
  98              	SystemInit:
  99              	.LFB134:
 436:../Startup/system_XMC4800.c **** 
 437:../Startup/system_XMC4800.c **** /*******************************************************************************
 438:../Startup/system_XMC4800.c ****  * API IMPLEMENTATION
 439:../Startup/system_XMC4800.c ****  *******************************************************************************/
 440:../Startup/system_XMC4800.c **** 
 441:../Startup/system_XMC4800.c **** __WEAK void SystemInit(void)
 442:../Startup/system_XMC4800.c **** {
 100              	 .loc 1 442 0
 101              	 .cfi_startproc
 102              	 
 103              	 
 104 0000 98B5     	 push {r3,r4,r7,lr}
 105              	.LCFI6:
 106              	 .cfi_def_cfa_offset 16
 107              	 .cfi_offset 3,-16
 108              	 .cfi_offset 4,-12
 109              	 .cfi_offset 7,-8
 110              	 .cfi_offset 14,-4
 111 0002 00AF     	 add r7,sp,#0
 112              	.LCFI7:
 113              	 .cfi_def_cfa_register 7
 443:../Startup/system_XMC4800.c ****   memcpy(g_chipid, CHIPID_LOC, 16);
 114              	 .loc 1 443 0
 115 0004 054A     	 ldr r2,.L5
 116 0006 4FF00053 	 mov r3,#536870912
 117 000a 1446     	 mov r4,r2
 118 000c 0FCB     	 ldmia r3,{r0,r1,r2,r3}
 119 000e 84E80F00 	 stmia r4,{r0,r1,r2,r3}
 444:../Startup/system_XMC4800.c **** 
 445:../Startup/system_XMC4800.c ****   SystemCoreSetup();
 120              	 .loc 1 445 0
 121 0012 FFF7FEFF 	 bl SystemCoreSetup
 446:../Startup/system_XMC4800.c ****   SystemCoreClockSetup();
 122              	 .loc 1 446 0
 123 0016 FFF7FEFF 	 bl SystemCoreClockSetup
 447:../Startup/system_XMC4800.c **** }
 124              	 .loc 1 447 0
 125 001a 98BD     	 pop {r3,r4,r7,pc}
 126              	.L6:
 127              	 .align 2
 128              	.L5:
 129 001c 00000000 	 .word g_chipid
 130              	 .cfi_endproc
 131              	.LFE134:
 133              	 .section .text.SystemCoreSetup,"ax",%progbits
 134              	 .align 2
 135              	 .weak SystemCoreSetup
 136              	 .thumb
 137              	 .thumb_func
 139              	SystemCoreSetup:
 140              	.LFB135:
 448:../Startup/system_XMC4800.c **** 
 449:../Startup/system_XMC4800.c **** __WEAK void SystemCoreSetup(void)
 450:../Startup/system_XMC4800.c **** {
 141              	 .loc 1 450 0
 142              	 .cfi_startproc
 143              	 
 144              	 
 145              	 
 146 0000 80B4     	 push {r7}
 147              	.LCFI8:
 148              	 .cfi_def_cfa_offset 4
 149              	 .cfi_offset 7,-4
 150 0002 83B0     	 sub sp,sp,#12
 151              	.LCFI9:
 152              	 .cfi_def_cfa_offset 16
 153 0004 00AF     	 add r7,sp,#0
 154              	.LCFI10:
 155              	 .cfi_def_cfa_register 7
 156              	.LBB8:
 157              	.LBB9:
 158              	 .file 2 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.3.0
   5:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     26. March 2020
   6:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
   9:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 119:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 120:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 122:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            in the used linker script.
 129:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 130:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 131:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 133:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 135:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 136:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t const* src;
 137:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 138:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 139:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   } __copy_table_t;
 140:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 141:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 142:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 143:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 144:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   } __zero_table_t;
 145:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 146:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 151:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     }
 155:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 156:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  
 157:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     }
 161:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 162:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  
 163:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   _start();
 164:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 165:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 166:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 168:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 169:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 172:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 173:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 176:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 177:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 180:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 181:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 184:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 185:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 189:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 190:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 191:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 192:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 196:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 198:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 200:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 201:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 202:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 203:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 207:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 209:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 159              	 .loc 2 209 0
 160              	
 161 0006 72B6     	 cpsid i
 162              	
 163              	 .thumb
 164              	.LBE9:
 165              	.LBE8:
 451:../Startup/system_XMC4800.c ****   uint32_t temp;
 452:../Startup/system_XMC4800.c **** 
 453:../Startup/system_XMC4800.c ****   /* relocate vector table */
 454:../Startup/system_XMC4800.c ****   __disable_irq();
 455:../Startup/system_XMC4800.c ****   SCB->VTOR = (uint32_t)(&__Vectors);
 166              	 .loc 1 455 0
 167 0008 164B     	 ldr r3,.L8
 168 000a 174A     	 ldr r2,.L8+4
 169 000c 9A60     	 str r2,[r3,#8]
 170              	.LBB10:
 171              	.LBB11:
 210:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 211:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 212:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 214:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 215:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 217:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 218:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 220:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 221:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 222:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 224:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 225:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 226:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 232:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 241:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 243:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 244:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 245:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 248:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 250:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 252:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 253:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 254:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 256:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 260:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 262:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 264:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 265:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 267:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 268:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 269:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 271:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 272:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 274:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 275:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 276:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 278:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 279:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 280:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 281:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 282:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 283:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 285:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 286:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 288:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 289:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 290:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 292:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 294:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 296:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 297:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 299:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 300:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 302:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 303:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 304:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 306:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 307:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 308:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 310:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 313:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 314:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 316:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 317:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 318:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 320:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 321:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 322:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 323:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 325:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 328:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 329:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 331:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 332:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 333:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 335:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 336:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 337:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 338:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 339:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 340:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 344:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 346:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 348:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 360:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 361:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 362:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 363:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 364:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 367:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 368:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 370:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 371:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 372:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 374:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 375:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 379:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 382:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 383:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 385:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 386:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 387:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 389:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 390:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 391:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 392:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 393:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 394:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 398:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 400:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 402:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 403:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 404:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 406:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 410:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 412:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 414:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 415:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 416:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 417:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 419:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 422:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 423:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 425:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 426:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 427:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 429:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 430:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 431:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 432:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 433:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 437:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 439:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 441:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 442:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 443:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 444:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 445:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 446:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 448:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 449:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 451:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 452:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 453:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 454:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 455:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 456:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 457:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 458:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 460:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 463:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 464:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 466:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 467:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 468:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 469:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 470:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 471:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 472:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 473:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 474:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 475:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 476:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 479:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 481:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 483:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 484:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 485:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 487:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 491:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 493:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 495:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 496:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 497:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 498:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 502:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 503:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 506:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 508:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 510:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 511:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 512:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 513:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 514:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 517:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 519:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 521:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 522:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 523:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 524:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 525:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 527:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 528:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 530:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 531:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 532:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 534:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 535:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 536:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 537:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 539:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 542:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 543:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 545:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 546:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 547:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 549:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 550:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 551:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 552:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 553:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 554:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 555:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 558:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 560:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 562:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 563:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 564:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 566:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 570:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 572:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 574:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 575:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 576:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 577:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 578:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 583:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 585:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 587:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 588:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 589:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 590:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 591:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 593:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 594:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 596:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 597:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 598:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 600:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 601:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 602:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 603:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 605:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 608:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 609:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 611:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 612:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 613:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 615:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 616:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 617:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 618:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 619:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 620:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 621:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 624:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 626:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 628:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 629:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 630:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 632:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 636:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 638:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 640:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 641:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 642:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 646:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 647:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 650:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 651:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 655:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 656:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 658:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 659:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 661:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 665:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 666:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 667:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 669:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 670:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 671:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 672:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 674:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 678:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 680:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 681:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 683:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 686:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 687:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 688:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 690:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 691:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 692:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 693:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 694:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 695:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 696:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 700:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 701:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 704:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 706:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 711:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 713:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 714:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 715:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 716:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 718:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 722:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 725:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 727:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 731:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 733:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 734:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 735:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 736:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 737:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 738:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 742:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 743:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 745:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 746:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 748:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 752:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 753:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 754:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 756:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 757:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 758:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 759:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 760:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 762:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 766:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 768:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 769:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 771:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 774:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 775:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 776:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 778:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 779:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 780:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 781:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 782:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 783:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 784:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 788:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 789:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 792:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 794:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 799:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 801:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 802:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 803:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 804:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 806:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 810:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 813:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 815:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 819:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 821:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 822:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 823:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 824:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 827:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 828:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 829:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 830:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 833:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 835:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 843:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 844:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 845:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 847:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 848:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 849:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(0U);
 850:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 851:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 852:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 853:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 854:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 855:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 856:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 859:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 861:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 869:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 871:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 872:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)fpscr;
 873:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 874:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 875:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 876:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 877:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 879:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 880:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 883:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 884:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 885:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 886:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 894:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 898:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 899:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 900:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 901:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 903:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 905:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 906:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 909:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 910:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 911:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 912:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 913:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 914:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 917:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 918:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 919:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 920:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 921:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 922:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 924:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 926:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 927:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 928:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 932:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 933:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 935:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 937:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 938:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 939:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 940:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 944:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 946:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 172              	 .loc 2 946 0
 173              	
 174 000e BFF34F8F 	 dsb 0xF
 175              	
 176              	 .thumb
 177              	.LBE11:
 178              	.LBE10:
 179              	.LBB12:
 180              	.LBB13:
 198:C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 181              	 .loc 2 198 0
 182              	
 183 0012 62B6     	 cpsie i
 184              	
 185              	 .thumb
 186              	.LBE13:
 187              	.LBE12:
 456:../Startup/system_XMC4800.c ****   __DSB();
 457:../Startup/system_XMC4800.c ****   __enable_irq();
 458:../Startup/system_XMC4800.c **** 
 459:../Startup/system_XMC4800.c ****   /* __FPU_PRESENT = 1 defined in device header file */
 460:../Startup/system_XMC4800.c ****   /* __FPU_USED value depends on compiler/linker options. */
 461:../Startup/system_XMC4800.c ****   /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
 462:../Startup/system_XMC4800.c ****   /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */
 463:../Startup/system_XMC4800.c **** 
 464:../Startup/system_XMC4800.c **** #if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
 465:../Startup/system_XMC4800.c ****   SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 188              	 .loc 1 465 0
 189 0014 134A     	 ldr r2,.L8
 190 0016 134B     	 ldr r3,.L8
 191 0018 D3F88830 	 ldr r3,[r3,#136]
 192 001c 43F47003 	 orr r3,r3,#15728640
 193 0020 C2F88830 	 str r3,[r2,#136]
 466:../Startup/system_XMC4800.c ****                  (3UL << 11*2)  );               /* set CP11 Full Access */
 467:../Startup/system_XMC4800.c **** #else
 468:../Startup/system_XMC4800.c ****   SCB->CPACR = 0;
 469:../Startup/system_XMC4800.c **** #endif
 470:../Startup/system_XMC4800.c **** 
 471:../Startup/system_XMC4800.c ****   /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
 472:../Startup/system_XMC4800.c ****   SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 194              	 .loc 1 472 0
 195 0024 0F4A     	 ldr r2,.L8
 196 0026 0F4B     	 ldr r3,.L8
 197 0028 5B69     	 ldr r3,[r3,#20]
 198 002a 23F00803 	 bic r3,r3,#8
 199 002e 5361     	 str r3,[r2,#20]
 473:../Startup/system_XMC4800.c **** 
 474:../Startup/system_XMC4800.c ****   temp = FLASH0->FCON;
 200              	 .loc 1 474 0
 201 0030 0E4B     	 ldr r3,.L8+8
 202 0032 03F58053 	 add r3,r3,#4096
 203 0036 1433     	 adds r3,r3,#20
 204 0038 1B68     	 ldr r3,[r3]
 205 003a 7B60     	 str r3,[r7,#4]
 475:../Startup/system_XMC4800.c ****   temp &= ~FLASH_FCON_WSPFLASH_Msk;
 206              	 .loc 1 475 0
 207 003c 7B68     	 ldr r3,[r7,#4]
 208 003e 23F00F03 	 bic r3,r3,#15
 209 0042 7B60     	 str r3,[r7,#4]
 476:../Startup/system_XMC4800.c ****   temp |= PMU_FLASH_WS;
 210              	 .loc 1 476 0
 211 0044 7B68     	 ldr r3,[r7,#4]
 212 0046 43F00403 	 orr r3,r3,#4
 213 004a 7B60     	 str r3,[r7,#4]
 477:../Startup/system_XMC4800.c ****   FLASH0->FCON = temp;
 214              	 .loc 1 477 0
 215 004c 074B     	 ldr r3,.L8+8
 216 004e 03F58053 	 add r3,r3,#4096
 217 0052 1433     	 adds r3,r3,#20
 218 0054 7A68     	 ldr r2,[r7,#4]
 219 0056 1A60     	 str r2,[r3]
 478:../Startup/system_XMC4800.c **** }
 220              	 .loc 1 478 0
 221 0058 0C37     	 adds r7,r7,#12
 222              	.LCFI11:
 223              	 .cfi_def_cfa_offset 4
 224 005a BD46     	 mov sp,r7
 225              	.LCFI12:
 226              	 .cfi_def_cfa_register 13
 227              	 
 228 005c 5DF8047B 	 ldr r7,[sp],#4
 229              	.LCFI13:
 230              	 .cfi_restore 7
 231              	 .cfi_def_cfa_offset 0
 232 0060 7047     	 bx lr
 233              	.L9:
 234 0062 00BF     	 .align 2
 235              	.L8:
 236 0064 00ED00E0 	 .word -536810240
 237 0068 00000000 	 .word __Vectors
 238 006c 00100058 	 .word 1476399104
 239              	 .cfi_endproc
 240              	.LFE135:
 242              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 243              	 .align 2
 244              	 .weak SystemCoreClockSetup
 245              	 .thumb
 246              	 .thumb_func
 248              	SystemCoreClockSetup:
 249              	.LFB136:
 479:../Startup/system_XMC4800.c **** 
 480:../Startup/system_XMC4800.c **** __WEAK void SystemCoreClockSetup(void)
 481:../Startup/system_XMC4800.c **** {
 250              	 .loc 1 481 0
 251              	 .cfi_startproc
 252              	 
 253              	 
 254 0000 80B5     	 push {r7,lr}
 255              	.LCFI14:
 256              	 .cfi_def_cfa_offset 8
 257              	 .cfi_offset 7,-8
 258              	 .cfi_offset 14,-4
 259 0002 00AF     	 add r7,sp,#0
 260              	.LCFI15:
 261              	 .cfi_def_cfa_register 7
 482:../Startup/system_XMC4800.c **** #if FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_FACTORY
 483:../Startup/system_XMC4800.c ****   /* Enable factory calibration */
 484:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FOTR_Msk;
 485:../Startup/system_XMC4800.c **** #else
 486:../Startup/system_XMC4800.c ****   /* Automatic calibration uses the fSTDBY */
 487:../Startup/system_XMC4800.c **** 
 488:../Startup/system_XMC4800.c ****   /* Enable HIB domain */
 489:../Startup/system_XMC4800.c ****   /* Power up HIB domain if and only if it is currently powered down */
 490:../Startup/system_XMC4800.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 262              	 .loc 1 490 0
 263 0004 A74B     	 ldr r3,.L30
 264 0006 1B68     	 ldr r3,[r3]
 265 0008 03F00103 	 and r3,r3,#1
 266 000c 002B     	 cmp r3,#0
 267 000e 0CD1     	 bne .L11
 491:../Startup/system_XMC4800.c ****   {
 492:../Startup/system_XMC4800.c ****     SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 268              	 .loc 1 492 0
 269 0010 A44A     	 ldr r2,.L30
 270 0012 A44B     	 ldr r3,.L30
 271 0014 5B68     	 ldr r3,[r3,#4]
 272 0016 43F00103 	 orr r3,r3,#1
 273 001a 5360     	 str r3,[r2,#4]
 493:../Startup/system_XMC4800.c **** 
 494:../Startup/system_XMC4800.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 274              	 .loc 1 494 0
 275 001c 00BF     	 nop
 276              	.L12:
 277              	 .loc 1 494 0 is_stmt 0 discriminator 1
 278 001e A14B     	 ldr r3,.L30
 279 0020 1B68     	 ldr r3,[r3]
 280 0022 03F00103 	 and r3,r3,#1
 281 0026 002B     	 cmp r3,#0
 282 0028 F9D0     	 beq .L12
 283              	.L11:
 495:../Startup/system_XMC4800.c ****     {
 496:../Startup/system_XMC4800.c ****       /* wait until HIB domain is enabled */
 497:../Startup/system_XMC4800.c ****     }
 498:../Startup/system_XMC4800.c ****   }
 499:../Startup/system_XMC4800.c **** 
 500:../Startup/system_XMC4800.c ****   /* Remove the reset only if HIB domain were in a state of reset */
 501:../Startup/system_XMC4800.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 284              	 .loc 1 501 0 is_stmt 1
 285 002a 9F4B     	 ldr r3,.L30+4
 286 002c 1B68     	 ldr r3,[r3]
 287 002e 03F40073 	 and r3,r3,#512
 288 0032 002B     	 cmp r3,#0
 289 0034 09D0     	 beq .L13
 502:../Startup/system_XMC4800.c ****   {
 503:../Startup/system_XMC4800.c ****     SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 290              	 .loc 1 503 0
 291 0036 9C4A     	 ldr r2,.L30+4
 292 0038 9B4B     	 ldr r3,.L30+4
 293 003a 9B68     	 ldr r3,[r3,#8]
 294 003c 43F40073 	 orr r3,r3,#512
 295 0040 9360     	 str r3,[r2,#8]
 504:../Startup/system_XMC4800.c ****     delay(DELAY_CNT_150US_50MHZ);
 296              	 .loc 1 504 0
 297 0042 41F64C50 	 movw r0,#7500
 298 0046 FFF7FEFF 	 bl delay
 299              	.L13:
 505:../Startup/system_XMC4800.c ****   }
 506:../Startup/system_XMC4800.c **** 
 507:../Startup/system_XMC4800.c **** #if STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP
 508:../Startup/system_XMC4800.c ****   /* Enable OSC_ULP */
 509:../Startup/system_XMC4800.c ****   if ((SCU_HIBERNATE->OSCULCTRL & SCU_HIBERNATE_OSCULCTRL_MODE_Msk) != 0UL)
 510:../Startup/system_XMC4800.c ****   {
 511:../Startup/system_XMC4800.c ****     /*enable OSC_ULP*/
 512:../Startup/system_XMC4800.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 513:../Startup/system_XMC4800.c ****     {
 514:../Startup/system_XMC4800.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 515:../Startup/system_XMC4800.c ****     }
 516:../Startup/system_XMC4800.c ****     SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 517:../Startup/system_XMC4800.c **** 
 518:../Startup/system_XMC4800.c ****     /* Check if the clock is OK using OSCULP Oscillator Watchdog*/
 519:../Startup/system_XMC4800.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 520:../Startup/system_XMC4800.c ****     {
 521:../Startup/system_XMC4800.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 522:../Startup/system_XMC4800.c ****     }
 523:../Startup/system_XMC4800.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 524:../Startup/system_XMC4800.c **** 
 525:../Startup/system_XMC4800.c ****     /* wait till clock is stable */
 526:../Startup/system_XMC4800.c ****     do
 527:../Startup/system_XMC4800.c ****     {
 528:../Startup/system_XMC4800.c ****       while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 529:../Startup/system_XMC4800.c ****       {
 530:../Startup/system_XMC4800.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 531:../Startup/system_XMC4800.c ****       }
 532:../Startup/system_XMC4800.c ****       SCU_HIBERNATE->HDCLR |= SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 533:../Startup/system_XMC4800.c **** 
 534:../Startup/system_XMC4800.c ****       delay(DELAY_CNT_50US_50MHZ);
 535:../Startup/system_XMC4800.c **** 
 536:../Startup/system_XMC4800.c ****     } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 537:../Startup/system_XMC4800.c **** 
 538:../Startup/system_XMC4800.c ****   }
 539:../Startup/system_XMC4800.c **** 
 540:../Startup/system_XMC4800.c ****   /* now OSC_ULP is running and can be used*/
 541:../Startup/system_XMC4800.c ****   /* Select OSC_ULP as the clock source for RTC and STDBY*/
 542:../Startup/system_XMC4800.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 543:../Startup/system_XMC4800.c ****   {
 544:../Startup/system_XMC4800.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 545:../Startup/system_XMC4800.c ****   }
 546:../Startup/system_XMC4800.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
 547:../Startup/system_XMC4800.c **** #endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */
 548:../Startup/system_XMC4800.c **** 
 549:../Startup/system_XMC4800.c ****   /* Enable automatic calibration of internal fast oscillator */
 550:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 300              	 .loc 1 550 0
 301 004a 984A     	 ldr r2,.L30+8
 302 004c 974B     	 ldr r3,.L30+8
 303 004e 5B68     	 ldr r3,[r3,#4]
 304 0050 43F40023 	 orr r3,r3,#524288
 305 0054 5360     	 str r3,[r2,#4]
 551:../Startup/system_XMC4800.c **** #endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */
 552:../Startup/system_XMC4800.c **** 
 553:../Startup/system_XMC4800.c ****   delay(DELAY_CNT_50US_50MHZ);
 306              	 .loc 1 553 0
 307 0056 40F6C410 	 movw r0,#2500
 308 005a FFF7FEFF 	 bl delay
 554:../Startup/system_XMC4800.c **** 
 555:../Startup/system_XMC4800.c **** #if ENABLE_PLL
 556:../Startup/system_XMC4800.c **** 
 557:../Startup/system_XMC4800.c ****   /* enable PLL */
 558:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 309              	 .loc 1 558 0
 310 005e 934A     	 ldr r2,.L30+8
 311 0060 924B     	 ldr r3,.L30+8
 312 0062 5B68     	 ldr r3,[r3,#4]
 313 0064 23F48033 	 bic r3,r3,#65536
 314 0068 23F00203 	 bic r3,r3,#2
 315 006c 5360     	 str r3,[r2,#4]
 559:../Startup/system_XMC4800.c **** 
 560:../Startup/system_XMC4800.c **** #if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
 561:../Startup/system_XMC4800.c ****   /* enable OSC_HP */
 562:../Startup/system_XMC4800.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 316              	 .loc 1 562 0
 317 006e 904B     	 ldr r3,.L30+12
 318 0070 5B68     	 ldr r3,[r3,#4]
 319 0072 03F03003 	 and r3,r3,#48
 320 0076 002B     	 cmp r3,#0
 321 0078 26D0     	 beq .L14
 563:../Startup/system_XMC4800.c ****   {
 564:../Startup/system_XMC4800.c ****     SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 322              	 .loc 1 564 0
 323 007a 8D4A     	 ldr r2,.L30+12
 324 007c 8C4B     	 ldr r3,.L30+12
 325 007e 5B68     	 ldr r3,[r3,#4]
 326 0080 23F47023 	 bic r3,r3,#983040
 327 0084 23F03003 	 bic r3,r3,#48
 328 0088 5360     	 str r3,[r2,#4]
 565:../Startup/system_XMC4800.c ****     SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 329              	 .loc 1 565 0
 330 008a FFF7FEFF 	 bl OSCHP_GetFrequency
 331 008e 0246     	 mov r2,r0
 332 0090 884B     	 ldr r3,.L30+16
 333 0092 A3FB0223 	 umull r2,r3,r3,r2
 334 0096 1B0D     	 lsrs r3,r3,#20
 335 0098 013B     	 subs r3,r3,#1
 336 009a 1B04     	 lsls r3,r3,#16
 337 009c 8449     	 ldr r1,.L30+12
 338 009e 844A     	 ldr r2,.L30+12
 339 00a0 5268     	 ldr r2,[r2,#4]
 340 00a2 1343     	 orrs r3,r3,r2
 341 00a4 4B60     	 str r3,[r1,#4]
 566:../Startup/system_XMC4800.c **** 
 567:../Startup/system_XMC4800.c ****     /* select OSC_HP clock as PLL input */
 568:../Startup/system_XMC4800.c ****     SCU_PLL->PLLCON2 = 0;
 342              	 .loc 1 568 0
 343 00a6 814B     	 ldr r3,.L30+8
 344 00a8 0022     	 movs r2,#0
 345 00aa DA60     	 str r2,[r3,#12]
 569:../Startup/system_XMC4800.c **** 
 570:../Startup/system_XMC4800.c ****     /* restart OSC Watchdog */
 571:../Startup/system_XMC4800.c ****     SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 346              	 .loc 1 571 0
 347 00ac 7F4A     	 ldr r2,.L30+8
 348 00ae 7F4B     	 ldr r3,.L30+8
 349 00b0 5B68     	 ldr r3,[r3,#4]
 350 00b2 23F40033 	 bic r3,r3,#131072
 351 00b6 5360     	 str r3,[r2,#4]
 572:../Startup/system_XMC4800.c **** 
 573:../Startup/system_XMC4800.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 352              	 .loc 1 573 0
 353 00b8 00BF     	 nop
 354              	.L15:
 355              	 .loc 1 573 0 is_stmt 0 discriminator 1
 356 00ba 7C4B     	 ldr r3,.L30+8
 357 00bc 1B68     	 ldr r3,[r3]
 358 00be 03F46073 	 and r3,r3,#896
 359 00c2 B3F5607F 	 cmp r3,#896
 360 00c6 F8D1     	 bne .L15
 361              	.L14:
 574:../Startup/system_XMC4800.c ****     {
 575:../Startup/system_XMC4800.c ****       /* wait till OSC_HP output frequency is usable */
 576:../Startup/system_XMC4800.c ****     }
 577:../Startup/system_XMC4800.c ****   }
 578:../Startup/system_XMC4800.c **** #else /* PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI */
 579:../Startup/system_XMC4800.c **** 
 580:../Startup/system_XMC4800.c ****   /* select backup clock as PLL input */
 581:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
 582:../Startup/system_XMC4800.c **** #endif
 583:../Startup/system_XMC4800.c **** 
 584:../Startup/system_XMC4800.c ****   /* Go to bypass the Main PLL */
 585:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 362              	 .loc 1 585 0 is_stmt 1
 363 00c8 784A     	 ldr r2,.L30+8
 364 00ca 784B     	 ldr r3,.L30+8
 365 00cc 5B68     	 ldr r3,[r3,#4]
 366 00ce 43F00103 	 orr r3,r3,#1
 367 00d2 5360     	 str r3,[r2,#4]
 586:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 368              	 .loc 1 586 0
 369 00d4 00BF     	 nop
 370              	.L16:
 371              	 .loc 1 586 0 is_stmt 0 discriminator 1
 372 00d6 754B     	 ldr r3,.L30+8
 373 00d8 1B68     	 ldr r3,[r3]
 374 00da 03F00103 	 and r3,r3,#1
 375 00de 002B     	 cmp r3,#0
 376 00e0 F9D0     	 beq .L16
 587:../Startup/system_XMC4800.c ****   {
 588:../Startup/system_XMC4800.c ****     /* wait for prescaler mode */
 589:../Startup/system_XMC4800.c ****   }
 590:../Startup/system_XMC4800.c **** 
 591:../Startup/system_XMC4800.c ****   /* disconnect Oscillator from PLL */
 592:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 377              	 .loc 1 592 0 is_stmt 1
 378 00e2 724A     	 ldr r2,.L30+8
 379 00e4 714B     	 ldr r3,.L30+8
 380 00e6 5B68     	 ldr r3,[r3,#4]
 381 00e8 43F01003 	 orr r3,r3,#16
 382 00ec 5360     	 str r3,[r2,#4]
 593:../Startup/system_XMC4800.c **** 
 594:../Startup/system_XMC4800.c ****   /* Setup divider settings for main PLL */
 595:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 383              	 .loc 1 595 0
 384 00ee 6F4B     	 ldr r3,.L30+8
 385 00f0 714A     	 ldr r2,.L30+20
 386 00f2 9A60     	 str r2,[r3,#8]
 596:../Startup/system_XMC4800.c ****                       (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
 597:../Startup/system_XMC4800.c ****                       (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 598:../Startup/system_XMC4800.c **** 
 599:../Startup/system_XMC4800.c ****   /* Set OSCDISCDIS */
 600:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 387              	 .loc 1 600 0
 388 00f4 6D4A     	 ldr r2,.L30+8
 389 00f6 6D4B     	 ldr r3,.L30+8
 390 00f8 5B68     	 ldr r3,[r3,#4]
 391 00fa 43F04003 	 orr r3,r3,#64
 392 00fe 5360     	 str r3,[r2,#4]
 601:../Startup/system_XMC4800.c **** 
 602:../Startup/system_XMC4800.c ****   /* connect Oscillator to PLL */
 603:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 393              	 .loc 1 603 0
 394 0100 6A4A     	 ldr r2,.L30+8
 395 0102 6A4B     	 ldr r3,.L30+8
 396 0104 5B68     	 ldr r3,[r3,#4]
 397 0106 23F01003 	 bic r3,r3,#16
 398 010a 5360     	 str r3,[r2,#4]
 604:../Startup/system_XMC4800.c **** 
 605:../Startup/system_XMC4800.c ****   /* restart PLL Lock detection */
 606:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 399              	 .loc 1 606 0
 400 010c 674A     	 ldr r2,.L30+8
 401 010e 674B     	 ldr r3,.L30+8
 402 0110 5B68     	 ldr r3,[r3,#4]
 403 0112 43F48023 	 orr r3,r3,#262144
 404 0116 5360     	 str r3,[r2,#4]
 607:../Startup/system_XMC4800.c **** 
 608:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 405              	 .loc 1 608 0
 406 0118 00BF     	 nop
 407              	.L17:
 408              	 .loc 1 608 0 is_stmt 0 discriminator 1
 409 011a 644B     	 ldr r3,.L30+8
 410 011c 1B68     	 ldr r3,[r3]
 411 011e 03F00403 	 and r3,r3,#4
 412 0122 002B     	 cmp r3,#0
 413 0124 F9D0     	 beq .L17
 609:../Startup/system_XMC4800.c ****   {
 610:../Startup/system_XMC4800.c ****     /* wait for PLL Lock at 24MHz*/
 611:../Startup/system_XMC4800.c ****   }
 612:../Startup/system_XMC4800.c **** 
 613:../Startup/system_XMC4800.c ****   /* Disable bypass- put PLL clock back */
 614:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 414              	 .loc 1 614 0 is_stmt 1
 415 0126 614A     	 ldr r2,.L30+8
 416 0128 604B     	 ldr r3,.L30+8
 417 012a 5B68     	 ldr r3,[r3,#4]
 418 012c 23F00103 	 bic r3,r3,#1
 419 0130 5360     	 str r3,[r2,#4]
 615:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 420              	 .loc 1 615 0
 421 0132 00BF     	 nop
 422              	.L18:
 423              	 .loc 1 615 0 is_stmt 0 discriminator 1
 424 0134 5D4B     	 ldr r3,.L30+8
 425 0136 1B68     	 ldr r3,[r3]
 426 0138 03F00103 	 and r3,r3,#1
 427 013c 002B     	 cmp r3,#0
 428 013e F9D1     	 bne .L18
 616:../Startup/system_XMC4800.c ****   {
 617:../Startup/system_XMC4800.c ****     /* wait for normal mode */
 618:../Startup/system_XMC4800.c ****   }
 619:../Startup/system_XMC4800.c **** 
 620:../Startup/system_XMC4800.c **** #endif /* ENABLE_PLL */
 621:../Startup/system_XMC4800.c **** 
 622:../Startup/system_XMC4800.c ****   /* Before scaling to final frequency we need to setup the clock dividers */
 623:../Startup/system_XMC4800.c ****   SCU_CLK->SYSCLKCR = __SYSCLKCR;
 429              	 .loc 1 623 0 is_stmt 1
 430 0140 5E4B     	 ldr r3,.L30+24
 431 0142 4FF00112 	 mov r2,#65537
 432 0146 DA60     	 str r2,[r3,#12]
 624:../Startup/system_XMC4800.c ****   SCU_CLK->PBCLKCR = __PBCLKCR;
 433              	 .loc 1 624 0
 434 0148 5C4B     	 ldr r3,.L30+24
 435 014a 0022     	 movs r2,#0
 436 014c 5A61     	 str r2,[r3,#20]
 625:../Startup/system_XMC4800.c ****   SCU_CLK->CPUCLKCR = __CPUCLKCR;
 437              	 .loc 1 625 0
 438 014e 5B4B     	 ldr r3,.L30+24
 439 0150 0022     	 movs r2,#0
 440 0152 1A61     	 str r2,[r3,#16]
 626:../Startup/system_XMC4800.c ****   SCU_CLK->CCUCLKCR = __CCUCLKCR;
 441              	 .loc 1 626 0
 442 0154 594B     	 ldr r3,.L30+24
 443 0156 0022     	 movs r2,#0
 444 0158 1A62     	 str r2,[r3,#32]
 627:../Startup/system_XMC4800.c ****   SCU_CLK->WDTCLKCR = __WDTCLKCR;
 445              	 .loc 1 627 0
 446 015a 584B     	 ldr r3,.L30+24
 447 015c 0022     	 movs r2,#0
 448 015e 5A62     	 str r2,[r3,#36]
 628:../Startup/system_XMC4800.c ****   SCU_CLK->EBUCLKCR = __EBUCLKCR;
 449              	 .loc 1 628 0
 450 0160 564B     	 ldr r3,.L30+24
 451 0162 0322     	 movs r2,#3
 452 0164 DA61     	 str r2,[r3,#28]
 629:../Startup/system_XMC4800.c ****   SCU_CLK->USBCLKCR = __USBCLKCR;
 453              	 .loc 1 629 0
 454 0166 554B     	 ldr r3,.L30+24
 455 0168 554A     	 ldr r2,.L30+28
 456 016a 9A61     	 str r2,[r3,#24]
 630:../Startup/system_XMC4800.c ****   SCU_CLK->ECATCLKCR = __ECATCLKCR;
 457              	 .loc 1 630 0
 458 016c 534B     	 ldr r3,.L30+24
 459 016e 0122     	 movs r2,#1
 460 0170 9A63     	 str r2,[r3,#56]
 631:../Startup/system_XMC4800.c ****   SCU_CLK->EXTCLKCR = __EXTCLKCR;
 461              	 .loc 1 631 0
 462 0172 524B     	 ldr r3,.L30+24
 463 0174 534A     	 ldr r2,.L30+32
 464 0176 9A62     	 str r2,[r3,#40]
 632:../Startup/system_XMC4800.c **** 
 633:../Startup/system_XMC4800.c **** #if ENABLE_PLL
 634:../Startup/system_XMC4800.c ****   /* PLL frequency stepping...*/
 635:../Startup/system_XMC4800.c ****   /* Reset OSCDISCDIS */
 636:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 465              	 .loc 1 636 0
 466 0178 4C4A     	 ldr r2,.L30+8
 467 017a 4C4B     	 ldr r3,.L30+8
 468 017c 5B68     	 ldr r3,[r3,#4]
 469 017e 23F04003 	 bic r3,r3,#64
 470 0182 5360     	 str r3,[r2,#4]
 637:../Startup/system_XMC4800.c **** 
 638:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 471              	 .loc 1 638 0
 472 0184 494B     	 ldr r3,.L30+8
 473 0186 504A     	 ldr r2,.L30+36
 474 0188 9A60     	 str r2,[r3,#8]
 639:../Startup/system_XMC4800.c **** 	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
 640:../Startup/system_XMC4800.c **** 	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 641:../Startup/system_XMC4800.c **** 
 642:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 475              	 .loc 1 642 0
 476 018a 00BF     	 nop
 477              	.L19:
 478              	 .loc 1 642 0 is_stmt 0 discriminator 1
 479 018c 474B     	 ldr r3,.L30+8
 480 018e 1B68     	 ldr r3,[r3]
 481 0190 03F02003 	 and r3,r3,#32
 482 0194 002B     	 cmp r3,#0
 483 0196 F9D0     	 beq .L19
 643:../Startup/system_XMC4800.c ****   {
 644:../Startup/system_XMC4800.c ****     /* wait until K2-divider operates on the configured value  */
 645:../Startup/system_XMC4800.c ****   }
 646:../Startup/system_XMC4800.c **** 
 647:../Startup/system_XMC4800.c ****   delay(DELAY_CNT_50US_48MHZ);
 484              	 .loc 1 647 0 is_stmt 1
 485 0198 4FF41660 	 mov r0,#2400
 486 019c FFF7FEFF 	 bl delay
 648:../Startup/system_XMC4800.c **** 
 649:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 487              	 .loc 1 649 0
 488 01a0 424B     	 ldr r3,.L30+8
 489 01a2 4A4A     	 ldr r2,.L30+40
 490 01a4 9A60     	 str r2,[r3,#8]
 650:../Startup/system_XMC4800.c **** 	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
 651:../Startup/system_XMC4800.c **** 	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 652:../Startup/system_XMC4800.c **** 
 653:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 491              	 .loc 1 653 0
 492 01a6 00BF     	 nop
 493              	.L20:
 494              	 .loc 1 653 0 is_stmt 0 discriminator 1
 495 01a8 404B     	 ldr r3,.L30+8
 496 01aa 1B68     	 ldr r3,[r3]
 497 01ac 03F02003 	 and r3,r3,#32
 498 01b0 002B     	 cmp r3,#0
 499 01b2 F9D0     	 beq .L20
 654:../Startup/system_XMC4800.c ****   {
 655:../Startup/system_XMC4800.c ****     /* wait until K2-divider operates on the configured value  */
 656:../Startup/system_XMC4800.c ****   }
 657:../Startup/system_XMC4800.c **** 
 658:../Startup/system_XMC4800.c ****   delay(DELAY_CNT_50US_72MHZ);
 500              	 .loc 1 658 0 is_stmt 1
 501 01b4 4FF46160 	 mov r0,#3600
 502 01b8 FFF7FEFF 	 bl delay
 659:../Startup/system_XMC4800.c **** 
 660:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 503              	 .loc 1 660 0
 504 01bc 3B4B     	 ldr r3,.L30+8
 505 01be 444A     	 ldr r2,.L30+44
 506 01c0 9A60     	 str r2,[r3,#8]
 661:../Startup/system_XMC4800.c **** 	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
 662:../Startup/system_XMC4800.c **** 	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 663:../Startup/system_XMC4800.c **** 
 664:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 507              	 .loc 1 664 0
 508 01c2 00BF     	 nop
 509              	.L21:
 510              	 .loc 1 664 0 is_stmt 0 discriminator 1
 511 01c4 394B     	 ldr r3,.L30+8
 512 01c6 1B68     	 ldr r3,[r3]
 513 01c8 03F02003 	 and r3,r3,#32
 514 01cc 002B     	 cmp r3,#0
 515 01ce F9D0     	 beq .L21
 665:../Startup/system_XMC4800.c ****   {
 666:../Startup/system_XMC4800.c ****     /* wait until K2-divider operates on the configured value  */
 667:../Startup/system_XMC4800.c ****   }
 668:../Startup/system_XMC4800.c **** 
 669:../Startup/system_XMC4800.c ****   delay(DELAY_CNT_50US_96MHZ);
 516              	 .loc 1 669 0 is_stmt 1
 517 01d0 4FF49650 	 mov r0,#4800
 518 01d4 FFF7FEFF 	 bl delay
 670:../Startup/system_XMC4800.c **** 
 671:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 519              	 .loc 1 671 0
 520 01d8 344B     	 ldr r3,.L30+8
 521 01da 3E4A     	 ldr r2,.L30+48
 522 01dc 9A60     	 str r2,[r3,#8]
 672:../Startup/system_XMC4800.c **** 	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
 673:../Startup/system_XMC4800.c **** 	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 674:../Startup/system_XMC4800.c **** 
 675:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 523              	 .loc 1 675 0
 524 01de 00BF     	 nop
 525              	.L22:
 526              	 .loc 1 675 0 is_stmt 0 discriminator 1
 527 01e0 324B     	 ldr r3,.L30+8
 528 01e2 1B68     	 ldr r3,[r3]
 529 01e4 03F02003 	 and r3,r3,#32
 530 01e8 002B     	 cmp r3,#0
 531 01ea F9D0     	 beq .L22
 676:../Startup/system_XMC4800.c ****   {
 677:../Startup/system_XMC4800.c ****     /* wait until K2-divider operates on the configured value  */
 678:../Startup/system_XMC4800.c ****   }
 679:../Startup/system_XMC4800.c **** 
 680:../Startup/system_XMC4800.c ****   delay(DELAY_CNT_50US_120MHZ);
 532              	 .loc 1 680 0 is_stmt 1
 533 01ec 41F27070 	 movw r0,#6000
 534 01f0 FFF7FEFF 	 bl delay
 681:../Startup/system_XMC4800.c **** 
 682:../Startup/system_XMC4800.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 535              	 .loc 1 682 0
 536 01f4 2D4B     	 ldr r3,.L30+8
 537 01f6 384A     	 ldr r2,.L30+52
 538 01f8 9A60     	 str r2,[r3,#8]
 683:../Startup/system_XMC4800.c **** 	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
 684:../Startup/system_XMC4800.c **** 	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 685:../Startup/system_XMC4800.c **** 
 686:../Startup/system_XMC4800.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 539              	 .loc 1 686 0
 540 01fa 00BF     	 nop
 541              	.L23:
 542              	 .loc 1 686 0 is_stmt 0 discriminator 1
 543 01fc 2B4B     	 ldr r3,.L30+8
 544 01fe 1B68     	 ldr r3,[r3]
 545 0200 03F02003 	 and r3,r3,#32
 546 0204 002B     	 cmp r3,#0
 547 0206 F9D0     	 beq .L23
 687:../Startup/system_XMC4800.c ****   {
 688:../Startup/system_XMC4800.c ****     /* wait until K2-divider operates on the configured value  */
 689:../Startup/system_XMC4800.c ****   }
 690:../Startup/system_XMC4800.c **** 
 691:../Startup/system_XMC4800.c ****   delay(DELAY_CNT_50US_144MHZ);
 548              	 .loc 1 691 0 is_stmt 1
 549 0208 4FF4E150 	 mov r0,#7200
 550 020c FFF7FEFF 	 bl delay
 692:../Startup/system_XMC4800.c **** 
 693:../Startup/system_XMC4800.c ****   SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 551              	 .loc 1 693 0
 552 0210 324B     	 ldr r3,.L30+56
 553 0212 0522     	 movs r2,#5
 554 0214 DA60     	 str r2,[r3,#12]
 694:../Startup/system_XMC4800.c **** #endif /* ENABLE_PLL */
 695:../Startup/system_XMC4800.c **** 
 696:../Startup/system_XMC4800.c **** #if ENABLE_USBPLL
 697:../Startup/system_XMC4800.c ****   /* enable USB PLL first */
 698:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 555              	 .loc 1 698 0
 556 0216 254A     	 ldr r2,.L30+8
 557 0218 244B     	 ldr r3,.L30+8
 558 021a 5B69     	 ldr r3,[r3,#20]
 559 021c 23F48033 	 bic r3,r3,#65536
 560 0220 23F00203 	 bic r3,r3,#2
 561 0224 5361     	 str r3,[r2,#20]
 699:../Startup/system_XMC4800.c **** 
 700:../Startup/system_XMC4800.c ****   /* USB PLL uses as clock input the OSC_HP */
 701:../Startup/system_XMC4800.c ****   /* check and if not already running enable OSC_HP */
 702:../Startup/system_XMC4800.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 562              	 .loc 1 702 0
 563 0226 224B     	 ldr r3,.L30+12
 564 0228 5B68     	 ldr r3,[r3,#4]
 565 022a 03F03003 	 and r3,r3,#48
 566 022e 002B     	 cmp r3,#0
 567 0230 31D0     	 beq .L24
 703:../Startup/system_XMC4800.c ****   {
 704:../Startup/system_XMC4800.c ****     /* check if Main PLL is switched on for OSC WDG*/
 705:../Startup/system_XMC4800.c ****     if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 568              	 .loc 1 705 0
 569 0232 1E4B     	 ldr r3,.L30+8
 570 0234 5A68     	 ldr r2,[r3,#4]
 571 0236 2A4B     	 ldr r3,.L30+60
 572 0238 1340     	 ands r3,r3,r2
 573 023a 002B     	 cmp r3,#0
 574 023c 07D0     	 beq .L25
 706:../Startup/system_XMC4800.c ****     {
 707:../Startup/system_XMC4800.c ****       /* enable PLL first */
 708:../Startup/system_XMC4800.c ****       SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 575              	 .loc 1 708 0
 576 023e 1B4A     	 ldr r2,.L30+8
 577 0240 1A4B     	 ldr r3,.L30+8
 578 0242 5B68     	 ldr r3,[r3,#4]
 579 0244 23F48033 	 bic r3,r3,#65536
 580 0248 23F00203 	 bic r3,r3,#2
 581 024c 5360     	 str r3,[r2,#4]
 582              	.L25:
 709:../Startup/system_XMC4800.c ****     }
 710:../Startup/system_XMC4800.c **** 
 711:../Startup/system_XMC4800.c ****     SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 583              	 .loc 1 711 0
 584 024e 184A     	 ldr r2,.L30+12
 585 0250 174B     	 ldr r3,.L30+12
 586 0252 5B68     	 ldr r3,[r3,#4]
 587 0254 23F47023 	 bic r3,r3,#983040
 588 0258 23F03003 	 bic r3,r3,#48
 589 025c 5360     	 str r3,[r2,#4]
 712:../Startup/system_XMC4800.c ****     SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 590              	 .loc 1 712 0
 591 025e FFF7FEFF 	 bl OSCHP_GetFrequency
 592 0262 0246     	 mov r2,r0
 593 0264 134B     	 ldr r3,.L30+16
 594 0266 A3FB0223 	 umull r2,r3,r3,r2
 595 026a 1B0D     	 lsrs r3,r3,#20
 596 026c 013B     	 subs r3,r3,#1
 597 026e 1B04     	 lsls r3,r3,#16
 598 0270 0F49     	 ldr r1,.L30+12
 599 0272 0F4A     	 ldr r2,.L30+12
 600 0274 5268     	 ldr r2,[r2,#4]
 601 0276 1343     	 orrs r3,r3,r2
 602 0278 4B60     	 str r3,[r1,#4]
 713:../Startup/system_XMC4800.c **** 
 714:../Startup/system_XMC4800.c ****     /* restart OSC Watchdog */
 715:../Startup/system_XMC4800.c ****     SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 603              	 .loc 1 715 0
 604 027a 0C4A     	 ldr r2,.L30+8
 605 027c 0B4B     	 ldr r3,.L30+8
 606 027e 5B68     	 ldr r3,[r3,#4]
 607 0280 23F40033 	 bic r3,r3,#131072
 608 0284 5360     	 str r3,[r2,#4]
 716:../Startup/system_XMC4800.c **** 
 717:../Startup/system_XMC4800.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 609              	 .loc 1 717 0
 610 0286 00BF     	 nop
 611              	.L26:
 612              	 .loc 1 717 0 is_stmt 0 discriminator 1
 613 0288 084B     	 ldr r3,.L30+8
 614 028a 1B68     	 ldr r3,[r3]
 615 028c 03F46073 	 and r3,r3,#896
 616 0290 B3F5607F 	 cmp r3,#896
 617 0294 F8D1     	 bne .L26
 618              	.L24:
 718:../Startup/system_XMC4800.c ****     {
 719:../Startup/system_XMC4800.c ****       /* wait till OSC_HP output frequency is usable */
 720:../Startup/system_XMC4800.c ****     }
 721:../Startup/system_XMC4800.c ****   }
 722:../Startup/system_XMC4800.c **** 
 723:../Startup/system_XMC4800.c ****   /* Setup USB PLL */
 724:../Startup/system_XMC4800.c ****   /* Go to bypass the USB PLL */
 725:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 619              	 .loc 1 725 0 is_stmt 1
 620 0296 054A     	 ldr r2,.L30+8
 621 0298 044B     	 ldr r3,.L30+8
 622 029a 5B69     	 ldr r3,[r3,#20]
 623 029c 43F00103 	 orr r3,r3,#1
 624 02a0 5361     	 str r3,[r2,#20]
 625 02a2 1FE0     	 b .L31
 626              	.L32:
 627              	 .align 2
 628              	.L30:
 629 02a4 00420050 	 .word 1342194176
 630 02a8 00440050 	 .word 1342194688
 631 02ac 10470050 	 .word 1342195472
 632 02b0 00470050 	 .word 1342195456
 633 02b4 6BCA5F6B 	 .word 1801439851
 634 02b8 002F0B01 	 .word 17510144
 635 02bc 00460050 	 .word 1342195200
 636 02c0 05000100 	 .word 65541
 637 02c4 03002001 	 .word 18874371
 638 02c8 002F0501 	 .word 17116928
 639 02cc 002F0301 	 .word 16985856
 640 02d0 002F0201 	 .word 16920320
 641 02d4 002F0101 	 .word 16854784
 642 02d8 002F0001 	 .word 16789248
 643 02dc 60410050 	 .word 1342194016
 644 02e0 02000100 	 .word 65538
 645              	.L31:
 726:../Startup/system_XMC4800.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 646              	 .loc 1 726 0
 647 02e4 00BF     	 nop
 648              	.L27:
 649              	 .loc 1 726 0 is_stmt 0 discriminator 1
 650 02e6 224B     	 ldr r3,.L33
 651 02e8 1B69     	 ldr r3,[r3,#16]
 652 02ea 03F00103 	 and r3,r3,#1
 653 02ee 002B     	 cmp r3,#0
 654 02f0 F9D0     	 beq .L27
 727:../Startup/system_XMC4800.c ****   {
 728:../Startup/system_XMC4800.c ****     /* wait for prescaler mode */
 729:../Startup/system_XMC4800.c ****   }
 730:../Startup/system_XMC4800.c **** 
 731:../Startup/system_XMC4800.c ****   /* disconnect Oscillator from USB PLL */
 732:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 655              	 .loc 1 732 0 is_stmt 1
 656 02f2 1F4A     	 ldr r2,.L33
 657 02f4 1E4B     	 ldr r3,.L33
 658 02f6 5B69     	 ldr r3,[r3,#20]
 659 02f8 43F01003 	 orr r3,r3,#16
 660 02fc 5361     	 str r3,[r2,#20]
 733:../Startup/system_XMC4800.c **** 
 734:../Startup/system_XMC4800.c ****   /* Setup Divider settings for USB PLL */
 735:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 661              	 .loc 1 735 0
 662 02fe 1C4B     	 ldr r3,.L33
 663 0300 1C4A     	 ldr r2,.L33+4
 664 0302 5A61     	 str r2,[r3,#20]
 736:../Startup/system_XMC4800.c ****                         (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));
 737:../Startup/system_XMC4800.c **** 
 738:../Startup/system_XMC4800.c ****   /* Set OSCDISCDIS */
 739:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 665              	 .loc 1 739 0
 666 0304 1A4A     	 ldr r2,.L33
 667 0306 1A4B     	 ldr r3,.L33
 668 0308 5B69     	 ldr r3,[r3,#20]
 669 030a 43F04003 	 orr r3,r3,#64
 670 030e 5361     	 str r3,[r2,#20]
 740:../Startup/system_XMC4800.c **** 
 741:../Startup/system_XMC4800.c ****   /* connect Oscillator to USB PLL */
 742:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 671              	 .loc 1 742 0
 672 0310 174A     	 ldr r2,.L33
 673 0312 174B     	 ldr r3,.L33
 674 0314 5B69     	 ldr r3,[r3,#20]
 675 0316 23F01003 	 bic r3,r3,#16
 676 031a 5361     	 str r3,[r2,#20]
 743:../Startup/system_XMC4800.c **** 
 744:../Startup/system_XMC4800.c ****   /* restart PLL Lock detection */
 745:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 677              	 .loc 1 745 0
 678 031c 144A     	 ldr r2,.L33
 679 031e 144B     	 ldr r3,.L33
 680 0320 5B69     	 ldr r3,[r3,#20]
 681 0322 43F48023 	 orr r3,r3,#262144
 682 0326 5361     	 str r3,[r2,#20]
 746:../Startup/system_XMC4800.c **** 
 747:../Startup/system_XMC4800.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 683              	 .loc 1 747 0
 684 0328 00BF     	 nop
 685              	.L28:
 686              	 .loc 1 747 0 is_stmt 0 discriminator 1
 687 032a 114B     	 ldr r3,.L33
 688 032c 1B69     	 ldr r3,[r3,#16]
 689 032e 03F00403 	 and r3,r3,#4
 690 0332 002B     	 cmp r3,#0
 691 0334 F9D0     	 beq .L28
 748:../Startup/system_XMC4800.c ****   {
 749:../Startup/system_XMC4800.c ****     /* wait for PLL Lock */
 750:../Startup/system_XMC4800.c ****   }
 751:../Startup/system_XMC4800.c **** 
 752:../Startup/system_XMC4800.c ****   /* Disable bypass- put PLL clock back */
 753:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 692              	 .loc 1 753 0 is_stmt 1
 693 0336 0E4A     	 ldr r2,.L33
 694 0338 0D4B     	 ldr r3,.L33
 695 033a 5B69     	 ldr r3,[r3,#20]
 696 033c 23F00103 	 bic r3,r3,#1
 697 0340 5361     	 str r3,[r2,#20]
 754:../Startup/system_XMC4800.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 698              	 .loc 1 754 0
 699 0342 00BF     	 nop
 700              	.L29:
 701              	 .loc 1 754 0 is_stmt 0 discriminator 1
 702 0344 0A4B     	 ldr r3,.L33
 703 0346 1B69     	 ldr r3,[r3,#16]
 704 0348 03F00103 	 and r3,r3,#1
 705 034c 002B     	 cmp r3,#0
 706 034e F9D1     	 bne .L29
 755:../Startup/system_XMC4800.c ****   {
 756:../Startup/system_XMC4800.c ****     /* wait for normal mode */
 757:../Startup/system_XMC4800.c ****   }
 758:../Startup/system_XMC4800.c **** 
 759:../Startup/system_XMC4800.c ****   /* Reset OSCDISCDIS */
 760:../Startup/system_XMC4800.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 707              	 .loc 1 760 0 is_stmt 1
 708 0350 074A     	 ldr r2,.L33
 709 0352 074B     	 ldr r3,.L33
 710 0354 5B69     	 ldr r3,[r3,#20]
 711 0356 23F04003 	 bic r3,r3,#64
 712 035a 5361     	 str r3,[r2,#20]
 761:../Startup/system_XMC4800.c **** 
 762:../Startup/system_XMC4800.c ****   SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 713              	 .loc 1 762 0
 714 035c 064B     	 ldr r3,.L33+8
 715 035e 0822     	 movs r2,#8
 716 0360 DA60     	 str r2,[r3,#12]
 763:../Startup/system_XMC4800.c **** #endif
 764:../Startup/system_XMC4800.c **** 
 765:../Startup/system_XMC4800.c ****   /* Enable selected clocks */
 766:../Startup/system_XMC4800.c ****   SCU_CLK->CLKSET = __CLKSET;
 717              	 .loc 1 766 0
 718 0362 064B     	 ldr r3,.L33+12
 719 0364 0022     	 movs r2,#0
 720 0366 5A60     	 str r2,[r3,#4]
 767:../Startup/system_XMC4800.c **** 
 768:../Startup/system_XMC4800.c **** #if __EXTCLKPIN != 0
 769:../Startup/system_XMC4800.c **** #if __EXTCLKPIN == EXTCLK_PIN_P1_15
 770:../Startup/system_XMC4800.c ****   /* P1.15 */
 771:../Startup/system_XMC4800.c ****   PORT1->PDR1 &= ~PORT1_PDR1_PD15_Msk;
 772:../Startup/system_XMC4800.c ****   PORT1->IOCR12 = (PORT1->IOCR12 & ~PORT0_IOCR12_PC15_Msk) | (0x11U << PORT0_IOCR12_PC15_Pos);
 773:../Startup/system_XMC4800.c **** #else
 774:../Startup/system_XMC4800.c ****   /* P0.8 */
 775:../Startup/system_XMC4800.c ****   PORT0->HWSEL &= ~PORT0_HWSEL_HW8_Msk;
 776:../Startup/system_XMC4800.c ****   PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
 777:../Startup/system_XMC4800.c ****   PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
 778:../Startup/system_XMC4800.c **** #endif
 779:../Startup/system_XMC4800.c **** #endif  /* ENABLE_EXTCLK == 1  */
 780:../Startup/system_XMC4800.c **** 
 781:../Startup/system_XMC4800.c ****   SystemCoreClockUpdate();
 721              	 .loc 1 781 0
 722 0368 FFF7FEFF 	 bl SystemCoreClockUpdate
 782:../Startup/system_XMC4800.c **** }
 723              	 .loc 1 782 0
 724 036c 80BD     	 pop {r7,pc}
 725              	.L34:
 726 036e 00BF     	 .align 2
 727              	.L33:
 728 0370 10470050 	 .word 1342195472
 729 0374 00630002 	 .word 33579776
 730 0378 60410050 	 .word 1342194016
 731 037c 00460050 	 .word 1342195200
 732              	 .cfi_endproc
 733              	.LFE136:
 735              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
 736              	 .align 2
 737              	 .weak SystemCoreClockUpdate
 738              	 .thumb
 739              	 .thumb_func
 741              	SystemCoreClockUpdate:
 742              	.LFB137:
 783:../Startup/system_XMC4800.c **** 
 784:../Startup/system_XMC4800.c **** __WEAK void SystemCoreClockUpdate(void)
 785:../Startup/system_XMC4800.c **** {
 743              	 .loc 1 785 0
 744              	 .cfi_startproc
 745              	 
 746              	 
 747 0000 80B5     	 push {r7,lr}
 748              	.LCFI16:
 749              	 .cfi_def_cfa_offset 8
 750              	 .cfi_offset 7,-8
 751              	 .cfi_offset 14,-4
 752 0002 84B0     	 sub sp,sp,#16
 753              	.LCFI17:
 754              	 .cfi_def_cfa_offset 24
 755 0004 00AF     	 add r7,sp,#0
 756              	.LCFI18:
 757              	 .cfi_def_cfa_register 7
 786:../Startup/system_XMC4800.c ****   uint32_t pdiv;
 787:../Startup/system_XMC4800.c ****   uint32_t ndiv;
 788:../Startup/system_XMC4800.c ****   uint32_t kdiv;
 789:../Startup/system_XMC4800.c ****   uint32_t temp;
 790:../Startup/system_XMC4800.c **** 
 791:../Startup/system_XMC4800.c ****   if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 758              	 .loc 1 791 0
 759 0006 2F4B     	 ldr r3,.L42
 760 0008 DB68     	 ldr r3,[r3,#12]
 761 000a 03F48033 	 and r3,r3,#65536
 762 000e 002B     	 cmp r3,#0
 763 0010 3ED0     	 beq .L36
 792:../Startup/system_XMC4800.c ****   {
 793:../Startup/system_XMC4800.c ****     /* fPLL is clock source for fSYS */
 794:../Startup/system_XMC4800.c ****     if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 764              	 .loc 1 794 0
 765 0012 2D4B     	 ldr r3,.L42+4
 766 0014 DB68     	 ldr r3,[r3,#12]
 767 0016 03F00103 	 and r3,r3,#1
 768 001a 002B     	 cmp r3,#0
 769 001c 02D0     	 beq .L37
 795:../Startup/system_XMC4800.c ****     {
 796:../Startup/system_XMC4800.c ****       /* PLL input clock is the backup clock (fOFI) */
 797:../Startup/system_XMC4800.c ****       temp = OFI_FREQUENCY;
 770              	 .loc 1 797 0
 771 001e 2B4B     	 ldr r3,.L42+8
 772 0020 FB60     	 str r3,[r7,#12]
 773 0022 02E0     	 b .L38
 774              	.L37:
 798:../Startup/system_XMC4800.c ****     }
 799:../Startup/system_XMC4800.c ****     else
 800:../Startup/system_XMC4800.c ****     {
 801:../Startup/system_XMC4800.c ****       /* PLL input clock is the high performance osicllator (fOSCHP) */
 802:../Startup/system_XMC4800.c ****       temp = OSCHP_GetFrequency();
 775              	 .loc 1 802 0
 776 0024 FFF7FEFF 	 bl OSCHP_GetFrequency
 777 0028 F860     	 str r0,[r7,#12]
 778              	.L38:
 803:../Startup/system_XMC4800.c ****     }
 804:../Startup/system_XMC4800.c **** 
 805:../Startup/system_XMC4800.c ****     /* check if PLL is locked */
 806:../Startup/system_XMC4800.c ****     if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 779              	 .loc 1 806 0
 780 002a 274B     	 ldr r3,.L42+4
 781 002c 1B68     	 ldr r3,[r3]
 782 002e 03F00403 	 and r3,r3,#4
 783 0032 002B     	 cmp r3,#0
 784 0034 20D0     	 beq .L39
 807:../Startup/system_XMC4800.c ****     {
 808:../Startup/system_XMC4800.c ****       /* PLL normal mode */
 809:../Startup/system_XMC4800.c ****       /* read back divider settings */
 810:../Startup/system_XMC4800.c ****       pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 785              	 .loc 1 810 0
 786 0036 244B     	 ldr r3,.L42+4
 787 0038 9B68     	 ldr r3,[r3,#8]
 788 003a 03F07063 	 and r3,r3,#251658240
 789 003e 1B0E     	 lsrs r3,r3,#24
 790 0040 0133     	 adds r3,r3,#1
 791 0042 BB60     	 str r3,[r7,#8]
 811:../Startup/system_XMC4800.c ****       ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 792              	 .loc 1 811 0
 793 0044 204B     	 ldr r3,.L42+4
 794 0046 9B68     	 ldr r3,[r3,#8]
 795 0048 03F4FE43 	 and r3,r3,#32512
 796 004c 1B0A     	 lsrs r3,r3,#8
 797 004e 0133     	 adds r3,r3,#1
 798 0050 7B60     	 str r3,[r7,#4]
 812:../Startup/system_XMC4800.c ****       kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 799              	 .loc 1 812 0
 800 0052 1D4B     	 ldr r3,.L42+4
 801 0054 9B68     	 ldr r3,[r3,#8]
 802 0056 03F4FE03 	 and r3,r3,#8323072
 803 005a 1B0C     	 lsrs r3,r3,#16
 804 005c 0133     	 adds r3,r3,#1
 805 005e 3B60     	 str r3,[r7]
 813:../Startup/system_XMC4800.c **** 
 814:../Startup/system_XMC4800.c ****       temp = (temp / (pdiv * kdiv)) * ndiv;
 806              	 .loc 1 814 0
 807 0060 BB68     	 ldr r3,[r7,#8]
 808 0062 3A68     	 ldr r2,[r7]
 809 0064 02FB03F3 	 mul r3,r2,r3
 810 0068 FA68     	 ldr r2,[r7,#12]
 811 006a B2FBF3F3 	 udiv r3,r2,r3
 812 006e 7A68     	 ldr r2,[r7,#4]
 813 0070 02FB03F3 	 mul r3,r2,r3
 814 0074 FB60     	 str r3,[r7,#12]
 815 0076 0DE0     	 b .L41
 816              	.L39:
 815:../Startup/system_XMC4800.c ****     }
 816:../Startup/system_XMC4800.c ****     else
 817:../Startup/system_XMC4800.c ****     {
 818:../Startup/system_XMC4800.c ****       /* PLL prescalar mode */
 819:../Startup/system_XMC4800.c ****       /* read back divider settings */
 820:../Startup/system_XMC4800.c ****       kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 817              	 .loc 1 820 0
 818 0078 134B     	 ldr r3,.L42+4
 819 007a 9B68     	 ldr r3,[r3,#8]
 820 007c 03F07F03 	 and r3,r3,#127
 821 0080 0133     	 adds r3,r3,#1
 822 0082 3B60     	 str r3,[r7]
 821:../Startup/system_XMC4800.c **** 
 822:../Startup/system_XMC4800.c ****       temp = (temp / kdiv);
 823              	 .loc 1 822 0
 824 0084 FA68     	 ldr r2,[r7,#12]
 825 0086 3B68     	 ldr r3,[r7]
 826 0088 B2FBF3F3 	 udiv r3,r2,r3
 827 008c FB60     	 str r3,[r7,#12]
 828 008e 01E0     	 b .L41
 829              	.L36:
 823:../Startup/system_XMC4800.c ****     }
 824:../Startup/system_XMC4800.c ****   }
 825:../Startup/system_XMC4800.c ****   else
 826:../Startup/system_XMC4800.c ****   {
 827:../Startup/system_XMC4800.c ****     /* fOFI is clock source for fSYS */
 828:../Startup/system_XMC4800.c ****     temp = OFI_FREQUENCY;
 830              	 .loc 1 828 0
 831 0090 0E4B     	 ldr r3,.L42+8
 832 0092 FB60     	 str r3,[r7,#12]
 833              	.L41:
 829:../Startup/system_XMC4800.c ****   }
 830:../Startup/system_XMC4800.c **** 
 831:../Startup/system_XMC4800.c ****   temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 834              	 .loc 1 831 0
 835 0094 0B4B     	 ldr r3,.L42
 836 0096 DB68     	 ldr r3,[r3,#12]
 837 0098 DBB2     	 uxtb r3,r3
 838 009a 0133     	 adds r3,r3,#1
 839 009c FA68     	 ldr r2,[r7,#12]
 840 009e B2FBF3F3 	 udiv r3,r2,r3
 841 00a2 FB60     	 str r3,[r7,#12]
 832:../Startup/system_XMC4800.c ****   temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 842              	 .loc 1 832 0
 843 00a4 074B     	 ldr r3,.L42
 844 00a6 1B69     	 ldr r3,[r3,#16]
 845 00a8 03F00103 	 and r3,r3,#1
 846 00ac 0133     	 adds r3,r3,#1
 847 00ae FA68     	 ldr r2,[r7,#12]
 848 00b0 B2FBF3F3 	 udiv r3,r2,r3
 849 00b4 FB60     	 str r3,[r7,#12]
 833:../Startup/system_XMC4800.c **** 
 834:../Startup/system_XMC4800.c ****   SystemCoreClock = temp;
 850              	 .loc 1 834 0
 851 00b6 064A     	 ldr r2,.L42+12
 852 00b8 FB68     	 ldr r3,[r7,#12]
 853 00ba 1360     	 str r3,[r2]
 835:../Startup/system_XMC4800.c **** }
 854              	 .loc 1 835 0
 855 00bc 1037     	 adds r7,r7,#16
 856              	.LCFI19:
 857              	 .cfi_def_cfa_offset 8
 858 00be BD46     	 mov sp,r7
 859              	.LCFI20:
 860              	 .cfi_def_cfa_register 13
 861              	 
 862 00c0 80BD     	 pop {r7,pc}
 863              	.L43:
 864 00c2 00BF     	 .align 2
 865              	.L42:
 866 00c4 00460050 	 .word 1342195200
 867 00c8 10470050 	 .word 1342195472
 868 00cc 00366E01 	 .word 24000000
 869 00d0 00000000 	 .word SystemCoreClock
 870              	 .cfi_endproc
 871              	.LFE137:
 873              	 .section .text.OSCHP_GetFrequency,"ax",%progbits
 874              	 .align 2
 875              	 .weak OSCHP_GetFrequency
 876              	 .thumb
 877              	 .thumb_func
 879              	OSCHP_GetFrequency:
 880              	.LFB138:
 836:../Startup/system_XMC4800.c **** 
 837:../Startup/system_XMC4800.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 838:../Startup/system_XMC4800.c **** {
 881              	 .loc 1 838 0
 882              	 .cfi_startproc
 883              	 
 884              	 
 885              	 
 886 0000 80B4     	 push {r7}
 887              	.LCFI21:
 888              	 .cfi_def_cfa_offset 4
 889              	 .cfi_offset 7,-4
 890 0002 00AF     	 add r7,sp,#0
 891              	.LCFI22:
 892              	 .cfi_def_cfa_register 7
 839:../Startup/system_XMC4800.c ****   return OSCHP_FREQUENCY;
 893              	 .loc 1 839 0
 894 0004 024B     	 ldr r3,.L46
 840:../Startup/system_XMC4800.c **** }
 895              	 .loc 1 840 0
 896 0006 1846     	 mov r0,r3
 897 0008 BD46     	 mov sp,r7
 898              	.LCFI23:
 899              	 .cfi_def_cfa_register 13
 900              	 
 901 000a 5DF8047B 	 ldr r7,[sp],#4
 902              	.LCFI24:
 903              	 .cfi_restore 7
 904              	 .cfi_def_cfa_offset 0
 905 000e 7047     	 bx lr
 906              	.L47:
 907              	 .align 2
 908              	.L46:
 909 0010 001BB700 	 .word 12000000
 910              	 .cfi_endproc
 911              	.LFE138:
 913              	 .text
 914              	.Letext0:
 915              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 916              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 917              	 .file 5 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include/core_cm4.h"
 918              	 .file 6 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC4800.c
    {standard input}:24     .no_init:00000000 SystemCoreClock
    {standard input}:21     .no_init:00000000 $d
    {standard input}:30     .no_init:00000004 g_chipid
    {standard input}:33     .text.delay:00000000 $t
    {standard input}:37     .text.delay:00000000 delay
    {standard input}:93     .text.SystemInit:00000000 $t
    {standard input}:98     .text.SystemInit:00000000 SystemInit
    {standard input}:139    .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:248    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:129    .text.SystemInit:0000001c $d
    {standard input}:134    .text.SystemCoreSetup:00000000 $t
    {standard input}:236    .text.SystemCoreSetup:00000064 $d
    {standard input}:243    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:879    .text.OSCHP_GetFrequency:00000000 OSCHP_GetFrequency
    {standard input}:629    .text.SystemCoreClockSetup:000002a4 $d
    {standard input}:647    .text.SystemCoreClockSetup:000002e4 $t
    {standard input}:741    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:728    .text.SystemCoreClockSetup:00000370 $d
    {standard input}:736    .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:866    .text.SystemCoreClockUpdate:000000c4 $d
    {standard input}:874    .text.OSCHP_GetFrequency:00000000 $t
    {standard input}:909    .text.OSCHP_GetFrequency:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__Vectors
