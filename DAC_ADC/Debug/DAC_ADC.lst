
DAC_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b08  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         000000cc  1ffe8800  0c004b08  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000018  1ffe88cc  0c004bd4  000108cc  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000e50  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017510  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002daf  00000000  00000000  00028c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006268  00000000  00000000  0002b9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003db0  00000000  00000000  00031c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009aed  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007cd0  00000000  00000000  0003f4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c70  00000000  00000000  000471b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000822  00000000  00000000  00047e25  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	85 2a 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .*..............
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c004b08 	.word	0x0c004b08
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000000cc 	.word	0x000000cc
 8000254:	0c004b08 	.word	0x0c004b08
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe88cc 	.word	0x1ffe88cc
 8000264:	00000018 	.word	0x00000018
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08004785 	.word	0x08004785
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08002a6d 	.word	0x08002a6d

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f001 ffef 	bl	8002290 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f002 f86b 	bl	800238c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f002 f836 	bl	8002350 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000396:	681b      	ldr	r3, [r3, #0]
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	2003ffc0 	.word	0x2003ffc0

080003a8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <XMC_SCU_GetMirrorStatus+0x14>)
 80003ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	50004000 	.word	0x50004000

080003c0 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80003c8:	f7ff ff78 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <XMC_SCU_lDelay+0x3c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <XMC_SCU_lDelay+0x40>)
 80003d2:	fba2 2303 	umull	r2, r3, r2, r3
 80003d6:	0c9a      	lsrs	r2, r3, #18
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e003      	b.n	80003ee <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80003e6:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	3301      	adds	r3, #1
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3f7      	bcc.n	80003e6 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2003ffc0 	.word	0x2003ffc0
 8000400:	431bde83 	.word	0x431bde83

08000404 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800040a:	685b      	ldr	r3, [r3, #4]
}
 800040c:	4618      	mov	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	50004074 	.word	0x50004074

0800041c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	60d3      	str	r3, [r2, #12]
}
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	50004074 	.word	0x50004074

08000438 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af02      	add	r7, sp, #8
 800043e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f8c5 	bl	80005d0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000446:	f000 fab7 	bl	80009b8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	79db      	ldrb	r3, [r3, #7]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00a      	beq.n	8000468 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000452:	f000 faef 	bl	8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000456:	bf00      	nop
 8000458:	f000 fada 	bl	8000a10 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 800045c:	4603      	mov	r3, r0
 800045e:	f083 0301 	eor.w	r3, r3, #1
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1f7      	bne.n	8000458 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7a5b      	ldrb	r3, [r3, #9]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f929 	bl	80006c4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000472:	bf00      	nop
 8000474:	f7ff ff98 	bl	80003a8 <XMC_SCU_GetMirrorStatus>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1fa      	bne.n	8000474 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	7a1b      	ldrb	r3, [r3, #8]
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fa72 	bl	800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7c1b      	ldrb	r3, [r3, #16]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f937 	bl	8000700 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	7c5b      	ldrb	r3, [r3, #17]
 8000496:	4618      	mov	r0, r3
 8000498:	f000 f95a 	bl	8000750 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	7c9b      	ldrb	r3, [r3, #18]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f941 	bl	8000728 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7cdb      	ldrb	r3, [r3, #19]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f964 	bl	8000778 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	799b      	ldrb	r3, [r3, #6]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00a      	beq.n	80004ce <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80004b8:	f000 faf4 	bl	8000aa4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80004bc:	bf00      	nop
 80004be:	f000 fb19 	bl	8000af4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80004c2:	4603      	mov	r3, r0
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1f7      	bne.n	80004be <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	78db      	ldrb	r3, [r3, #3]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d109      	bne.n	80004ea <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	799b      	ldrb	r3, [r3, #6]
 80004da:	f083 0301 	eor.w	r3, r3, #1
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d017      	beq.n	8000514 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80004e4:	f000 fb2a 	bl	8000b3c <XMC_SCU_CLOCK_DisableSystemPll>
 80004e8:	e014      	b.n	8000514 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80004ea:	f000 fb17 	bl	8000b1c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	8899      	ldrh	r1, [r3, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80004fa:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000500:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	462a      	mov	r2, r5
 800050e:	4623      	mov	r3, r4
 8000510:	f000 fb24 	bl	8000b5c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800051c:	d103      	bne.n	8000526 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800051e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000522:	f000 f855 	bl	80005d0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000526:	f7ff fec9 	bl	80002bc <SystemCoreClockUpdate>
}
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bdb0      	pop	{r4, r5, r7, pc}

08000530 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	0f1b      	lsrs	r3, r3, #28
 800053c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000544:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	461a      	mov	r2, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000554:	4413      	add	r3, r2
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	50004414 	.word	0x50004414

08000568 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	0f1b      	lsrs	r3, r3, #28
 8000574:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800057c:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4613      	mov	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	4413      	add	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	461a      	mov	r2, r3
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 800058c:	4413      	add	r3, r2
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	4013      	ands	r3, r2
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	5000440c 	.word	0x5000440c

080005b0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80005b4:	f7ff feec 	bl	8000390 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80005b8:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80005bc:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	50004600 	.word	0x50004600

080005d0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80005d8:	4906      	ldr	r1, [pc, #24]	; (80005f4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	50004600 	.word	0x50004600

080005f8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000600:	4906      	ldr	r1, [pc, #24]	; (800061c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4313      	orrs	r3, r2
 800060e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	50004600 	.word	0x50004600

08000620 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000628:	4906      	ldr	r1, [pc, #24]	; (8000644 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4313      	orrs	r3, r2
 8000636:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	50004600 	.word	0x50004600

08000648 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d108      	bne.n	800066a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	60d3      	str	r3, [r2, #12]
 8000668:	e007      	b.n	800067a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	60d3      	str	r3, [r2, #12]
  }
}
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	50004710 	.word	0x50004710

08000688 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000692:	bf00      	nop
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000696:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f8      	bne.n	8000694 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80006a2:	4907      	ldr	r1, [pc, #28]	; (80006c0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80006ae:	4313      	orrs	r3, r2
 80006b0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	50004000 	.word	0x50004000
 80006c0:	50004300 	.word	0x50004300

080006c4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80006ce:	bf00      	nop
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80006d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f8      	bne.n	80006d0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80006de:	4907      	ldr	r1, [pc, #28]	; (80006fc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80006ea:	4313      	orrs	r3, r2
 80006ec:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	50004000 	.word	0x50004000
 80006fc:	50004300 	.word	0x50004300

08000700 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000716:	4313      	orrs	r3, r2
 8000718:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	50004600 	.word	0x50004600

08000728 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800073e:	4313      	orrs	r3, r2
 8000740:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	50004600 	.word	0x50004600

08000750 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000758:	4906      	ldr	r1, [pc, #24]	; (8000774 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000766:	4313      	orrs	r3, r2
 8000768:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	50004600 	.word	0x50004600

08000778 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800078e:	4313      	orrs	r3, r2
 8000790:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	50004600 	.word	0x50004600

080007a0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004600 	.word	0x50004600

080007c8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80007de:	4313      	orrs	r3, r2
 80007e0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	50004600 	.word	0x50004600

080007f0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80007f8:	4906      	ldr	r1, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000806:	4313      	orrs	r3, r2
 8000808:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	50004600 	.word	0x50004600

08000818 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000826:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800082e:	4313      	orrs	r3, r2
 8000830:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	50004600 	.word	0x50004600

08000840 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	6053      	str	r3, [r2, #4]
}
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	50004600 	.word	0x50004600

08000860 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	0f1b      	lsrs	r3, r3, #28
 800086c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000874:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	461a      	mov	r2, r3
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000884:	4413      	add	r3, r2
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004648 	.word	0x50004648

08000898 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a6:	f023 0302 	bic.w	r3, r3, #2
 80008aa:	6153      	str	r3, [r2, #20]
}
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004710 	.word	0x50004710

080008b8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008c2:	4a28      	ldr	r2, [pc, #160]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80008ce:	bf00      	nop
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008e8:	491e      	ldr	r1, [pc, #120]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80008fa:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	f023 0310 	bic.w	r3, r3, #16
 8000910:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091c:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800091e:	bf00      	nop
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f9      	beq.n	8000920 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000938:	bf00      	nop
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f9      	bne.n	800093a <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000950:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000954:	2208      	movs	r2, #8
 8000956:	60da      	str	r2, [r3, #12]
}
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	50004710 	.word	0x50004710
 8000968:	50004160 	.word	0x50004160

0800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000980:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10e      	bne.n	80009a6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000992:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f7ff fd13 	bl	80003c0 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800099a:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009a4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f7ff fd0a 	bl	80003c0 <XMC_SCU_lDelay>
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	50004710 	.word	0x50004710

080009b8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d109      	bne.n	80009dc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009ce:	bf00      	nop
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f9      	beq.n	80009d0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00a      	beq.n	80009fe <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ee:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80009f0:	bf00      	nop
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f9      	bne.n	80009f2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	50004200 	.word	0x50004200
 8000a0c:	50004400 	.word	0x50004400

08000a10 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf0c      	ite	eq
 8000a20:	2301      	moveq	r3, #1
 8000a22:	2300      	movne	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	50004300 	.word	0x50004300

08000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a3c:	f7ff fcee 	bl	800041c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a40:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a4a:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a4c:	bf00      	nop
 8000a4e:	f7ff fcd9 	bl	8000404 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f8      	beq.n	8000a4e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000a5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a60:	f7ff fcdc 	bl	800041c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000a6a:	bf00      	nop
 8000a6c:	f7ff fcca 	bl	8000404 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f8      	beq.n	8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000a7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a7e:	f7ff fccd 	bl	800041c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000a8e:	bf00      	nop
 8000a90:	f7ff fcb8 	bl	8000404 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f8      	beq.n	8000a90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	50004300 	.word	0x50004300

08000aa4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab2:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ab4:	4d0d      	ldr	r5, [pc, #52]	; (8000aec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000abe:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ac2:	f001 fc45 	bl	8002350 <OSCHP_GetFrequency>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000aca:	fba3 2302 	umull	r2, r3, r3, r2
 8000ace:	0d1b      	lsrs	r3, r3, #20
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ad4:	4323      	orrs	r3, r4
 8000ad6:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ae2:	6053      	str	r3, [r2, #4]
}
 8000ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	50004710 	.word	0x50004710
 8000aec:	50004700 	.word	0x50004700
 8000af0:	6b5fca6b 	.word	0x6b5fca6b

08000af4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b00:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	50004710 	.word	0x50004710

08000b1c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2a:	f023 0302 	bic.w	r3, r3, #2
 8000b2e:	6053      	str	r3, [r2, #4]
}
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	50004710 	.word	0x50004710

08000b3c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	6053      	str	r3, [r2, #4]
}
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	50004710 	.word	0x50004710

08000b5c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60ba      	str	r2, [r7, #8]
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4603      	mov	r3, r0
 8000b68:	81fb      	strh	r3, [r7, #14]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd69 	bl	8000648 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	f040 808b 	bne.w	8000c94 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b84:	f001 fbe4 	bl	8002350 <OSCHP_GetFrequency>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8000b90:	0c9b      	lsrs	r3, r3, #18
 8000b92:	059b      	lsls	r3, r3, #22
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e002      	b.n	8000b9e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000b98:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000b9c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	fb02 f203 	mul.w	r2, r2, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	4a4b      	ldr	r2, [pc, #300]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	0d9b      	lsrs	r3, r3, #22
 8000bba:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bbc:	4a49      	ldr	r2, [pc, #292]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000bc8:	bf00      	nop
 8000bca:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bd6:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bd8:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000be2:	4940      	ldr	r1, [pc, #256]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000be4:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000bea:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	3a01      	subs	r2, #1
 8000bf0:	0212      	lsls	r2, r2, #8
 8000bf2:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bfa:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c02:	4313      	orrs	r3, r2
 8000c04:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c06:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c08:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c12:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c14:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f023 0310 	bic.w	r3, r3, #16
 8000c1c:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c1e:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c20:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c2a:	bf00      	nop
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f9      	beq.n	8000c2c <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c38:	4a2a      	ldr	r2, [pc, #168]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c44:	bf00      	nop
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f9      	bne.n	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4a25      	ldr	r2, [pc, #148]	; (8000cec <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	0d9b      	lsrs	r3, r3, #22
 8000c5e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c60:	6a3a      	ldr	r2, [r7, #32]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d202      	bcs.n	8000c6e <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c68:	6938      	ldr	r0, [r7, #16]
 8000c6a:	f000 f845 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	095b      	lsrs	r3, r3, #5
 8000c7a:	0d9b      	lsrs	r3, r3, #22
 8000c7c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c7e:	6a3a      	ldr	r2, [r7, #32]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d202      	bcs.n	8000c8c <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c86:	6938      	ldr	r0, [r7, #16]
 8000c88:	f000 f836 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c8c:	6a38      	ldr	r0, [r7, #32]
 8000c8e:	f000 f833 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c92:	e01c      	b.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000ca6:	bf00      	nop
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cc0:	bf00      	nop
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f9      	beq.n	8000cc2 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	60da      	str	r2, [r3, #12]
}
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	aaaaaaab 	.word	0xaaaaaaab
 8000ce4:	50004710 	.word	0x50004710
 8000ce8:	f08080ff 	.word	0xf08080ff
 8000cec:	88888889 	.word	0x88888889
 8000cf0:	b60b60b7 	.word	0xb60b60b7
 8000cf4:	50004160 	.word	0x50004160

08000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d00:	490b      	ldr	r1, [pc, #44]	; (8000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000d14:	bf00      	nop
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000d22:	2032      	movs	r0, #50	; 0x32
 8000d24:	f7ff fb4c 	bl	80003c0 <XMC_SCU_lDelay>
}
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	50004710 	.word	0x50004710

08000d34 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	60da      	str	r2, [r3, #12]
}
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <XMC_CCU4_lDeassertReset+0x4c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d103      	bne.n	8000d68 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d60:	2004      	movs	r0, #4
 8000d62:	f7ff fbe5 	bl	8000530 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d66:	e016      	b.n	8000d96 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <XMC_CCU4_lDeassertReset+0x50>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d103      	bne.n	8000d78 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f7ff fbdd 	bl	8000530 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d76:	e00e      	b.n	8000d96 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <XMC_CCU4_lDeassertReset+0x54>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d103      	bne.n	8000d88 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d80:	2010      	movs	r0, #16
 8000d82:	f7ff fbd5 	bl	8000530 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d86:	e006      	b.n	8000d96 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <XMC_CCU4_lDeassertReset+0x58>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d102      	bne.n	8000d96 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <XMC_CCU4_lDeassertReset+0x5c>)
 8000d92:	f7ff fbcd 	bl	8000530 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	4000c000 	.word	0x4000c000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40014000 	.word	0x40014000
 8000da8:	48004000 	.word	0x48004000
 8000dac:	10000001 	.word	0x10000001

08000db0 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <XMC_CCU4_lUngateClock+0x4c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d103      	bne.n	8000dc8 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f7ff fd4d 	bl	8000860 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dc6:	e016      	b.n	8000df6 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <XMC_CCU4_lUngateClock+0x50>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d103      	bne.n	8000dd8 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000dd0:	2008      	movs	r0, #8
 8000dd2:	f7ff fd45 	bl	8000860 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dd6:	e00e      	b.n	8000df6 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <XMC_CCU4_lUngateClock+0x54>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d103      	bne.n	8000de8 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000de0:	2010      	movs	r0, #16
 8000de2:	f7ff fd3d 	bl	8000860 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000de6:	e006      	b.n	8000df6 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <XMC_CCU4_lUngateClock+0x58>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d102      	bne.n	8000df6 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <XMC_CCU4_lUngateClock+0x5c>)
 8000df2:	f7ff fd35 	bl	8000860 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	4000c000 	.word	0x4000c000
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40014000 	.word	0x40014000
 8000e08:	48004000 	.word	0x48004000
 8000e0c:	10000001 	.word	0x10000001

08000e10 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f7ff fd11 	bl	8000840 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffc6 	bl	8000db0 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff93 	bl	8000d50 <XMC_CCU4_lDeassertReset>
#endif
}
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffe7 	bl	8000e10 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff76 	bl	8000d34 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e54:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	039b      	lsls	r3, r3, #14
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	795b      	ldrb	r3, [r3, #5]
 8000e82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	051a      	lsls	r2, r3, #20
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	795b      	ldrb	r3, [r3, #5]
 8000ea2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
 8000eb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b0b      	cmp	r3, #11
 8000eec:	d836      	bhi.n	8000f5c <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f25 	.word	0x08000f25
 8000ef8:	08000f25 	.word	0x08000f25
 8000efc:	08000f2f 	.word	0x08000f2f
 8000f00:	08000f2f 	.word	0x08000f2f
 8000f04:	08000f5d 	.word	0x08000f5d
 8000f08:	08000f5d 	.word	0x08000f5d
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f5d 	.word	0x08000f5d
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f45 	.word	0x08000f45
 8000f1c:	08000f51 	.word	0x08000f51
 8000f20:	08000f51 	.word	0x08000f51
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000f24:	2303      	movs	r3, #3
 8000f26:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
      break;
 8000f2c:	e01b      	b.n	8000f66 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000f2e:	230c      	movs	r3, #12
 8000f30:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000f32:	2302      	movs	r3, #2
 8000f34:	617b      	str	r3, [r7, #20]
      break;
 8000f36:	e016      	b.n	8000f66 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000f38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	617b      	str	r3, [r7, #20]
      break;
 8000f42:	e010      	b.n	8000f66 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000f44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f48:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	617b      	str	r3, [r7, #20]
      break;
 8000f4e:	e00a      	b.n	8000f66 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000f50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f54:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f56:	230c      	movs	r3, #12
 8000f58:	617b      	str	r3, [r7, #20]
      break;
 8000f5a:	e004      	b.n	8000f66 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
	  break;
 8000f64:	bf00      	nop
  }

  if (mask != 0)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f72:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8000f7e:	78ba      	ldrb	r2, [r7, #2]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8000fac:	78f8      	ldrb	r0, [r7, #3]
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	00c3      	lsls	r3, r0, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
    const uint8_t channel)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 8000fdc:	78f8      	ldrb	r0, [r7, #3]
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	00c3      	lsls	r3, r0, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	605a      	str	r2, [r3, #4]
}
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
    const uint8_t channel)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 800100c:	78f8      	ldrb	r0, [r7, #3]
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	00c3      	lsls	r3, r0, #3
 8001020:	440b      	add	r3, r1
 8001022:	605a      	str	r2, [r3, #4]
}
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
 800103c:	4613      	mov	r3, r2
 800103e:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DACDATA[channel] = start;
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	883a      	ldrh	r2, [r7, #0]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	3304      	adds	r3, #4
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	605a      	str	r2, [r3, #4]
}
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69da      	ldr	r2, [r3, #28]
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4619      	mov	r1, r3
 8001072:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001076:	408b      	lsls	r3, r1
 8001078:	43db      	mvns	r3, r3
 800107a:	4013      	ands	r3, r2
                   (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	78f9      	ldrb	r1, [r7, #3]
 8001080:	0109      	lsls	r1, r1, #4
 8001082:	408a      	lsls	r2, r1
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	61da      	str	r2, [r3, #28]
                   (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	460b      	mov	r3, r1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigger));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 80010a2:	7af8      	ldrb	r0, [r7, #11]
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	00c3      	lsls	r3, r0, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	609a      	str	r2, [r3, #8]
                              trigger;
}
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	460b      	mov	r3, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));

  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80010d6:	7af8      	ldrb	r0, [r7, #11]
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	00c3      	lsls	r3, r0, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	605a      	str	r2, [r3, #4]
                             mode;
}
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <XMC_DAC_Enable+0x1c>)
 8001106:	f7ff fbab 	bl	8000860 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <XMC_DAC_Enable+0x1c>)
 800110c:	f7ff fa10 	bl	8000530 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	10000020 	.word	0x10000020

0800111c <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	460b      	mov	r3, r1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff ffe6 	bl	80010fc <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 800113e:	7afb      	ldrb	r3, [r7, #11]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6852      	ldr	r2, [r2, #4]
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d804      	bhi.n	800115c <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff ff22 	bl	8000fa0 <XMC_DAC_CH_EnableOutput>
  }
}
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop

08001164 <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
    const uint8_t channel,
    const uint32_t frequency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	460b      	mov	r3, r1
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 8001172:	f7ff fa1d 	bl	80005b0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	d802      	bhi.n	800118c <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 8001186:	2304      	movs	r3, #4
 8001188:	75fb      	strb	r3, [r7, #23]
 800118a:	e016      	b.n	80011ba <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001192:	d302      	bcc.n	800119a <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 8001194:	2303      	movs	r3, #3
 8001196:	75fb      	strb	r3, [r7, #23]
 8001198:	e00f      	b.n	80011ba <XMC_DAC_CH_SetFrequency+0x56>
  }
  else
  {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 800119a:	7af8      	ldrb	r0, [r7, #11]
 800119c:	7afb      	ldrb	r3, [r7, #11]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	0d1b      	lsrs	r3, r3, #20
 80011a8:	051b      	lsls	r3, r3, #20
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	00c3      	lsls	r3, r0, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
    const uint8_t channel,
    const uint32_t frequency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	460b      	mov	r3, r1
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	3304      	adds	r3, #4
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	7afa      	ldrb	r2, [r7, #11]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	40d3      	lsrs	r3, r2
 80011ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ee:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	7afa      	ldrb	r2, [r7, #11]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	f7ff ffad 	bl	8001164 <XMC_DAC_CH_SetFrequency>
 800120a:	4603      	mov	r3, r0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800122a:	f7ff ff4d 	bl	80010c8 <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
    const uint8_t channel,
    const XMC_DAC_CH_TRIGGER_t trigger,
    const uint32_t frequency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	460b      	mov	r3, r1
 8001246:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	4619      	mov	r1, r3
 8001252:	2200      	movs	r2, #0
 8001254:	f7ff ff38 	bl	80010c8 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d107      	bne.n	800126e <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	4619      	mov	r1, r3
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	f7ff ff7d 	bl	8001164 <XMC_DAC_CH_SetFrequency>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10c      	bne.n	800128e <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	4619      	mov	r1, r3
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	f7ff ff0a 	bl	8001094 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800128a:	f7ff ff1d 	bl	80010c8 <XMC_DAC_CH_SetMode>
  }

  return status;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <XMC_DAC_CH_StartRampMode>:
    const uint8_t channel,
    const uint16_t start,
    const uint16_t stop,
    const XMC_DAC_CH_TRIGGER_t trigger,
    const uint32_t frequency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	72fb      	strb	r3, [r7, #11]
 80012aa:	460b      	mov	r3, r1
 80012ac:	813b      	strh	r3, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	4619      	mov	r1, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	f7ff ff03 	bl	80010c8 <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 80012c2:	7afa      	ldrb	r2, [r7, #11]
 80012c4:	893b      	ldrh	r3, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	4611      	mov	r1, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	f7ff feb0 	bl	8001030 <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 80012d0:	7afa      	ldrb	r2, [r7, #11]
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	f7ff febd 	bl	8001058 <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	4619      	mov	r1, r3
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	f7ff fed5 	bl	8001094 <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	4619      	mov	r1, r3
 80012f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f8:	f7ff ff64 	bl	80011c4 <XMC_DAC_CH_SetRampFrequency>
 80012fc:	4603      	mov	r3, r0
 80012fe:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	4619      	mov	r1, r3
 800130c:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8001310:	f7ff feda 	bl	80010c8 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001314:	7dfb      	ldrb	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop

08001320 <XMC_DAC_CH_StartPatternMode>:
    const uint8_t channel,
    const uint8_t *const pattern,
    const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
    const XMC_DAC_CH_TRIGGER_t trigger,
    const uint32_t frequency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	461a      	mov	r2, r3
 800132c:	460b      	mov	r3, r1
 800132e:	72fb      	strb	r3, [r7, #11]
 8001330:	4613      	mov	r3, r2
 8001332:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	4619      	mov	r1, r3
 800133e:	2200      	movs	r2, #0
 8001340:	f7ff fec2 	bl	80010c8 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	7afa      	ldrb	r2, [r7, #11]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	f7ff ff05 	bl	8001164 <XMC_DAC_CH_SetFrequency>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d120      	bne.n	80013a6 <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 8001364:	7afb      	ldrb	r3, [r7, #11]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	4619      	mov	r1, r3
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	f000 f850 	bl	8001410 <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d105      	bne.n	8001382 <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fe28 	bl	8000fd0 <XMC_DAC_CH_EnablePatternSignOutput>
 8001380:	e004      	b.n	800138c <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fe3a 	bl	8001000 <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	4619      	mov	r1, r3
 8001392:	6a3a      	ldr	r2, [r7, #32]
 8001394:	f7ff fe7e 	bl	8001094 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80013a2:	f7ff fe91 	bl	80010c8 <XMC_DAC_CH_SetMode>
  }

  return status;
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
    const uint8_t channel,
    const XMC_DAC_CH_TRIGGER_t trigger,
    const uint32_t frequency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	460b      	mov	r3, r1
 80013be:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80013c4:	7afb      	ldrb	r3, [r7, #11]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	4619      	mov	r1, r3
 80013ca:	2200      	movs	r2, #0
 80013cc:	f7ff fe7c 	bl	80010c8 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d107      	bne.n	80013e6 <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	4619      	mov	r1, r3
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	f7ff fec1 	bl	8001164 <XMC_DAC_CH_SetFrequency>
 80013e2:	4603      	mov	r3, r0
 80013e4:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10c      	bne.n	8001406 <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	4619      	mov	r1, r3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	f7ff fe4e 	bl	8001094 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001402:	f7ff fe61 	bl	80010c8 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	460b      	mov	r3, r1
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
  for (index = 1U; index < 6U; ++index)
 8001424:	2301      	movs	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e010      	b.n	800144c <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for (index = 1U; index < 6U; ++index)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b05      	cmp	r3, #5
 8001450:	d9eb      	bls.n	800142a <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 8001452:	7afa      	ldrb	r2, [r7, #11]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3204      	adds	r2, #4
 8001458:	6939      	ldr	r1, [r7, #16]
 800145a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3306      	adds	r3, #6
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
  for (index = 1U; index < 6U; ++index)
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e011      	b.n	8001490 <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3306      	adds	r3, #6
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for (index = 1U; index < 6U; ++index)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d9ea      	bls.n	800146c <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	3304      	adds	r3, #4
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	605a      	str	r2, [r3, #4]
}
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014ee:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	079b      	lsls	r3, r3, #30
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <XMC_VADC_GROUP_ScanEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800153a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <XMC_VADC_GROUP_ScanDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff f971 	bl	8000860 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800157e:	2001      	movs	r0, #1
 8001580:	f7fe ffd6 	bl	8000530 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop

08001588 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001592:	f7ff ffef 	bl	8001574 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e017      	b.n	800162a <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001612:	e000      	b.n	8001616 <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8001614:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f7      	bne.n	8001614 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	3301      	adds	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d9e4      	bls.n	80015fa <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	080047d0 	.word	0x080047d0

08001640 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	2300      	movs	r3, #0
 8001654:	f000 f828 	bl	80016a8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	2300      	movs	r3, #0
 8001662:	f000 f821 	bl	80016a8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	2200      	movs	r2, #0
 800166e:	2301      	movs	r3, #1
 8001670:	f000 f81a 	bl	80016a8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	6899      	ldr	r1, [r3, #8]
 800167a:	2201      	movs	r2, #1
 800167c:	2301      	movs	r3, #1
 800167e:	f000 f813 	bl	80016a8 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	f7ff ff08 	bl	80014b0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b08d      	sub	sp, #52	; 0x34
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d113      	bne.n	80016e6 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 80016be:	2308      	movs	r3, #8
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 80016c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 80016cc:	231f      	movs	r3, #31
 80016ce:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 80016d0:	7a3b      	ldrb	r3, [r7, #8]
 80016d2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 80016da:	7a7b      	ldrb	r3, [r7, #9]
 80016dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	76fb      	strb	r3, [r7, #27]
 80016e4:	e013      	b.n	800170e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 80016e6:	2318      	movs	r3, #24
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 80016ea:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 80016f0:	2310      	movs	r3, #16
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 80016f4:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80016f8:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80016fa:	7abb      	ldrb	r3, [r7, #10]
 80016fc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001700:	b2db      	uxtb	r3, r3
 8001702:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	3228      	adds	r2, #40	; 0x28
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	43db      	mvns	r3, r3
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001724:	7efa      	ldrb	r2, [r7, #27]
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4313      	orrs	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	43db      	mvns	r3, r3
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	3228      	adds	r2, #40	; 0x28
 8001750:	6979      	ldr	r1, [r7, #20]
 8001752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001756:	3734      	adds	r7, #52	; 0x34
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001772:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

#if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d902      	bls.n	80017b2 <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
  }
#endif

  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017b8:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f023 0303 	bic.w	r3, r3, #3
 80017c0:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017ea:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t i, master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1)))

  master_grp_num = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e00b      	b.n	8001834 <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
  {
    if (g_xmc_vadc_group_array[i] == group_ptr)
 800181c:	4a13      	ldr	r2, [pc, #76]	; (800186c <XMC_VADC_GROUP_CheckSlaveReadiness+0x64>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d101      	bne.n	800182e <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
    {
      master_grp_num = i;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  uint32_t i, master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1)))

  master_grp_num = 0;
  for (i = 0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3301      	adds	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d9f0      	bls.n	800181c <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
      master_grp_num = i;
    }
  }


  if (slave_group < master_grp_num)
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	429a      	cmp	r2, r3
 8001840:	d202      	bcs.n	8001848 <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
  {
    slave_group++;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	603b      	str	r3, [r7, #0]
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	3303      	adds	r3, #3
 8001852:	4619      	mov	r1, r3
 8001854:	2301      	movs	r3, #1
 8001856:	408b      	lsls	r3, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	080047d0 	.word	0x080047d0

08001870 <XMC_VADC_GROUP_ScanInit>:
#endif

#if (XMC_VADC_GSCAN_AVAILABLE == 1U)
/* API to initialize the group scan hardware of a kernel */
void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *config)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t      reg;

  XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* All configurations have to be performed with the arbitration slot disabled */
  XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fe68 	bl	8001550 <XMC_VADC_GROUP_ScanDisableArbitrationSlot>

  /* Read in the existing contents of arbitration priority register */
  reg = group_ptr->ARBPR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001886:	60fb      	str	r3, [r7, #12]

  /* Program the priority of the request source */
  reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800188e:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Program the start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <XMC_VADC_GROUP_ScanInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  group_ptr->ASCTRL = (uint32_t)(config->asctrl | (VADC_G_ASCTRL_XTWC_Msk) | (VADC_G_ASCTRL_GTWC_Msk) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80018c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
                                 (VADC_G_ASCTRL_TMWC_Msk));

  group_ptr->ASMR  = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_ASMR_ENGT_Pos));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d107      	bne.n	80018fe <XMC_VADC_GROUP_ScanInit+0x8e>
  {
    group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80018f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  }

  /* Enable arbitration slot now */
  XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe14 	bl	800152c <XMC_VADC_GROUP_ScanEnableArbitrationSlot>

}
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode>:
  return count;
}

/* API to select a service request line (NVIC Node) for request source event */
void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;
  sevnp = group_ptr->SEVNP;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800191e:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001926:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7b1b      	ldrb	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4013      	ands	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b5b      	ldrb	r3, [r3, #13]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	db29      	blt.n	80019e2 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10a      	bne.n	80019ae <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001998:	2308      	movs	r3, #8
 800199a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019ac:	e00c      	b.n	80019c8 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019be:	f023 021f 	bic.w	r2, r3, #31
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	7b52      	ldrb	r2, [r2, #13]
 80019d2:	b251      	sxtb	r1, r2
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	3280      	adds	r2, #128	; 0x80
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop

08001a20 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg,
    const XMC_VADC_SR_t sr)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	71fb      	strb	r3, [r7, #7]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d818      	bhi.n	8001a66 <XMC_VADC_GROUP_SetResultInterruptNode+0x46>
  {
    route_mask  = group_ptr->REVNP0;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001a3a:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	461a      	mov	r2, r3
 8001a42:	230f      	movs	r3, #15
 8001a44:	4093      	lsls	r3, r2
 8001a46:	43db      	mvns	r3, r3
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8001a64:	e01e      	b.n	8001aa4 <XMC_VADC_GROUP_SetResultInterruptNode+0x84>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001a6c:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a74:	3b08      	subs	r3, #8
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4013      	ands	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a8e:	3b08      	subs	r3, #8
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
}
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
}
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	60da      	str	r2, [r3, #12]
}
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001b18:	887a      	ldrh	r2, [r7, #2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	611a      	str	r2, [r3, #16]
}
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f808 	bl	8001bc8 <TIMER_CCU4_lInit>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop

08001bc8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f929 	bl	8001e2c <GLOBAL_CCU4_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e1b      	ldrb	r3, [r3, #24]
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff ff66 	bl	8001abc <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7ff f936 	bl	8000e6c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f82d 	bl	8001c60 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00f      	beq.n	8001c30 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f7ff f95a 	bl	8000ed8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f7ff ff98 	bl	8001b60 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff43 	bl	8001adc <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7ff ff4a 	bl	8001b0c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f7ff ff52 	bl	8001b28 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7ff ff57 	bl	8001b44 <XMC_CCU4_EnableShadowTransfer>
}
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ca8:	0a1b      	lsrs	r3, r3, #8
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_EnableIRQ+0x34>)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	490d      	ldr	r1, [pc, #52]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	4909      	ldr	r1, [pc, #36]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
  }
}
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	bf28      	it	cs
 8001d62:	2306      	movcs	r3, #6
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3306      	adds	r3, #6
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	401a      	ands	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001d98:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff7e 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop

08001dc4 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781c      	ldrb	r4, [r3, #0]
 8001dd0:	f7ff ff64 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001dd4:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001dda:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	f7ff ffad 	bl	8001d44 <NVIC_EncodePriority>
 8001dea:	4602      	mov	r2, r0
 8001dec:	b263      	sxtb	r3, r4
 8001dee:	4618      	mov	r0, r3
 8001df0:	4611      	mov	r1, r2
 8001df2:	f7ff ff7d 	bl	8001cf0 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	78db      	ldrb	r3, [r3, #3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffd2 	bl	8001da8 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop

08001e10 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	60da      	str	r2, [r3, #12]
}
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7b5b      	ldrb	r3, [r3, #13]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00f      	beq.n	8001e62 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7b1b      	ldrb	r3, [r3, #12]
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe ffef 	bl	8000e30 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffda 	bl	8001e10 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3310      	adds	r3, #16
 8001e80:	4619      	mov	r1, r3
 8001e82:	2301      	movs	r3, #1
 8001e84:	408b      	lsls	r3, r1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d149      	bne.n	8001f3c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff fb68 	bl	8001588 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e02f      	b.n	8001f1e <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4608      	mov	r0, r1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7ff fbb3 	bl	8001640 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	f7ff fc3a 	bl	8001760 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef4:	7a1b      	ldrb	r3, [r3, #8]
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4618      	mov	r0, r3
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	f7ff ffb0 	bl	8001e6c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	2200      	movs	r2, #0
 8001f16:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d9cc      	bls.n	8001ebe <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7e5b      	ldrb	r3, [r3, #25]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fb53 	bl	80015dc <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e1b      	ldrb	r3, [r3, #24]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));

  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop

08001f68 <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
 8001f74:	4613      	mov	r3, r2
 8001f76:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DACDATA[channel] = data;
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	883a      	ldrh	r2, [r7, #0]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	605a      	str	r2, [r3, #4]
}
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));

  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 8001f9e:	7af8      	ldrb	r0, [r7, #11]
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	00c3      	lsls	r3, r0, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	605a      	str	r2, [r3, #4]
                             mode;
}
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));

  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 8001fd0:	78f8      	ldrb	r0, [r7, #3]
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	00c3      	lsls	r3, r0, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	605a      	str	r2, [r3, #4]
}
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: scale parameter not valid\n", XMC_DAC_IS_OUTPUT_SCALE_VALID(scale));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 8002004:	78f8      	ldrb	r0, [r7, #3]
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 020f 	bic.w	r2, r3, #15
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	431a      	orrs	r2, r3
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	00c3      	lsls	r3, r0, #3
 800201c:	440b      	add	r3, r1
 800201e:	609a      	str	r2, [r3, #8]
                              scale;
}
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002040:	d115      	bne.n	800206e <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7d1c      	ldrb	r4, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	9200      	str	r2, [sp, #0]
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	462a      	mov	r2, r5
 8002062:	4623      	mov	r3, r4
 8002064:	f7ff f95c 	bl	8001320 <XMC_DAC_CH_StartPatternMode>
 8002068:	4603      	mov	r3, r0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e085      	b.n	800217a <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002076:	d115      	bne.n	80020a4 <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7ff f8c5 	bl	8001214 <XMC_DAC_CH_StartSingleValueMode>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	2200      	movs	r2, #0
 800209e:	f7ff ff63 	bl	8001f68 <XMC_DAC_CH_Write>
 80020a2:	e06a      	b.n	800217a <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020ac:	d125      	bne.n	80020fa <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f7ff f8ba 	bl	8001238 <XMC_DAC_CH_StartDataMode>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff ff70 	bl	8001fc4 <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	f7ff ff38 	bl	8001f68 <XMC_DAC_CH_Write>
 80020f8:	e03f      	b.n	800217a <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002102:	d125      	bne.n	8002150 <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8b9d      	ldrh	r5, [r3, #28]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8bdc      	ldrh	r4, [r3, #30]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	462a      	mov	r2, r5
 8002124:	4623      	mov	r3, r4
 8002126:	f7ff f8b7 	bl	8001298 <XMC_DAC_CH_StartRampMode>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	791b      	ldrb	r3, [r3, #4]
 800213e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002142:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	f7ff ff53 	bl	8001ff4 <XMC_DAC_CH_SetOutputScale>
 800214e:	e014      	b.n	800217a <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002158:	d10d      	bne.n	8002176 <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f7ff f920 	bl	80013b0 <XMC_DAC_CH_StartNoiseMode>
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e001      	b.n	800217a <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bdb0      	pop	{r4, r5, r7, pc}

08002184 <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4608      	mov	r0, r1
 80021a0:	4611      	mov	r1, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	f7fe ffba 	bl	800111c <XMC_DAC_CH_Init>

#if (DAC_ANALOG_IO_USED == 1U)
  /* ANALOG_IO initialization */
  status = (DAC_STATUS_t) ANALOG_IO_Init(HandlePtr->analog_io_config_ptr);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f91f 	bl	80023f0 <ANALOG_IO_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	73fb      	strb	r3, [r7, #15]
#endif

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ff38 	bl	800202c <DAC_ModeConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <DAC_Init+0x5a>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	2200      	movs	r2, #0
 80021da:	f7ff fed9 	bl	8001f90 <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d104      	bne.n	80021f2 <DAC_Init+0x6e>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff feab 	bl	8001f48 <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 80021f2:	7bbb      	ldrb	r3, [r7, #14]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <DAC_Init+0x78>
  {
    status = DAC_STATUS_FAILURE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop

08002208 <DAC_SingleValue_SetValue_u16>:

/*
  * This API will set data value in Single Value in Unsigned Mode.
*/
DAC_STATUS_t DAC_SingleValue_SetValue_u16(const DAC_t * const HandlePtr,uint16_t Data)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
  DAC_STATUS_t status;
  if(DAC_DATA_VALUE_MAX_USIGN >= Data)
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221a:	d20d      	bcs.n	8002238 <DAC_SingleValue_SetValue_u16+0x30>
  {
    /* Update Corresponding CH Data register */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,Data);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	f7ff fe9b 	bl	8001f68 <XMC_DAC_CH_Write>
    status = DAC_STATUS_SUCCESS;
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e001      	b.n	800223c <DAC_SingleValue_SetValue_u16+0x34>
  }
  else
  {
    /* Data Values are out of range */
    status = DAC_STATUS_API_FAIL;
 8002238:	2302      	movs	r3, #2
 800223a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff ffd6 	bl	8002248 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <SystemCoreSetup+0x94>)
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <SystemCoreSetup+0x98>)
 80022a2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022a4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80022a8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <SystemCoreSetup+0x94>)
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <SystemCoreSetup+0x94>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <SystemCoreSetup+0x9c>)
 80022bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c0:	3314      	adds	r3, #20
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f023 030f 	bic.w	r3, r3, #15
 80022cc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <SystemCoreSetup+0x9c>)
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	3314      	adds	r3, #20
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <SystemCoreSetup+0x94>)
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <SystemCoreSetup+0x94>)
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f023 0310 	bic.w	r3, r3, #16
 80022ec:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <SystemCoreSetup+0x94>)
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <SystemCoreSetup+0x94>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f023 0308 	bic.w	r3, r3, #8
 80022f8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SystemCoreSetup+0x94>)
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <SystemCoreSetup+0x94>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002304:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <SystemCoreSetup+0x94>)
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SystemCoreSetup+0x94>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002310:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <SystemCoreSetup+0x94>)
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <SystemCoreSetup+0x94>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	08000000 	.word	0x08000000
 800232c:	58001000 	.word	0x58001000

08002330 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]

  return (status);
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <OSCHP_GetFrequency+0x10>)
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	00b71b00 	.word	0x00b71b00

08002364 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 800236c:	4906      	ldr	r1, [pc, #24]	; (8002388 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4313      	orrs	r3, r2
 800237a:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	50004600 	.word	0x50004600

0800238c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800238c:	b5b0      	push	{r4, r5, r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <SystemCoreClockSetup+0x60>)
 8002394:	1d3c      	adds	r4, r7, #4
 8002396:	461d      	mov	r5, r3
 8002398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f848 	bl	8000438 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe f96d 	bl	8000688 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 80023ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80023b2:	f7fe f921 	bl	80005f8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 80023b6:	2006      	movs	r0, #6
 80023b8:	f7fe f9f2 	bl	80007a0 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80023bc:	f7fe fa6c 	bl	8000898 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 80023c0:	2003      	movs	r0, #3
 80023c2:	2164      	movs	r1, #100	; 0x64
 80023c4:	f7fe fa78 	bl	80008b8 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7ff ffcb 	bl	8002364 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f7fe fa22 	bl	8000818 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe f923 	bl	8000620 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7fe fa08 	bl	80007f0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7fe f9f1 	bl	80007c8 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bdb0      	pop	{r4, r5, r7, pc}
 80023ec:	0800484c 	.word	0x0800484c

080023f0 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002430:	0a1b      	lsrs	r3, r3, #8
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_EnableIRQ+0x34>)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	79fa      	ldrb	r2, [r7, #7]
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	490d      	ldr	r1, [pc, #52]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	4909      	ldr	r1, [pc, #36]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
  }
}
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	bf28      	it	cs
 80024ea:	2306      	movcs	r3, #6
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3306      	adds	r3, #6
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2201      	movs	r2, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	401a      	ands	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	1e59      	subs	r1, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002520:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <XMC_VADC_GROUP_ScanEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <XMC_VADC_GROUP_ScanDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002562:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	0e5b      	lsrs	r3, r3, #25
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <XMC_VADC_GROUP_ScanSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_ScanSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  /* Set the new gating mode */
  group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <XMC_VADC_GROUP_ScanAddMultipleChannels>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_mask)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ASSEL = ch_mask;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	32a0      	adds	r2, #160	; 0xa0
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <ADC_MEASUREMENT_ADV_lScanInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lScanInit(ADC_MEASUREMENT_ADV_SCAN_t *const handle_ptr,
                                                           uint8_t group_index)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'ADCGroup'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);
 8002628:	4827      	ldr	r0, [pc, #156]	; (80026c8 <ADC_MEASUREMENT_ADV_lScanInit+0xac>)
 800262a:	f7ff fc35 	bl	8001e98 <GLOBAL_ADC_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]

  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index], handle_ptr->iclass_config_handle,
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	4a25      	ldr	r2, [pc, #148]	; (80026cc <ADC_MEASUREMENT_ADV_lScanInit+0xb0>)
 8002636:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                                XMC_VADC_GROUP_CONV_STD, (uint32_t)handle_ptr->iclass_num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'ADCGroup'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);

  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index], handle_ptr->iclass_config_handle,
 8002640:	461c      	mov	r4, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4610      	mov	r0, r2
 8002646:	6919      	ldr	r1, [r3, #16]
 8002648:	2200      	movs	r2, #0
 800264a:	4623      	mov	r3, r4
 800264c:	f7ff f82c 	bl	80016a8 <XMC_VADC_GROUP_InputClassInit>
                                XMC_VADC_GROUP_CONV_STD, (uint32_t)handle_ptr->iclass_num);


  /*Initialization of scan request source*/
  XMC_VADC_GROUP_ScanInit(group_ptrs[group_index], handle_ptr->scan_config_handle);
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <ADC_MEASUREMENT_ADV_lScanInit+0xb0>)
 8002654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7ff f906 	bl	8001870 <XMC_VADC_GROUP_ScanInit>

  /* Configure the gating mode for Scan*/
  XMC_VADC_GROUP_ScanSetGatingMode(group_ptrs[group_index], handle_ptr->gating_mode);
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	4a19      	ldr	r2, [pc, #100]	; (80026cc <ADC_MEASUREMENT_ADV_lScanInit+0xb0>)
 8002668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7ff ff96 	bl	80025a4 <XMC_VADC_GROUP_ScanSetGatingMode>

  /*Interrupt Configuration*/
  if ((bool)true == handle_ptr->rs_intr_handle.interrupt_enable)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7b1b      	ldrb	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01e      	beq.n	80026be <ADC_MEASUREMENT_ADV_lScanInit+0xa2>
  {
#if (UC_FAMILY == XMC1)
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id, handle_ptr->rs_intr_handle.priority);
#else
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b2dc      	uxtb	r4, r3
 8002686:	f7ff fecd 	bl	8002424 <__NVIC_GetPriorityGrouping>
 800268a:	4601      	mov	r1, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff ff17 	bl	80024cc <NVIC_EncodePriority>
 800269e:	4602      	mov	r2, r0
 80026a0:	b263      	sxtb	r3, r4
 80026a2:	4618      	mov	r0, r3
 80026a4:	4611      	mov	r1, r2
 80026a6:	f7ff fee7 	bl	8002478 <__NVIC_SetPriority>
    XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle.node_id,
                                ((handle_ptr->rs_intr_handle.node_id << 8) | handle_ptr->rs_intr_handle.irqctrl));
#endif

    /* Connect RS Events to NVIC nodes */
    XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(group_ptrs[group_index], handle_ptr->srv_req_node);
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <ADC_MEASUREMENT_ADV_lScanInit+0xb0>)
 80026ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7e5b      	ldrb	r3, [r3, #25]
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7ff f927 	bl	800190c <XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode>
  }

  return (status);
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	1ffe8870 	.word	0x1ffe8870
 80026cc:	08004890 	.word	0x08004890

080026d0 <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_SCAN_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN != handle_ptr->req_src)
  #endif
      {
        status = ADC_MEASUREMENT_ADV_lScanInit(handle_ptr->local_scan_handle,handle_ptr->group_index);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7c5b      	ldrb	r3, [r3, #17]
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7ff ff9a 	bl	800261c <ADC_MEASUREMENT_ADV_lScanInit>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
      }
#endif
    }
#endif
    return (status);
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop

080026f8 <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
}
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  bool clock_reset_check;
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
 8002700:	2300      	movs	r3, #0
 8002702:	73bb      	strb	r3, [r7, #14]
#endif
  arbitration_status = (bool)false;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
 8002708:	2001      	movs	r0, #1
 800270a:	f7fd ff2d 	bl	8000568 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800270e:	4603      	mov	r3, r0
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	4313      	orrs	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	73bb      	strb	r3, [r7, #14]
#endif
  if(clock_reset_check != (bool)false)
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x4a>
#ifdef ADC_MEASUREMENT_ADV_SCAN_USED
  #ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
    if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN >= handle_ptr->req_src)
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7c5b      	ldrb	r3, [r3, #17]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x54>)
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff1d 	bl	8002578 <XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
      }
#endif
  }
  return (arbitration_status);
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	08004890 	.word	0x08004890

08002750 <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
  if(arbitration_status == (bool)false)
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f083 0301 	eor.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <ADC_MEASUREMENT_ADV_lDisableArbitration+0x2a>
#ifdef ADC_MEASUREMENT_ADV_SCAN_USED
  #ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN >= handle_ptr->req_src)
  #endif
      {
        XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7c5b      	ldrb	r3, [r3, #17]
 800276c:	461a      	mov	r2, r3
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <ADC_MEASUREMENT_ADV_lDisableArbitration+0x30>)
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff feed 	bl	8002554 <XMC_VADC_GROUP_ScanDisableArbitrationSlot>
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
      }
#endif
  }
}
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08004890 	.word	0x08004890

08002784 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_SCAN_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN != handle_ptr->req_src)
  #endif
      {
        XMC_VADC_GROUP_ScanAddMultipleChannels(group_ptrs[handle_ptr->group_index], handle_ptr->local_scan_handle->insert_mask);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7c5b      	ldrb	r3, [r3, #17]
 8002790:	461a      	mov	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <ADC_MEASUREMENT_ADV_lInsertChannels+0x28>)
 8002794:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7ff ff1b 	bl	80025dc <XMC_VADC_GROUP_ScanAddMultipleChannels>
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
      }
#endif
    }
#endif
}
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	08004890 	.word	0x08004890

080027b0 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 80027b6:	2303      	movs	r3, #3
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	e00a      	b.n	80027d2 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
 80027bc:	4a19      	ldr	r2, [pc, #100]	; (8002824 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	4618      	mov	r0, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	f7fe ffca 	bl	8001760 <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	daf1      	bge.n	80027bc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 80027d8:	2303      	movs	r3, #3
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	e012      	b.n	8002804 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4610      	mov	r0, r2
 80027ea:	2100      	movs	r1, #0
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7fe ffd3 	bl	8001798 <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7ff f805 	bl	8001808 <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	dce9      	bgt.n	80027de <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe ffe5 	bl	80017dc <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8002814:	4618      	mov	r0, r3
 8002816:	2103      	movs	r1, #3
 8002818:	f7fe ffa2 	bl	8001760 <XMC_VADC_GROUP_SetPowerMode>
}
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	08004890 	.word	0x08004890
 8002828:	40004400 	.word	0x40004400

0800282c <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_SCAN_USED
  #ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
    if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN >= handle_ptr->req_src)
  #endif
      {
        XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7c5b      	ldrb	r3, [r3, #17]
 8002838:	461a      	mov	r2, r3
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <ADC_MEASUREMENT_ADV_StartADC+0x20>)
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fe75 	bl	8002530 <XMC_VADC_GROUP_ScanEnableArbitrationSlot>
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
      }
#endif
}
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	08004890 	.word	0x08004890

08002850 <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
    if (((bool)true == handle_ptr->local_scan_handle->rs_intr_handle.interrupt_enable) &&
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	7b1b      	ldrb	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN == handle_ptr->req_src))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7c1b      	ldrb	r3, [r3, #16]
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
#ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
    if (((bool)true == handle_ptr->local_scan_handle->rs_intr_handle.interrupt_enable) &&
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	b25b      	sxtb	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fde3 	bl	8002440 <__NVIC_EnableIRQ>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
    }
#endif
}
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <ADC_MEASUREMENT_ADC_lResultInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Configures the result results . */
__STATIC_INLINE void ADC_MEASUREMENT_ADC_lResultInit(const ADC_MEASUREMENT_ADV_CHANNEL_t *indexed)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7b1b      	ldrb	r3, [r3, #12]
 800288c:	461a      	mov	r2, r3
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <ADC_MEASUREMENT_ADC_lResultInit+0x34>)
 8002890:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	789b      	ldrb	r3, [r3, #2]
 800289a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4619      	mov	r1, r3
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 80028a6:	4610      	mov	r0, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	f7ff fea5 	bl	80025f8 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
}
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	08004890 	.word	0x08004890

080028b8 <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint8_t total_number_of_channels;
  ADC_MEASUREMENT_ADV_STATUS_t status;
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
 80028c0:	2300      	movs	r3, #0
 80028c2:	737b      	strb	r3, [r7, #13]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d150      	bne.n	8002970 <ADC_MEASUREMENT_ADV_Init+0xb8>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff12 	bl	80026f8 <ADC_MEASUREMENT_ADV_lArbitrationStatus>
 80028d4:	4603      	mov	r3, r0
 80028d6:	737b      	strb	r3, [r7, #13]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fef9 	bl	80026d0 <ADC_MEASUREMENT_ADV_lRequestSrcInit>
 80028de:	4603      	mov	r3, r0
 80028e0:	73bb      	strb	r3, [r7, #14]

   /* Disable the Arbitration if no other instance has enabled it*/
   ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr,arbitration_status);
 80028e2:	7b7b      	ldrb	r3, [r7, #13]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7ff ff32 	bl	8002750 <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
 80028ec:	f7ff ff60 	bl	80027b0 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
#ifdef ADC_MEASUREMENT_ADV_MUX_USED
  #ifdef ADC_MEASUREMENT_ADV_MUX_NOT_ALL_USED
    if (handle_ptr->event_config != NULL)
  #endif
    {
      (handle_ptr->event_config)();
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4798      	blx	r3
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7cdb      	ldrb	r3, [r3, #19]
 80028fa:	733b      	strb	r3, [r7, #12]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e025      	b.n	800294e <ADC_MEASUREMENT_ADV_Init+0x96>
    {
      indexed = handle_ptr->channel_array[ch_num];
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	7b1b      	ldrb	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <ADC_MEASUREMENT_ADV_Init+0xc8>)
 8002918:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	7b5b      	ldrb	r3, [r3, #13]
 8002920:	4619      	mov	r1, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4610      	mov	r0, r2
 8002928:	461a      	mov	r2, r3
 800292a:	f7ff f80b 	bl	8001944 <XMC_VADC_GROUP_ChannelInit>
                                        channel_number);
  #endif
#endif

      /* Result Init both with and without FIFO */
      ADC_MEASUREMENT_ADC_lResultInit(indexed);
 800292e:	68b8      	ldr	r0, [r7, #8]
 8002930:	f7ff ffa6 	bl	8002880 <ADC_MEASUREMENT_ADC_lResultInit>
      /* ANALOG_IO initialization for the channel*/
#ifndef ADC_MEASUREMENT_ADV_ANALOG_IO_ALL_CHANNELS_USED
      if(indexed->analog_io_config != NULL)
#endif
      {
        status |= (ADC_MEASUREMENT_ADV_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fd59 	bl	80023f0 <ANALOG_IO_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	4313      	orrs	r3, r2
 8002946:	73bb      	strb	r3, [r7, #14]
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	3301      	adds	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	7b3b      	ldrb	r3, [r7, #12]
 8002952:	429a      	cmp	r2, r3
 8002954:	d3d5      	bcc.n	8002902 <ADC_MEASUREMENT_ADV_Init+0x4a>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ff7a 	bl	8002850 <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff11 	bl	8002784 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff62 	bl	800282c <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	7bba      	ldrb	r2, [r7, #14]
 800296e:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	781b      	ldrb	r3, [r3, #0]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	08004890 	.word	0x08004890

08002984 <ADC_MEASUREMENT_ADV_0_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_MEASUREMENT_ADV_0_event_config(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0

    /* Result Event Node Mux Configuration for Channel_B (Group-0 channel-0 Result_Register-4)*/
    XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0, 4U, XMC_VADC_SR_GROUP_SR0);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <ADC_MEASUREMENT_ADV_0_event_config+0x10>)
 800298a:	2104      	movs	r1, #4
 800298c:	2200      	movs	r2, #0
 800298e:	f7ff f847 	bl	8001a20 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40004400 	.word	0x40004400

08002998 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800299e:	2300      	movs	r3, #0
 80029a0:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80029a2:	4815      	ldr	r0, [pc, #84]	; (80029f8 <DAVE_Init+0x60>)
 80029a4:	f7ff fcc4 	bl	8002330 <CLOCK_XMC4_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_MEASUREMENT_ADV_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_MEASUREMENT_ADV_0); 
 80029b2:	4812      	ldr	r0, [pc, #72]	; (80029fc <DAVE_Init+0x64>)
 80029b4:	f7ff ff80 	bl	80028b8 <ADC_MEASUREMENT_ADV_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <DAVE_Init+0x34>
  {
	 /**  Initialization of DAC APP instance DAC_0 */
	 init_status = (DAVE_STATUS_t)DAC_Init(&DAC_0); 
 80029c2:	480f      	ldr	r0, [pc, #60]	; (8002a00 <DAVE_Init+0x68>)
 80029c4:	f7ff fbde 	bl	8002184 <DAC_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <DAVE_Init+0x44>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 80029d2:	480c      	ldr	r0, [pc, #48]	; (8002a04 <DAVE_Init+0x6c>)
 80029d4:	f7ff f8da 	bl	8001b8c <TIMER_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <DAVE_Init+0x70>)
 80029e4:	f7ff f9ee 	bl	8001dc4 <INTERRUPT_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80029ec:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	1ffe88d4 	.word	0x1ffe88d4
 80029fc:	08004918 	.word	0x08004918
 8002a00:	1ffe888c 	.word	0x1ffe888c
 8002a04:	1ffe8808 	.word	0x1ffe8808
 8002a08:	080047e0 	.word	0x080047e0

08002a0c <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	32c0      	adds	r2, #192	; 0xc0
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	b29b      	uxth	r3, r3
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <ADC_MEASUREMENT_ADV_GetResult>:
  }
}
 * @endcode
 */
__STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const handle_ptr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7b1b      	ldrb	r3, [r3, #12]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <ADC_MEASUREMENT_ADV_GetResult+0x38>)
 8002a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	789b      	ldrb	r3, [r3, #2]
 8002a4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a4e:	b2db      	uxtb	r3, r3
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7ff ffda 	bl	8002a0c <XMC_VADC_GROUP_GetResult>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	81fb      	strh	r3, [r7, #14]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
  return(result);
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	08004890 	.word	0x08004890

08002a6c <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8002a72:	f7ff ff91 	bl	8002998 <DAVE_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d000      	beq.n	8002a82 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8002a80:	e7fe      	b.n	8002a80 <main+0x14>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 8002a82:	e7fe      	b.n	8002a82 <main+0x16>

08002a84 <VADC0_G0_1_IRQHandler>:
}
void ADC_Result_ISR()
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	DAC_SingleValue_SetValue_u16(&DAC_0,single_data);
 8002a88:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <VADC0_G0_1_IRQHandler+0x104>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	483f      	ldr	r0, [pc, #252]	; (8002b8c <VADC0_G0_1_IRQHandler+0x108>)
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7ff fbba 	bl	8002208 <DAC_SingleValue_SetValue_u16>

	amplitude=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 8002a94:	483e      	ldr	r0, [pc, #248]	; (8002b90 <VADC0_G0_1_IRQHandler+0x10c>)
 8002a96:	f7ff ffcb 	bl	8002a30 <ADC_MEASUREMENT_ADV_GetResult>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <VADC0_G0_1_IRQHandler+0x110>)
 8002aa0:	801a      	strh	r2, [r3, #0]
	amplitude=amplitude/2;
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <VADC0_G0_1_IRQHandler+0x110>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <VADC0_G0_1_IRQHandler+0x110>)
 8002aac:	801a      	strh	r2, [r3, #0]
	offset=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 8002aae:	483a      	ldr	r0, [pc, #232]	; (8002b98 <VADC0_G0_1_IRQHandler+0x114>)
 8002ab0:	f7ff ffbe 	bl	8002a30 <ADC_MEASUREMENT_ADV_GetResult>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <VADC0_G0_1_IRQHandler+0x118>)
 8002aba:	801a      	strh	r2, [r3, #0]
	offset=offset/4;
 8002abc:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <VADC0_G0_1_IRQHandler+0x118>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <VADC0_G0_1_IRQHandler+0x118>)
 8002ac6:	801a      	strh	r2, [r3, #0]

	counter++;
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <VADC0_G0_1_IRQHandler+0x11c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <VADC0_G0_1_IRQHandler+0x11c>)
 8002ad2:	701a      	strb	r2, [r3, #0]
	x =pi/200*counter;
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <VADC0_G0_1_IRQHandler+0x120>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002ba8 <VADC0_G0_1_IRQHandler+0x124>
 8002ade:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <VADC0_G0_1_IRQHandler+0x11c>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <VADC0_G0_1_IRQHandler+0x128>)
 8002af4:	edc3 7a00 	vstr	s15, [r3]
	single_data = (uint16_t)(sin(x)*amplitude+amplitude+offset);
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <VADC0_G0_1_IRQHandler+0x128>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fb0b 	bl	8004118 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f000 f851 	bl	8002bb0 <sin>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460d      	mov	r5, r1
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <VADC0_G0_1_IRQHandler+0x110>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 faec 	bl	80040f4 <__aeabi_i2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4620      	mov	r0, r4
 8002b22:	4629      	mov	r1, r5
 8002b24:	f001 fb4c 	bl	80041c0 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <VADC0_G0_1_IRQHandler+0x110>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fadd 	bl	80040f4 <__aeabi_i2d>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4629      	mov	r1, r5
 8002b42:	f001 f98b 	bl	8003e5c <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <VADC0_G0_1_IRQHandler+0x118>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 face 	bl	80040f4 <__aeabi_i2d>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f001 f97c 	bl	8003e5c <__adddf3>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f001 fdea 	bl	8004744 <__aeabi_d2uiz>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <VADC0_G0_1_IRQHandler+0x104>)
 8002b76:	801a      	strh	r2, [r3, #0]

	if(counter==200) counter=0;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <VADC0_G0_1_IRQHandler+0x11c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2bc8      	cmp	r3, #200	; 0xc8
 8002b7e:	d102      	bne.n	8002b86 <VADC0_G0_1_IRQHandler+0x102>
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <VADC0_G0_1_IRQHandler+0x11c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
}
 8002b86:	bdb0      	pop	{r4, r5, r7, pc}
 8002b88:	1ffe88dc 	.word	0x1ffe88dc
 8002b8c:	1ffe888c 	.word	0x1ffe888c
 8002b90:	080048b4 	.word	0x080048b4
 8002b94:	1ffe88c6 	.word	0x1ffe88c6
 8002b98:	080048d8 	.word	0x080048d8
 8002b9c:	1ffe88de 	.word	0x1ffe88de
 8002ba0:	1ffe88db 	.word	0x1ffe88db
 8002ba4:	1ffe88c8 	.word	0x1ffe88c8
 8002ba8:	43480000 	.word	0x43480000
 8002bac:	1ffe88e0 	.word	0x1ffe88e0

08002bb0 <sin>:
 8002bb0:	b530      	push	{r4, r5, lr}
 8002bb2:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <sin+0x8c>)
 8002bb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	b087      	sub	sp, #28
 8002bbc:	dd1c      	ble.n	8002bf8 <sin+0x48>
 8002bbe:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <sin+0x90>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	dd05      	ble.n	8002bd0 <sin+0x20>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	f001 f946 	bl	8003e58 <__aeabi_dsub>
 8002bcc:	b007      	add	sp, #28
 8002bce:	bd30      	pop	{r4, r5, pc}
 8002bd0:	aa02      	add	r2, sp, #8
 8002bd2:	f000 f839 	bl	8002c48 <__ieee754_rem_pio2>
 8002bd6:	f000 0003 	and.w	r0, r0, #3
 8002bda:	2801      	cmp	r0, #1
 8002bdc:	d01d      	beq.n	8002c1a <sin+0x6a>
 8002bde:	2802      	cmp	r0, #2
 8002be0:	d012      	beq.n	8002c08 <sin+0x58>
 8002be2:	b308      	cbz	r0, 8002c28 <sin+0x78>
 8002be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bec:	f000 fa4c 	bl	8003088 <__kernel_cos>
 8002bf0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002bf4:	b007      	add	sp, #28
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f000 ff56 	bl	8003ab0 <__kernel_sin>
 8002c04:	b007      	add	sp, #28
 8002c06:	bd30      	pop	{r4, r5, pc}
 8002c08:	2401      	movs	r4, #1
 8002c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c12:	9400      	str	r4, [sp, #0]
 8002c14:	f000 ff4c 	bl	8003ab0 <__kernel_sin>
 8002c18:	e7ea      	b.n	8002bf0 <sin+0x40>
 8002c1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c22:	f000 fa31 	bl	8003088 <__kernel_cos>
 8002c26:	e7d1      	b.n	8002bcc <sin+0x1c>
 8002c28:	2401      	movs	r4, #1
 8002c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c32:	9400      	str	r4, [sp, #0]
 8002c34:	f000 ff3c 	bl	8003ab0 <__kernel_sin>
 8002c38:	e7c8      	b.n	8002bcc <sin+0x1c>
 8002c3a:	bf00      	nop
 8002c3c:	3fe921fb 	.word	0x3fe921fb
 8002c40:	7fefffff 	.word	0x7fefffff
 8002c44:	00000000 	.word	0x00000000

08002c48 <__ieee754_rem_pio2>:
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	4b98      	ldr	r3, [pc, #608]	; (8002eb0 <__ieee754_rem_pio2+0x268>)
 8002c4e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8002c52:	429c      	cmp	r4, r3
 8002c54:	b08f      	sub	sp, #60	; 0x3c
 8002c56:	4606      	mov	r6, r0
 8002c58:	460f      	mov	r7, r1
 8002c5a:	468a      	mov	sl, r1
 8002c5c:	4615      	mov	r5, r2
 8002c5e:	f340 8082 	ble.w	8002d66 <__ieee754_rem_pio2+0x11e>
 8002c62:	4b94      	ldr	r3, [pc, #592]	; (8002eb4 <__ieee754_rem_pio2+0x26c>)
 8002c64:	429c      	cmp	r4, r3
 8002c66:	dc27      	bgt.n	8002cb8 <__ieee754_rem_pio2+0x70>
 8002c68:	2900      	cmp	r1, #0
 8002c6a:	a387      	add	r3, pc, #540	; (adr r3, 8002e88 <__ieee754_rem_pio2+0x240>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f340 81a4 	ble.w	8002fbc <__ieee754_rem_pio2+0x374>
 8002c74:	f001 f8f0 	bl	8003e58 <__aeabi_dsub>
 8002c78:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <__ieee754_rem_pio2+0x270>)
 8002c7a:	429c      	cmp	r4, r3
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	460f      	mov	r7, r1
 8002c80:	f000 8088 	beq.w	8002d94 <__ieee754_rem_pio2+0x14c>
 8002c84:	a382      	add	r3, pc, #520	; (adr r3, 8002e90 <__ieee754_rem_pio2+0x248>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f001 f8e5 	bl	8003e58 <__aeabi_dsub>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	e9c5 2300 	strd	r2, r3, [r5]
 8002c96:	4630      	mov	r0, r6
 8002c98:	4639      	mov	r1, r7
 8002c9a:	f001 f8dd 	bl	8003e58 <__aeabi_dsub>
 8002c9e:	a37c      	add	r3, pc, #496	; (adr r3, 8002e90 <__ieee754_rem_pio2+0x248>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f001 f8d8 	bl	8003e58 <__aeabi_dsub>
 8002ca8:	f04f 0b01 	mov.w	fp, #1
 8002cac:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002cb0:	4658      	mov	r0, fp
 8002cb2:	b00f      	add	sp, #60	; 0x3c
 8002cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb8:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <__ieee754_rem_pio2+0x274>)
 8002cba:	429c      	cmp	r4, r3
 8002cbc:	f340 8088 	ble.w	8002dd0 <__ieee754_rem_pio2+0x188>
 8002cc0:	4b7f      	ldr	r3, [pc, #508]	; (8002ec0 <__ieee754_rem_pio2+0x278>)
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	dc5b      	bgt.n	8002d7e <__ieee754_rem_pio2+0x136>
 8002cc6:	ea4f 5b24 	mov.w	fp, r4, asr #20
 8002cca:	f2ab 4b16 	subw	fp, fp, #1046	; 0x416
 8002cce:	eba4 510b 	sub.w	r1, r4, fp, lsl #20
 8002cd2:	4689      	mov	r9, r1
 8002cd4:	4680      	mov	r8, r0
 8002cd6:	f001 fd0d 	bl	80046f4 <__aeabi_d2iz>
 8002cda:	f001 fa0b 	bl	80040f4 <__aeabi_i2d>
 8002cde:	4606      	mov	r6, r0
 8002ce0:	460f      	mov	r7, r1
 8002ce2:	4632      	mov	r2, r6
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8002cee:	f001 f8b3 	bl	8003e58 <__aeabi_dsub>
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <__ieee754_rem_pio2+0x27c>)
 8002cf6:	f001 fa63 	bl	80041c0 <__aeabi_dmul>
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4680      	mov	r8, r0
 8002cfe:	f001 fcf9 	bl	80046f4 <__aeabi_d2iz>
 8002d02:	f001 f9f7 	bl	80040f4 <__aeabi_i2d>
 8002d06:	4606      	mov	r6, r0
 8002d08:	460f      	mov	r7, r1
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4640      	mov	r0, r8
 8002d10:	4649      	mov	r1, r9
 8002d12:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8002d16:	f001 f89f 	bl	8003e58 <__aeabi_dsub>
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4b69      	ldr	r3, [pc, #420]	; (8002ec4 <__ieee754_rem_pio2+0x27c>)
 8002d1e:	f001 fa4f 	bl	80041c0 <__aeabi_dmul>
 8002d22:	2200      	movs	r2, #0
 8002d24:	2300      	movs	r3, #0
 8002d26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002d2a:	f001 fcb1 	bl	8004690 <__aeabi_dcmpeq>
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	f000 816d 	beq.w	800300e <__ieee754_rem_pio2+0x3c6>
 8002d34:	2300      	movs	r3, #0
 8002d36:	4630      	mov	r0, r6
 8002d38:	4639      	mov	r1, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f001 fca8 	bl	8004690 <__aeabi_dcmpeq>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2302      	moveq	r3, #2
 8002d48:	2202      	movs	r2, #2
 8002d4a:	495f      	ldr	r1, [pc, #380]	; (8002ec8 <__ieee754_rem_pio2+0x280>)
 8002d4c:	9200      	str	r2, [sp, #0]
 8002d4e:	9101      	str	r1, [sp, #4]
 8002d50:	465a      	mov	r2, fp
 8002d52:	a808      	add	r0, sp, #32
 8002d54:	4629      	mov	r1, r5
 8002d56:	f000 fabf 	bl	80032d8 <__kernel_rem_pio2>
 8002d5a:	f1ba 0f00 	cmp.w	sl, #0
 8002d5e:	f2c0 814b 	blt.w	8002ff8 <__ieee754_rem_pio2+0x3b0>
 8002d62:	4683      	mov	fp, r0
 8002d64:	e007      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 8002d66:	2200      	movs	r2, #0
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e9c5 6700 	strd	r6, r7, [r5]
 8002d6e:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8002d72:	f04f 0b00 	mov.w	fp, #0
 8002d76:	4658      	mov	r0, fp
 8002d78:	b00f      	add	sp, #60	; 0x3c
 8002d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	f001 f869 	bl	8003e58 <__aeabi_dsub>
 8002d86:	f04f 0b00 	mov.w	fp, #0
 8002d8a:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8002d92:	e7f0      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 8002d94:	a340      	add	r3, pc, #256	; (adr r3, 8002e98 <__ieee754_rem_pio2+0x250>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f001 f85d 	bl	8003e58 <__aeabi_dsub>
 8002d9e:	a340      	add	r3, pc, #256	; (adr r3, 8002ea0 <__ieee754_rem_pio2+0x258>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	4606      	mov	r6, r0
 8002da6:	460f      	mov	r7, r1
 8002da8:	f001 f856 	bl	8003e58 <__aeabi_dsub>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	e9c5 2300 	strd	r2, r3, [r5]
 8002db4:	4630      	mov	r0, r6
 8002db6:	4639      	mov	r1, r7
 8002db8:	f001 f84e 	bl	8003e58 <__aeabi_dsub>
 8002dbc:	a338      	add	r3, pc, #224	; (adr r3, 8002ea0 <__ieee754_rem_pio2+0x258>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f001 f849 	bl	8003e58 <__aeabi_dsub>
 8002dc6:	f04f 0b01 	mov.w	fp, #1
 8002dca:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002dce:	e7d2      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 8002dd0:	f000 ff26 	bl	8003c20 <fabs>
 8002dd4:	a334      	add	r3, pc, #208	; (adr r3, 8002ea8 <__ieee754_rem_pio2+0x260>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	4606      	mov	r6, r0
 8002ddc:	460f      	mov	r7, r1
 8002dde:	f001 f9ef 	bl	80041c0 <__aeabi_dmul>
 8002de2:	2200      	movs	r2, #0
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <__ieee754_rem_pio2+0x284>)
 8002de6:	f001 f839 	bl	8003e5c <__adddf3>
 8002dea:	f001 fc83 	bl	80046f4 <__aeabi_d2iz>
 8002dee:	4683      	mov	fp, r0
 8002df0:	f001 f980 	bl	80040f4 <__aeabi_i2d>
 8002df4:	a324      	add	r3, pc, #144	; (adr r3, 8002e88 <__ieee754_rem_pio2+0x240>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002dfe:	f001 f9df 	bl	80041c0 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4630      	mov	r0, r6
 8002e08:	4639      	mov	r1, r7
 8002e0a:	f001 f825 	bl	8003e58 <__aeabi_dsub>
 8002e0e:	a320      	add	r3, pc, #128	; (adr r3, 8002e90 <__ieee754_rem_pio2+0x248>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	4606      	mov	r6, r0
 8002e16:	460f      	mov	r7, r1
 8002e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e1c:	f001 f9d0 	bl	80041c0 <__aeabi_dmul>
 8002e20:	f1bb 0f1f 	cmp.w	fp, #31
 8002e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e28:	4630      	mov	r0, r6
 8002e2a:	4639      	mov	r1, r7
 8002e2c:	dc52      	bgt.n	8002ed4 <__ieee754_rem_pio2+0x28c>
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <__ieee754_rem_pio2+0x288>)
 8002e30:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d04b      	beq.n	8002ed4 <__ieee754_rem_pio2+0x28c>
 8002e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e40:	f001 f80a 	bl	8003e58 <__aeabi_dsub>
 8002e44:	4680      	mov	r8, r0
 8002e46:	4689      	mov	r9, r1
 8002e48:	e9c5 8900 	strd	r8, r9, [r5]
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	4630      	mov	r0, r6
 8002e52:	4639      	mov	r1, r7
 8002e54:	f001 f800 	bl	8003e58 <__aeabi_dsub>
 8002e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e5c:	f000 fffc 	bl	8003e58 <__aeabi_dsub>
 8002e60:	f1ba 0f00 	cmp.w	sl, #0
 8002e64:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002e68:	da85      	bge.n	8002d76 <__ieee754_rem_pio2+0x12e>
 8002e6a:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
 8002e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002e72:	f1cb 0b00 	rsb	fp, fp, #0
 8002e76:	f8c5 8000 	str.w	r8, [r5]
 8002e7a:	606c      	str	r4, [r5, #4]
 8002e7c:	60a8      	str	r0, [r5, #8]
 8002e7e:	60eb      	str	r3, [r5, #12]
 8002e80:	e779      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	54400000 	.word	0x54400000
 8002e8c:	3ff921fb 	.word	0x3ff921fb
 8002e90:	1a626331 	.word	0x1a626331
 8002e94:	3dd0b461 	.word	0x3dd0b461
 8002e98:	1a600000 	.word	0x1a600000
 8002e9c:	3dd0b461 	.word	0x3dd0b461
 8002ea0:	2e037073 	.word	0x2e037073
 8002ea4:	3ba3198a 	.word	0x3ba3198a
 8002ea8:	6dc9c883 	.word	0x6dc9c883
 8002eac:	3fe45f30 	.word	0x3fe45f30
 8002eb0:	3fe921fb 	.word	0x3fe921fb
 8002eb4:	4002d97b 	.word	0x4002d97b
 8002eb8:	3ff921fb 	.word	0x3ff921fb
 8002ebc:	413921fb 	.word	0x413921fb
 8002ec0:	7fefffff 	.word	0x7fefffff
 8002ec4:	41700000 	.word	0x41700000
 8002ec8:	080049b0 	.word	0x080049b0
 8002ecc:	3fe00000 	.word	0x3fe00000
 8002ed0:	08004930 	.word	0x08004930
 8002ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ed8:	f000 ffbe 	bl	8003e58 <__aeabi_dsub>
 8002edc:	1524      	asrs	r4, r4, #20
 8002ede:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002ee2:	1ae3      	subs	r3, r4, r3
 8002ee4:	4680      	mov	r8, r0
 8002ee6:	4689      	mov	r9, r1
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	e9c5 8900 	strd	r8, r9, [r5]
 8002eee:	ddad      	ble.n	8002e4c <__ieee754_rem_pio2+0x204>
 8002ef0:	a35b      	add	r3, pc, #364	; (adr r3, 8003060 <__ieee754_rem_pio2+0x418>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002efa:	f001 f961 	bl	80041c0 <__aeabi_dmul>
 8002efe:	4680      	mov	r8, r0
 8002f00:	4689      	mov	r9, r1
 8002f02:	4642      	mov	r2, r8
 8002f04:	464b      	mov	r3, r9
 8002f06:	4630      	mov	r0, r6
 8002f08:	4639      	mov	r1, r7
 8002f0a:	f000 ffa5 	bl	8003e58 <__aeabi_dsub>
 8002f0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f16:	4630      	mov	r0, r6
 8002f18:	4639      	mov	r1, r7
 8002f1a:	f000 ff9d 	bl	8003e58 <__aeabi_dsub>
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	f000 ff99 	bl	8003e58 <__aeabi_dsub>
 8002f26:	a350      	add	r3, pc, #320	; (adr r3, 8003068 <__ieee754_rem_pio2+0x420>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	460f      	mov	r7, r1
 8002f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f34:	f001 f944 	bl	80041c0 <__aeabi_dmul>
 8002f38:	4632      	mov	r2, r6
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	f000 ff8c 	bl	8003e58 <__aeabi_dsub>
 8002f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f4c:	f000 ff84 	bl	8003e58 <__aeabi_dsub>
 8002f50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002f54:	1ae4      	subs	r4, r4, r3
 8002f56:	4680      	mov	r8, r0
 8002f58:	4689      	mov	r9, r1
 8002f5a:	2c31      	cmp	r4, #49	; 0x31
 8002f5c:	e9c5 8900 	strd	r8, r9, [r5]
 8002f60:	dd75      	ble.n	800304e <__ieee754_rem_pio2+0x406>
 8002f62:	a344      	add	r3, pc, #272	; (adr r3, 8003074 <__ieee754_rem_pio2+0x42c>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f6c:	f001 f928 	bl	80041c0 <__aeabi_dmul>
 8002f70:	4680      	mov	r8, r0
 8002f72:	4689      	mov	r9, r1
 8002f74:	4642      	mov	r2, r8
 8002f76:	464b      	mov	r3, r9
 8002f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f7c:	f000 ff6c 	bl	8003e58 <__aeabi_dsub>
 8002f80:	4606      	mov	r6, r0
 8002f82:	460f      	mov	r7, r1
 8002f84:	4632      	mov	r2, r6
 8002f86:	463b      	mov	r3, r7
 8002f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f8c:	f000 ff64 	bl	8003e58 <__aeabi_dsub>
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	f000 ff60 	bl	8003e58 <__aeabi_dsub>
 8002f98:	a338      	add	r3, pc, #224	; (adr r3, 800307c <__ieee754_rem_pio2+0x434>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	4680      	mov	r8, r0
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fa6:	f001 f90b 	bl	80041c0 <__aeabi_dmul>
 8002faa:	4642      	mov	r2, r8
 8002fac:	464b      	mov	r3, r9
 8002fae:	f000 ff53 	bl	8003e58 <__aeabi_dsub>
 8002fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	4639      	mov	r1, r7
 8002fba:	e73f      	b.n	8002e3c <__ieee754_rem_pio2+0x1f4>
 8002fbc:	f000 ff4e 	bl	8003e5c <__adddf3>
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <__ieee754_rem_pio2+0x428>)
 8002fc2:	429c      	cmp	r4, r3
 8002fc4:	4606      	mov	r6, r0
 8002fc6:	460f      	mov	r7, r1
 8002fc8:	d023      	beq.n	8003012 <__ieee754_rem_pio2+0x3ca>
 8002fca:	a323      	add	r3, pc, #140	; (adr r3, 8003058 <__ieee754_rem_pio2+0x410>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f000 ff44 	bl	8003e5c <__adddf3>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	e9c5 2300 	strd	r2, r3, [r5]
 8002fdc:	4630      	mov	r0, r6
 8002fde:	4639      	mov	r1, r7
 8002fe0:	f000 ff3a 	bl	8003e58 <__aeabi_dsub>
 8002fe4:	a31c      	add	r3, pc, #112	; (adr r3, 8003058 <__ieee754_rem_pio2+0x410>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f000 ff37 	bl	8003e5c <__adddf3>
 8002fee:	f04f 3bff 	mov.w	fp, #4294967295
 8002ff2:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002ff6:	e6be      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 8002ff8:	686a      	ldr	r2, [r5, #4]
 8002ffa:	68eb      	ldr	r3, [r5, #12]
 8002ffc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003000:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003004:	f1c0 0b00 	rsb	fp, r0, #0
 8003008:	606a      	str	r2, [r5, #4]
 800300a:	60eb      	str	r3, [r5, #12]
 800300c:	e6b3      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 800300e:	2303      	movs	r3, #3
 8003010:	e69a      	b.n	8002d48 <__ieee754_rem_pio2+0x100>
 8003012:	a313      	add	r3, pc, #76	; (adr r3, 8003060 <__ieee754_rem_pio2+0x418>)
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	f000 ff20 	bl	8003e5c <__adddf3>
 800301c:	a312      	add	r3, pc, #72	; (adr r3, 8003068 <__ieee754_rem_pio2+0x420>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	4606      	mov	r6, r0
 8003024:	460f      	mov	r7, r1
 8003026:	f000 ff19 	bl	8003e5c <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	e9c5 2300 	strd	r2, r3, [r5]
 8003032:	4630      	mov	r0, r6
 8003034:	4639      	mov	r1, r7
 8003036:	f000 ff0f 	bl	8003e58 <__aeabi_dsub>
 800303a:	a30b      	add	r3, pc, #44	; (adr r3, 8003068 <__ieee754_rem_pio2+0x420>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f000 ff0c 	bl	8003e5c <__adddf3>
 8003044:	f04f 3bff 	mov.w	fp, #4294967295
 8003048:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800304c:	e693      	b.n	8002d76 <__ieee754_rem_pio2+0x12e>
 800304e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8003052:	e6fb      	b.n	8002e4c <__ieee754_rem_pio2+0x204>
 8003054:	f3af 8000 	nop.w
 8003058:	1a626331 	.word	0x1a626331
 800305c:	3dd0b461 	.word	0x3dd0b461
 8003060:	1a600000 	.word	0x1a600000
 8003064:	3dd0b461 	.word	0x3dd0b461
 8003068:	2e037073 	.word	0x2e037073
 800306c:	3ba3198a 	.word	0x3ba3198a
 8003070:	3ff921fb 	.word	0x3ff921fb
 8003074:	2e000000 	.word	0x2e000000
 8003078:	3ba3198a 	.word	0x3ba3198a
 800307c:	252049c1 	.word	0x252049c1
 8003080:	397b839a 	.word	0x397b839a
 8003084:	f3af 8000 	nop.w

08003088 <__kernel_cos>:
 8003088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8003090:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8003094:	b085      	sub	sp, #20
 8003096:	4606      	mov	r6, r0
 8003098:	460f      	mov	r7, r1
 800309a:	4692      	mov	sl, r2
 800309c:	469b      	mov	fp, r3
 800309e:	da6b      	bge.n	8003178 <__kernel_cos+0xf0>
 80030a0:	f001 fb28 	bl	80046f4 <__aeabi_d2iz>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	f000 80ea 	beq.w	800327e <__kernel_cos+0x1f6>
 80030aa:	4632      	mov	r2, r6
 80030ac:	463b      	mov	r3, r7
 80030ae:	4630      	mov	r0, r6
 80030b0:	4639      	mov	r1, r7
 80030b2:	f001 f885 	bl	80041c0 <__aeabi_dmul>
 80030b6:	a374      	add	r3, pc, #464	; (adr r3, 8003288 <__kernel_cos+0x200>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	4604      	mov	r4, r0
 80030be:	460d      	mov	r5, r1
 80030c0:	f001 f87e 	bl	80041c0 <__aeabi_dmul>
 80030c4:	a372      	add	r3, pc, #456	; (adr r3, 8003290 <__kernel_cos+0x208>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f000 fec7 	bl	8003e5c <__adddf3>
 80030ce:	4622      	mov	r2, r4
 80030d0:	462b      	mov	r3, r5
 80030d2:	f001 f875 	bl	80041c0 <__aeabi_dmul>
 80030d6:	a370      	add	r3, pc, #448	; (adr r3, 8003298 <__kernel_cos+0x210>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f000 febc 	bl	8003e58 <__aeabi_dsub>
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	f001 f86c 	bl	80041c0 <__aeabi_dmul>
 80030e8:	a36d      	add	r3, pc, #436	; (adr r3, 80032a0 <__kernel_cos+0x218>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f000 feb5 	bl	8003e5c <__adddf3>
 80030f2:	4622      	mov	r2, r4
 80030f4:	462b      	mov	r3, r5
 80030f6:	f001 f863 	bl	80041c0 <__aeabi_dmul>
 80030fa:	a36b      	add	r3, pc, #428	; (adr r3, 80032a8 <__kernel_cos+0x220>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f000 feaa 	bl	8003e58 <__aeabi_dsub>
 8003104:	4622      	mov	r2, r4
 8003106:	462b      	mov	r3, r5
 8003108:	f001 f85a 	bl	80041c0 <__aeabi_dmul>
 800310c:	a368      	add	r3, pc, #416	; (adr r3, 80032b0 <__kernel_cos+0x228>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f000 fea3 	bl	8003e5c <__adddf3>
 8003116:	4622      	mov	r2, r4
 8003118:	462b      	mov	r3, r5
 800311a:	f001 f851 	bl	80041c0 <__aeabi_dmul>
 800311e:	e9cd 0100 	strd	r0, r1, [sp]
 8003122:	4620      	mov	r0, r4
 8003124:	4629      	mov	r1, r5
 8003126:	2200      	movs	r2, #0
 8003128:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <__kernel_cos+0x238>)
 800312a:	f001 f849 	bl	80041c0 <__aeabi_dmul>
 800312e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003132:	4680      	mov	r8, r0
 8003134:	4689      	mov	r9, r1
 8003136:	4620      	mov	r0, r4
 8003138:	4629      	mov	r1, r5
 800313a:	f001 f841 	bl	80041c0 <__aeabi_dmul>
 800313e:	4652      	mov	r2, sl
 8003140:	4604      	mov	r4, r0
 8003142:	460d      	mov	r5, r1
 8003144:	465b      	mov	r3, fp
 8003146:	4630      	mov	r0, r6
 8003148:	4639      	mov	r1, r7
 800314a:	f001 f839 	bl	80041c0 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4620      	mov	r0, r4
 8003154:	4629      	mov	r1, r5
 8003156:	f000 fe7f 	bl	8003e58 <__aeabi_dsub>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4640      	mov	r0, r8
 8003160:	4649      	mov	r1, r9
 8003162:	f000 fe79 	bl	8003e58 <__aeabi_dsub>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	2000      	movs	r0, #0
 800316c:	4955      	ldr	r1, [pc, #340]	; (80032c4 <__kernel_cos+0x23c>)
 800316e:	f000 fe73 	bl	8003e58 <__aeabi_dsub>
 8003172:	b005      	add	sp, #20
 8003174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	f001 f820 	bl	80041c0 <__aeabi_dmul>
 8003180:	a341      	add	r3, pc, #260	; (adr r3, 8003288 <__kernel_cos+0x200>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	4604      	mov	r4, r0
 8003188:	460d      	mov	r5, r1
 800318a:	f001 f819 	bl	80041c0 <__aeabi_dmul>
 800318e:	a340      	add	r3, pc, #256	; (adr r3, 8003290 <__kernel_cos+0x208>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f000 fe62 	bl	8003e5c <__adddf3>
 8003198:	4622      	mov	r2, r4
 800319a:	462b      	mov	r3, r5
 800319c:	f001 f810 	bl	80041c0 <__aeabi_dmul>
 80031a0:	a33d      	add	r3, pc, #244	; (adr r3, 8003298 <__kernel_cos+0x210>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f000 fe57 	bl	8003e58 <__aeabi_dsub>
 80031aa:	4622      	mov	r2, r4
 80031ac:	462b      	mov	r3, r5
 80031ae:	f001 f807 	bl	80041c0 <__aeabi_dmul>
 80031b2:	a33b      	add	r3, pc, #236	; (adr r3, 80032a0 <__kernel_cos+0x218>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f000 fe50 	bl	8003e5c <__adddf3>
 80031bc:	4622      	mov	r2, r4
 80031be:	462b      	mov	r3, r5
 80031c0:	f000 fffe 	bl	80041c0 <__aeabi_dmul>
 80031c4:	a338      	add	r3, pc, #224	; (adr r3, 80032a8 <__kernel_cos+0x220>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f000 fe45 	bl	8003e58 <__aeabi_dsub>
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	f000 fff5 	bl	80041c0 <__aeabi_dmul>
 80031d6:	a336      	add	r3, pc, #216	; (adr r3, 80032b0 <__kernel_cos+0x228>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f000 fe3e 	bl	8003e5c <__adddf3>
 80031e0:	462b      	mov	r3, r5
 80031e2:	4622      	mov	r2, r4
 80031e4:	f000 ffec 	bl	80041c0 <__aeabi_dmul>
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <__kernel_cos+0x240>)
 80031ea:	4599      	cmp	r9, r3
 80031ec:	e9cd 0100 	strd	r0, r1, [sp]
 80031f0:	dd97      	ble.n	8003122 <__kernel_cos+0x9a>
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <__kernel_cos+0x244>)
 80031f4:	4599      	cmp	r9, r3
 80031f6:	dc39      	bgt.n	800326c <__kernel_cos+0x1e4>
 80031f8:	2200      	movs	r2, #0
 80031fa:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 80031fe:	2000      	movs	r0, #0
 8003200:	4930      	ldr	r1, [pc, #192]	; (80032c4 <__kernel_cos+0x23c>)
 8003202:	4690      	mov	r8, r2
 8003204:	4699      	mov	r9, r3
 8003206:	f000 fe27 	bl	8003e58 <__aeabi_dsub>
 800320a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800320e:	4620      	mov	r0, r4
 8003210:	4629      	mov	r1, r5
 8003212:	2200      	movs	r2, #0
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <__kernel_cos+0x238>)
 8003216:	f000 ffd3 	bl	80041c0 <__aeabi_dmul>
 800321a:	4642      	mov	r2, r8
 800321c:	464b      	mov	r3, r9
 800321e:	f000 fe1b 	bl	8003e58 <__aeabi_dsub>
 8003222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003226:	4680      	mov	r8, r0
 8003228:	4689      	mov	r9, r1
 800322a:	4620      	mov	r0, r4
 800322c:	4629      	mov	r1, r5
 800322e:	f000 ffc7 	bl	80041c0 <__aeabi_dmul>
 8003232:	4652      	mov	r2, sl
 8003234:	4604      	mov	r4, r0
 8003236:	460d      	mov	r5, r1
 8003238:	465b      	mov	r3, fp
 800323a:	4630      	mov	r0, r6
 800323c:	4639      	mov	r1, r7
 800323e:	f000 ffbf 	bl	80041c0 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f000 fe05 	bl	8003e58 <__aeabi_dsub>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4640      	mov	r0, r8
 8003254:	4649      	mov	r1, r9
 8003256:	f000 fdff 	bl	8003e58 <__aeabi_dsub>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003262:	f000 fdf9 	bl	8003e58 <__aeabi_dsub>
 8003266:	b005      	add	sp, #20
 8003268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800326c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80032b8 <__kernel_cos+0x230>
 8003270:	f04f 0800 	mov.w	r8, #0
 8003274:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003278:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80032d0 <__kernel_cos+0x248>
 800327c:	e7c7      	b.n	800320e <__kernel_cos+0x186>
 800327e:	4911      	ldr	r1, [pc, #68]	; (80032c4 <__kernel_cos+0x23c>)
 8003280:	2000      	movs	r0, #0
 8003282:	b005      	add	sp, #20
 8003284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003288:	be8838d4 	.word	0xbe8838d4
 800328c:	bda8fae9 	.word	0xbda8fae9
 8003290:	bdb4b1c4 	.word	0xbdb4b1c4
 8003294:	3e21ee9e 	.word	0x3e21ee9e
 8003298:	809c52ad 	.word	0x809c52ad
 800329c:	3e927e4f 	.word	0x3e927e4f
 80032a0:	19cb1590 	.word	0x19cb1590
 80032a4:	3efa01a0 	.word	0x3efa01a0
 80032a8:	16c15177 	.word	0x16c15177
 80032ac:	3f56c16c 	.word	0x3f56c16c
 80032b0:	5555554c 	.word	0x5555554c
 80032b4:	3fa55555 	.word	0x3fa55555
 80032b8:	00000000 	.word	0x00000000
 80032bc:	3fe70000 	.word	0x3fe70000
 80032c0:	3fe00000 	.word	0x3fe00000
 80032c4:	3ff00000 	.word	0x3ff00000
 80032c8:	3fd33332 	.word	0x3fd33332
 80032cc:	3fe90000 	.word	0x3fe90000
 80032d0:	3fd20000 	.word	0x3fd20000
 80032d4:	f3af 8000 	nop.w

080032d8 <__kernel_rem_pio2>:
 80032d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032dc:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80032e0:	4cc6      	ldr	r4, [pc, #792]	; (80035fc <__kernel_rem_pio2+0x324>)
 80032e2:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 80032e4:	4dc6      	ldr	r5, [pc, #792]	; (8003600 <__kernel_rem_pio2+0x328>)
 80032e6:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80032ea:	9407      	str	r4, [sp, #28]
 80032ec:	4626      	mov	r6, r4
 80032ee:	1ed4      	subs	r4, r2, #3
 80032f0:	fb85 7504 	smull	r7, r5, r5, r4
 80032f4:	17e4      	asrs	r4, r4, #31
 80032f6:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 80032fa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80032fe:	461d      	mov	r5, r3
 8003300:	930a      	str	r3, [sp, #40]	; 0x28
 8003302:	43e3      	mvns	r3, r4
 8003304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003308:	3d01      	subs	r5, #1
 800330a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800330e:	9306      	str	r3, [sp, #24]
 8003310:	462b      	mov	r3, r5
 8003312:	940b      	str	r4, [sp, #44]	; 0x2c
 8003314:	9500      	str	r5, [sp, #0]
 8003316:	1b65      	subs	r5, r4, r5
 8003318:	199c      	adds	r4, r3, r6
 800331a:	9003      	str	r0, [sp, #12]
 800331c:	9108      	str	r1, [sp, #32]
 800331e:	d416      	bmi.n	800334e <__kernel_rem_pio2+0x76>
 8003320:	442c      	add	r4, r5
 8003322:	3401      	adds	r4, #1
 8003324:	ae22      	add	r6, sp, #136	; 0x88
 8003326:	9fa5      	ldr	r7, [sp, #660]	; 0x294
 8003328:	e008      	b.n	800333c <__kernel_rem_pio2+0x64>
 800332a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800332e:	f000 fee1 	bl	80040f4 <__aeabi_i2d>
 8003332:	3501      	adds	r5, #1
 8003334:	42a5      	cmp	r5, r4
 8003336:	e8e6 0102 	strd	r0, r1, [r6], #8
 800333a:	d008      	beq.n	800334e <__kernel_rem_pio2+0x76>
 800333c:	2d00      	cmp	r5, #0
 800333e:	daf4      	bge.n	800332a <__kernel_rem_pio2+0x52>
 8003340:	3501      	adds	r5, #1
 8003342:	2000      	movs	r0, #0
 8003344:	2100      	movs	r1, #0
 8003346:	42a5      	cmp	r5, r4
 8003348:	e8e6 0102 	strd	r0, r1, [r6], #8
 800334c:	d1f6      	bne.n	800333c <__kernel_rem_pio2+0x64>
 800334e:	9b07      	ldr	r3, [sp, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	db2a      	blt.n	80033aa <__kernel_rem_pio2+0xd2>
 8003354:	9b07      	ldr	r3, [sp, #28]
 8003356:	f103 0a01 	add.w	sl, r3, #1
 800335a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800335c:	af22      	add	r7, sp, #136	; 0x88
 800335e:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 8003362:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 8003366:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800336a:	463d      	mov	r5, r7
 800336c:	9b00      	ldr	r3, [sp, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f2c0 8180 	blt.w	8003674 <__kernel_rem_pio2+0x39c>
 8003374:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003378:	eb05 040b 	add.w	r4, r5, fp
 800337c:	2600      	movs	r6, #0
 800337e:	2700      	movs	r7, #0
 8003380:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003384:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003388:	f000 ff1a 	bl	80041c0 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4630      	mov	r0, r6
 8003392:	4639      	mov	r1, r7
 8003394:	f000 fd62 	bl	8003e5c <__adddf3>
 8003398:	42a5      	cmp	r5, r4
 800339a:	4606      	mov	r6, r0
 800339c:	460f      	mov	r7, r1
 800339e:	d1ef      	bne.n	8003380 <__kernel_rem_pio2+0xa8>
 80033a0:	3508      	adds	r5, #8
 80033a2:	4555      	cmp	r5, sl
 80033a4:	e8e8 6702 	strd	r6, r7, [r8], #8
 80033a8:	d1e0      	bne.n	800336c <__kernel_rem_pio2+0x94>
 80033aa:	9d07      	ldr	r5, [sp, #28]
 80033ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033ae:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80033b2:	3b01      	subs	r3, #1
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	a80e      	add	r0, sp, #56	; 0x38
 80033b8:	1d19      	adds	r1, r3, #4
 80033ba:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80033be:	4403      	add	r3, r0
 80033c0:	4401      	add	r1, r0
 80033c2:	930c      	str	r3, [sp, #48]	; 0x30
 80033c4:	00d3      	lsls	r3, r2, #3
 80033c6:	910d      	str	r1, [sp, #52]	; 0x34
 80033c8:	9305      	str	r3, [sp, #20]
 80033ca:	00ec      	lsls	r4, r5, #3
 80033cc:	ab9a      	add	r3, sp, #616	; 0x268
 80033ce:	4423      	add	r3, r4
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80033d6:	dd28      	ble.n	800342a <__kernel_rem_pio2+0x152>
 80033d8:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80033dc:	445c      	add	r4, fp
 80033de:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b87      	ldr	r3, [pc, #540]	; (8003604 <__kernel_rem_pio2+0x32c>)
 80033e6:	4630      	mov	r0, r6
 80033e8:	4639      	mov	r1, r7
 80033ea:	f000 fee9 	bl	80041c0 <__aeabi_dmul>
 80033ee:	f001 f981 	bl	80046f4 <__aeabi_d2iz>
 80033f2:	f000 fe7f 	bl	80040f4 <__aeabi_i2d>
 80033f6:	2200      	movs	r2, #0
 80033f8:	4b83      	ldr	r3, [pc, #524]	; (8003608 <__kernel_rem_pio2+0x330>)
 80033fa:	4680      	mov	r8, r0
 80033fc:	4689      	mov	r9, r1
 80033fe:	f000 fedf 	bl	80041c0 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4630      	mov	r0, r6
 8003408:	4639      	mov	r1, r7
 800340a:	f000 fd25 	bl	8003e58 <__aeabi_dsub>
 800340e:	f001 f971 	bl	80046f4 <__aeabi_d2iz>
 8003412:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003416:	f84a 0f04 	str.w	r0, [sl, #4]!
 800341a:	4649      	mov	r1, r9
 800341c:	4640      	mov	r0, r8
 800341e:	f000 fd1d 	bl	8003e5c <__adddf3>
 8003422:	455c      	cmp	r4, fp
 8003424:	4606      	mov	r6, r0
 8003426:	460f      	mov	r7, r1
 8003428:	d1db      	bne.n	80033e2 <__kernel_rem_pio2+0x10a>
 800342a:	9c06      	ldr	r4, [sp, #24]
 800342c:	4630      	mov	r0, r6
 800342e:	4639      	mov	r1, r7
 8003430:	4622      	mov	r2, r4
 8003432:	f000 fc81 	bl	8003d38 <scalbn>
 8003436:	2200      	movs	r2, #0
 8003438:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800343c:	4606      	mov	r6, r0
 800343e:	460f      	mov	r7, r1
 8003440:	f000 febe 	bl	80041c0 <__aeabi_dmul>
 8003444:	f000 fbf0 	bl	8003c28 <floor>
 8003448:	2200      	movs	r2, #0
 800344a:	4b70      	ldr	r3, [pc, #448]	; (800360c <__kernel_rem_pio2+0x334>)
 800344c:	f000 feb8 	bl	80041c0 <__aeabi_dmul>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4630      	mov	r0, r6
 8003456:	4639      	mov	r1, r7
 8003458:	f000 fcfe 	bl	8003e58 <__aeabi_dsub>
 800345c:	460f      	mov	r7, r1
 800345e:	4606      	mov	r6, r0
 8003460:	f001 f948 	bl	80046f4 <__aeabi_d2iz>
 8003464:	4680      	mov	r8, r0
 8003466:	f000 fe45 	bl	80040f4 <__aeabi_i2d>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4630      	mov	r0, r6
 8003470:	4639      	mov	r1, r7
 8003472:	f000 fcf1 	bl	8003e58 <__aeabi_dsub>
 8003476:	2c00      	cmp	r4, #0
 8003478:	4606      	mov	r6, r0
 800347a:	460f      	mov	r7, r1
 800347c:	f340 80e1 	ble.w	8003642 <__kernel_rem_pio2+0x36a>
 8003480:	1e69      	subs	r1, r5, #1
 8003482:	ab0e      	add	r3, sp, #56	; 0x38
 8003484:	f1c4 0218 	rsb	r2, r4, #24
 8003488:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800348c:	fa43 f002 	asr.w	r0, r3, r2
 8003490:	fa00 f902 	lsl.w	r9, r0, r2
 8003494:	f1c4 0217 	rsb	r2, r4, #23
 8003498:	ac0e      	add	r4, sp, #56	; 0x38
 800349a:	ebc9 0303 	rsb	r3, r9, r3
 800349e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 80034a2:	4480      	add	r8, r0
 80034a4:	fa43 f902 	asr.w	r9, r3, r2
 80034a8:	f1b9 0f00 	cmp.w	r9, #0
 80034ac:	dd32      	ble.n	8003514 <__kernel_rem_pio2+0x23c>
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	f108 0801 	add.w	r8, r8, #1
 80034b4:	f340 8271 	ble.w	800399a <__kernel_rem_pio2+0x6c2>
 80034b8:	2200      	movs	r2, #0
 80034ba:	4614      	mov	r4, r2
 80034bc:	a90d      	add	r1, sp, #52	; 0x34
 80034be:	e007      	b.n	80034d0 <__kernel_rem_pio2+0x1f8>
 80034c0:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 80034c4:	b10b      	cbz	r3, 80034ca <__kernel_rem_pio2+0x1f2>
 80034c6:	6008      	str	r0, [r1, #0]
 80034c8:	2401      	movs	r4, #1
 80034ca:	3201      	adds	r2, #1
 80034cc:	4295      	cmp	r5, r2
 80034ce:	dd0d      	ble.n	80034ec <__kernel_rem_pio2+0x214>
 80034d0:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80034d4:	2c00      	cmp	r4, #0
 80034d6:	d0f3      	beq.n	80034c0 <__kernel_rem_pio2+0x1e8>
 80034d8:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80034dc:	3201      	adds	r2, #1
 80034de:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80034e2:	4295      	cmp	r5, r2
 80034e4:	600b      	str	r3, [r1, #0]
 80034e6:	f04f 0401 	mov.w	r4, #1
 80034ea:	dcf1      	bgt.n	80034d0 <__kernel_rem_pio2+0x1f8>
 80034ec:	9b06      	ldr	r3, [sp, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dd0d      	ble.n	800350e <__kernel_rem_pio2+0x236>
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	f000 80ad 	beq.w	8003652 <__kernel_rem_pio2+0x37a>
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d108      	bne.n	800350e <__kernel_rem_pio2+0x236>
 80034fc:	1e6a      	subs	r2, r5, #1
 80034fe:	ab0e      	add	r3, sp, #56	; 0x38
 8003500:	a90e      	add	r1, sp, #56	; 0x38
 8003502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003506:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800350a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800350e:	f1b9 0f02 	cmp.w	r9, #2
 8003512:	d07d      	beq.n	8003610 <__kernel_rem_pio2+0x338>
 8003514:	4630      	mov	r0, r6
 8003516:	4639      	mov	r1, r7
 8003518:	2200      	movs	r2, #0
 800351a:	2300      	movs	r3, #0
 800351c:	f001 f8b8 	bl	8004690 <__aeabi_dcmpeq>
 8003520:	2800      	cmp	r0, #0
 8003522:	f000 80c3 	beq.w	80036ac <__kernel_rem_pio2+0x3d4>
 8003526:	9b07      	ldr	r3, [sp, #28]
 8003528:	f105 3aff 	add.w	sl, r5, #4294967295
 800352c:	4553      	cmp	r3, sl
 800352e:	dc0d      	bgt.n	800354c <__kernel_rem_pio2+0x274>
 8003530:	ab0e      	add	r3, sp, #56	; 0x38
 8003532:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003534:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003538:	2200      	movs	r2, #0
 800353a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800353e:	4283      	cmp	r3, r0
 8003540:	ea42 0201 	orr.w	r2, r2, r1
 8003544:	d1f9      	bne.n	800353a <__kernel_rem_pio2+0x262>
 8003546:	2a00      	cmp	r2, #0
 8003548:	f040 820c 	bne.w	8003964 <__kernel_rem_pio2+0x68c>
 800354c:	9b07      	ldr	r3, [sp, #28]
 800354e:	aa0e      	add	r2, sp, #56	; 0x38
 8003550:	3b01      	subs	r3, #1
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 821d 	bne.w	8003996 <__kernel_rem_pio2+0x6be>
 800355c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800355e:	2301      	movs	r3, #1
 8003560:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003564:	3301      	adds	r3, #1
 8003566:	2900      	cmp	r1, #0
 8003568:	d0fa      	beq.n	8003560 <__kernel_rem_pio2+0x288>
 800356a:	18eb      	adds	r3, r5, r3
 800356c:	f105 0a01 	add.w	sl, r5, #1
 8003570:	459a      	cmp	sl, r3
 8003572:	9309      	str	r3, [sp, #36]	; 0x24
 8003574:	dc40      	bgt.n	80035f8 <__kernel_rem_pio2+0x320>
 8003576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800357a:	eb0a 0903 	add.w	r9, sl, r3
 800357e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003580:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8003584:	4619      	mov	r1, r3
 8003586:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003588:	f109 39ff 	add.w	r9, r9, #4294967295
 800358c:	4415      	add	r5, r2
 800358e:	eb01 0b02 	add.w	fp, r1, r2
 8003592:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8003596:	ab22      	add	r3, sp, #136	; 0x88
 8003598:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800359c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80035a0:	9304      	str	r3, [sp, #16]
 80035a2:	ab72      	add	r3, sp, #456	; 0x1c8
 80035a4:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80035a8:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80035ac:	f000 fda2 	bl	80040f4 <__aeabi_i2d>
 80035b0:	9b00      	ldr	r3, [sp, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	e8e8 0102 	strd	r0, r1, [r8], #8
 80035b8:	f04f 0600 	mov.w	r6, #0
 80035bc:	f04f 0700 	mov.w	r7, #0
 80035c0:	db15      	blt.n	80035ee <__kernel_rem_pio2+0x316>
 80035c2:	9b05      	ldr	r3, [sp, #20]
 80035c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80035c8:	eb08 0503 	add.w	r5, r8, r3
 80035cc:	4644      	mov	r4, r8
 80035ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80035d2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80035d6:	f000 fdf3 	bl	80041c0 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4630      	mov	r0, r6
 80035e0:	4639      	mov	r1, r7
 80035e2:	f000 fc3b 	bl	8003e5c <__adddf3>
 80035e6:	42ac      	cmp	r4, r5
 80035e8:	4606      	mov	r6, r0
 80035ea:	460f      	mov	r7, r1
 80035ec:	d1ef      	bne.n	80035ce <__kernel_rem_pio2+0x2f6>
 80035ee:	9b04      	ldr	r3, [sp, #16]
 80035f0:	4598      	cmp	r8, r3
 80035f2:	e8ea 6702 	strd	r6, r7, [sl], #8
 80035f6:	d1d7      	bne.n	80035a8 <__kernel_rem_pio2+0x2d0>
 80035f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80035fa:	e6e6      	b.n	80033ca <__kernel_rem_pio2+0xf2>
 80035fc:	08004ab8 	.word	0x08004ab8
 8003600:	2aaaaaab 	.word	0x2aaaaaab
 8003604:	3e700000 	.word	0x3e700000
 8003608:	41700000 	.word	0x41700000
 800360c:	40200000 	.word	0x40200000
 8003610:	4632      	mov	r2, r6
 8003612:	463b      	mov	r3, r7
 8003614:	2000      	movs	r0, #0
 8003616:	49bb      	ldr	r1, [pc, #748]	; (8003904 <__kernel_rem_pio2+0x62c>)
 8003618:	f000 fc1e 	bl	8003e58 <__aeabi_dsub>
 800361c:	4606      	mov	r6, r0
 800361e:	460f      	mov	r7, r1
 8003620:	2c00      	cmp	r4, #0
 8003622:	f43f af77 	beq.w	8003514 <__kernel_rem_pio2+0x23c>
 8003626:	9a06      	ldr	r2, [sp, #24]
 8003628:	49b6      	ldr	r1, [pc, #728]	; (8003904 <__kernel_rem_pio2+0x62c>)
 800362a:	2000      	movs	r0, #0
 800362c:	f000 fb84 	bl	8003d38 <scalbn>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4630      	mov	r0, r6
 8003636:	4639      	mov	r1, r7
 8003638:	f000 fc0e 	bl	8003e58 <__aeabi_dsub>
 800363c:	4606      	mov	r6, r0
 800363e:	460f      	mov	r7, r1
 8003640:	e768      	b.n	8003514 <__kernel_rem_pio2+0x23c>
 8003642:	d110      	bne.n	8003666 <__kernel_rem_pio2+0x38e>
 8003644:	1e6b      	subs	r3, r5, #1
 8003646:	aa0e      	add	r2, sp, #56	; 0x38
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003650:	e72a      	b.n	80034a8 <__kernel_rem_pio2+0x1d0>
 8003652:	1e6a      	subs	r2, r5, #1
 8003654:	ab0e      	add	r3, sp, #56	; 0x38
 8003656:	a90e      	add	r1, sp, #56	; 0x38
 8003658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003660:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003664:	e753      	b.n	800350e <__kernel_rem_pio2+0x236>
 8003666:	2200      	movs	r2, #0
 8003668:	4ba7      	ldr	r3, [pc, #668]	; (8003908 <__kernel_rem_pio2+0x630>)
 800366a:	f001 f82f 	bl	80046cc <__aeabi_dcmpge>
 800366e:	b950      	cbnz	r0, 8003686 <__kernel_rem_pio2+0x3ae>
 8003670:	4681      	mov	r9, r0
 8003672:	e74f      	b.n	8003514 <__kernel_rem_pio2+0x23c>
 8003674:	3508      	adds	r5, #8
 8003676:	2600      	movs	r6, #0
 8003678:	2700      	movs	r7, #0
 800367a:	4555      	cmp	r5, sl
 800367c:	e8e8 6702 	strd	r6, r7, [r8], #8
 8003680:	f47f ae74 	bne.w	800336c <__kernel_rem_pio2+0x94>
 8003684:	e691      	b.n	80033aa <__kernel_rem_pio2+0xd2>
 8003686:	2d00      	cmp	r5, #0
 8003688:	f108 0801 	add.w	r8, r8, #1
 800368c:	bfc8      	it	gt
 800368e:	f04f 0902 	movgt.w	r9, #2
 8003692:	f73f af11 	bgt.w	80034b8 <__kernel_rem_pio2+0x1e0>
 8003696:	4632      	mov	r2, r6
 8003698:	463b      	mov	r3, r7
 800369a:	2000      	movs	r0, #0
 800369c:	4999      	ldr	r1, [pc, #612]	; (8003904 <__kernel_rem_pio2+0x62c>)
 800369e:	f000 fbdb 	bl	8003e58 <__aeabi_dsub>
 80036a2:	f04f 0902 	mov.w	r9, #2
 80036a6:	4606      	mov	r6, r0
 80036a8:	460f      	mov	r7, r1
 80036aa:	e733      	b.n	8003514 <__kernel_rem_pio2+0x23c>
 80036ac:	9b06      	ldr	r3, [sp, #24]
 80036ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80036b2:	425a      	negs	r2, r3
 80036b4:	4630      	mov	r0, r6
 80036b6:	4639      	mov	r1, r7
 80036b8:	f8cd 8014 	str.w	r8, [sp, #20]
 80036bc:	f000 fb3c 	bl	8003d38 <scalbn>
 80036c0:	2200      	movs	r2, #0
 80036c2:	4b92      	ldr	r3, [pc, #584]	; (800390c <__kernel_rem_pio2+0x634>)
 80036c4:	4606      	mov	r6, r0
 80036c6:	460f      	mov	r7, r1
 80036c8:	f001 f800 	bl	80046cc <__aeabi_dcmpge>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f000 81e6 	beq.w	8003a9e <__kernel_rem_pio2+0x7c6>
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b8e      	ldr	r3, [pc, #568]	; (8003910 <__kernel_rem_pio2+0x638>)
 80036d6:	4630      	mov	r0, r6
 80036d8:	4639      	mov	r1, r7
 80036da:	f000 fd71 	bl	80041c0 <__aeabi_dmul>
 80036de:	f001 f809 	bl	80046f4 <__aeabi_d2iz>
 80036e2:	4604      	mov	r4, r0
 80036e4:	f000 fd06 	bl	80040f4 <__aeabi_i2d>
 80036e8:	2200      	movs	r2, #0
 80036ea:	4b88      	ldr	r3, [pc, #544]	; (800390c <__kernel_rem_pio2+0x634>)
 80036ec:	f000 fd68 	bl	80041c0 <__aeabi_dmul>
 80036f0:	460b      	mov	r3, r1
 80036f2:	4602      	mov	r2, r0
 80036f4:	4639      	mov	r1, r7
 80036f6:	4630      	mov	r0, r6
 80036f8:	f000 fbae 	bl	8003e58 <__aeabi_dsub>
 80036fc:	f000 fffa 	bl	80046f4 <__aeabi_d2iz>
 8003700:	9b06      	ldr	r3, [sp, #24]
 8003702:	3318      	adds	r3, #24
 8003704:	f105 0a01 	add.w	sl, r5, #1
 8003708:	9306      	str	r3, [sp, #24]
 800370a:	ab0e      	add	r3, sp, #56	; 0x38
 800370c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003710:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 8003714:	9a06      	ldr	r2, [sp, #24]
 8003716:	497b      	ldr	r1, [pc, #492]	; (8003904 <__kernel_rem_pio2+0x62c>)
 8003718:	2000      	movs	r0, #0
 800371a:	f000 fb0d 	bl	8003d38 <scalbn>
 800371e:	f1ba 0f00 	cmp.w	sl, #0
 8003722:	4604      	mov	r4, r0
 8003724:	460d      	mov	r5, r1
 8003726:	f2c0 80c1 	blt.w	80038ac <__kernel_rem_pio2+0x5d4>
 800372a:	f10a 0301 	add.w	r3, sl, #1
 800372e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003732:	af72      	add	r7, sp, #456	; 0x1c8
 8003734:	aa0e      	add	r2, sp, #56	; 0x38
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800373c:	eb07 0608 	add.w	r6, r7, r8
 8003740:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 8003744:	f000 fcd6 	bl	80040f4 <__aeabi_i2d>
 8003748:	4622      	mov	r2, r4
 800374a:	462b      	mov	r3, r5
 800374c:	f000 fd38 	bl	80041c0 <__aeabi_dmul>
 8003750:	2200      	movs	r2, #0
 8003752:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003756:	4b6e      	ldr	r3, [pc, #440]	; (8003910 <__kernel_rem_pio2+0x638>)
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f000 fd30 	bl	80041c0 <__aeabi_dmul>
 8003760:	42be      	cmp	r6, r7
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1
 8003766:	d1eb      	bne.n	8003740 <__kernel_rem_pio2+0x468>
 8003768:	f1a8 0808 	sub.w	r8, r8, #8
 800376c:	eb06 0308 	add.w	r3, r6, r8
 8003770:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8003774:	f8cd a018 	str.w	sl, [sp, #24]
 8003778:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800377c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003780:	f04f 0800 	mov.w	r8, #0
 8003784:	469b      	mov	fp, r3
 8003786:	f1ba 0f00 	cmp.w	sl, #0
 800378a:	f2c0 808c 	blt.w	80038a6 <__kernel_rem_pio2+0x5ce>
 800378e:	f1b8 0f00 	cmp.w	r8, #0
 8003792:	f2c0 8088 	blt.w	80038a6 <__kernel_rem_pio2+0x5ce>
 8003796:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003914 <__kernel_rem_pio2+0x63c>
 800379a:	465d      	mov	r5, fp
 800379c:	2600      	movs	r6, #0
 800379e:	2700      	movs	r7, #0
 80037a0:	2400      	movs	r4, #0
 80037a2:	e001      	b.n	80037a8 <__kernel_rem_pio2+0x4d0>
 80037a4:	4544      	cmp	r4, r8
 80037a6:	dc10      	bgt.n	80037ca <__kernel_rem_pio2+0x4f2>
 80037a8:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80037ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80037b0:	f000 fd06 	bl	80041c0 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4630      	mov	r0, r6
 80037ba:	4639      	mov	r1, r7
 80037bc:	f000 fb4e 	bl	8003e5c <__adddf3>
 80037c0:	3401      	adds	r4, #1
 80037c2:	45a2      	cmp	sl, r4
 80037c4:	4606      	mov	r6, r0
 80037c6:	460f      	mov	r7, r1
 80037c8:	daec      	bge.n	80037a4 <__kernel_rem_pio2+0x4cc>
 80037ca:	9b04      	ldr	r3, [sp, #16]
 80037cc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80037d0:	e9c3 6700 	strd	r6, r7, [r3]
 80037d4:	9b00      	ldr	r3, [sp, #0]
 80037d6:	f108 0801 	add.w	r8, r8, #1
 80037da:	4598      	cmp	r8, r3
 80037dc:	f1ab 0b08 	sub.w	fp, fp, #8
 80037e0:	d1d1      	bne.n	8003786 <__kernel_rem_pio2+0x4ae>
 80037e2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80037e4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80037e8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d835      	bhi.n	800385c <__kernel_rem_pio2+0x584>
 80037f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80037f4:	0004003b 	.word	0x0004003b
 80037f8:	00d50004 	.word	0x00d50004
 80037fc:	9b00      	ldr	r3, [sp, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
 8003804:	2100      	movs	r1, #0
 8003806:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800380a:	f000 fb27 	bl	8003e5c <__adddf3>
 800380e:	454c      	cmp	r4, r9
 8003810:	d1f9      	bne.n	8003806 <__kernel_rem_pio2+0x52e>
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8087 	beq.w	8003928 <__kernel_rem_pio2+0x650>
 800381a:	9d08      	ldr	r5, [sp, #32]
 800381c:	4602      	mov	r2, r0
 800381e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003822:	e885 000c 	stmia.w	r5, {r2, r3}
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800382e:	f000 fb13 	bl	8003e58 <__aeabi_dsub>
 8003832:	f1ba 0f00 	cmp.w	sl, #0
 8003836:	dd0b      	ble.n	8003850 <__kernel_rem_pio2+0x578>
 8003838:	ad4c      	add	r5, sp, #304	; 0x130
 800383a:	2401      	movs	r4, #1
 800383c:	3401      	adds	r4, #1
 800383e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003842:	f000 fb0b 	bl	8003e5c <__adddf3>
 8003846:	45a2      	cmp	sl, r4
 8003848:	daf8      	bge.n	800383c <__kernel_rem_pio2+0x564>
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d078      	beq.n	8003942 <__kernel_rem_pio2+0x66a>
 8003850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003854:	9908      	ldr	r1, [sp, #32]
 8003856:	4602      	mov	r2, r0
 8003858:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800385c:	9b05      	ldr	r3, [sp, #20]
 800385e:	f003 0007 	and.w	r0, r3, #7
 8003862:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800386a:	9b00      	ldr	r3, [sp, #0]
 800386c:	2000      	movs	r0, #0
 800386e:	2100      	movs	r1, #0
 8003870:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8003874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003878:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800387c:	f000 faee 	bl	8003e5c <__adddf3>
 8003880:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003884:	d1f6      	bne.n	8003874 <__kernel_rem_pio2+0x59c>
 8003886:	9b03      	ldr	r3, [sp, #12]
 8003888:	4602      	mov	r2, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d065      	beq.n	800395a <__kernel_rem_pio2+0x682>
 800388e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003892:	9908      	ldr	r1, [sp, #32]
 8003894:	e9c1 2300 	strd	r2, r3, [r1]
 8003898:	9b05      	ldr	r3, [sp, #20]
 800389a:	f003 0007 	and.w	r0, r3, #7
 800389e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80038a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a6:	2600      	movs	r6, #0
 80038a8:	2700      	movs	r7, #0
 80038aa:	e78e      	b.n	80037ca <__kernel_rem_pio2+0x4f2>
 80038ac:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d8d4      	bhi.n	800385c <__kernel_rem_pio2+0x584>
 80038b2:	e8df f003 	tbb	[pc, r3]
 80038b6:	314c      	.short	0x314c
 80038b8:	0231      	.short	0x0231
 80038ba:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	2000      	movs	r0, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80d8 	beq.w	8003a7a <__kernel_rem_pio2+0x7a2>
 80038ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80038ce:	9f08      	ldr	r7, [sp, #32]
 80038d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80038d4:	f8d9 5000 	ldr.w	r5, [r9]
 80038d8:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80038dc:	6138      	str	r0, [r7, #16]
 80038de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	9b05      	ldr	r3, [sp, #20]
 80038e6:	603d      	str	r5, [r7, #0]
 80038e8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80038ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80038f0:	f003 0007 	and.w	r0, r3, #7
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	60bc      	str	r4, [r7, #8]
 80038f8:	6179      	str	r1, [r7, #20]
 80038fa:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	3ff00000 	.word	0x3ff00000
 8003908:	3fe00000 	.word	0x3fe00000
 800390c:	41700000 	.word	0x41700000
 8003910:	3e700000 	.word	0x3e700000
 8003914:	08004ac8 	.word	0x08004ac8
 8003918:	9b03      	ldr	r3, [sp, #12]
 800391a:	2000      	movs	r0, #0
 800391c:	2100      	movs	r1, #0
 800391e:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8003922:	2b00      	cmp	r3, #0
 8003924:	f47f af79 	bne.w	800381a <__kernel_rem_pio2+0x542>
 8003928:	9b08      	ldr	r3, [sp, #32]
 800392a:	4602      	mov	r2, r0
 800392c:	e9c3 0100 	strd	r0, r1, [r3]
 8003930:	460b      	mov	r3, r1
 8003932:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003936:	f000 fa8f 	bl	8003e58 <__aeabi_dsub>
 800393a:	f1ba 0f00 	cmp.w	sl, #0
 800393e:	f73f af7b 	bgt.w	8003838 <__kernel_rem_pio2+0x560>
 8003942:	460b      	mov	r3, r1
 8003944:	9908      	ldr	r1, [sp, #32]
 8003946:	4602      	mov	r2, r0
 8003948:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800394c:	e786      	b.n	800385c <__kernel_rem_pio2+0x584>
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	2000      	movs	r0, #0
 8003952:	2100      	movs	r1, #0
 8003954:	4602      	mov	r2, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d199      	bne.n	800388e <__kernel_rem_pio2+0x5b6>
 800395a:	460b      	mov	r3, r1
 800395c:	9908      	ldr	r1, [sp, #32]
 800395e:	e9c1 2300 	strd	r2, r3, [r1]
 8003962:	e799      	b.n	8003898 <__kernel_rem_pio2+0x5c0>
 8003964:	ab0e      	add	r3, sp, #56	; 0x38
 8003966:	9a06      	ldr	r2, [sp, #24]
 8003968:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800396c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003970:	3a18      	subs	r2, #24
 8003972:	f8cd 8014 	str.w	r8, [sp, #20]
 8003976:	9206      	str	r2, [sp, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f aecb 	bne.w	8003714 <__kernel_rem_pio2+0x43c>
 800397e:	ab0e      	add	r3, sp, #56	; 0x38
 8003980:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003984:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003988:	f10a 3aff 	add.w	sl, sl, #4294967295
 800398c:	3a18      	subs	r2, #24
 800398e:	2900      	cmp	r1, #0
 8003990:	d0f8      	beq.n	8003984 <__kernel_rem_pio2+0x6ac>
 8003992:	9206      	str	r2, [sp, #24]
 8003994:	e6be      	b.n	8003714 <__kernel_rem_pio2+0x43c>
 8003996:	2301      	movs	r3, #1
 8003998:	e5e7      	b.n	800356a <__kernel_rem_pio2+0x292>
 800399a:	2400      	movs	r4, #0
 800399c:	e5a6      	b.n	80034ec <__kernel_rem_pio2+0x214>
 800399e:	f1ba 0f00 	cmp.w	sl, #0
 80039a2:	dd8c      	ble.n	80038be <__kernel_rem_pio2+0x5e6>
 80039a4:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 80039a8:	eb09 0b08 	add.w	fp, r9, r8
 80039ac:	f108 0c08 	add.w	ip, r8, #8
 80039b0:	e9db 6700 	ldrd	r6, r7, [fp]
 80039b4:	44cc      	add	ip, r9
 80039b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80039ba:	46e0      	mov	r8, ip
 80039bc:	ed3b 7b02 	vldmdb	fp!, {d7}
 80039c0:	4630      	mov	r0, r6
 80039c2:	ec53 2b17 	vmov	r2, r3, d7
 80039c6:	4639      	mov	r1, r7
 80039c8:	ed8d 7b00 	vstr	d7, [sp]
 80039cc:	f000 fa46 	bl	8003e5c <__adddf3>
 80039d0:	4604      	mov	r4, r0
 80039d2:	460d      	mov	r5, r1
 80039d4:	4622      	mov	r2, r4
 80039d6:	462b      	mov	r3, r5
 80039d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039dc:	f000 fa3c 	bl	8003e58 <__aeabi_dsub>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4630      	mov	r0, r6
 80039e6:	4639      	mov	r1, r7
 80039e8:	f000 fa38 	bl	8003e5c <__adddf3>
 80039ec:	45cb      	cmp	fp, r9
 80039ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80039f2:	4626      	mov	r6, r4
 80039f4:	462f      	mov	r7, r5
 80039f6:	e9cb 4500 	strd	r4, r5, [fp]
 80039fa:	d1df      	bne.n	80039bc <__kernel_rem_pio2+0x6e4>
 80039fc:	f1ba 0f01 	cmp.w	sl, #1
 8003a00:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003a04:	f77f af5b 	ble.w	80038be <__kernel_rem_pio2+0x5e6>
 8003a08:	eb09 0508 	add.w	r5, r9, r8
 8003a0c:	f108 0408 	add.w	r4, r8, #8
 8003a10:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8003a14:	444c      	add	r4, r9
 8003a16:	46a0      	mov	r8, r4
 8003a18:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
 8003a1c:	ed35 7b02 	vldmdb	r5!, {d7}
 8003a20:	4652      	mov	r2, sl
 8003a22:	465b      	mov	r3, fp
 8003a24:	ec51 0b17 	vmov	r0, r1, d7
 8003a28:	f8cd c010 	str.w	ip, [sp, #16]
 8003a2c:	ed8d 7b00 	vstr	d7, [sp]
 8003a30:	f000 fa14 	bl	8003e5c <__adddf3>
 8003a34:	4606      	mov	r6, r0
 8003a36:	460f      	mov	r7, r1
 8003a38:	4632      	mov	r2, r6
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a40:	f000 fa0a 	bl	8003e58 <__aeabi_dsub>
 8003a44:	4652      	mov	r2, sl
 8003a46:	465b      	mov	r3, fp
 8003a48:	f000 fa08 	bl	8003e5c <__adddf3>
 8003a4c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003a50:	4565      	cmp	r5, ip
 8003a52:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003a56:	46b2      	mov	sl, r6
 8003a58:	46bb      	mov	fp, r7
 8003a5a:	e9c5 6700 	strd	r6, r7, [r5]
 8003a5e:	d1dd      	bne.n	8003a1c <__kernel_rem_pio2+0x744>
 8003a60:	2000      	movs	r0, #0
 8003a62:	2100      	movs	r1, #0
 8003a64:	ad4e      	add	r5, sp, #312	; 0x138
 8003a66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003a6a:	f000 f9f7 	bl	8003e5c <__adddf3>
 8003a6e:	42ac      	cmp	r4, r5
 8003a70:	d1f9      	bne.n	8003a66 <__kernel_rem_pio2+0x78e>
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af28 	bne.w	80038ca <__kernel_rem_pio2+0x5f2>
 8003a7a:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 8003a7e:	9f08      	ldr	r7, [sp, #32]
 8003a80:	e9d9 4500 	ldrd	r4, r5, [r9]
 8003a84:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003a88:	9b05      	ldr	r3, [sp, #20]
 8003a8a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003a8e:	f003 0007 	and.w	r0, r3, #7
 8003a92:	e9c7 4500 	strd	r4, r5, [r7]
 8003a96:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	4639      	mov	r1, r7
 8003aa2:	f000 fe27 	bl	80046f4 <__aeabi_d2iz>
 8003aa6:	ab0e      	add	r3, sp, #56	; 0x38
 8003aa8:	46aa      	mov	sl, r5
 8003aaa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003aae:	e631      	b.n	8003714 <__kernel_rem_pio2+0x43c>

08003ab0 <__kernel_sin>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003ab8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003abc:	b085      	sub	sp, #20
 8003abe:	4604      	mov	r4, r0
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	4690      	mov	r8, r2
 8003ac4:	4699      	mov	r9, r3
 8003ac6:	da04      	bge.n	8003ad2 <__kernel_sin+0x22>
 8003ac8:	f000 fe14 	bl	80046f4 <__aeabi_d2iz>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	f000 8083 	beq.w	8003bd8 <__kernel_sin+0x128>
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4629      	mov	r1, r5
 8003ada:	f000 fb71 	bl	80041c0 <__aeabi_dmul>
 8003ade:	4622      	mov	r2, r4
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	460f      	mov	r7, r1
 8003ae6:	f000 fb6b 	bl	80041c0 <__aeabi_dmul>
 8003aea:	a342      	add	r3, pc, #264	; (adr r3, 8003bf4 <__kernel_sin+0x144>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	4682      	mov	sl, r0
 8003af2:	468b      	mov	fp, r1
 8003af4:	4630      	mov	r0, r6
 8003af6:	4639      	mov	r1, r7
 8003af8:	f000 fb62 	bl	80041c0 <__aeabi_dmul>
 8003afc:	a33f      	add	r3, pc, #252	; (adr r3, 8003bfc <__kernel_sin+0x14c>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f000 f9a9 	bl	8003e58 <__aeabi_dsub>
 8003b06:	4632      	mov	r2, r6
 8003b08:	463b      	mov	r3, r7
 8003b0a:	f000 fb59 	bl	80041c0 <__aeabi_dmul>
 8003b0e:	a33d      	add	r3, pc, #244	; (adr r3, 8003c04 <__kernel_sin+0x154>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f000 f9a2 	bl	8003e5c <__adddf3>
 8003b18:	4632      	mov	r2, r6
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	f000 fb50 	bl	80041c0 <__aeabi_dmul>
 8003b20:	a33a      	add	r3, pc, #232	; (adr r3, 8003c0c <__kernel_sin+0x15c>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f000 f997 	bl	8003e58 <__aeabi_dsub>
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	463b      	mov	r3, r7
 8003b2e:	f000 fb47 	bl	80041c0 <__aeabi_dmul>
 8003b32:	a338      	add	r3, pc, #224	; (adr r3, 8003c14 <__kernel_sin+0x164>)
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f000 f990 	bl	8003e5c <__adddf3>
 8003b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8003b42:	b39b      	cbz	r3, 8003bac <__kernel_sin+0xfc>
 8003b44:	4640      	mov	r0, r8
 8003b46:	4649      	mov	r1, r9
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <__kernel_sin+0x140>)
 8003b4c:	f000 fb38 	bl	80041c0 <__aeabi_dmul>
 8003b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b58:	4650      	mov	r0, sl
 8003b5a:	4659      	mov	r1, fp
 8003b5c:	f000 fb30 	bl	80041c0 <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b68:	f000 f976 	bl	8003e58 <__aeabi_dsub>
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	463b      	mov	r3, r7
 8003b70:	f000 fb26 	bl	80041c0 <__aeabi_dmul>
 8003b74:	4642      	mov	r2, r8
 8003b76:	464b      	mov	r3, r9
 8003b78:	f000 f96e 	bl	8003e58 <__aeabi_dsub>
 8003b7c:	a31a      	add	r3, pc, #104	; (adr r3, 8003be8 <__kernel_sin+0x138>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	4606      	mov	r6, r0
 8003b84:	460f      	mov	r7, r1
 8003b86:	4650      	mov	r0, sl
 8003b88:	4659      	mov	r1, fp
 8003b8a:	f000 fb19 	bl	80041c0 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4630      	mov	r0, r6
 8003b94:	4639      	mov	r1, r7
 8003b96:	f000 f961 	bl	8003e5c <__adddf3>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f000 f959 	bl	8003e58 <__aeabi_dsub>
 8003ba6:	b005      	add	sp, #20
 8003ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	4639      	mov	r1, r7
 8003bb4:	f000 fb04 	bl	80041c0 <__aeabi_dmul>
 8003bb8:	a30b      	add	r3, pc, #44	; (adr r3, 8003be8 <__kernel_sin+0x138>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f000 f94b 	bl	8003e58 <__aeabi_dsub>
 8003bc2:	4652      	mov	r2, sl
 8003bc4:	465b      	mov	r3, fp
 8003bc6:	f000 fafb 	bl	80041c0 <__aeabi_dmul>
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	f000 f945 	bl	8003e5c <__adddf3>
 8003bd2:	b005      	add	sp, #20
 8003bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	b005      	add	sp, #20
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	f3af 8000 	nop.w
 8003be8:	55555549 	.word	0x55555549
 8003bec:	3fc55555 	.word	0x3fc55555
 8003bf0:	3fe00000 	.word	0x3fe00000
 8003bf4:	5acfd57c 	.word	0x5acfd57c
 8003bf8:	3de5d93a 	.word	0x3de5d93a
 8003bfc:	8a2b9ceb 	.word	0x8a2b9ceb
 8003c00:	3e5ae5e6 	.word	0x3e5ae5e6
 8003c04:	57b1fe7d 	.word	0x57b1fe7d
 8003c08:	3ec71de3 	.word	0x3ec71de3
 8003c0c:	19c161d5 	.word	0x19c161d5
 8003c10:	3f2a01a0 	.word	0x3f2a01a0
 8003c14:	1110f8a6 	.word	0x1110f8a6
 8003c18:	3f811111 	.word	0x3f811111
 8003c1c:	f3af 8000 	nop.w

08003c20 <fabs>:
 8003c20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop

08003c28 <floor>:
 8003c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003c30:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 8003c34:	2d13      	cmp	r5, #19
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	4689      	mov	r9, r1
 8003c40:	4606      	mov	r6, r0
 8003c42:	dc1d      	bgt.n	8003c80 <floor+0x58>
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	db40      	blt.n	8003cca <floor+0xa2>
 8003c48:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003d34 <floor+0x10c>
 8003c4c:	fa48 f805 	asr.w	r8, r8, r5
 8003c50:	ea08 0e01 	and.w	lr, r8, r1
 8003c54:	ea5e 0707 	orrs.w	r7, lr, r7
 8003c58:	d017      	beq.n	8003c8a <floor+0x62>
 8003c5a:	a334      	add	r3, pc, #208	; (adr r3, 8003d2c <floor+0x104>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f000 f8fc 	bl	8003e5c <__adddf3>
 8003c64:	2200      	movs	r2, #0
 8003c66:	2300      	movs	r3, #0
 8003c68:	f000 fd3a 	bl	80046e0 <__aeabi_dcmpgt>
 8003c6c:	b120      	cbz	r0, 8003c78 <floor+0x50>
 8003c6e:	2c00      	cmp	r4, #0
 8003c70:	db3f      	blt.n	8003cf2 <floor+0xca>
 8003c72:	ea29 0408 	bic.w	r4, r9, r8
 8003c76:	2600      	movs	r6, #0
 8003c78:	4621      	mov	r1, r4
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c80:	2d33      	cmp	r5, #51	; 0x33
 8003c82:	dd06      	ble.n	8003c92 <floor+0x6a>
 8003c84:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003c88:	d02f      	beq.n	8003cea <floor+0xc2>
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c92:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 8003c96:	f04f 37ff 	mov.w	r7, #4294967295
 8003c9a:	fa27 f70e 	lsr.w	r7, r7, lr
 8003c9e:	4207      	tst	r7, r0
 8003ca0:	d0f3      	beq.n	8003c8a <floor+0x62>
 8003ca2:	a322      	add	r3, pc, #136	; (adr r3, 8003d2c <floor+0x104>)
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f000 f8d8 	bl	8003e5c <__adddf3>
 8003cac:	2200      	movs	r2, #0
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f000 fd16 	bl	80046e0 <__aeabi_dcmpgt>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d0df      	beq.n	8003c78 <floor+0x50>
 8003cb8:	2c00      	cmp	r4, #0
 8003cba:	db1f      	blt.n	8003cfc <floor+0xd4>
 8003cbc:	464c      	mov	r4, r9
 8003cbe:	ea26 0607 	bic.w	r6, r6, r7
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cca:	a318      	add	r3, pc, #96	; (adr r3, 8003d2c <floor+0x104>)
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f000 f8c4 	bl	8003e5c <__adddf3>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f000 fd02 	bl	80046e0 <__aeabi_dcmpgt>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d0cb      	beq.n	8003c78 <floor+0x50>
 8003ce0:	2c00      	cmp	r4, #0
 8003ce2:	db19      	blt.n	8003d18 <floor+0xf0>
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	4634      	mov	r4, r6
 8003ce8:	e7c6      	b.n	8003c78 <floor+0x50>
 8003cea:	f000 f8b7 	bl	8003e5c <__adddf3>
 8003cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cf6:	412b      	asrs	r3, r5
 8003cf8:	4499      	add	r9, r3
 8003cfa:	e7ba      	b.n	8003c72 <floor+0x4a>
 8003cfc:	2d14      	cmp	r5, #20
 8003cfe:	d008      	beq.n	8003d12 <floor+0xea>
 8003d00:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 8003d04:	f108 0803 	add.w	r8, r8, #3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	fa03 f308 	lsl.w	r3, r3, r8
 8003d0e:	199e      	adds	r6, r3, r6
 8003d10:	d3d4      	bcc.n	8003cbc <floor+0x94>
 8003d12:	f109 0901 	add.w	r9, r9, #1
 8003d16:	e7d1      	b.n	8003cbc <floor+0x94>
 8003d18:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8003d1c:	4b02      	ldr	r3, [pc, #8]	; (8003d28 <floor+0x100>)
 8003d1e:	433a      	orrs	r2, r7
 8003d20:	bf18      	it	ne
 8003d22:	461c      	movne	r4, r3
 8003d24:	2600      	movs	r6, #0
 8003d26:	e7a7      	b.n	8003c78 <floor+0x50>
 8003d28:	bff00000 	.word	0xbff00000
 8003d2c:	8800759c 	.word	0x8800759c
 8003d30:	7e37e43c 	.word	0x7e37e43c
 8003d34:	000fffff 	.word	0x000fffff

08003d38 <scalbn>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003d3e:	4604      	mov	r4, r0
 8003d40:	460d      	mov	r5, r1
 8003d42:	460b      	mov	r3, r1
 8003d44:	4617      	mov	r7, r2
 8003d46:	bb16      	cbnz	r6, 8003d8e <scalbn+0x56>
 8003d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003d4c:	4303      	orrs	r3, r0
 8003d4e:	d032      	beq.n	8003db6 <scalbn+0x7e>
 8003d50:	2200      	movs	r2, #0
 8003d52:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <scalbn+0xf8>)
 8003d54:	f000 fa34 	bl	80041c0 <__aeabi_dmul>
 8003d58:	4a36      	ldr	r2, [pc, #216]	; (8003e34 <scalbn+0xfc>)
 8003d5a:	4297      	cmp	r7, r2
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	460d      	mov	r5, r1
 8003d60:	460b      	mov	r3, r1
 8003d62:	db37      	blt.n	8003dd4 <scalbn+0x9c>
 8003d64:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003d68:	3e36      	subs	r6, #54	; 0x36
 8003d6a:	443e      	add	r6, r7
 8003d6c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003d70:	4296      	cmp	r6, r2
 8003d72:	dd15      	ble.n	8003da0 <scalbn+0x68>
 8003d74:	4622      	mov	r2, r4
 8003d76:	462b      	mov	r3, r5
 8003d78:	a129      	add	r1, pc, #164	; (adr r1, 8003e20 <scalbn+0xe8>)
 8003d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d7e:	f000 f85f 	bl	8003e40 <copysign>
 8003d82:	a327      	add	r3, pc, #156	; (adr r3, 8003e20 <scalbn+0xe8>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f000 fa1a 	bl	80041c0 <__aeabi_dmul>
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003d92:	4296      	cmp	r6, r2
 8003d94:	d024      	beq.n	8003de0 <scalbn+0xa8>
 8003d96:	443e      	add	r6, r7
 8003d98:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003d9c:	4296      	cmp	r6, r2
 8003d9e:	dce9      	bgt.n	8003d74 <scalbn+0x3c>
 8003da0:	2e00      	cmp	r6, #0
 8003da2:	dd09      	ble.n	8003db8 <scalbn+0x80>
 8003da4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003da8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003dac:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db8:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8003dbc:	da15      	bge.n	8003dea <scalbn+0xb2>
 8003dbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003dc2:	429f      	cmp	r7, r3
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	dc1d      	bgt.n	8003e06 <scalbn+0xce>
 8003dca:	a117      	add	r1, pc, #92	; (adr r1, 8003e28 <scalbn+0xf0>)
 8003dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dd0:	f000 f836 	bl	8003e40 <copysign>
 8003dd4:	a314      	add	r3, pc, #80	; (adr r3, 8003e28 <scalbn+0xf0>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f000 f9f1 	bl	80041c0 <__aeabi_dmul>
 8003dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	f000 f83a 	bl	8003e5c <__adddf3>
 8003de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003dee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003df2:	3636      	adds	r6, #54	; 0x36
 8003df4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8003df8:	4620      	mov	r0, r4
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <scalbn+0x100>)
 8003e00:	f000 f9de 	bl	80041c0 <__aeabi_dmul>
 8003e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e06:	a106      	add	r1, pc, #24	; (adr r1, 8003e20 <scalbn+0xe8>)
 8003e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e0c:	f000 f818 	bl	8003e40 <copysign>
 8003e10:	a303      	add	r3, pc, #12	; (adr r3, 8003e20 <scalbn+0xe8>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f000 f9d3 	bl	80041c0 <__aeabi_dmul>
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1c:	f3af 8000 	nop.w
 8003e20:	8800759c 	.word	0x8800759c
 8003e24:	7e37e43c 	.word	0x7e37e43c
 8003e28:	c2f8f359 	.word	0xc2f8f359
 8003e2c:	01a56e1f 	.word	0x01a56e1f
 8003e30:	43500000 	.word	0x43500000
 8003e34:	ffff3cb0 	.word	0xffff3cb0
 8003e38:	3c900000 	.word	0x3c900000
 8003e3c:	f3af 8000 	nop.w

08003e40 <copysign>:
 8003e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003e48:	ea43 0102 	orr.w	r1, r3, r2
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <__aeabi_drsub>:
 8003e50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003e54:	e002      	b.n	8003e5c <__adddf3>
 8003e56:	bf00      	nop

08003e58 <__aeabi_dsub>:
 8003e58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003e5c <__adddf3>:
 8003e5c:	b530      	push	{r4, r5, lr}
 8003e5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003e62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003e66:	ea94 0f05 	teq	r4, r5
 8003e6a:	bf08      	it	eq
 8003e6c:	ea90 0f02 	teqeq	r0, r2
 8003e70:	bf1f      	itttt	ne
 8003e72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003e76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003e7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003e7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003e82:	f000 80e2 	beq.w	800404a <__adddf3+0x1ee>
 8003e86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003e8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003e8e:	bfb8      	it	lt
 8003e90:	426d      	neglt	r5, r5
 8003e92:	dd0c      	ble.n	8003eae <__adddf3+0x52>
 8003e94:	442c      	add	r4, r5
 8003e96:	ea80 0202 	eor.w	r2, r0, r2
 8003e9a:	ea81 0303 	eor.w	r3, r1, r3
 8003e9e:	ea82 0000 	eor.w	r0, r2, r0
 8003ea2:	ea83 0101 	eor.w	r1, r3, r1
 8003ea6:	ea80 0202 	eor.w	r2, r0, r2
 8003eaa:	ea81 0303 	eor.w	r3, r1, r3
 8003eae:	2d36      	cmp	r5, #54	; 0x36
 8003eb0:	bf88      	it	hi
 8003eb2:	bd30      	pophi	{r4, r5, pc}
 8003eb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003ebc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003ec0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003ec4:	d002      	beq.n	8003ecc <__adddf3+0x70>
 8003ec6:	4240      	negs	r0, r0
 8003ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003ecc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003ed0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ed4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003ed8:	d002      	beq.n	8003ee0 <__adddf3+0x84>
 8003eda:	4252      	negs	r2, r2
 8003edc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003ee0:	ea94 0f05 	teq	r4, r5
 8003ee4:	f000 80a7 	beq.w	8004036 <__adddf3+0x1da>
 8003ee8:	f1a4 0401 	sub.w	r4, r4, #1
 8003eec:	f1d5 0e20 	rsbs	lr, r5, #32
 8003ef0:	db0d      	blt.n	8003f0e <__adddf3+0xb2>
 8003ef2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003ef6:	fa22 f205 	lsr.w	r2, r2, r5
 8003efa:	1880      	adds	r0, r0, r2
 8003efc:	f141 0100 	adc.w	r1, r1, #0
 8003f00:	fa03 f20e 	lsl.w	r2, r3, lr
 8003f04:	1880      	adds	r0, r0, r2
 8003f06:	fa43 f305 	asr.w	r3, r3, r5
 8003f0a:	4159      	adcs	r1, r3
 8003f0c:	e00e      	b.n	8003f2c <__adddf3+0xd0>
 8003f0e:	f1a5 0520 	sub.w	r5, r5, #32
 8003f12:	f10e 0e20 	add.w	lr, lr, #32
 8003f16:	2a01      	cmp	r2, #1
 8003f18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003f1c:	bf28      	it	cs
 8003f1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003f22:	fa43 f305 	asr.w	r3, r3, r5
 8003f26:	18c0      	adds	r0, r0, r3
 8003f28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003f2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003f30:	d507      	bpl.n	8003f42 <__adddf3+0xe6>
 8003f32:	f04f 0e00 	mov.w	lr, #0
 8003f36:	f1dc 0c00 	rsbs	ip, ip, #0
 8003f3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003f3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003f42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003f46:	d31b      	bcc.n	8003f80 <__adddf3+0x124>
 8003f48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003f4c:	d30c      	bcc.n	8003f68 <__adddf3+0x10c>
 8003f4e:	0849      	lsrs	r1, r1, #1
 8003f50:	ea5f 0030 	movs.w	r0, r0, rrx
 8003f54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003f58:	f104 0401 	add.w	r4, r4, #1
 8003f5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003f60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003f64:	f080 809a 	bcs.w	800409c <__adddf3+0x240>
 8003f68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003f6c:	bf08      	it	eq
 8003f6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003f72:	f150 0000 	adcs.w	r0, r0, #0
 8003f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f7a:	ea41 0105 	orr.w	r1, r1, r5
 8003f7e:	bd30      	pop	{r4, r5, pc}
 8003f80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003f84:	4140      	adcs	r0, r0
 8003f86:	eb41 0101 	adc.w	r1, r1, r1
 8003f8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f8e:	f1a4 0401 	sub.w	r4, r4, #1
 8003f92:	d1e9      	bne.n	8003f68 <__adddf3+0x10c>
 8003f94:	f091 0f00 	teq	r1, #0
 8003f98:	bf04      	itt	eq
 8003f9a:	4601      	moveq	r1, r0
 8003f9c:	2000      	moveq	r0, #0
 8003f9e:	fab1 f381 	clz	r3, r1
 8003fa2:	bf08      	it	eq
 8003fa4:	3320      	addeq	r3, #32
 8003fa6:	f1a3 030b 	sub.w	r3, r3, #11
 8003faa:	f1b3 0220 	subs.w	r2, r3, #32
 8003fae:	da0c      	bge.n	8003fca <__adddf3+0x16e>
 8003fb0:	320c      	adds	r2, #12
 8003fb2:	dd08      	ble.n	8003fc6 <__adddf3+0x16a>
 8003fb4:	f102 0c14 	add.w	ip, r2, #20
 8003fb8:	f1c2 020c 	rsb	r2, r2, #12
 8003fbc:	fa01 f00c 	lsl.w	r0, r1, ip
 8003fc0:	fa21 f102 	lsr.w	r1, r1, r2
 8003fc4:	e00c      	b.n	8003fe0 <__adddf3+0x184>
 8003fc6:	f102 0214 	add.w	r2, r2, #20
 8003fca:	bfd8      	it	le
 8003fcc:	f1c2 0c20 	rsble	ip, r2, #32
 8003fd0:	fa01 f102 	lsl.w	r1, r1, r2
 8003fd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003fd8:	bfdc      	itt	le
 8003fda:	ea41 010c 	orrle.w	r1, r1, ip
 8003fde:	4090      	lslle	r0, r2
 8003fe0:	1ae4      	subs	r4, r4, r3
 8003fe2:	bfa2      	ittt	ge
 8003fe4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003fe8:	4329      	orrge	r1, r5
 8003fea:	bd30      	popge	{r4, r5, pc}
 8003fec:	ea6f 0404 	mvn.w	r4, r4
 8003ff0:	3c1f      	subs	r4, #31
 8003ff2:	da1c      	bge.n	800402e <__adddf3+0x1d2>
 8003ff4:	340c      	adds	r4, #12
 8003ff6:	dc0e      	bgt.n	8004016 <__adddf3+0x1ba>
 8003ff8:	f104 0414 	add.w	r4, r4, #20
 8003ffc:	f1c4 0220 	rsb	r2, r4, #32
 8004000:	fa20 f004 	lsr.w	r0, r0, r4
 8004004:	fa01 f302 	lsl.w	r3, r1, r2
 8004008:	ea40 0003 	orr.w	r0, r0, r3
 800400c:	fa21 f304 	lsr.w	r3, r1, r4
 8004010:	ea45 0103 	orr.w	r1, r5, r3
 8004014:	bd30      	pop	{r4, r5, pc}
 8004016:	f1c4 040c 	rsb	r4, r4, #12
 800401a:	f1c4 0220 	rsb	r2, r4, #32
 800401e:	fa20 f002 	lsr.w	r0, r0, r2
 8004022:	fa01 f304 	lsl.w	r3, r1, r4
 8004026:	ea40 0003 	orr.w	r0, r0, r3
 800402a:	4629      	mov	r1, r5
 800402c:	bd30      	pop	{r4, r5, pc}
 800402e:	fa21 f004 	lsr.w	r0, r1, r4
 8004032:	4629      	mov	r1, r5
 8004034:	bd30      	pop	{r4, r5, pc}
 8004036:	f094 0f00 	teq	r4, #0
 800403a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800403e:	bf06      	itte	eq
 8004040:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004044:	3401      	addeq	r4, #1
 8004046:	3d01      	subne	r5, #1
 8004048:	e74e      	b.n	8003ee8 <__adddf3+0x8c>
 800404a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800404e:	bf18      	it	ne
 8004050:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004054:	d029      	beq.n	80040aa <__adddf3+0x24e>
 8004056:	ea94 0f05 	teq	r4, r5
 800405a:	bf08      	it	eq
 800405c:	ea90 0f02 	teqeq	r0, r2
 8004060:	d005      	beq.n	800406e <__adddf3+0x212>
 8004062:	ea54 0c00 	orrs.w	ip, r4, r0
 8004066:	bf04      	itt	eq
 8004068:	4619      	moveq	r1, r3
 800406a:	4610      	moveq	r0, r2
 800406c:	bd30      	pop	{r4, r5, pc}
 800406e:	ea91 0f03 	teq	r1, r3
 8004072:	bf1e      	ittt	ne
 8004074:	2100      	movne	r1, #0
 8004076:	2000      	movne	r0, #0
 8004078:	bd30      	popne	{r4, r5, pc}
 800407a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800407e:	d105      	bne.n	800408c <__adddf3+0x230>
 8004080:	0040      	lsls	r0, r0, #1
 8004082:	4149      	adcs	r1, r1
 8004084:	bf28      	it	cs
 8004086:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800408a:	bd30      	pop	{r4, r5, pc}
 800408c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004090:	bf3c      	itt	cc
 8004092:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004096:	bd30      	popcc	{r4, r5, pc}
 8004098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800409c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80040a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	bd30      	pop	{r4, r5, pc}
 80040aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80040ae:	bf1a      	itte	ne
 80040b0:	4619      	movne	r1, r3
 80040b2:	4610      	movne	r0, r2
 80040b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80040b8:	bf1c      	itt	ne
 80040ba:	460b      	movne	r3, r1
 80040bc:	4602      	movne	r2, r0
 80040be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80040c2:	bf06      	itte	eq
 80040c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80040c8:	ea91 0f03 	teqeq	r1, r3
 80040cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80040d0:	bd30      	pop	{r4, r5, pc}
 80040d2:	bf00      	nop

080040d4 <__aeabi_ui2d>:
 80040d4:	f090 0f00 	teq	r0, #0
 80040d8:	bf04      	itt	eq
 80040da:	2100      	moveq	r1, #0
 80040dc:	4770      	bxeq	lr
 80040de:	b530      	push	{r4, r5, lr}
 80040e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80040e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80040e8:	f04f 0500 	mov.w	r5, #0
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	e750      	b.n	8003f94 <__adddf3+0x138>
 80040f2:	bf00      	nop

080040f4 <__aeabi_i2d>:
 80040f4:	f090 0f00 	teq	r0, #0
 80040f8:	bf04      	itt	eq
 80040fa:	2100      	moveq	r1, #0
 80040fc:	4770      	bxeq	lr
 80040fe:	b530      	push	{r4, r5, lr}
 8004100:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004104:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004108:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800410c:	bf48      	it	mi
 800410e:	4240      	negmi	r0, r0
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	e73e      	b.n	8003f94 <__adddf3+0x138>
 8004116:	bf00      	nop

08004118 <__aeabi_f2d>:
 8004118:	0042      	lsls	r2, r0, #1
 800411a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800411e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004122:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004126:	bf1f      	itttt	ne
 8004128:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800412c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004130:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004134:	4770      	bxne	lr
 8004136:	f092 0f00 	teq	r2, #0
 800413a:	bf14      	ite	ne
 800413c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004140:	4770      	bxeq	lr
 8004142:	b530      	push	{r4, r5, lr}
 8004144:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004148:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800414c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004150:	e720      	b.n	8003f94 <__adddf3+0x138>
 8004152:	bf00      	nop

08004154 <__aeabi_ul2d>:
 8004154:	ea50 0201 	orrs.w	r2, r0, r1
 8004158:	bf08      	it	eq
 800415a:	4770      	bxeq	lr
 800415c:	b530      	push	{r4, r5, lr}
 800415e:	f04f 0500 	mov.w	r5, #0
 8004162:	e00a      	b.n	800417a <__aeabi_l2d+0x16>

08004164 <__aeabi_l2d>:
 8004164:	ea50 0201 	orrs.w	r2, r0, r1
 8004168:	bf08      	it	eq
 800416a:	4770      	bxeq	lr
 800416c:	b530      	push	{r4, r5, lr}
 800416e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004172:	d502      	bpl.n	800417a <__aeabi_l2d+0x16>
 8004174:	4240      	negs	r0, r0
 8004176:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800417a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800417e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004182:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004186:	f43f aedc 	beq.w	8003f42 <__adddf3+0xe6>
 800418a:	f04f 0203 	mov.w	r2, #3
 800418e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004192:	bf18      	it	ne
 8004194:	3203      	addne	r2, #3
 8004196:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800419a:	bf18      	it	ne
 800419c:	3203      	addne	r2, #3
 800419e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80041a2:	f1c2 0320 	rsb	r3, r2, #32
 80041a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80041aa:	fa20 f002 	lsr.w	r0, r0, r2
 80041ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80041b2:	ea40 000e 	orr.w	r0, r0, lr
 80041b6:	fa21 f102 	lsr.w	r1, r1, r2
 80041ba:	4414      	add	r4, r2
 80041bc:	e6c1      	b.n	8003f42 <__adddf3+0xe6>
 80041be:	bf00      	nop

080041c0 <__aeabi_dmul>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80041c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80041ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80041ce:	bf1d      	ittte	ne
 80041d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80041d4:	ea94 0f0c 	teqne	r4, ip
 80041d8:	ea95 0f0c 	teqne	r5, ip
 80041dc:	f000 f8de 	bleq	800439c <__aeabi_dmul+0x1dc>
 80041e0:	442c      	add	r4, r5
 80041e2:	ea81 0603 	eor.w	r6, r1, r3
 80041e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80041ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80041ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80041f2:	bf18      	it	ne
 80041f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80041f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80041fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004200:	d038      	beq.n	8004274 <__aeabi_dmul+0xb4>
 8004202:	fba0 ce02 	umull	ip, lr, r0, r2
 8004206:	f04f 0500 	mov.w	r5, #0
 800420a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800420e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004212:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800421e:	f09c 0f00 	teq	ip, #0
 8004222:	bf18      	it	ne
 8004224:	f04e 0e01 	orrne.w	lr, lr, #1
 8004228:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800422c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004230:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004234:	d204      	bcs.n	8004240 <__aeabi_dmul+0x80>
 8004236:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800423a:	416d      	adcs	r5, r5
 800423c:	eb46 0606 	adc.w	r6, r6, r6
 8004240:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004244:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004248:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800424c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004250:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004254:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004258:	bf88      	it	hi
 800425a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800425e:	d81e      	bhi.n	800429e <__aeabi_dmul+0xde>
 8004260:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004264:	bf08      	it	eq
 8004266:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800426a:	f150 0000 	adcs.w	r0, r0, #0
 800426e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004278:	ea46 0101 	orr.w	r1, r6, r1
 800427c:	ea40 0002 	orr.w	r0, r0, r2
 8004280:	ea81 0103 	eor.w	r1, r1, r3
 8004284:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004288:	bfc2      	ittt	gt
 800428a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800428e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004292:	bd70      	popgt	{r4, r5, r6, pc}
 8004294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004298:	f04f 0e00 	mov.w	lr, #0
 800429c:	3c01      	subs	r4, #1
 800429e:	f300 80ab 	bgt.w	80043f8 <__aeabi_dmul+0x238>
 80042a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80042a6:	bfde      	ittt	le
 80042a8:	2000      	movle	r0, #0
 80042aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80042ae:	bd70      	pople	{r4, r5, r6, pc}
 80042b0:	f1c4 0400 	rsb	r4, r4, #0
 80042b4:	3c20      	subs	r4, #32
 80042b6:	da35      	bge.n	8004324 <__aeabi_dmul+0x164>
 80042b8:	340c      	adds	r4, #12
 80042ba:	dc1b      	bgt.n	80042f4 <__aeabi_dmul+0x134>
 80042bc:	f104 0414 	add.w	r4, r4, #20
 80042c0:	f1c4 0520 	rsb	r5, r4, #32
 80042c4:	fa00 f305 	lsl.w	r3, r0, r5
 80042c8:	fa20 f004 	lsr.w	r0, r0, r4
 80042cc:	fa01 f205 	lsl.w	r2, r1, r5
 80042d0:	ea40 0002 	orr.w	r0, r0, r2
 80042d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80042d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80042dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80042e0:	fa21 f604 	lsr.w	r6, r1, r4
 80042e4:	eb42 0106 	adc.w	r1, r2, r6
 80042e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80042ec:	bf08      	it	eq
 80042ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f1c4 040c 	rsb	r4, r4, #12
 80042f8:	f1c4 0520 	rsb	r5, r4, #32
 80042fc:	fa00 f304 	lsl.w	r3, r0, r4
 8004300:	fa20 f005 	lsr.w	r0, r0, r5
 8004304:	fa01 f204 	lsl.w	r2, r1, r4
 8004308:	ea40 0002 	orr.w	r0, r0, r2
 800430c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004310:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004314:	f141 0100 	adc.w	r1, r1, #0
 8004318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800431c:	bf08      	it	eq
 800431e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f1c4 0520 	rsb	r5, r4, #32
 8004328:	fa00 f205 	lsl.w	r2, r0, r5
 800432c:	ea4e 0e02 	orr.w	lr, lr, r2
 8004330:	fa20 f304 	lsr.w	r3, r0, r4
 8004334:	fa01 f205 	lsl.w	r2, r1, r5
 8004338:	ea43 0302 	orr.w	r3, r3, r2
 800433c:	fa21 f004 	lsr.w	r0, r1, r4
 8004340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004344:	fa21 f204 	lsr.w	r2, r1, r4
 8004348:	ea20 0002 	bic.w	r0, r0, r2
 800434c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004354:	bf08      	it	eq
 8004356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	f094 0f00 	teq	r4, #0
 8004360:	d10f      	bne.n	8004382 <__aeabi_dmul+0x1c2>
 8004362:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004366:	0040      	lsls	r0, r0, #1
 8004368:	eb41 0101 	adc.w	r1, r1, r1
 800436c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004370:	bf08      	it	eq
 8004372:	3c01      	subeq	r4, #1
 8004374:	d0f7      	beq.n	8004366 <__aeabi_dmul+0x1a6>
 8004376:	ea41 0106 	orr.w	r1, r1, r6
 800437a:	f095 0f00 	teq	r5, #0
 800437e:	bf18      	it	ne
 8004380:	4770      	bxne	lr
 8004382:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	eb43 0303 	adc.w	r3, r3, r3
 800438c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004390:	bf08      	it	eq
 8004392:	3d01      	subeq	r5, #1
 8004394:	d0f7      	beq.n	8004386 <__aeabi_dmul+0x1c6>
 8004396:	ea43 0306 	orr.w	r3, r3, r6
 800439a:	4770      	bx	lr
 800439c:	ea94 0f0c 	teq	r4, ip
 80043a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80043a4:	bf18      	it	ne
 80043a6:	ea95 0f0c 	teqne	r5, ip
 80043aa:	d00c      	beq.n	80043c6 <__aeabi_dmul+0x206>
 80043ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80043b0:	bf18      	it	ne
 80043b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80043b6:	d1d1      	bne.n	800435c <__aeabi_dmul+0x19c>
 80043b8:	ea81 0103 	eor.w	r1, r1, r3
 80043bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	bd70      	pop	{r4, r5, r6, pc}
 80043c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80043ca:	bf06      	itte	eq
 80043cc:	4610      	moveq	r0, r2
 80043ce:	4619      	moveq	r1, r3
 80043d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80043d4:	d019      	beq.n	800440a <__aeabi_dmul+0x24a>
 80043d6:	ea94 0f0c 	teq	r4, ip
 80043da:	d102      	bne.n	80043e2 <__aeabi_dmul+0x222>
 80043dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80043e0:	d113      	bne.n	800440a <__aeabi_dmul+0x24a>
 80043e2:	ea95 0f0c 	teq	r5, ip
 80043e6:	d105      	bne.n	80043f4 <__aeabi_dmul+0x234>
 80043e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80043ec:	bf1c      	itt	ne
 80043ee:	4610      	movne	r0, r2
 80043f0:	4619      	movne	r1, r3
 80043f2:	d10a      	bne.n	800440a <__aeabi_dmul+0x24a>
 80043f4:	ea81 0103 	eor.w	r1, r1, r3
 80043f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80043fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004400:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	bd70      	pop	{r4, r5, r6, pc}
 800440a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800440e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8004412:	bd70      	pop	{r4, r5, r6, pc}

08004414 <__aeabi_ddiv>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800441a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800441e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004422:	bf1d      	ittte	ne
 8004424:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004428:	ea94 0f0c 	teqne	r4, ip
 800442c:	ea95 0f0c 	teqne	r5, ip
 8004430:	f000 f8a7 	bleq	8004582 <__aeabi_ddiv+0x16e>
 8004434:	eba4 0405 	sub.w	r4, r4, r5
 8004438:	ea81 0e03 	eor.w	lr, r1, r3
 800443c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004440:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004444:	f000 8088 	beq.w	8004558 <__aeabi_ddiv+0x144>
 8004448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800444c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004450:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004454:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004458:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800445c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004460:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004464:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004468:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800446c:	429d      	cmp	r5, r3
 800446e:	bf08      	it	eq
 8004470:	4296      	cmpeq	r6, r2
 8004472:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004476:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800447a:	d202      	bcs.n	8004482 <__aeabi_ddiv+0x6e>
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	ea4f 0232 	mov.w	r2, r2, rrx
 8004482:	1ab6      	subs	r6, r6, r2
 8004484:	eb65 0503 	sbc.w	r5, r5, r3
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	ea4f 0232 	mov.w	r2, r2, rrx
 800448e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004492:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004496:	ebb6 0e02 	subs.w	lr, r6, r2
 800449a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800449e:	bf22      	ittt	cs
 80044a0:	1ab6      	subcs	r6, r6, r2
 80044a2:	4675      	movcs	r5, lr
 80044a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80044ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80044b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80044b6:	bf22      	ittt	cs
 80044b8:	1ab6      	subcs	r6, r6, r2
 80044ba:	4675      	movcs	r5, lr
 80044bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80044c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80044ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80044ce:	bf22      	ittt	cs
 80044d0:	1ab6      	subcs	r6, r6, r2
 80044d2:	4675      	movcs	r5, lr
 80044d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	ea4f 0232 	mov.w	r2, r2, rrx
 80044de:	ebb6 0e02 	subs.w	lr, r6, r2
 80044e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80044e6:	bf22      	ittt	cs
 80044e8:	1ab6      	subcs	r6, r6, r2
 80044ea:	4675      	movcs	r5, lr
 80044ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80044f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80044f4:	d018      	beq.n	8004528 <__aeabi_ddiv+0x114>
 80044f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80044fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80044fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004502:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004506:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800450a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800450e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004512:	d1c0      	bne.n	8004496 <__aeabi_ddiv+0x82>
 8004514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004518:	d10b      	bne.n	8004532 <__aeabi_ddiv+0x11e>
 800451a:	ea41 0100 	orr.w	r1, r1, r0
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004526:	e7b6      	b.n	8004496 <__aeabi_ddiv+0x82>
 8004528:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800452c:	bf04      	itt	eq
 800452e:	4301      	orreq	r1, r0
 8004530:	2000      	moveq	r0, #0
 8004532:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004536:	bf88      	it	hi
 8004538:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800453c:	f63f aeaf 	bhi.w	800429e <__aeabi_dmul+0xde>
 8004540:	ebb5 0c03 	subs.w	ip, r5, r3
 8004544:	bf04      	itt	eq
 8004546:	ebb6 0c02 	subseq.w	ip, r6, r2
 800454a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800454e:	f150 0000 	adcs.w	r0, r0, #0
 8004552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800455c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004560:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004564:	bfc2      	ittt	gt
 8004566:	ebd4 050c 	rsbsgt	r5, r4, ip
 800456a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800456e:	bd70      	popgt	{r4, r5, r6, pc}
 8004570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004574:	f04f 0e00 	mov.w	lr, #0
 8004578:	3c01      	subs	r4, #1
 800457a:	e690      	b.n	800429e <__aeabi_dmul+0xde>
 800457c:	ea45 0e06 	orr.w	lr, r5, r6
 8004580:	e68d      	b.n	800429e <__aeabi_dmul+0xde>
 8004582:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004586:	ea94 0f0c 	teq	r4, ip
 800458a:	bf08      	it	eq
 800458c:	ea95 0f0c 	teqeq	r5, ip
 8004590:	f43f af3b 	beq.w	800440a <__aeabi_dmul+0x24a>
 8004594:	ea94 0f0c 	teq	r4, ip
 8004598:	d10a      	bne.n	80045b0 <__aeabi_ddiv+0x19c>
 800459a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800459e:	f47f af34 	bne.w	800440a <__aeabi_dmul+0x24a>
 80045a2:	ea95 0f0c 	teq	r5, ip
 80045a6:	f47f af25 	bne.w	80043f4 <__aeabi_dmul+0x234>
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	e72c      	b.n	800440a <__aeabi_dmul+0x24a>
 80045b0:	ea95 0f0c 	teq	r5, ip
 80045b4:	d106      	bne.n	80045c4 <__aeabi_ddiv+0x1b0>
 80045b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80045ba:	f43f aefd 	beq.w	80043b8 <__aeabi_dmul+0x1f8>
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	e722      	b.n	800440a <__aeabi_dmul+0x24a>
 80045c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80045c8:	bf18      	it	ne
 80045ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80045ce:	f47f aec5 	bne.w	800435c <__aeabi_dmul+0x19c>
 80045d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80045d6:	f47f af0d 	bne.w	80043f4 <__aeabi_dmul+0x234>
 80045da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80045de:	f47f aeeb 	bne.w	80043b8 <__aeabi_dmul+0x1f8>
 80045e2:	e712      	b.n	800440a <__aeabi_dmul+0x24a>

080045e4 <__gedf2>:
 80045e4:	f04f 3cff 	mov.w	ip, #4294967295
 80045e8:	e006      	b.n	80045f8 <__cmpdf2+0x4>
 80045ea:	bf00      	nop

080045ec <__ledf2>:
 80045ec:	f04f 0c01 	mov.w	ip, #1
 80045f0:	e002      	b.n	80045f8 <__cmpdf2+0x4>
 80045f2:	bf00      	nop

080045f4 <__cmpdf2>:
 80045f4:	f04f 0c01 	mov.w	ip, #1
 80045f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80045fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004608:	bf18      	it	ne
 800460a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800460e:	d01b      	beq.n	8004648 <__cmpdf2+0x54>
 8004610:	b001      	add	sp, #4
 8004612:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004616:	bf0c      	ite	eq
 8004618:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800461c:	ea91 0f03 	teqne	r1, r3
 8004620:	bf02      	ittt	eq
 8004622:	ea90 0f02 	teqeq	r0, r2
 8004626:	2000      	moveq	r0, #0
 8004628:	4770      	bxeq	lr
 800462a:	f110 0f00 	cmn.w	r0, #0
 800462e:	ea91 0f03 	teq	r1, r3
 8004632:	bf58      	it	pl
 8004634:	4299      	cmppl	r1, r3
 8004636:	bf08      	it	eq
 8004638:	4290      	cmpeq	r0, r2
 800463a:	bf2c      	ite	cs
 800463c:	17d8      	asrcs	r0, r3, #31
 800463e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004642:	f040 0001 	orr.w	r0, r0, #1
 8004646:	4770      	bx	lr
 8004648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800464c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004650:	d102      	bne.n	8004658 <__cmpdf2+0x64>
 8004652:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004656:	d107      	bne.n	8004668 <__cmpdf2+0x74>
 8004658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800465c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004660:	d1d6      	bne.n	8004610 <__cmpdf2+0x1c>
 8004662:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004666:	d0d3      	beq.n	8004610 <__cmpdf2+0x1c>
 8004668:	f85d 0b04 	ldr.w	r0, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <__aeabi_cdrcmple>:
 8004670:	4684      	mov	ip, r0
 8004672:	4610      	mov	r0, r2
 8004674:	4662      	mov	r2, ip
 8004676:	468c      	mov	ip, r1
 8004678:	4619      	mov	r1, r3
 800467a:	4663      	mov	r3, ip
 800467c:	e000      	b.n	8004680 <__aeabi_cdcmpeq>
 800467e:	bf00      	nop

08004680 <__aeabi_cdcmpeq>:
 8004680:	b501      	push	{r0, lr}
 8004682:	f7ff ffb7 	bl	80045f4 <__cmpdf2>
 8004686:	2800      	cmp	r0, #0
 8004688:	bf48      	it	mi
 800468a:	f110 0f00 	cmnmi.w	r0, #0
 800468e:	bd01      	pop	{r0, pc}

08004690 <__aeabi_dcmpeq>:
 8004690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004694:	f7ff fff4 	bl	8004680 <__aeabi_cdcmpeq>
 8004698:	bf0c      	ite	eq
 800469a:	2001      	moveq	r0, #1
 800469c:	2000      	movne	r0, #0
 800469e:	f85d fb08 	ldr.w	pc, [sp], #8
 80046a2:	bf00      	nop

080046a4 <__aeabi_dcmplt>:
 80046a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80046a8:	f7ff ffea 	bl	8004680 <__aeabi_cdcmpeq>
 80046ac:	bf34      	ite	cc
 80046ae:	2001      	movcc	r0, #1
 80046b0:	2000      	movcs	r0, #0
 80046b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80046b6:	bf00      	nop

080046b8 <__aeabi_dcmple>:
 80046b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80046bc:	f7ff ffe0 	bl	8004680 <__aeabi_cdcmpeq>
 80046c0:	bf94      	ite	ls
 80046c2:	2001      	movls	r0, #1
 80046c4:	2000      	movhi	r0, #0
 80046c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80046ca:	bf00      	nop

080046cc <__aeabi_dcmpge>:
 80046cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80046d0:	f7ff ffce 	bl	8004670 <__aeabi_cdrcmple>
 80046d4:	bf94      	ite	ls
 80046d6:	2001      	movls	r0, #1
 80046d8:	2000      	movhi	r0, #0
 80046da:	f85d fb08 	ldr.w	pc, [sp], #8
 80046de:	bf00      	nop

080046e0 <__aeabi_dcmpgt>:
 80046e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80046e4:	f7ff ffc4 	bl	8004670 <__aeabi_cdrcmple>
 80046e8:	bf34      	ite	cc
 80046ea:	2001      	movcc	r0, #1
 80046ec:	2000      	movcs	r0, #0
 80046ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80046f2:	bf00      	nop

080046f4 <__aeabi_d2iz>:
 80046f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80046f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80046fc:	d215      	bcs.n	800472a <__aeabi_d2iz+0x36>
 80046fe:	d511      	bpl.n	8004724 <__aeabi_d2iz+0x30>
 8004700:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004704:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004708:	d912      	bls.n	8004730 <__aeabi_d2iz+0x3c>
 800470a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800470e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004712:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004716:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800471a:	fa23 f002 	lsr.w	r0, r3, r2
 800471e:	bf18      	it	ne
 8004720:	4240      	negne	r0, r0
 8004722:	4770      	bx	lr
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	4770      	bx	lr
 800472a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800472e:	d105      	bne.n	800473c <__aeabi_d2iz+0x48>
 8004730:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004734:	bf08      	it	eq
 8004736:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800473a:	4770      	bx	lr
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <__aeabi_d2uiz>:
 8004744:	004a      	lsls	r2, r1, #1
 8004746:	d211      	bcs.n	800476c <__aeabi_d2uiz+0x28>
 8004748:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800474c:	d211      	bcs.n	8004772 <__aeabi_d2uiz+0x2e>
 800474e:	d50d      	bpl.n	800476c <__aeabi_d2uiz+0x28>
 8004750:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004754:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004758:	d40e      	bmi.n	8004778 <__aeabi_d2uiz+0x34>
 800475a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800475e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004762:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004766:	fa23 f002 	lsr.w	r0, r3, r2
 800476a:	4770      	bx	lr
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	4770      	bx	lr
 8004772:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004776:	d102      	bne.n	800477e <__aeabi_d2uiz+0x3a>
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	4770      	bx	lr
 800477e:	f04f 0000 	mov.w	r0, #0
 8004782:	4770      	bx	lr

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <__libc_init_array+0x3c>)
 8004788:	4c0e      	ldr	r4, [pc, #56]	; (80047c4 <__libc_init_array+0x40>)
 800478a:	1ae4      	subs	r4, r4, r3
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2500      	movs	r5, #0
 8004790:	461e      	mov	r6, r3
 8004792:	42a5      	cmp	r5, r4
 8004794:	d004      	beq.n	80047a0 <__libc_init_array+0x1c>
 8004796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800479a:	4798      	blx	r3
 800479c:	3501      	adds	r5, #1
 800479e:	e7f8      	b.n	8004792 <__libc_init_array+0xe>
 80047a0:	f7fd f986 	bl	8001ab0 <_init>
 80047a4:	4c08      	ldr	r4, [pc, #32]	; (80047c8 <__libc_init_array+0x44>)
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <__libc_init_array+0x48>)
 80047a8:	1ae4      	subs	r4, r4, r3
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	2500      	movs	r5, #0
 80047ae:	461e      	mov	r6, r3
 80047b0:	42a5      	cmp	r5, r4
 80047b2:	d004      	beq.n	80047be <__libc_init_array+0x3a>
 80047b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047b8:	4798      	blx	r3
 80047ba:	3501      	adds	r5, #1
 80047bc:	e7f8      	b.n	80047b0 <__libc_init_array+0x2c>
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	1ffe88cc 	.word	0x1ffe88cc
 80047c4:	1ffe88cc 	.word	0x1ffe88cc
 80047c8:	1ffe88cc 	.word	0x1ffe88cc
 80047cc:	1ffe88cc 	.word	0x1ffe88cc

080047d0 <g_xmc_vadc_group_array>:
 80047d0:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

080047e0 <INTERRUPT_0>:
 80047e0:	01003f13                                .?..

080047e4 <group_init_handle0>:
	...

080047f8 <group_init_handle1>:
	...

0800480c <group_init_handle2>:
	...

08004820 <group_init_handle3>:
	...

08004834 <global_config>:
 8004834:	00000000 00000004 00000000 00000000     ................
	...
 800484c:	01010230 00010000 00000000 00010000     0...............
 800485c:	01010102                                ....

08004860 <ANALOG_IO_0>:
 8004860:	00000000 1ffe88d8 48028e00 00000000     ...........H....

08004870 <ANALOG_IO_1>:
 8004870:	00000000 1ffe88d9 48028e00 00000001     ...........H....

08004880 <ANALOG_IO_2>:
 8004880:	00000000 1ffe88da 48028e00 00000009     ...........H....

08004890 <group_ptrs>:
 8004890:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

080048a0 <ADC_MEASUREMENT_ADV_0_Channel_A_ch_config>:
 80048a0:	002f0000 00000000 00000000 00000001     ../.............

080048b0 <ADC_MEASUREMENT_ADV_0_Channel_A_res_config>:
 80048b0:	00000000                                ....

080048b4 <ADC_MEASUREMENT_ADV_0_Channel_A_handle>:
 80048b4:	080048a0 080048b0 08004860 00000100     .H...H..`H......

080048c4 <ADC_MEASUREMENT_ADV_0_Channel_B_ch_config>:
 80048c4:	00240000 00000000 00000000 00000101     ..$.............

080048d4 <ADC_MEASUREMENT_ADV_0_Channel_B_res_config>:
 80048d4:	80000000                                ....

080048d8 <ADC_MEASUREMENT_ADV_0_Channel_B_handle>:
 80048d8:	080048c4 080048d4 08004870 00000000     .H...H..pH......

080048e8 <ADC_MEASUREMENT_ADV_0_scan_config>:
 80048e8:	00000000 00004500 00000024              .....E..$...

080048f4 <ADC_MEASUREMENT_ADV_0_scan_handle>:
	...
 8004908:	080048e8 00000001 00000003 00000000     .H..............

08004918 <ADC_MEASUREMENT_ADV_0>:
 8004918:	1ffe88bc 08002985 080048f4 1ffe88c4     .....)...H......
 8004928:	02020001 00000001                       ........

08004930 <npio2_hw>:
 8004930:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 8004940:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 8004950:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 8004960:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 8004970:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 8004980:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 8004990:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 80049a0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

080049b0 <two_over_pi>:
 80049b0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 80049c0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 80049d0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 80049e0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 80049f0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 8004a00:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 8004a10:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 8004a20:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8004a30:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 8004a40:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 8004a50:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 8004a60:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 8004a70:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 8004a80:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 8004a90:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8004aa0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8004ab0:	0060e27b 00c08c6b                       {.`.k...

08004ab8 <init_jk>:
 8004ab8:	00000002 00000003 00000004 00000006     ................

08004ac8 <PIo2>:
 8004ac8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 8004ad8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 8004ae8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 8004af8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5
