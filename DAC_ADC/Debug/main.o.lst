   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GROUP_GetResult,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_VADC_GROUP_GetResult:
  25              	.LFB262:
  26              	 .file 1 "C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2019-12-02
   4:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  12:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  14:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  21:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  28:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  41:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  42:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  43:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  44:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  45:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  46:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  47:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  48:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  49:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  50:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  51:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  52:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  53:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  54:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  55:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  57:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  58:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  59:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  60:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  61:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  62:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  63:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  64:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  65:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  66:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  67:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  68:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  69:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  70:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  71:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  72:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  73:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  74:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  75:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  76:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  77:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  78:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  79:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  80:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed.
  81:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  82:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  83:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  84:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  85:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  86:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  87:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  88:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  89:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  90:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  91:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  92:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  93:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  94:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  95:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  96:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  97:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR.
  98:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  99:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
 100:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
 101:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
 102:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
 103:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
 104:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 105:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 106:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 107:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 108:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 109:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 110:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 111:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 112:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 113:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 114:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 115:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 116:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 118:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 119:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 120:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 121:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 122:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-03-30:
 123:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 124:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetChannelAlias()
 125:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 126:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-12-02:
 127:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fix including files following the convention: angle brackets are used for standard include
 128:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 129:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2020-09-03:
 130:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetPowerMode()
 131:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 132:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2020-11-11:
 133:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() and XMC_VADC_GROUP_SetChannelAlias()
 134:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 135:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond
 136:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 137:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 138:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 139:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 140:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 141:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 142:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 143:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 144:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 145:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_common.h"
 146:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_scu.h"
 147:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_vadc_map.h"
 148:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 149:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 150:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 151:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 152:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 153:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 154:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 155:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 156:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 157:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 158:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 159:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 160:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 161:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 162:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 163:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 164:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 165:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 166:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 167:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 168:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 169:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 170:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 171:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 172:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 173:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 174:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 175:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 176:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 177:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 178:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 179:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 180:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 181:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 182:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 183:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 184:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 185:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 186:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 187:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 188:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 189:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 190:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 191:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 192:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 193:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 194:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 195:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 196:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 197:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 198:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 199:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 200:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 201:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 202:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 203:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 204:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 205:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 206:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 207:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 208:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 209:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 210:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 211:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 212:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 213:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 215:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 216:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 217:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 218:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 219:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 221:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 222:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 223:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 224:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 225:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 227:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 228:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 229:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 233:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 242:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 243:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 247:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 251:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 259:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 260:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 261:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 263:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 264:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 265:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 266:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 269:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 270:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 271:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 272:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 273:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 275:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 276:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 278:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 279:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 280:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 281:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 282:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 283:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 284:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 285:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 286:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 287:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 288:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 289:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 290:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 291:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 292:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 293:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 294:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 295:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 296:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 297:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 298:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 299:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/
 300:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 301:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 302:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 303:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 304:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 305:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 306:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 307:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 308:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 309:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 310:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 311:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 312:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 313:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 314:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 315:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 316:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 317:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 318:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 319:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 320:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 321:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 322:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 323:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 324:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 325:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 326:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 327:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 328:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 329:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 330:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 331:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 332:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 333:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 334:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 335:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 336:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 337:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 338:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 339:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 340:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 341:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 342:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 343:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 344:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 345:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 346:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 347:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 348:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 349:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 350:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 351:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 352:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 353:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 354:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 355:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 356:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 357:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 358:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 359:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 360:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 361:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 362:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 363:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 364:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 365:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 366:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 367:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 368:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 369:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 370:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 371:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 372:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 373:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 374:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 375:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 376:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 377:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 378:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 379:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 380:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 381:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 382:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 383:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 384:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 385:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 386:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 387:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 388:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 389:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 390:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 391:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 392:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 393:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 394:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 395:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 396:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 397:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 398:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 399:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 400:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 401:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 402:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 403:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 404:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 405:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 406:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 407:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 408:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 409:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 410:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 411:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 412:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 413:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 414:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 415:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 416:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 417:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 418:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 419:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 420:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 421:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 422:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 423:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 424:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 425:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 426:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 427:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 428:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 429:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 430:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 431:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 432:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 433:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 434:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 435:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 436:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 437:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 438:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 439:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 440:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 441:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 442:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 443:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 444:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 445:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 446:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 447:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 448:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 449:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 450:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 451:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 452:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 453:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 454:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 455:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 456:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 457:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 458:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 459:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 460:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 461:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 462:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 463:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 464:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 465:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 466:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 467:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 468:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 469:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 470:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 471:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 472:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 473:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 474:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 475:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH,    /**< Input higher than than programmed reference */
 476:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 477:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 478:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 479:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 480:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 481:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 482:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 483:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 484:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 485:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 486:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 487:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 488:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 489:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 490:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 491:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 492:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 493:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 494:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 495:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 496:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 497:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 498:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 499:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 500:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 501:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 502:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 503:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 504:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 505:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 506:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 507:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 508:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 509:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 510:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 511:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 512:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 513:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 514:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 515:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 516:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 517:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 518:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 520:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 521:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 522:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 523:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 524:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 525:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 526:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 527:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 528:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 529:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 530:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 531:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 532:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 533:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 534:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 535:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 536:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 537:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 538:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 539:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 540:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 541:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 542:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 543:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 544:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 545:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 546:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 547:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 548:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 549:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 550:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 551:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 552:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 553:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 554:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 555:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 556:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 557:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 558:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 559:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 560:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 561:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 562:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 563:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 564:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 565:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 566:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 567:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 568:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 569:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 570:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 571:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 572:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 573:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 574:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 575:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 576:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 577:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 578:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 581:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 583:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 585:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 586:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 587:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 588:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 589:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 590:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 591:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 592:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 593:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 594:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 595:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 596:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 597:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 598:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 599:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 600:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 601:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 602:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 603:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 604:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 605:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 606:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 607:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 608:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 609:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 610:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 611:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 612:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 613:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 614:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 615:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 616:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 617:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 618:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 619:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 620:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 621:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 622:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 623:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 624:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 625:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 626:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 627:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 628:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 629:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 632:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 634:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 636:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 637:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 638:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 640:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 641:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 642:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 643:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 644:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 645:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 646:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 647:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 649:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 650:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 651:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 652:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 653:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 654:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 655:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 656:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 657:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION
 658:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 659:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 660:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 661:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 662:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 663:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 664:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 665:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 666:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 667:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 668:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 669:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 670:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 671:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 672:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 673:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 674:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 675:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 676:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_RS_PRIORITY_t;
 677:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 678:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 679:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 680:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 681:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 682:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 683:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 684:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 685:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level i
 686:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level i
 687:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 688:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 689:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 690:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 691:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 692:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 693:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 694:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 695:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 696:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 697:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_BOUNDARY_SELECT_t;
 698:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 699:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 701:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 702:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 703:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 704:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 705:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_0   = 0,
 706:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_1,
 707:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 708:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_2,
 709:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_3
 710:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 711:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_INDEX_t;
 712:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 713:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 714:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 715:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 716:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** */
 717:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 718:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 720:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 721:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 722:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 723:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 724:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 725:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 726:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 727:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 728:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 729:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 730:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 731:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 732:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 733:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 734:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 735:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 736:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 737:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 738:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 739:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 740:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 741:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 742:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 743:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 744:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 745:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 746:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 747:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 748:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 749:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 750:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 751:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 752:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SHS_GAIN_LEVEL_t;
 753:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 754:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 755:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 756:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 757:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 758:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 759:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 760:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 761:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 762:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SHS_LOOP_CH_t;
 763:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 764:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 765:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 766:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 767:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 768:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 769:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 770:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 771:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 772:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 773:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 774:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 775:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 776:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 777:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 778:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 779:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 780:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 781:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 782:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 783:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 784:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 785:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 786:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 787:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 788:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_BOUNDARY_NODE_t;
 789:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 790:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 791:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 792:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 793:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 794:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 795:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 796:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 797:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 798:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 799:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 800:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 801:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 802:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SYNCTR_EVAL_t;
 803:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 804:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 805:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 806:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 807:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 808:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 809:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma push
 810:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma anon_unions
 811:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 812:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma warning 586
 813:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 814:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 815:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 816:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 817:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 818:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 819:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 820:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request s
 821:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 822:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 823:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion s
 824:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 825:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 826:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 827:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 828:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 829:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 830:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 831:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as the 
 832:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 833:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 834:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 835:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
 836:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 837:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
 838:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigger. U
 839:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 840:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
 841:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 842:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 843:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
 844:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating. Us
 845:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 846:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 8;
 847:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant sampl
 848:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 849:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 3;
 850:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 851:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t asctrl;
 852:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 853:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 854:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 855:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 856:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 857:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 2;
 858:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trigger 
 859:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conversi
 860:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion com
 861:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 862:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_LOAD_
 863:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 26;
 864:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 865:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t asmr;
 866:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 867:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 868:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 869:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 870:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 871:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 872:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 873:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 874:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 875:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 876:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 877:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 878:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 879:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 880:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 881:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 882:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t input_class                : 2;  /**< Input conversion class selection.
 883:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 884:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 2;
 885:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bound?
 886:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 887:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bound?
 888:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 889:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 890:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 891:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the configu
 892:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either VARef
 893:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 894:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 4;
 895:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result_reg_number          : 4;  /**< Group result register number */
 896:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t use_global_result          : 1;  /**< Use global result register for background requ
 897:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result_alignment           : 1;  /**< Alignment of the results read in the result re
 898:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 899:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 6;
 900:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor for 
 901:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 902:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacitor is
 903:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 904:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t chctr;
 905:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 906:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 907:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 908:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 909:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 910:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 8;
 911:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 912:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should cha
 913:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 914:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should cha
 915:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 916:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should cha
 917:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 918:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should cha
 919:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 920:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 921:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 4;
 922:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 923:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 4;
 924:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 925:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 926:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 927:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 928:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 929:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 930:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 931:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the specific 
 932:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the specific 
 933:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the specific 
 934:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the specific 
 935:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 936:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 12;
 937:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 938:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t bfl;
 939:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 940:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 941:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 942:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 943:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 944:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 945:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 0
 946:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 947:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 1
 948:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 949:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 2
 950:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 951:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 3
 952:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 953:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 16;
 954:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 955:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t bflc;
 956:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 957:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 958:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   bool    channel_priority;  /**< Only non priority channels can be converted by Background Request
 959:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (which
 960:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 961:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 962:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 963:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 964:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 965:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 966:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 967:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 968:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 969:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 970:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 971:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 972:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 973:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<BR>Ra
 974:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back into t
 975:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 976:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trigger.
 977:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 24;
 978:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 979:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 980:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qinr0;
 981:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 982:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 983:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 984:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 985:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 986:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 987:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 988:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 989:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request s
 990:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 991:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 992:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC_G
 993:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 994:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 995:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 996:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 997:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 998:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as the
 999:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
1000:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
1001:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1002:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1003:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1004:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1005:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigger.
1006:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
1007:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
1008:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
1009:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
1010:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
1011:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating.
1012:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
1013:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 8;
1014:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be act
1015:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 3;
1016:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1017:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qctrl0;
1018:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1019:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1020:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1021:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1022:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1023:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                   : 2;
1024:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1025:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                   : 29;
1026:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1027:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qmr0;
1028:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1029:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1030:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1031:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1032:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1033:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1034:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1035:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1036:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1037:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1038:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1039:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1040:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1041:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1042:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly connect
1043:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1044:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1045:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly con
1046:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1047:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1048:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1049:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected via EM
1050:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1051:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1052:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connected vi
1053:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1054:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1055:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1056:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 16;
1057:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1058:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1059:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globiclass;
1060:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1061:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1062:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1063:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1064:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1065:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1066:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1067:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1068:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1069:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1070:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1071:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1072:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1073:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1074:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 0x1F
1075:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 2;
1076:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter */
1077:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Range:
1078:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 5;
1079:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 17;
1080:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1081:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globcfg;
1082:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1083:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1084:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1085:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1086:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1087:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1088:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1089:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1090:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1091:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1092:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1093:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1094:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1095:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1096:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1097:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1098:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1099:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1100:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1101:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globbound;
1102:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1103:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1104:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1105:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1106:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0]*
1107:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1]*
1108:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1109:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1110:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1111:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1112:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 16;
1113:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1114:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1115:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be overwr
1116:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1117:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 6;
1118:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new result.
1119:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1120:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globrcr;
1121:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1122:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1123:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1124:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1125:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1127:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                             : 2;
1128:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sleep 
1129:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                             : 28;
1130:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1131:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t clc;
1132:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1133:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1134:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1135:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1136:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1137:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1138:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1139:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1140:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1141:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1142:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1143:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1144:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1145:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1146:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly connect
1147:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1148:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1149:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly con
1150:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1151:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1152:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected via EM
1153:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1154:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1155:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connected vi
1156:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1157:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1158:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1159:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_iclass0;
1160:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1161:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1162:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1163:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1165:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1166:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1167:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1168:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1169:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1170:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1171:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1172:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1173:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC will
1174:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1175:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1176:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 13;
1177:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1178:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected. */
1179:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1180:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected. */
1181:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 5;
1182:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1183:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Steady,
1184:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1185:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC_VAD
1186:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external cha
1187:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1188:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b connect
1189:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1190:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 1;
1191:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1192:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 2;
1193:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1194:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1195:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_emuxctr;
1196:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1197:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1198:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1200:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1201:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1202:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1203:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1204:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1205:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1206:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1207:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[0]
1208:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[1]
1209:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1210:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1211:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1212:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1213:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1214:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1215:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1216:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1217:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1218:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_bound;
1219:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1220:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1221:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1222:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1223:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1224:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 4;
1225:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1226:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 1;
1227:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode or 
1228:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1229:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 24;
1230:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1231:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_arbcfg;
1232:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1233:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1234:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1235:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1236:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1237:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1238:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1239:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1240:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1241:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1242:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1243:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1244:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1245:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 16;
1246:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1247:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_VADC_
1248:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1249:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1250:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1251:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 2;
1252:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous results 
1253:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIFO? *
1254:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1255:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new result.
1256:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1257:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_rcr;
1258:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1259:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1260:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1261:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1262:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1263:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1264:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1265:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1266:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1267:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1268:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1269:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1270:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1271:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1272:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            : 3;  /**< Select a Sample and hold unit for the stepper's 
1273:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             : 1; /**< Should the step be added to the sequence */
1275:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            : 3;  /**< Select a Sample and hold unit for the stepper's 
1276:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             : 1; /**< Should the step be added to the sequence */
1278:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            : 3;  /**< Select a Sample and hold unit for the stepper's 
1279:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1280:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             : 1; /**< Should the step be added to the sequence */
1281:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            : 3;  /**< Select a Sample and hold unit for the stepper's 
1282:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1283:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             : 1; /**< Should the step be added to the sequence */
1284:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            : 3;  /**< Select a Sample and hold unit for the stepper's 
1285:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1286:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             : 1; /**< Should the step be added to the sequence */
1287:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            : 3;  /**< Select a Sample and hold unit for the stepper's 
1288:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1289:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             : 1; /**< Should the step be added to the sequence */
1290:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            : 3;  /**< Select a Sample and hold unit for the stepper's 
1291:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1292:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             : 1; /**< Should the step be added to the sequence */
1293:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            : 3;  /**< Select a Sample and hold unit for the stepper's 
1294:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1295:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             : 1; /**< Should the step be added to the sequence */
1296:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1297:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1298:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1299:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1300:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1301:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1302:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1303:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1304:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1305:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1306:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1307:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1308:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1309:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1310:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1311:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1312:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        : 4; /**< The divider value for the SHS clock. Range: [0x0 
1313:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 6;
1314:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1315:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 10;
1316:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1317:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  : 2; /**< It is possible to different reference voltage for
1318:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 20;
1319:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1320:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1321:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1322:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1323:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1324:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1325:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_CONFIG_t;
1326:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1327:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1328:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1329:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1330:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1331:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1332:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1333:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1334:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1335:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1336:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1337:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1338:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   : 16; /**< Result of the Analog to digital conversion*/
1339:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             : 4;  /**< Indicates the group to which the channel_number 
1340:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           : 5;  /**< Converted channel number*/
1341:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      : 3;   /**< Converted external multiplexer channel number.
1342:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1343:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source : 2;  /**< Converted request source*/
1344:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      : 1;  /**< Fast compare result if conversion mode is fast c
1345:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             : 1;  /**< Valid flag is set when a new result is available
1346:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1347:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1348:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1349:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1350:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1351:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1352:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1353:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1354:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1355:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1356:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1357:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1358:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1359:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1360:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   : 16; /**< Result of the Analog to digital conversion*/
1361:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   : 4;  /**< Results reduction counter value*/
1362:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           : 5;  /**< Converted channel number*/
1363:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      : 3;   /**< Converted external multiplexer channel number.
1364:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1365:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source : 2;  /**< Converted request source*/
1366:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      : 1;  /**< Fast compare result if conversion mode is fast c
1367:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             : 1;  /**< Valid flag is set when a new result is available
1368:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1369:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1370:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1371:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1372:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1373:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1374:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1375:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1376:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma pop
1377:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1378:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma warning restore
1379:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1380:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1381:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1382:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1383:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1385:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1386:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1387:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1388:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr 
1389:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1390:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1391:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1392:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1393:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1394:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1395:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1396:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1397:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1398:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1399:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1400:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1401:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1402:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1403:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1404:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1405:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1406:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1407:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1408:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1409:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1410:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1411:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1412:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1413:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1415:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1416:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1417:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1418:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1419:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1420:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1421:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1426:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1427:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1428:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1429:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1430:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1431:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1432:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1433:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1434:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1435:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1436:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1437:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1438:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1439:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1444:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1445:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1446:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1447:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1448:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1451:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1452:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1453:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1454:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1455:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1456:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1457:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1459:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1461:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1462:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1463:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1464:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1465:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1466:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1467:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1468:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1469:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1470:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1471:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1472:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1473:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1474:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1475:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1476:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1477:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1479:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1481:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1482:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1483:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1485:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1486:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1487:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1488:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1489:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1490:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1491:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1492:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1493:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1494:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1495:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1496:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1497:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1498:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1499:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1500:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1501:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1502:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1503:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1504:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1505:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1506:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1507:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1508:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1509:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1510:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1511:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1512:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1513:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1514:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1515:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1516:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1517:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1518:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1519:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1520:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1521:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1522:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1523:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1524:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1525:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1526:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1527:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1528:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1529:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1530:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1531:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1532:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1533:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1534:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1535:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1536:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1537:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1538:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1539:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1540:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1541:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1542:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1543:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1544:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1545:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1546:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1547:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1548:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1550:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1551:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1552:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1553:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1554:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1555:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1556:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1557:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1558:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1559:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1560:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1561:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1562:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1563:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1564:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1565:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1566:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1567:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1568:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1569:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1570:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1571:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1572:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1573:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1574:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1575:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1576:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1578:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1579:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1580:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
1581:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1582:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1583:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1584:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1585:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1586:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1588:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1589:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1590:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1591:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1592:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1593:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1594:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1596:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1597:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1598:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1600:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1601:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC
1602:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1603:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1604:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1605:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1606:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1607:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1608:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1609:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1610:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1611:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1612:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1614:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1616:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1617:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1618:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1619:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1620:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1622:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1623:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1624:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1625:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1626:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1627:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1628:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1629:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1630:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1631:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1632:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1633:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1634:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1636:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1637:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1638:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1639:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1640:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1641:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1642:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1643:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1644:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1645:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1646:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1647:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1648:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1649:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1650:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1651:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1652:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1653:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1654:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1655:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1656:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1657:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1658:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1659:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1660:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1661:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1662:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1663:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1664:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1665:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1666:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1667:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1668:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1669:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1670:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1671:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1672:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1673:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1674:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1675:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1676:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1677:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1678:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1679:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1680:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1681:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1682:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1683:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1684:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1685:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1686:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1687:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1688:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1689:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1690:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1691:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1692:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1693:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1694:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1695:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1696:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1697:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1698:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1699:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1700:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1701:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1702:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1703:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1704:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1705:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1706:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1707:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1708:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1709:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1710:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1711:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1712:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1713:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1714:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1715:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1716:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1717:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1718:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1719:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1720:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1721:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1722:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1723:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1724:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1725:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1726:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1727:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1729:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1730:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1731:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1732:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1733:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1734:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1735:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1736:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1737:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1738:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1739:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1740:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1741:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1742:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1743:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1744:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1745:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint16_t boundary_value);
1746:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1747:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1748:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1749:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1750:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1751:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1752:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1753:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1754:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1755:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1756:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1759:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1760:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1761:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1762:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1763:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1764:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1765:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1766:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1767:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1768:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1769:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1770:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1771:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1772:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1773:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1774:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1775:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1776:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1777:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1778:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1779:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1780:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1781:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1782:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1783:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1784:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1785:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1786:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1787:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1788:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1789:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (global_ptr->GLOBRES);
1790:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1791:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1792:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1793:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1794:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1795:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1796:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1797:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1798:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1799:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1800:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1801:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1802:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1803:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1804:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1805:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1806:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1807:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1808:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1809:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1810:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1811:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1812:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1813:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1814:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1815:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1816:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1817:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1818:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1819:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1820:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1821:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1824:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1825:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1826:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1827:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1828:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1829:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1830:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1831:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1832:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1833:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1834:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1835:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1836:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1837:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1838:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1839:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1840:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1841:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1842:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1843:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1844:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1845:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1846:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1847:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1848:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1849:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1850:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1851:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1852:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1853:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1854:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1855:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1856:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1857:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1858:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1859:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1860:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1861:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1862:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1863:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1864:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1865:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1866:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1867:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1868:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event",
1869:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT ==
1870:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1871:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1872:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1873:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1874:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1875:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1876:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1877:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1878:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1879:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1880:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1881:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1882:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1883:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1884:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1885:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1886:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1887:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1888:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1889:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1890:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1891:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1892:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event",
1893:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT ==
1894:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1895:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1896:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1897:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1898:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1899:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1900:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1901:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1902:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1903:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1904:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1905:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1906:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1907:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1908:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1909:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1910:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1911:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1912:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1913:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1914:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1915:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1916:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1917:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1918:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1919:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1920:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1921:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1922:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1923:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1924:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1925:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1926:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1927:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1928:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1929:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1930:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1931:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1932:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1933:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1934:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1935:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1937:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1938:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1939:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1940:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1941:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1942:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1943:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1944:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1945:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1946:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
1947:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1948:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1949:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1950:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1951:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1952:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1953:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1954:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1955:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1956:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1957:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1958:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1959:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1960:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1961:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1962:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1963:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1964:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
1965:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1966:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG = (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHSCF
1967:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1968:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1969:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1970:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1971:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1972:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various step configurations.
1973:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1974:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1975:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1976:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1977:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the stepper sequence for the converter.<BR>\n
1978:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1979:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The stepper sequence is configured using this API.
1980:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1981:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1982:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1983:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1984:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1985:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t *config)
1986:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1987:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1988:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
1989:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1990:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t *)NULL))
1991:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1992:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1993:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1994:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1995:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1996:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1997:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1998:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1999:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return bool returns true if the analog converter is operable
2000:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *              returns false if the analog converter is powered down
2001:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2002:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2003:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the converter status.<BR>\n
2004:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ANRDY bit field of the SHSCFG register.
2005:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2006:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2007:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2008:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2009:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
2010:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2011:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL
2012:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2013:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
2014:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2015:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2016:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2017:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2018:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2019:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2020:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2021:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2022:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2023:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2024:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2025:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2026:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2027:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2028:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2029:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2030:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2031:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2032:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
2033:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2034:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2035:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2036:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2037:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2038:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2039:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2040:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2042:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2043:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2044:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2045:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2046:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2047:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2048:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
2049:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2050:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2051:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2052:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2053:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2054:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2055:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2056:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2057:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2058:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2059:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2060:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2061:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2062:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2063:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2065:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2066:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2067:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2068:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2069:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint8_t sst_value);
2070:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2071:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2072:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2073:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2074:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2075:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2076:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2077:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2078:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2079:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2080:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2081:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2082:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2083:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2084:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2085:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2086:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2087:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2088:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2089:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2090:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2091:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2092:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2093:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2094:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2095:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2096:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2097:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2098:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2099:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2100:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2101:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2102:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2103:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2104:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2105:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2106:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2107:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2108:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2109:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2110:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2111:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2112:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2113:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2114:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2115:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2116:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2117:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2118:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2119:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2120:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2121:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2122:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2123:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2124:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2125:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2126:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2127:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2128:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2129:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2130:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2131:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2132:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2133:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2134:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t max_calibration_time)
2135:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2136:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2137:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2138:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2139:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2140:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2141:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2142:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2143:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2144:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2145:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2146:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2147:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2148:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2149:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2150:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2151:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2152:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2153:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2154:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2155:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2156:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2157:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num);
2158:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2159:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2160:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2161:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2162:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2163:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2164:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2165:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2166:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2167:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2168:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2169:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2170:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2171:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2172:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num);
2173:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2174:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2175:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2176:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2177:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2178:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2179:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2180:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2181:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2182:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2183:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2184:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2185:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2186:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2187:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2188:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2189:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2190:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2191:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2192:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2193:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2194:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2195:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2196:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2197:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2198:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2199:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2200:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2201:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2202:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2203:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2204:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2205:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2206:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2207:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2208:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2209:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint8_t offset_calibration_value);
2210:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2211:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2212:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2213:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2214:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2215:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2216:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2217:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2218:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2219:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2220:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2221:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2222:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2223:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2224:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2225:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2226:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2227:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2228:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2229:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_t group_num,
2230:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_LOOP_CH_t loop_select,
2231:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint8_t ch_num);
2232:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2233:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2234:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2235:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2236:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2237:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2238:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2239:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2240:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2241:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2242:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2243:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2244:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2245:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2246:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2247:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_LOOP_CH_t loop_select)
2248:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2249:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2250:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2251:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2252:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0) || (loop_select == XMC_VADC_SHS_LOOP_CH_1))
2253:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2254:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2255:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2256:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2257:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2258:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2259:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2260:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2261:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2262:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2263:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2264:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2265:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2266:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2267:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2268:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2269:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2270:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2271:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_SHS_LOOP_CH_t loop_select)
2272:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2273:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2274:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t *)(void *)SHS0))
2275:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2276:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0) || (loop_select == XMC_VADC_SHS_LOOP_CH_1))
2277:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2278:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2279:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2280:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2281:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2282:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2283:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2284:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2285:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2286:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2287:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2288:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2289:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2290:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2291:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2292:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2293:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2294:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2295:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2296:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2297:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2298:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2299:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2300:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2301:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2302:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2303:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2304:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2305:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2306:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2307:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2308:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2309:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2310:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2311:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2312:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2313:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2314:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2315:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2316:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2317:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2318:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2319:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2320:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2322:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2323:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2324:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2326:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2327:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2328:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2329:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2330:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2331:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2332:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2333:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2334:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2335:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2336:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2338:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2339:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2340:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2341:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2342:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2343:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2344:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2345:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2346:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2347:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2348:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2349:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2350:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2351:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2352:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2353:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2354:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2356:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2357:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2358:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2359:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2360:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2361:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2362:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2363:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2365:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2366:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2367:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2368:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2369:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2370:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2371:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2372:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2373:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2374:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_POWERMODE_t Current power mode
2375:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2376:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2377:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the power mode of a VADC group.
2378:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2379:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2380:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetPowerMode()<BR>
2381:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2382:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE int32_t XMC_VADC_GROUP_GetPowerMode(XMC_VADC_GROUP_t *const group_ptr)
2383:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2384:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_ANONS_Msk) >> VADC_G_ARBCFG_ANONS_Pos);
2385:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2386:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2387:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2388:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2389:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2390:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2391:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2392:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2393:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2394:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2395:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2396:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2397:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2398:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2399:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2400:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2401:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2402:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2403:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2404:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2405:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2406:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2407:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2408:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2409:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2410:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2411:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2412:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2413:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2414:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2415:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2416:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2417:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2418:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2419:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2420:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2421:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2422:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2423:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2424:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2425:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2426:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2427:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2428:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2429:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2430:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2431:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2432:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2433:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2434:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2435:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2436:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2437:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2438:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2439:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2440:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2441:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2442:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2443:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2444:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2445:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2446:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2447:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2448:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2449:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2450:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2451:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2452:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2453:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2454:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2455:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2456:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2457:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2458:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2459:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2460:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2461:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2462:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t eval_waiting_group,
2463:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t eval_origin_group);
2464:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2465:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2466:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2467:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2468:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2469:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2470:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2471:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2472:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2473:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2474:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2475:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2476:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2477:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2478:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2479:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2480:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2481:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2482:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2483:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2484:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2485:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2486:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2487:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2488:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2489:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( group_ptr->SYNCTR & eval_mask);
2490:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2491:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2492:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2493:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2494:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2495:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2496:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2497:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2498:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2499:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2500:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2501:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2502:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2503:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2504:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2505:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2506:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2507:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2508:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2509:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2510:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2511:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2512:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2513:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2514:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2515:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2516:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2517:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2518:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2519:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2520:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2521:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2522:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2523:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2524:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2525:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2526:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2527:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2528:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2529:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2530:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2531:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2532:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2533:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2534:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2535:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2536:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2537:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2538:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2539:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2540:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2541:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2542:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2543:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2544:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2545:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2546:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2547:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2548:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2549:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2550:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2551:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2552:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2553:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2554:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2555:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2556:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2557:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2558:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2559:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2560:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2561:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2562:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2563:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2564:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2565:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2566:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2567:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2568:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2569:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2570:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2571:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2572:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2573:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2574:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2575:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2576:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2577:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2578:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2579:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2580:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2581:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2582:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2583:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2584:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2585:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2586:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2587:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2588:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2589:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2590:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr,
2591:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0,
2592:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2593:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2594:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2595:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2596:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2597:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2598:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2599:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2600:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2601:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2602:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2603:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2604:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2605:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2606:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2607:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2608:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2609:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2610:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2611:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint16_t boundary_value);
2612:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2613:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2614:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2615:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2616:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2617:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2618:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2619:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2620:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2621:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2622:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2623:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2624:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2625:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2626:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2627:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2628:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
2629:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t sr_num,
2630:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GROUP_IRQ_t type);
2631:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2632:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2633:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2634:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2635:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2636:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2637:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2638:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2639:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2640:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2641:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2642:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2643:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2644:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2645:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2646:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2647:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2648:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2649:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2650:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2651:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2652:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2653:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2654:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
2655:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
2656:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2657:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
2658:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
2659:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
2660:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
2661:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2662:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2663:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2664:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2665:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
2666:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2667:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2668:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2669:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2670:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2671:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2672:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2673:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2674:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2675:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2676:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2677:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2678:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2679:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2680:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2681:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2682:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2683:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2684:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2685:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2686:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2687:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2688:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint8_t boundary_flag_num,
2689:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_BOUNDARY_NODE_t node);
2690:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2691:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2692:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2693:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2694:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2695:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2696:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2697:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2698:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2699:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2700:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2701:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2702:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2703:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2704:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2705:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2706:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2707:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2708:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2709:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2710:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2711:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2712:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2713:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2714:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2715:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2716:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2717:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2718:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2719:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2720:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2721:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2722:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2723:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2724:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_CONV_t conv_class)
2725:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2726:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2727:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2728:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected",
2729:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2730:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2731:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2732:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2733:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2734:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2735:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2736:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2737:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2738:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2739:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2740:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2741:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2742:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2743:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2744:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2745:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2746:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2747:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2748:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2749:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2750:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2751:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2752:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2753:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2754:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2755:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2756:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2757:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2758:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2759:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2760:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2761:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2762:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2763:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2764:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2765:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2766:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2767:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2768:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2769:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2770:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2771:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2772:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2773:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2774:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2775:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2776:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2777:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2778:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2779:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2780:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
2781:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2782:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2783:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2784:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2785:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2786:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2787:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2788:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2789:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2790:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2791:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2792:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2793:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2794:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2795:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2796:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2797:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2798:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2799:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2800:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2801:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
2802:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2803:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2804:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2805:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2806:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2807:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2808:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2809:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2810:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2811:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2812:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2813:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2814:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2815:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2816:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2817:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2818:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2819:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2820:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2821:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2822:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2823:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2824:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2825:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2826:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2827:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2828:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2829:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2830:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2831:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2832:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2833:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2834:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2835:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2836:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2837:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2838:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2839:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2840:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2841:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2842:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2843:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2844:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2845:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2846:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2847:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2848:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2849:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2854:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2855:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2856:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2857:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2858:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2859:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2860:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2861:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2862:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2863:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2864:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2865:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2866:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2867:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2868:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2869:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2870:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2871:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2872:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2873:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2874:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2875:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2876:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2877:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2878:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2879:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2880:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2881:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2882:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2883:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2884:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2885:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2886:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2887:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2888:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2889:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2890:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2891:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2892:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2893:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2894:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2895:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2896:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2897:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2898:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2899:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2900:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2901:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2902:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2903:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2904:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2905:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2906:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2907:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2908:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2909:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2910:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2911:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2912:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2913:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2914:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2915:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2916:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2917:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2918:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2919:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2920:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2921:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2922:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2923:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2924:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2925:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2926:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2927:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2928:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2929:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2930:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2931:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2932:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2933:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2934:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2935:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2936:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2937:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2938:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2939:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2940:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2941:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2942:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2943:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2944:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2945:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2946:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2947:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2948:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2949:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2950:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2951:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2952:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2953:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2954:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2955:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2956:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2957:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2958:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2959:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2960:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2961:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2962:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2963:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2964:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2965:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2966:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2967:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2968:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2969:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2970:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2971:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2972:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2973:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2974:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2975:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2976:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2977:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2978:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2979:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2980:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2981:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2982:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2983:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2984:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2985:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2986:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2987:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2988:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2989:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2990:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2991:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2992:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2993:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2994:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2995:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2996:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2997:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2998:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2999:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
3000:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
3001:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3002:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
3003:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3004:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3005:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
3006:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3007:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
3008:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3009:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
3010:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number",
3011:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3012:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
3013:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3014:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3015:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3016:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3017:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3018:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3019:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3020:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
3021:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3022:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3023:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3024:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3025:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3026:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3027:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3028:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3029:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
3030:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3031:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3032:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
3033:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3034:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
3035:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3036:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3037:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3038:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3039:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3040:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3041:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3042:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3043:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3044:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3045:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3046:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3047:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3048:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3049:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3050:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3051:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3052:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3053:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3054:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3055:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3056:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3057:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3058:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3059:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3060:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3061:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3062:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3063:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3064:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3065:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3066:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3067:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3068:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3069:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3070:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3071:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3072:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3073:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3074:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3075:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3076:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3077:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3078:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3079:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3080:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3081:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3082:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3083:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3084:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3085:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3086:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3087:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3088:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3089:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3090:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3091:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3092:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3093:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3094:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3095:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3096:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3097:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3098:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3099:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3100:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3101:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3102:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3103:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3104:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3105:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3106:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3107:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3108:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3109:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3110:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3111:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3112:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3113:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3114:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3115:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3116:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3117:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3118:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3119:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3120:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3121:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3122:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3123:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3124:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3125:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3126:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3127:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3128:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3129:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3130:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3131:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3132:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3133:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3134:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3135:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3136:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3137:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3138:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3139:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3140:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3141:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3142:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3143:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3144:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3145:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3146:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3147:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3148:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3149:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3150:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3151:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3152:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3153:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3154:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3155:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3156:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3157:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3158:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3159:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3160:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3161:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3162:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3163:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3164:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3165:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3166:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3167:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3168:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3169:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3170:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3171:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3172:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3173:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3174:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3175:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3176:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3177:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3178:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3179:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3180:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3181:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3182:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3183:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3184:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3185:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3186:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3187:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3188:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3189:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3190:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3191:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3192:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3193:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3194:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3195:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3196:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3197:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3198:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3199:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3200:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3201:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3202:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3203:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3204:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3205:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3206:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3207:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3208:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3209:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3210:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3211:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3212:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3213:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3214:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3215:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3216:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3217:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3218:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3219:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3220:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3221:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3222:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3223:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3224:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3225:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3226:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3227:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3228:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3229:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3230:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3231:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3232:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3233:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3234:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3235:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3236:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3237:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3238:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3239:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3240:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3241:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3242:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3243:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3244:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3245:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3246:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3247:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3248:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3249:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3250:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3251:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3252:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3253:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3254:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3255:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3256:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3257:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3258:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3259:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3260:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3261:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3262:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3263:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3264:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3265:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3266:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3267:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3268:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3269:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3270:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3271:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3272:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3273:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3274:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3275:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3276:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3277:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3278:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3279:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3280:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3281:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3282:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3283:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3284:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3285:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3286:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3287:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3288:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3289:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3290:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3291:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3292:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3293:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3294:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3295:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3296:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3297:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3298:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3299:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3300:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3301:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
3302:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3303:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3304:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3305:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3306:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3307:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3308:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3309:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3310:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3311:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3312:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3313:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3314:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3315:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3316:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3317:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3318:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3319:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3320:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3321:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3322:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3323:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
3324:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3325:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3326:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3327:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3328:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3329:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3330:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3331:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3332:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3333:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3334:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3335:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3336:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3337:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3338:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3339:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3340:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3341:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3342:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3343:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3344:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3345:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3346:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3347:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3348:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3349:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3350:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3351:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3352:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3353:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3354:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3355:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3356:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3357:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3358:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3359:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3360:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3361:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3362:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3363:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3364:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3365:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3366:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3367:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3368:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3369:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3370:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3371:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3372:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3373:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3374:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3375:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3376:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3377:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3378:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3379:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3380:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3381:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3382:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3383:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3384:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3385:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3386:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3387:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3388:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3389:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3390:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3391:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3392:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3393:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3394:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3395:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3396:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3397:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3398:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3399:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3400:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3401:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3402:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GATEMODE_t mode_sel)
3403:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3404:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3405:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3406:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3407:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3408:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3409:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3410:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3411:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3412:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3413:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3414:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3415:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3416:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3417:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3418:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3419:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3420:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3421:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3422:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3423:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3424:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3425:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3426:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3427:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3428:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3429:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3430:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3431:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3432:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3433:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3434:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3435:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3436:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3437:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3438:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3439:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3440:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3441:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3442:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3443:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3444:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3445:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3446:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3447:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3448:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3449:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3450:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3451:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3452:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3453:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3454:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3455:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3456:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3457:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3458:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3459:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3460:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3461:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3462:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3463:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3464:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3465:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3466:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3467:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3468:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3469:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3470:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3471:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3472:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3473:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3474:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3475:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3476:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3477:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3478:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3479:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3480:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3481:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3482:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3483:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3484:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3485:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3486:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3487:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3488:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3489:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3490:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3491:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3492:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3493:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3494:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3495:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3496:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3497:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3498:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3499:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3500:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3501:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3502:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3503:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3504:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3505:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3506:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3507:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3508:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3509:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3510:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3511:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3512:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3513:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3514:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3515:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3516:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3517:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3518:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
3519:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3520:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3521:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_
3522:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3523:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3524:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3525:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3526:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3527:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3528:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3529:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3530:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3531:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3532:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3533:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3534:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3535:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3536:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3537:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3538:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3539:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3540:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3541:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3542:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3543:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3544:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3545:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3546:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3547:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3548:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3549:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3550:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_mask)
3551:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3552:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3553:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3554:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3555:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3556:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3557:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3558:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3559:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3560:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3561:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3562:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3563:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3564:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3565:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3566:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3567:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3568:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3569:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3570:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3571:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3572:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3573:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3574:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3575:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3576:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3577:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
3578:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3579:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3580:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_
3581:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3582:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3583:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3584:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3585:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3586:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3587:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3588:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3589:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3590:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3591:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3592:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3593:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3594:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3595:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3596:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3597:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3598:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3599:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3600:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3601:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3602:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3603:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3604:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3605:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3606:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3607:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3608:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3609:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_mask)
3610:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3611:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3612:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3613:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3614:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3615:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3616:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3617:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3618:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3619:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3620:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3621:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3622:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3623:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3624:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3625:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3626:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3627:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3628:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3629:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3630:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3631:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3632:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3633:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3634:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3635:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t grp_num,
3636:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
3637:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3638:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3639:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3640:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3641:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3642:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3643:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3644:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3645:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3646:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3647:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3648:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3649:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3650:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3651:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3652:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3653:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3654:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3655:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3656:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3657:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3658:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3659:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3660:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3661:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3662:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3663:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3664:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3665:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3666:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3667:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3668:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3669:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3670:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3671:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3672:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3673:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3674:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3675:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3676:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3677:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3678:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3679:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3680:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3681:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3682:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3683:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3684:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3685:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3686:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3687:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3688:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3689:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3690:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3691:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3692:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3693:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3694:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3695:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3696:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3697:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3698:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3699:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3700:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3701:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3702:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3703:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3704:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3705:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3706:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3707:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3708:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3709:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3710:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3711:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3712:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3713:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3714:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3715:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3716:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3717:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3718:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3719:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3720:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3721:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3722:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3723:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3724:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3725:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3726:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3727:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3728:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3729:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3730:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3731:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3732:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3733:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3734:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3735:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3736:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3737:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3738:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3739:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3740:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3741:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3742:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3743:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3744:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3745:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3746:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3747:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3748:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3749:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3750:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3751:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3752:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3753:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3754:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3755:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3756:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3758:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3759:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3760:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3761:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3762:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3763:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3764:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3765:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3766:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3767:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3768:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3769:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3770:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3771:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3772:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3773:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3774:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3775:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3776:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3777:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3778:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3779:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3780:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3781:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3782:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3783:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3784:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3785:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3786:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3787:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3788:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3789:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3790:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3791:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3792:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3793:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3794:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3795:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3796:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3797:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3798:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3799:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3800:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3801:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3802:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3803:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3804:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3805:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3806:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3807:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3808:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3809:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3810:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3811:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3812:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3813:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3814:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3815:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3816:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3817:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3818:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3819:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3820:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3821:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3822:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3823:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3824:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3825:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3826:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3827:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3828:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3829:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3830:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3831:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3832:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3833:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3834:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3835:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3836:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3837:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3838:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3839:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3840:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3841:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3842:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3843:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3844:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3845:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3846:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3847:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3848:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3849:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3850:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
3851:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3852:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3853:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3854:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3855:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3856:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3857:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3858:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3859:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3860:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3861:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3862:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3863:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3864:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3865:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3866:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3867:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3868:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3869:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3870:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3871:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
3872:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3873:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3874:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3875:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3876:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3877:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3878:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3879:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3880:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3881:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3882:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3883:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3884:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3885:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3886:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3887:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3888:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3889:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3890:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3891:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3892:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3893:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3894:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3895:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3896:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3897:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3898:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3899:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3900:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3901:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3902:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3903:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3904:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3905:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3906:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3907:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3908:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3909:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3910:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3911:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3912:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3913:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3914:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
3915:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3916:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3917:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3918:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3919:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3920:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3921:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3922:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3923:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3924:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3925:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3926:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3927:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3928:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3929:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3930:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3931:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3932:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3933:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3934:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3935:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3936:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3937:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3938:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3939:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3940:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3941:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3942:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3943:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3944:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3945:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3946:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3947:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3948:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3949:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3950:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3951:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3952:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3953:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3954:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3955:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3956:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3957:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3958:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3959:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3960:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3961:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3962:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3963:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3964:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3965:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3966:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3967:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3968:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3969:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3970:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3971:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3972:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3973:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3974:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3975:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3976:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3977:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3978:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3979:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3980:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3981:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3982:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3983:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3984:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3985:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3986:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3987:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3988:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3989:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3990:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3991:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3992:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3993:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3994:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3995:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3996:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3997:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3998:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3999:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
4000:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
4001:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4002:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4003:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
4004:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4005:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
4006:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4007:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
4008:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
4009:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4010:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4011:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4012:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4013:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4014:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
4015:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4016:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4017:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4018:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
4019:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
4020:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
4021:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
4022:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
4023:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
4024:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4025:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4026:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
4027:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4028:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
4029:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4030:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4031:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4032:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4033:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4034:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4035:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4036:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4037:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4038:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4039:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4040:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4041:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4042:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4043:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4044:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4045:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4046:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4047:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4048:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4049:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4050:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4051:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4052:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4053:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4054:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4055:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4056:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4057:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4058:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4059:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4060:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4061:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4062:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4063:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4064:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4065:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
4066:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4067:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   while ( !((group_ptr->QSR0) & (uint32_t)VADC_G_QSR0_EMPTY_Msk))
4068:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
4069:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4070:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   }
4071:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4072:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4073:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4074:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4075:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4076:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4077:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4078:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4079:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4080:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the next valid channel in the queue buffer.<BR>\n
4081:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue entry lined up for conversion can be removed and replaced by its successor. The call to 
4082:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * first check if a valid queue entry is present in the queue backup register if present would clea
4083:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid queue entries are present in the backup then the first channel
4084:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * present in the queue buffer would be cleared.
4085:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to clear a
4086:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel from the queue.
4087:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4088:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4089:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
4090:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4091:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr);
4092:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4093:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4094:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4095:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4096:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param entry      Details of the node being added
4097:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4098:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4099:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4100:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4101:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Inserts a queue entry to the tail of the queue buffer.<BR>\n
4102:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will insert a new channel into the queue buffer. The Queue will start conversion of
4103:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channels from the head of the buffer. This Insert will place the entry after the last valid 
4104:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid entries are present then this API will place the Queue entry at the head of the buff
4105:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Then the successive call to the insert will place the new entry after the last entry.
4106:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxQINR0 for a single queue entry.
4107:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4108:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4109:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
4110:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4111:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
4112:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_QUEUE_ENTRY_t entry)
4113:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4114:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4115:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Insert the channel physically and get the length of the queue*/
4116:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QINR0 = entry.qinr0;
4117:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4118:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4119:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4120:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4121:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4122:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there are no channels for conversion
4123:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the next valid channel for conversion.
4124:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4125:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4126:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4127:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the next entry in the queue request source for conversion.<BR>\n
4128:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel in the queue lined up for conversion next.
4129:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API will return a valid queue entry from the queue buffer. First checks for the valid channel en
4130:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the backup register and returns if present. If the valid entry has not been found in the back
4131:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * then the queue buffer is searched for a valid entry. A call to this API would access the registe
4132:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxQBUR0 to determine the next channel.
4133:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4134:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4135:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueInsertChannel()<BR>
4136:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4137:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr);
4138:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4139:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4140:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4141:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4142:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there is no channel that have been interrupted.
4143:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the channel that is interrupted.
4144:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4145:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4146:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4147:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel whose conversion was suspended.<BR>\n
4148:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When using cancel inject repeat mode the canceled conversion will be placed in the backup regist
4149:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the valid queue channel number from the backup register. This happens when 
4150:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * there is a high priority conversion interrupts the conversion of queue request source. This forc
4151:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to goto the backup register. A call to this API would access the register GxQBUR0 to determine t
4152:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupted channel.
4153:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4154:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4155:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4156:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4157:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr);
4158:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4159:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4160:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4161:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4162:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4163:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4164:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4165:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
4166:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for queue. This will trigger a interrupt if the
4167:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
4168:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV0.
4169:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4170:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4171:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueClearReqSrcEvent()<BR>
4172:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4173:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4174:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4175:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
4176:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG |= 1U;
4177:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4178:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4179:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4180:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4181:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4182:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4183:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4184:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4185:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the conversion complete request source event.<BR>\n
4186:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
4187:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFCLR.SEV0.
4188:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4189:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4190:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
4191:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4192:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4193:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4194:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
4195:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR = (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
4196:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4197:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4198:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4199:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4200:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4201:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
4202:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
4203:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4204:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4205:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
4206:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the queue request source event. Will return a true
4207:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for queue. A call to this API would acces the register bit field  GxSE
4208:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4209:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4210:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4211:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4212:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
4213:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4214:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4215:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetReqSrcEventStatus:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4216:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV0_Msk);
4217:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4218:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4219:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4220:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4221:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr     The service request line (Common SR lines, Group specific SR lines)
4222:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4223:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4224:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4225:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4226:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the event to the SR line of VADC.<BR>\n
4227:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a queue request source event. Hence to get a
4228:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node. A call to this API would configur
4229:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxSEVNP.SEVNP0.
4230:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4231:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4232:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4233:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4234:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
4235:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4236:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4237:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4238:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4239:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4240:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4241:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4242:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for queue request source.<BR>\n
4243:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the queue request source. The trigger signal
4244:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the QCTRL register. The Selection of a input will be done by
4245:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectTrigger(). A call to this API would configure the register bit field G
4246:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4247:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4248:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueDisableExternalTrigger()<BR>
4249:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4250:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4251:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4252:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
4253:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4254:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_ENTR_Msk;
4255:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4256:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4257:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4258:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4259:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4260:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4261:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4262:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4263:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for queue request source.<BR>
4264:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the queue request source.
4265:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the queue request source. If any configuration was
4266:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxQCTRL0 will be not be effected.  A call to this API would confi
4267:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field GxQMR0.ENTR
4268:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4269:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4270:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
4271:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4272:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4273:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4274:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
4275:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4276:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= ~((uint32_t)VADC_G_QMR0_ENTR_Msk);
4277:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4278:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
4279:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4280:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
4281:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4282:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
4283:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  The channel being initialized
4284:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4285:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to initialization data
4286:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4287:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4288:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4289:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4290:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the ADC channel for conversion.<BR>\n
4291:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will do the channel related initializations. This includes configuration of the CHCTR s
4292:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and boundary flag settings. This must be called in the application in order to enable the conver
4293:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * a channel. After a request source has been initialized this API has to be called for each channe
4294:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * has to be converted.  A call to this API would configure the registers GxCHCTR GxBFL GxALIAS GxC
4295:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxBFLC(depending on device) in order to configure the channel.
4296:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4297:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4298:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4299:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4300:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
4301:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                 const XMC_VADC_CHANNEL_CONFIG_t *config);
4302:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4303:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4304:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4305:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param src_ch_num   Channel which will be converted by \b alias_ch_num, when called by the reque
4306:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0 to 0x7]
4307:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param alias_ch_num This is the alias channel (Ch-0 or Ch-1)
4308:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0, 0x1]
4309:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4310:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4311:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4312:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4313:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the Alias channel(\b alias_ch_num) to convert from the source channel(\b src_ch_num).<BR>\n
4314:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a alias configuration takes place the request source(queue/scan/background) will not call c
4315:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Request sources will call the channel \b alias_ch_num , this would invoke the conversion of
4316:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the pin associated with \b src_ch_num. The configuration of the alias channel (\b alias_ch_num) 
4317:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * for the conversion.\n
4318:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When an alias channel (Ch-0 or Ch-1) receives a trigger, it converts the aliased channel (\b src
4319:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The properties of Ch-0 or Ch-1 (as indicated in \b alias_ch_num ) apply when \b src_ch_num is co
4320:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  A call to this API would configure the register GxALIAS.
4321:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4322:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4323:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Alias Channel (\b alias_ch_num) and the source channel (\b src_ch_num) cannot be the same.
4324:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If they are, that alias feature is not used for the conversion. In order to Reset the alias
4325:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * feature that was previously selected this method can be used.
4326:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4327:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4328:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_GetChannelAlias().
4329:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4330:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
4331:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t src_ch_num,
4332:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t alias_ch_num)
4333:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4334:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
4335:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0) || (alias_c
4336:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
4337:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4338:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ALIAS = (group_ptr->ALIAS & (uint32_t)~(VADC_G_ALIAS_ALIAS0_Msk << (VADC_G_ALIAS_ALIAS
4339:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                      (alias_ch_num << (VADC_G_ALIAS_ALIAS1_Pos * src_ch_num));
4340:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4341:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4342:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4343:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4344:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param alias_ch_num This is the alias channel (Ch-0 or Ch-1)
4345:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0, 0x1]
4346:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4347:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint8_t Channel which will be converted by \b alias_ch_num, when called by the request source
4348:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4349:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4350:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Gets the channel to convert when a conversion on alias channel(\b alias_ch_num) is requested.<BR
4351:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4352:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4353:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetChannelAlias().
4354:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4355:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint8_t XMC_VADC_GROUP_GetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
4356:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t alias_ch_num)
4357:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4358:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
4359:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0) || (alias_c
4360:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4361:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ALIAS >> (VADC_G_ALIAS_ALIAS1_Pos * alias_ch_num)) & VADC_G_ALIAS_ALIAS0_Msk)
4362:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4363:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4364:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4365:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4366:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input was converted
4367:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4368:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4369:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool  Returns true if there was violation w.r.t the specified boundaries.
4370:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4371:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4372:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the result of the channel confines with the specified boundaries.<BR>\n
4373:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * An application may not necessarily always need to know the exact value of the converted result, 
4374:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * an indication if the generated result is within stipulated boundaries. Generation of Channel eve
4375:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to channel event generation criteria (Generate always, Never generate, Generate if result is out
4376:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generate if result is within bounds). When interrupts are not enabled, this API can be used to d
4377:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * nature of the result.  A call to this API would access the registers GxCHCTR and GxCEFLAG in ord
4378:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if a violation has occured.
4379:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4380:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4381:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
4382:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4383:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
4384:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4385:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4386:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4387:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input is to be converted
4388:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4389:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ref     Reference voltage
4390:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4391:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4392:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4393:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4394:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the reference voltage for conversion.<BR>\n
4395:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * An internal voltage reference (VARef) or an external voltage reference fed to Ch-0 can serve as 
4396:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * for conversions.  A call to this API would configure the register bit field GxCHCTR.REFSEL.
4397:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4398:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4399:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4400:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4401:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
4402:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_REF_t ref);
4403:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4404:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4405:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4406:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose i/p is to be converted
4407:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4408:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param result_reg_num  Result Register associated with this channel
4409:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4410:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4411:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4412:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4413:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the target result register.<BR>\n
4414:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are upto 16 result registers which a channel can choose from to store the results of conve
4415:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This selects only the group related result registers. A call to this API would configure the reg
4416:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4417:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4418:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4419:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4420:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4421:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
4422:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num,
4423:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t result_reg_num);
4424:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4425:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4426:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4427:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose conversion class is to be configured
4428:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4429:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conversion_class  conversion property to be associated with this channel
4430:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4431:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4432:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4433:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4434:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the conversion class registers.<BR>\n
4435:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * It configures the channel to have a particular conversion class properties like sampling
4436:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * time and resolution.  A call to this API would configure the register
4437:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.ICLSEL.
4438:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4439:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4440:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelGetInputClass().
4441:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4442:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
4443:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num,
4444:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class);
4445:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4446:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4447:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4448:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4449:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4450:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4451:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_LEFT if the result are aligned to the left
4452:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_RIGHT if the result are aligned to the right
4453:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4454:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4455:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel result alignment.<BR>\n
4456:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The results are aligned either to the left or to the right. A left aligned 10bit resolution has 
4457:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * at bit2 where as a left aligned 8bit resolution starts at bit4. A call to this API would return 
4458:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configured alignment value.
4459:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4460:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4461:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4462:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4463:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4464:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_ALIGN_t XMC_VADC_GROUP_ChannelGetResultAlignment(XMC_VADC_GROUP_t *
4465:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
4466:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4467:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4468:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Channel Number",
4469:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4470:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4471:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_ALIGN_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESPOS_Msk) 
4472:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     (uint32_t)VADC_G_CHCTR_RESPOS_Pos) );
4473:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4474:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4475:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4476:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4477:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4478:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4479:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4480:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4481:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_CHANNEL_CONV_t Returns the configured input class for the \b ch_num
4482:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4483:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4484:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel's input class for conversion for the required channel.<BR>\n
4485:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The sampling time and resolution can be taken from any of the 4 possible Input class registers.
4486:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would return the input class register that is taken up by \b ch_num for conversion.
4487:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4488:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4489:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4490:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetIclass().
4491:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4492:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_CHANNEL_CONV_t XMC_VADC_GROUP_ChannelGetInputClass(XMC_VADC_GROUP_t *const
4493:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num)
4494:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4495:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
4496:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Channel Number",
4497:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4498:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4499:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_CHANNEL_CONV_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_ICLSEL_Msk) 
4500:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     (uint32_t)VADC_G_CHCTR_ICLSEL_Pos) );
4501:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4502:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4503:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4504:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4505:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4506:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose associated result register is to be found
4507:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4508:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4509:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  uint8_t  returns the Group result register to which it is linked to.
4510:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           <BR>Range: [0x0 to 0xF]
4511:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4512:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4513:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Returns the result register associated with this channel.<br>\n
4514:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  There are upto 16 result registers which a channel can choose from to store the results of conv
4515:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  This returns only the group related result registers.  A call to this API would access the regi
4516:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4517:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4518:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4519:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4520:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4521:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
4522:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4523:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4524:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4525:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be asserted
4526:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4527:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4528:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4529:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4530:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4531:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts a Channel event.<BR>\n
4532:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * It is merely the channel event which is asserted. For this asserted event to lead to an interrup
4533:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * have been bound to an SR and that SR must have been enabled. It can potentially lead to an inter
4534:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * SR line is connected to an NVIC node.  A call to this API would configure the register bit field
4535:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4536:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4537:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4538:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4539:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num);
4540:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4541:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4542:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4543:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4544:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *      uint32_t returns the asserted channel events
4545:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4546:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4547:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the Channel event flag register.<BR>\n
4548:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The return is merely the channel events which are asserted.
4549:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit fields of GxCEFLAG.
4550:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4551:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4552:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4553:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4554:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_ChannelGetAssertedEvents(XMC_VADC_GROUP_t *const group_ptr)
4555:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4556:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetAssertedEvents:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
4557:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->CEFLAG);
4558:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4559:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4560:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4561:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4562:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be acknowledged
4563:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4564:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4565:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4566:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4567:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4568:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges a Channel event.<BR>\n
4569:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a channel event is raised after the conversion of that channel, it has to be cleared. This 
4570:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the Channel event of a particular channel if it has occurred.  A call to this API would configur
4571:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit fields of GxCEFCLR.
4572:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4573:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4574:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent().
4575:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4576:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ChannelClearEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4577:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4578:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4579:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4580:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHAN
4581:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->CEFCLR = (uint32_t)((uint32_t)1 << ch_num);
4582:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4583:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4584:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4585:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4586:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be connected to a service request line
4587:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4588:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr       The service request line to which the channel event is to be connected
4589:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4590:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4591:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4592:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4593:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a channel event to a requested Service Request line.<BR>\n
4594:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event is connected to a service request line. For an event to result in an interrupt
4595:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request line must be enabled in VADC and the NVIC node which this service request line is connec
4596:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupt generation enabled.  A call to this API would configure the register bit fields of GxC
4597:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4598:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4599:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()
4600:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4601:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
4602:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num,
4603:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_SR_t sr);
4604:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4605:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4606:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4607:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4608:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4609:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param criteria The condition under which the channel may assert its channel event
4610:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4611:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4612:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4613:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4614:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conditions under which a channel may assert its channel event.<BR>\n
4615:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4616:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries.  A call to this API would configure the register bit field GxCHCTR.CHEVMO
4617:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4618:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4619:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()<BR>
4620:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetEventInterruptNode()<BR>
4621:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4622:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria(XMC_VADC_GROUP_t *const group_ptr,
4623:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num,
4624:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_CHANNEL_EVGEN_t criteria);
4625:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4626:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4627:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4628:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4629:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4630:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4631:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_sel Select the upper/lower boundary configuration .
4632:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_sel.
4633:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4634:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4635:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4636:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4637:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the boundary selection for the given channel<BR>\n
4638:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4639:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries. The boundary values to which results are compared can be selected from se
4640:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxCHCTR.BNDSELL or GxCHCTR.BNDSELU  .
4641:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4642:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4643:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4644:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4645:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
4646:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t ch_num,
4647:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
4648:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_CHANNEL_BOUNDARY_t selection);
4649:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4650:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4651:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group
4652:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg_num  Result register which is intended to be initialized
4653:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0xF]
4654:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config       Pointer to initialization data
4655:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4656:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4657:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4658:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4659:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes a Group Result Register.<BR>
4660:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Various options needed for the working of the result result will be configured with this API.
4661:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would determine the result handling of the group registers. This API must be called after
4662:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channel Init (XMC_VADC_GROUP_ChannelInit())to initialize the result register that is selecte
4663:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would also determine if the result register that is being configured has to a part of a
4664:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * In this API one can also configure the various result handling options line FIR/IIR filters and 
4665:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Also configures the Data reduction to accumulate 2/3/4 results need to be done. This API will al
4666:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result event generation.  A call to this API would configure the register GxRCR with the \b 
4667:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4668:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4669:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_Disab
4670:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4671:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
4672:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t res_reg_num,
4673:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const XMC_VADC_RESULT_CONFIG_t *config)
4674:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4675:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4676:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg_num] = config->g_rcr;
4677:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4678:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4679:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4680:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4681:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4682:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4683:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Register which is required to be a part of results FIFO
4684:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4685:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4686:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4687:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4688:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4689:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Adds result register to Result FIFO.<BR>\n
4690:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sometimes, the rate of consumption of results by application software may not match the rate at 
4691:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * results are produced. A Result FIFO thus helps a slow consumer to read out results without loss 
4692:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a result register is added to fifo, it is in fact chained to its higher numbered neighbor. 
4693:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Result Register-5 is to be added to FIFO, it gets chained to Result Register-6. Results are writ
4694:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * while the same can be read out of Register-5 leisurely by software.
4695:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.FEN.
4696:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4697:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4698:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The FIFO is always read by the software with the lowest numbered result register.
4699:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The hardware will write the results from the highest numbered result register.
4700:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4701:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4702:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4703:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4704:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg);
4705:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4706:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4707:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4708:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be enabled
4709:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4710:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4711:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4712:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4713:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4714:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables result event generation.<BR>\n
4715:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Once the results of conversion are available, the result event (which is being enabled in this f
4716:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if connected to a service request line(Group or Shared service request) can lead to an interrupt
4717:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * not only necessary to enable the event, but also to connect it to a service request line. The
4718:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * service request generation capability must also be enabled and so should the corresponding NVIC 
4719:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4720:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4721:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4722:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetResultInterruptNode().
4723:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4724:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_EnableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4725:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4726:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4727:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4728:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4729:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] |= (uint32_t)VADC_G_RCR_SRGEN_Msk;
4730:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4731:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4732:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4733:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4734:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be disabled
4735:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4736:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4737:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4738:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4739:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4740:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable result event generation.<BR>\n
4741:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would just disable the event. It would not alter anything w.r.t the SR line if it was confi
4742:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4743:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4744:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4745:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableResultEvent().
4746:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4747:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_DisableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uin
4748:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4749:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4750:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_R
4751:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] &= ~((uint32_t)VADC_G_RCR_SRGEN_Msk);
4752:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4753:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4754:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4755:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4756:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4757:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4758:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4759:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t  returns the complete result register GxRESy.
4760:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4761:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4762:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result register completely (result of conversion as well as other info).<BR>\n
4763:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Result register will have information regarding the channel that is requesting the conversio
4764:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the result is valid, if the fast compare bit, Data Reduction Counter, and the request source 
4765:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * All these information will be returned back. And if the user is polling for the result he can us
4766:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * result if the valid bit is set. A call to this API would return the complete register GxRES.
4767:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4768:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_DETAILED_RESULT_t to easily access t
4769:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4770:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4771:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetResult().
4772:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4773:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetDetailedResult(XMC_VADC_GROUP_t *const group_ptr, const 
4774:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
4775:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4776:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4777:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->RES[res_reg]);
4778:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
4779:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4780:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4781:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4782:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4783:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4784:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4785:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_SIZE_t Result register values.
4786:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range:[ 0x0 to 0xFFF] (Result of single conversion. Accumulated results not c
4787:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4788:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4789:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result of the conversion.<BR>\n
4790:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will only return the result of the conversion and will strip out the other information 
4791:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the result register. A call to this API would access the register bit field GxRES.RESULT.
4792:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4793:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4794:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetDetailedResult().
4795:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4796:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
4797:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****     const uint32_t res_reg)
4798:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** {
  27              	 .loc 1 4798 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
4799:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4800:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REG
4801:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4802:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
  44              	 .loc 1 4802 0
  45 000a 7B68     	 ldr r3,[r7,#4]
  46 000c 3A68     	 ldr r2,[r7]
  47 000e C032     	 adds r2,r2,#192
  48 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
  49 0014 9BB2     	 uxth r3,r3
4803:C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc\xmc_vadc.h **** }
  50              	 .loc 1 4803 0
  51 0016 1846     	 mov r0,r3
  52 0018 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 001a BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001c 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 0020 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE262:
  67 0022 00BF     	 .section .text.ADC_MEASUREMENT_ADV_GetResult,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	ADC_MEASUREMENT_ADV_GetResult:
  73              	.LFB267:
  74              	 .file 2 "C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV/adc_measurement_adv.h"
   1:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
   2:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @file adc_measure_adv.h
   3:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @date 2021-01-08
   4:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
   5:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * NOTE:
   6:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
   8:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @cond
   9:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  10:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * ADC_MEASUREMENT_ADV v4.0.20 - Incorporates advanced features of the Versatile Analog to Digital 
  11:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *                               to measure analog inputs.
  12:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  13:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  14:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * All rights reserved.
  15:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  16:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * following conditions are met:
  18:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  19:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   disclaimer.
  21:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  22:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  25:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   products derived from this software without specific prior written permission.
  27:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  28:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  36:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  39:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  40:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Change History
  41:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * --------------
  42:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  43:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2015-10-09:
  44:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Initial version for DAVEv4.<BR>
  45:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  46:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2015-10-20:
  47:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Documentation updated.<BR>
  48:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  49:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2015-12-15:
  50:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Added support for XMC4300 devices.<BR>
  51:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  52:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-01-18:
  53:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 1.Internal consumption of request source.<BR>
  54:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 2.Support for synchronized conversion reduced from 8 master channels to 4 .<BR>
  55:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 3.Converted the SetBoundary() API from public API to private API .<BR>
  56:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 4.Updated all APIs for the Internal consumption of request source.<BR>
  57:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  58:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-02-05:
  59:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Documentation updated.<BR>
  60:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  61:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-03-18:
  62:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Added consumption of the GLOBAL ICLASS -1 for Sync. Conversions.<BR>
  63:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Added consumption of the result register-0 for subtraction mode.<BR>
  64:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Removed ADC_MEASUREMENT_ADV_SetUniformConversion().<BR>
  65:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - New API ADC_MEASUREMENT_ADV_SetIclass() added to configure the GLOBAL ICLASS for Slaves. <
  66:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  67:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-04-26:
  68:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - The synchronized conversion in a master slave configuration is currently not supported.<BR
  69:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  70:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-06-17:
  71:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - The synchronized conversion is supported.<BR>
  72:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Modified the Sync initialization sequence to configure the EVAL bits in the slave groups.<
  73:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  74:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-08-18:
  75:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Minimum sample time at low frequencies changed to incorporate Errata ADC_AI.H006 and ADC_A
  76:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  77:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2021-01-08:
  78:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Modified check for minimum XMCLib version
  79:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  80:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcond
  81:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  82:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
  83:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  84:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /*CODE_BLOCK_BEGIN*/
  85:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifndef ADC_MEASUREMENT_ADV_H
  86:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #define ADC_MEASUREMENT_ADV_H
  87:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  88:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  89:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**************************************************************************************************
  90:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * HEADER FILES
  91:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  92:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  93:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "GLOBAL_ADC/global_adc.h"
  94:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "adc_measurement_adv_conf.h"
  95:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  96:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  /*************************************************************************************************
  97:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * MACROS
  98:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  99:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #define ADC_MEASUREMENT_ADV_XMC_LIB_MAJOR_VERSION 2
 100:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #define ADC_MEASUREMENT_ADV_XMC_LIB_MINOR_VERSION 1
 101:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #define ADC_MEASUREMENT_ADV_XMC_LIB_PATCH_VERSION 8
 102:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 103:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if !((XMC_LIB_MAJOR_VERSION > ADC_MEASUREMENT_ADV_XMC_LIB_MAJOR_VERSION) ||\
 104:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       ((XMC_LIB_MAJOR_VERSION == ADC_MEASUREMENT_ADV_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSI
 105:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       ((XMC_LIB_MAJOR_VERSION == ADC_MEASUREMENT_ADV_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSI
 106:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #error "ADC_MEASUREMENT_ADV requires XMC Peripheral Library v2.1.8 or higher"
 107:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 108:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 109:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  /*************************************************************************************************
 110:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * ENUMS
 111:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
 112:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 113:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @ingroup ADC_MEASUREMENT_ADV_enumerations
 114:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @{
 115:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 116:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**@brief Return value of an API  */
 117:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 118:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_STATUS
 119:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 120:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_SUCCESS = 0,  /**< The API call is successful*/
 121:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_FAILURE,      /**< The API call is failed*/
 122:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED /**< APP has not been Initialized */
 123:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_STATUS_t;
 124:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 125:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 126:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 127:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The selected Request source.
 128:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 129:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_REQUEST_SOURCE
 130:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 131:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN = 0, /**< Uses the ADC_SCAN APP's, scan request source.*/
 132:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN, /**< Uses the internally consumed Scan request sou
 133:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE,    /**< Uses the ADC_QUEUE APP's, queue request source.
 134:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE,    /**< Uses the internally consumed Queue reques
 135:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_REQUEST_SOURCE_t;
 136:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 137:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 138:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The gain applied on the input signal.
 139:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 140:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_GAIN
 141:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 142:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_1 = 0U,   /**< The gain value of 1:1 is selected*/
 143:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_3 = 1U,   /**< The gain value of 1:3 is selected*/
 144:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_6 = 2U,   /**< The gain value of 1:6 is selected*/
 145:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_12 = 3U   /**< The gain value of 1:12 is selected*/
 146:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_GAIN_t;
 147:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 148:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 149:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Alignment options for the subtraction value
 150:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 151:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_SUBTRATION
 152:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 153:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,     /**< Always align result to left */
 154:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,     /**< Always align result to right */
 155:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,     /**< Always align result to left */
 156:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,     /**< Always align result to right */
 157:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,     /**< Always align result to left */
 158:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U      /**< Always align result to right */
 159:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_SUBTRATION_t;
 160:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 161:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 162:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The result of the fast compare operation.
 163:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 164:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_FAST_COMPARE
 165:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 166:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_FAST_COMPARE_LOW     = 0U, /**< The result of fast conversion is low.*/
 167:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_FAST_COMPARE_HIGH    = 1U, /**< The result of fast conversion is high.*/
 168:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_FAST_COMPARE_INVALID = 2U  /**< The result is invalid since no new results ar
 169:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_FAST_COMPARE_t;
 170:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 171:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 172:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The result of the fast compare operation.
 173:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 174:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_SYNC_SEQ
 175:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 176:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SYNC_SEQ_POWER_DOWN = 0U, /**< The result of fast conversion is low.*/
 177:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SYNC_SEQ_STSEL_CONFIG, /**< The result of fast conversion is low.*/
 178:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SYNC_SEQ_EVAL_CONFIG, /**< The result of fast conversion is low.*/
 179:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_SYNC_SEQ_t;
 180:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 181:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 182:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 183:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @}
 184:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 185:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 186:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**************************************************************************************************
 187:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** * DATA STRUCTURES
 188:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** ***************************************************************************************************
 189:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 190:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @ingroup ADC_MEASUREMENT_ADV_datastructures
 191:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @{
 192:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 193:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /*Anonymous structure/union guard start*/
 194:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if defined(__CC_ARM)
 195:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma push
 196:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma anon_unions
 197:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #elif defined(__TASKING__)
 198:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma warning 586
 199:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 200:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 201:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef void (*ADC_MEASUREMENT_ADV_EVENT_CONFIG_t)(void); /**< Function pointer to the mux configur
 202:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 203:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 204:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief NVIC Configuration structure for request source interrupt.
 205:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 206:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_NVIC_CONFIG
 207:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 208:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint32_t node_id;    /**< This indicates the NVIC Node number.*/
 209:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 210:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint32_t priority;   /**< This indicates the NVIC priority.*/
 211:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if(UC_FAMILY == XMC4)
 212:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint32_t sub_priority; /**< This indicates the NVIC sub priority in XMC4x Devices.*/
 213:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 214:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   bool interrupt_enable; /**< This flag indicates if a Interrupt has been requested.*/
 215:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_NON_DEFAULT_IRQ_SOURCE_SELECTED
 216:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t irqctrl;       /**< This indicates the service request source selected for the consumed N
 217:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 218:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_NVIC_CONFIG_t;
 219:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 220:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
 221:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 222:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Configuration Data structure of scan request source.
 223:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 224:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_SCAN
 225:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 226:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_MEASUREMENT_ADV_NVIC_CONFIG_t rs_intr_handle;    /**< Holds the ISR Handle*/
 227:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 228:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GROUP_CLASS_t iclass_config_handle;         /**< Holds the ICLASS Configurations*/
 229:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 230:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_SCAN_CONFIG_t *const scan_config_handle;    /**< Holds the LLD SCAN Structure*/
 231:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 232:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GATEMODE_t gating_mode;         /**< Gating mode configuration needed for Scan req
 233:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 234:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_SR_t srv_req_node;              /**< Source event interrupt node pointer*/
 235:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 236:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint32_t  insert_mask;                  /**< Insert Mask for the scan request source*/
 237:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 238:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t iclass_num;                      /**< Holds the ICLASS ID either ICLASS-0 or ICLASS
 239:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 240:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_SCAN_t;
 241:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 242:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 243:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
 244:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 245:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Configuration Data structure of queue request source.
 246:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 247:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_QUEUE
 248:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 249:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_MEASUREMENT_ADV_NVIC_CONFIG_t rs_intr_handle;    /**< Holds the ISR Handle*/
 250:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 251:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GROUP_CLASS_t iclass_config_handle;         /**< Holds the ICLASS Configurations*/
 252:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 253:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_QUEUE_CONFIG_t *const queue_config_handle;    /**< Holds the LLD QUEUE Structure*/
 254:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 255:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GATEMODE_t gating_mode;         /**< Gating mode configuration needed for Scan req
 256:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 257:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_SR_t srv_req_node;              /**< Source event interrupt node pointer*/
 258:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 259:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t iclass_num;                      /**< Holds the ICLASS ID either ICLASS-0 or ICLASS
 260:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 261:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_QUEUE_t;
 262:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 263:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 264:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 265:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 266:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Structure to configure the channels in the ADC_MEASUREMENT_ADV APP.
 267:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 268:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_CHANNEL
 269:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 270:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   XMC_VADC_CHANNEL_CONFIG_t *ch_handle; /**< This holds the VADC Channel LLD structures*/
 271:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 272:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   XMC_VADC_RESULT_CONFIG_t *res_handle[ADC_MEASUREMENT_ADV_RESULT_REG]; /**< This hold the VADC LLD
 273:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                                               configuration structu
 274:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 275:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ANALOG_IO_USED
 276:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ANALOG_IO_t   *analog_io_config;    /**< This hold the address of the ANALOG_IO configuration str
 277:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 278:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 279:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_FIFO_USED
 280:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t max_fifo_required;             /**< The required number of FIFO elements*/
 281:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 282:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t result_fifo_tail_number;      /**< The tail result register number if FIFO is selected. *
 283:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 284:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t group_index;          /**< This holds the group index*/
 285:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 286:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t ch_num;             /**< This Holds the Channel Number*/
 287:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 288:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if(UC_FAMILY == XMC1)
 289:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_t shs_gain_factor; /**< The required gain factor for the channel.*/
 290:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 291:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 292:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_CHANNEL_t;
 293:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 294:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 295:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Structure to configure ADC_MEASUREMENT_ADV APP.
 296:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 297:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV
 298:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 299:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_MEASUREMENT_ADV_CHANNEL_t **const channel_array;      /**< This holds an array of chann
 300:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                               by the current instance of the ADC_ME
 301:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if defined(ADC_MEASUREMENT_ADV_ADC_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED) || \
 302:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
 303:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   union
 304:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 305:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_SCAN_USED
 306:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_SCAN_ENTRY_t **const scan_entries;   /**< Holds the pointer to the scan entries. */
 307:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 308:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
 309:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_QUEUE_ENTRY_t **const queue_entries;  /**< Holds the pointer to the queue entries.*/
 310:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 311:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
 312:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_QUEUE_ENTRY_t **const local_queue_entries;  /**< Holds the pointer to the queue en
 313:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 314:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   };
 315:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 316:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 317:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_EVENT_CONFIG_t event_config; /**< This hold the pointer to the function
 318:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                       that does mux configuration. Which entails ch
 319:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                       result node configuration*/
 320:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   union
 321:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 322:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_SCAN_USED
 323:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_SCAN_t *const scan_handle;     /**< Pointer to the ADC_SCAN APP handle*/
 324:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 325:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
 326:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_QUEUE_t *const queue_handle;   /**< Pointer to the ADC_QUEUE APP handle*/
 327:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 328:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
 329:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_SCAN_t *const local_scan_handle;   /**< Pointer to the scan handle*/
 330:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 331:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
 332:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_QUEUE_t *const local_queue_handle;   /**< Pointer to the queue handle*/
 333:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 334:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   };
 335:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 336:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_t *init_state;   /**< This enumeration gives information about the sta
 337:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 338:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_t req_src; /**< The request source used by this instance of
 339:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                       the ADC_MEASUREMENT_ADV APP */
 340:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 341:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_SYNC_USED
 342:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   union
 343:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 344:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     struct
 345:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 346:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g0 :1; /**< If set the group-0 will be configured as the slave group.*/
 347:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g1 :1; /**< If set the group-1 will be configured as the slave group*/
 348:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g2 :1; /**< If set the group-2 will be configured as the slave group*/
 349:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g3 :1; /**< If set the group-3 will be configured as the slave group*/
 350:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t               :4;
 351:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     };
 352:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     uint8_t sync_slaves;
 353:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   };
 354:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 355:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 356:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t group_index; /**< The group index number for the APP*/
 357:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 358:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t total_number_of_entries; /**< Indicates the total number of entries configured in
 359:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                               the current APP instance*/
 360:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 361:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t total_number_of_channels; /**< Indicates the total number of channels configured in
 362:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                the current APP instance*/
 363:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 364:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const bool start_at_initialization; /**< This determines if the insertion of the queue or
 365:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                             scan entries should happen after initialization of the 
 366:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_SYNC_USED
 367:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const bool configure_globiclass1;  /**< Copy the master channels conversion parameters to the glo
 368:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                           Hence the slave channels are using the same features as t
 369:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 370:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_t;
 371:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 372:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 373:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @}
 374:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 375:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 376:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /*Anonymous structure/union guard end*/
 377:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if defined(__CC_ARM)
 378:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma pop
 379:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #elif defined(__TASKING__)
 380:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma warning restore
 381:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 382:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 383:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef __cplusplus
 384:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** extern "C" {
 385:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 386:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 387:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**************************************************************************************************
 388:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * API Prototypes
 389:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
 390:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 391:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @ingroup ADC_MEASUREMENT_ADV_apidoc
 392:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @{
 393:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 394:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 395:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 396:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Get ADC_MEASUREMENT_ADV APP version
 397:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 398:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 399:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 400:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * The function can be used to check application software compatibility with a
 401:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * specific version of the APP.
 402:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 403:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 404:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 405:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 406:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * #include "DAVE.h"
 407:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 408:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * int main(void) {
 409:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   DAVE_STATUS_t init_status;
 410:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   DAVE_APP_VERSION_t version;
 411:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 412:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   // Initialize ADC_MEASUREMENT_ADV APP:
 413:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   // ADC_MEASUREMENT_ADV_Init() is called from within DAVE_Init().
 414:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   init_status = DAVE_Init();
 415:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 416:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   version = ADC_MEASUREMENT_ADV_GetAppVersion();
 417:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   if (version.major != 1U) {
 418:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     // Probably, not the right version.
 419:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   }
 420:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 421:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   // More code here
 422:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   while(1) {
 423:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 424:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   }
 425:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   return (0);
 426:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * }
 427:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 428:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 429:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** DAVE_APP_VERSION_t ADC_MEASUREMENT_ADV_GetAppVersion(void);
 430:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 431:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 432:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Starts the VADC request source.
 433:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the APP handle structure<BR>
 434:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return None <BR>
 435:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 436:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 437:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * This API would start the request source of the VADC. After this API is invoked the ADC is ready 
 438:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * conversion requests.
 439:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If scan request source is selected then this API would write to GxARBPR.ASEN1 bit.
 440:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If queue request source is selected then this API would write to GxARBPR.ASEN0 bit. At the time 
 441:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * for the queue, If there was queue entry waiting in the queue buffer without waiting for a hardwa
 442:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * start the conversion of such a queue.
 443:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 444:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 445:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 446:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 447:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Initialize the ADC_MEASUREMENT_ADV APP. Set the number of required channels to 2.
 448:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto interrupts tab enable request source interrupt.
 449:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the ADC_SCAN/ADC_QUEUE APP and enable the request source interrupt.
 450:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Generate the code and build.
 451:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Replace this in the main.c.
 452:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
 453:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 454:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** uint16_t result[2];
 455:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void adc_measurement_adv_callback(void)
 456:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 457:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 458:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 459:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 460:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 461:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** int main(void)
 462:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 463:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   DAVE_STATUS_t status;
 464:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 465:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   status = DAVE_Init();           // Initialization of DAVE APPs
 466:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 467:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   if(status == DAVE_STATUS_FAILURE)
 468:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 469:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Placeholder for error handler code. The while loop below can be replaced with an user error 
 470:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 471:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 472:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     while(1U)
 473:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 474:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 475:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     }
 476:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 477:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 478:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the selected request source
 479:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_StartADC(&ADC_MEASUREMENT_ADV_0);
 480:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 481:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   while(1U)
 482:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 483:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Continuously re-trigger the scan conversion sequence
 484:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
 485:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 486:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 487:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 488:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 489:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr);
 490:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 491:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 492:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Starts the conversion of the required channels
 493:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the APP handle structure<BR>
 494:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return None <BR>
 495:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 496:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 497:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Trigger a load event for the required channels thus starting the conversion of the ADC channels.
 498:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If scan request source is selected then this API would write to GxASMR.LDEV bit, causing the con
 499:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If queue request source is selected then this API would write to GxQMR0.TREV bit. At the time of
 500:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * for the queue. If there was queue entry waiting in the queue buffer for a hardware trigger, writ
 501:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * triggers the conversion for that entry.
 502:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 503:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 504:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 505:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 506:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Initialize the ADC_MEASUREMENT_ADV APP. Set the number of required channels to 2.
 507:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto interrupts tab enable request source interrupt.
 508:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the ADC_SCAN/ADC_QUEUE APP and enable the request source interrupt.
 509:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Generate the code and build.
 510:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Replace this in the main.c.
 511:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
 512:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 513:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** uint16_t result[2];
 514:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void adc_measurement_adv_callback(void)
 515:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 516:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 517:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 518:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 519:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 520:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** int main(void)
 521:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 522:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   DAVE_STATUS_t status;
 523:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 524:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   status = DAVE_Init();           // Initialization of DAVE APPs
 525:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 526:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   if(status == DAVE_STATUS_FAILURE)
 527:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 528:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Placeholder for error handler code. The while loop below can be replaced with an user error 
 529:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 530:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 531:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     while(1U)
 532:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 533:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 534:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     }
 535:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 536:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 537:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the selected request source
 538:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_StartADC(&ADC_MEASUREMENT_ADV_0);
 539:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 540:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   while(1U)
 541:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 542:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Continuously re-trigger the scan conversion sequence
 543:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
 544:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 545:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 546:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 547:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 548:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void ADC_MEASUREMENT_ADV_SoftwareTrigger(const ADC_MEASUREMENT_ADV_t *const handle_ptr);
 549:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 550:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 551:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Initializes the ADC_MEASUREMENT_ADV APP Instance
 552:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the APP handle structure<BR>
 553:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return None <BR>
 554:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 555:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 556:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Initialize the ADC and all the required configurations. A call to this API would initialize the 
 557:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * or the scan request source depending on the GUI selection. The initialization is taken up by cal
 558:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * or ADC_SCAN_Init(). Following this the synchronous conversion related initializations are taken 
 559:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * initialization the slave groups and the master group are powered down and either GxSYNCTR.STSEL 
 560:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * GxSYNCTR.EVALRy (if master) are configured. After the sync related configurations are completed 
 561:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * alone is powered on. Following this the result event or channel event related service request no
 562:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * are done (if required). Then the GxCHCTR configurations are completed. After the channel initial
 563:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * result handling initializations are done. This entails configuring the GxRCR registers for resul
 564:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * accumulation, subtraction and FIFO. After all these initialization are completed the channels co
 565:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * in the GUI is inserted into the appropriate ADC_QUEUE or ADC_SCAN APP buffer. If the GUI check b
 566:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * "Insert channels at initialization" is enable then these entries is pushed to the Hardware.
 567:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 568:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 569:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 570:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 571:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * #include "DAVE.h"
 572:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * int main(void)
 573:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * {
 574:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *    DAVE_Init(); //ADC_MEASUREMENT_ADV_Init is called within DAVE_Init
 575:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *    return 0;
 576:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * }
 577:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 578:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 579:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr
 580:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 581:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 582:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Returns the conversion result
 583:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the channel handle structure.
 584:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *                   (Use the channel handle related macros which are defined in adc_measure_adv_co
 585:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return uint16_t conversion result.<BR>
 586:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *                                Range: [ 0x0 to 0xFFF] without any filters/ accumulation/ subtrac
 587:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 588:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 589:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Return the converted result stored in the result register [GxRESy.RESULT].
 590:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * In the APP each channel is configured to a particular group result register (excluding FIFO). Th
 591:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * is defined in the channel handle structure @ref ADC_MEASUREMENT_ADV_CHANNEL_t. Hence this API sh
 592:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * with a pointer to the channel handle of type  @ref ADC_MEASUREMENT_ADV_CHANNEL_t (Directly use t
 593:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * related macros which are defined in adc_measure_adv_conf.h).
 594:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 595:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Note: </b><br>
 596:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * This API is not Applicable for reading the result from the result FIFO registers
 597:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Use @ref ADC_MEASUREMENT_ADV_GetFifoResult in order to read the FIFO result.
 598:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 599:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 600:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 601:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 602:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Initialize the ADC_MEASUREMENT_ADV APP. Set the number of required channels to 2.
 603:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Select the request source APP from ADC_SCAN to ADC_QUEUE.
 604:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the sequence plan and select Channel_A at position-0 and Channel_B at position-1.
 605:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Enable Wait for trigger for the Channel_A.
 606:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto interrupts tab enable request source interrupt.
 607:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the ADC_QUEUE APP and enable the request source interrupt.
 608:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Generate the code and build.
 609:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Replace this in the main.c.
 610:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
 611:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 612:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** uint16_t result[2];
 613:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void adc_measurement_adv_callback(void)
 614:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 615:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Use the channel handle parameter in this format "<APP Name>_<CHANNEL Name>"
 616:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 617:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 618:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 619:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 620:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** int main(void)
 621:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 622:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   DAVE_STATUS_t status;
 623:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 624:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   status = DAVE_Init();           // Initialization of DAVE APPs
 625:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 626:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   if(status == DAVE_STATUS_FAILURE)
 627:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 628:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Placeholder for error handler code. The while loop below can be replaced with an user error 
 629:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 630:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 631:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     while(1U)
 632:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 633:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 634:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     }
 635:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 636:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 637:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the selected request source
 638:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_StartADC(&ADC_MEASUREMENT_ADV_0);
 639:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 640:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the queue conversion sequence
 641:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
 642:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 643:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   while(1U)
 644:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 645:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 646:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 647:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 648:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 649:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** __STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const h
 650:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
  75              	 .loc 2 650 0
  76              	 .cfi_startproc
  77              	 
  78              	 
  79 0000 80B5     	 push {r7,lr}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 8
  82              	 .cfi_offset 7,-8
  83              	 .cfi_offset 14,-4
  84 0002 84B0     	 sub sp,sp,#16
  85              	.LCFI7:
  86              	 .cfi_def_cfa_offset 24
  87 0004 00AF     	 add r7,sp,#0
  88              	.LCFI8:
  89              	 .cfi_def_cfa_register 7
  90 0006 7860     	 str r0,[r7,#4]
 651:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint16_t result;
 652:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
 653:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL));
 654:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 655:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
  91              	 .loc 2 655 0
  92 0008 7B68     	 ldr r3,[r7,#4]
  93 000a 1B7B     	 ldrb r3,[r3,#12]
  94 000c 1A46     	 mov r2,r3
  95 000e 0A4B     	 ldr r3,.L5
  96 0010 53F82220 	 ldr r2,[r3,r2,lsl#2]
 656:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                     (uint32_t) handle_ptr->ch_handle->result_reg_number);
  97              	 .loc 2 656 0
  98 0014 7B68     	 ldr r3,[r7,#4]
  99 0016 1B68     	 ldr r3,[r3]
 100 0018 9B78     	 ldrb r3,[r3,#2]
 101 001a C3F30303 	 ubfx r3,r3,#0,#4
 102 001e DBB2     	 uxtb r3,r3
 655:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                     (uint32_t) handle_ptr->ch_handle->result_reg_number);
 103              	 .loc 2 655 0
 104 0020 1046     	 mov r0,r2
 105 0022 1946     	 mov r1,r3
 106 0024 FFF7FEFF 	 bl XMC_VADC_GROUP_GetResult
 107 0028 0346     	 mov r3,r0
 108 002a FB81     	 strh r3,[r7,#14]
 657:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   return(result);
 109              	 .loc 2 657 0
 110 002c FB89     	 ldrh r3,[r7,#14]
 658:C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 111              	 .loc 2 658 0
 112 002e 1846     	 mov r0,r3
 113 0030 1037     	 adds r7,r7,#16
 114              	.LCFI9:
 115              	 .cfi_def_cfa_offset 8
 116 0032 BD46     	 mov sp,r7
 117              	.LCFI10:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 0034 80BD     	 pop {r7,pc}
 121              	.L6:
 122 0036 00BF     	 .align 2
 123              	.L5:
 124 0038 00000000 	 .word group_ptrs
 125              	 .cfi_endproc
 126              	.LFE267:
 128              	 .global counter
 129              	 .section .bss.counter,"aw",%nobits
 132              	counter:
 133 0000 00       	 .space 1
 134              	 .global single_data
 135              	 .section .bss.single_data,"aw",%nobits
 136              	 .align 1
 139              	single_data:
 140 0000 0000     	 .space 2
 141              	 .global amplitude
 142              	 .section .data.amplitude,"aw",%progbits
 143              	 .align 1
 146              	amplitude:
 147 0000 0008     	 .short 2048
 148              	 .global offset
 149              	 .section .bss.offset,"aw",%nobits
 150              	 .align 1
 153              	offset:
 154 0000 0000     	 .space 2
 155              	 .global x
 156              	 .section .bss.x,"aw",%nobits
 157              	 .align 2
 160              	x:
 161 0000 00000000 	 .space 4
 162              	 .global pi
 163              	 .section .data.pi,"aw",%progbits
 164              	 .align 2
 167              	pi:
 168 0000 DB0FC940 	 .word 1086918619
 169              	 .section .text.main,"ax",%progbits
 170              	 .align 2
 171              	 .global main
 172              	 .thumb
 173              	 .thumb_func
 175              	main:
 176              	.LFB360:
 177              	 .file 3 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2024 Aug 25 02:40:55
   5:../main.c     ****  *  Author: admin
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** 
   9:../main.c     **** 
  10:../main.c     **** 
  11:../main.c     **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
  12:../main.c     **** #include <math.h>
  13:../main.c     ****  uint8_t counter =0;
  14:../main.c     ****  uint16_t single_data =0;
  15:../main.c     ****  uint16_t amplitude =2048;
  16:../main.c     ****  uint16_t offset =0;
  17:../main.c     ****  float x=0;
  18:../main.c     ****  //float pi=3.1415926535;
  19:../main.c     ****  float pi=6.2831853071;
  20:../main.c     **** /**
  21:../main.c     **** 
  22:../main.c     ****  * @brief main() - Application entry point
  23:../main.c     ****  *
  24:../main.c     ****  * <b>Details of function</b><br>
  25:../main.c     ****  * This routine is the application entry point. It is invoked by the device startup code. It is res
  26:../main.c     ****  * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder fo
  27:../main.c     ****  * code.
  28:../main.c     ****  */
  29:../main.c     **** 
  30:../main.c     **** int main(void)
  31:../main.c     **** {
 178              	 .loc 3 31 0
 179              	 .cfi_startproc
 180              	 
 181              	 
 182 0000 80B5     	 push {r7,lr}
 183              	.LCFI11:
 184              	 .cfi_def_cfa_offset 8
 185              	 .cfi_offset 7,-8
 186              	 .cfi_offset 14,-4
 187 0002 82B0     	 sub sp,sp,#8
 188              	.LCFI12:
 189              	 .cfi_def_cfa_offset 16
 190 0004 00AF     	 add r7,sp,#0
 191              	.LCFI13:
 192              	 .cfi_def_cfa_register 7
  32:../main.c     ****   DAVE_STATUS_t status;
  33:../main.c     **** 
  34:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 193              	 .loc 3 34 0
 194 0006 FFF7FEFF 	 bl DAVE_Init
 195 000a 0346     	 mov r3,r0
 196 000c FB71     	 strb r3,[r7,#7]
  35:../main.c     **** 
  36:../main.c     ****   if (status != DAVE_STATUS_SUCCESS)
 197              	 .loc 3 36 0
 198 000e FB79     	 ldrb r3,[r7,#7]
 199 0010 002B     	 cmp r3,#0
 200 0012 00D0     	 beq .L8
 201              	.L9:
  37:../main.c     ****   {
  38:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
  39:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
  40:../main.c     **** 
  41:../main.c     ****     while(1U)
  42:../main.c     ****     {
  43:../main.c     **** 
  44:../main.c     ****     }
 202              	 .loc 3 44 0 discriminator 1
 203 0014 FEE7     	 b .L9
 204              	.L8:
  45:../main.c     ****   }
  46:../main.c     **** 
  47:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
  48:../main.c     ****   while(1U)
  49:../main.c     ****   {
  50:../main.c     **** 
  51:../main.c     ****   }
 205              	 .loc 3 51 0 discriminator 2
 206 0016 FEE7     	 b .L8
 207              	 .cfi_endproc
 208              	.LFE360:
 210              	 .global __aeabi_f2d
 211              	 .global __aeabi_i2d
 212              	 .global __aeabi_dmul
 213              	 .global __aeabi_dadd
 214              	 .global __aeabi_d2uiz
 215              	 .section .text.VADC0_G0_1_IRQHandler,"ax",%progbits
 216              	 .align 2
 217              	 .global VADC0_G0_1_IRQHandler
 218              	 .thumb
 219              	 .thumb_func
 221              	VADC0_G0_1_IRQHandler:
 222              	.LFB361:
  52:../main.c     **** }
  53:../main.c     **** void ADC_Result_ISR()
  54:../main.c     **** {
 223              	 .loc 3 54 0
 224              	 .cfi_startproc
 225              	 
 226              	 
 227 0000 B0B5     	 push {r4,r5,r7,lr}
 228              	.LCFI14:
 229              	 .cfi_def_cfa_offset 16
 230              	 .cfi_offset 4,-16
 231              	 .cfi_offset 5,-12
 232              	 .cfi_offset 7,-8
 233              	 .cfi_offset 14,-4
 234 0002 00AF     	 add r7,sp,#0
 235              	.LCFI15:
 236              	 .cfi_def_cfa_register 7
  55:../main.c     **** 	DAC_SingleValue_SetValue_u16(&DAC_0,single_data);
 237              	 .loc 3 55 0
 238 0004 3F4B     	 ldr r3,.L12
 239 0006 1B88     	 ldrh r3,[r3]
 240 0008 3F48     	 ldr r0,.L12+4
 241 000a 1946     	 mov r1,r3
 242 000c FFF7FEFF 	 bl DAC_SingleValue_SetValue_u16
  56:../main.c     **** 
  57:../main.c     **** 	amplitude=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 243              	 .loc 3 57 0
 244 0010 3E48     	 ldr r0,.L12+8
 245 0012 FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 246 0016 0346     	 mov r3,r0
 247 0018 1A46     	 mov r2,r3
 248 001a 3D4B     	 ldr r3,.L12+12
 249 001c 1A80     	 strh r2,[r3]
  58:../main.c     **** 	amplitude=amplitude/2;
 250              	 .loc 3 58 0
 251 001e 3C4B     	 ldr r3,.L12+12
 252 0020 1B88     	 ldrh r3,[r3]
 253 0022 5B08     	 lsrs r3,r3,#1
 254 0024 9AB2     	 uxth r2,r3
 255 0026 3A4B     	 ldr r3,.L12+12
 256 0028 1A80     	 strh r2,[r3]
  59:../main.c     **** 	offset=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 257              	 .loc 3 59 0
 258 002a 3A48     	 ldr r0,.L12+16
 259 002c FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 260 0030 0346     	 mov r3,r0
 261 0032 1A46     	 mov r2,r3
 262 0034 384B     	 ldr r3,.L12+20
 263 0036 1A80     	 strh r2,[r3]
  60:../main.c     **** 	offset=offset/4;
 264              	 .loc 3 60 0
 265 0038 374B     	 ldr r3,.L12+20
 266 003a 1B88     	 ldrh r3,[r3]
 267 003c 9B08     	 lsrs r3,r3,#2
 268 003e 9AB2     	 uxth r2,r3
 269 0040 354B     	 ldr r3,.L12+20
 270 0042 1A80     	 strh r2,[r3]
  61:../main.c     **** 
  62:../main.c     **** 	counter++;
 271              	 .loc 3 62 0
 272 0044 354B     	 ldr r3,.L12+24
 273 0046 1B78     	 ldrb r3,[r3]
 274 0048 0133     	 adds r3,r3,#1
 275 004a DAB2     	 uxtb r2,r3
 276 004c 334B     	 ldr r3,.L12+24
 277 004e 1A70     	 strb r2,[r3]
  63:../main.c     **** 	x =pi/200*counter;
 278              	 .loc 3 63 0
 279 0050 334B     	 ldr r3,.L12+28
 280 0052 D3ED007A 	 flds s15,[r3]
 281 0056 9FED337A 	 flds s14,.L12+32
 282 005a 87EE877A 	 fdivs s14,s15,s14
 283 005e 2F4B     	 ldr r3,.L12+24
 284 0060 1B78     	 ldrb r3,[r3]
 285 0062 07EE903A 	 fmsr s15,r3
 286 0066 F8EEE77A 	 fsitos s15,s15
 287 006a 67EE277A 	 fmuls s15,s14,s15
 288 006e 2E4B     	 ldr r3,.L12+36
 289 0070 C3ED007A 	 fsts s15,[r3]
  64:../main.c     **** 	single_data = (uint16_t)(sin(x)*amplitude+amplitude+offset);
 290              	 .loc 3 64 0
 291 0074 2C4B     	 ldr r3,.L12+36
 292 0076 1B68     	 ldr r3,[r3]
 293 0078 1846     	 mov r0,r3
 294 007a FFF7FEFF 	 bl __aeabi_f2d
 295 007e 0246     	 mov r2,r0
 296 0080 0B46     	 mov r3,r1
 297 0082 1046     	 mov r0,r2
 298 0084 1946     	 mov r1,r3
 299 0086 FFF7FEFF 	 bl sin
 300 008a 0446     	 mov r4,r0
 301 008c 0D46     	 mov r5,r1
 302 008e 204B     	 ldr r3,.L12+12
 303 0090 1B88     	 ldrh r3,[r3]
 304 0092 1846     	 mov r0,r3
 305 0094 FFF7FEFF 	 bl __aeabi_i2d
 306 0098 0246     	 mov r2,r0
 307 009a 0B46     	 mov r3,r1
 308 009c 2046     	 mov r0,r4
 309 009e 2946     	 mov r1,r5
 310 00a0 FFF7FEFF 	 bl __aeabi_dmul
 311 00a4 0246     	 mov r2,r0
 312 00a6 0B46     	 mov r3,r1
 313 00a8 1446     	 mov r4,r2
 314 00aa 1D46     	 mov r5,r3
 315 00ac 184B     	 ldr r3,.L12+12
 316 00ae 1B88     	 ldrh r3,[r3]
 317 00b0 1846     	 mov r0,r3
 318 00b2 FFF7FEFF 	 bl __aeabi_i2d
 319 00b6 0246     	 mov r2,r0
 320 00b8 0B46     	 mov r3,r1
 321 00ba 2046     	 mov r0,r4
 322 00bc 2946     	 mov r1,r5
 323 00be FFF7FEFF 	 bl __aeabi_dadd
 324 00c2 0246     	 mov r2,r0
 325 00c4 0B46     	 mov r3,r1
 326 00c6 1446     	 mov r4,r2
 327 00c8 1D46     	 mov r5,r3
 328 00ca 134B     	 ldr r3,.L12+20
 329 00cc 1B88     	 ldrh r3,[r3]
 330 00ce 1846     	 mov r0,r3
 331 00d0 FFF7FEFF 	 bl __aeabi_i2d
 332 00d4 0246     	 mov r2,r0
 333 00d6 0B46     	 mov r3,r1
 334 00d8 2046     	 mov r0,r4
 335 00da 2946     	 mov r1,r5
 336 00dc FFF7FEFF 	 bl __aeabi_dadd
 337 00e0 0246     	 mov r2,r0
 338 00e2 0B46     	 mov r3,r1
 339 00e4 1046     	 mov r0,r2
 340 00e6 1946     	 mov r1,r3
 341 00e8 FFF7FEFF 	 bl __aeabi_d2uiz
 342 00ec 0346     	 mov r3,r0
 343 00ee 9AB2     	 uxth r2,r3
 344 00f0 044B     	 ldr r3,.L12
 345 00f2 1A80     	 strh r2,[r3]
  65:../main.c     **** 
  66:../main.c     **** 	if(counter==200) counter=0;
 346              	 .loc 3 66 0
 347 00f4 094B     	 ldr r3,.L12+24
 348 00f6 1B78     	 ldrb r3,[r3]
 349 00f8 C82B     	 cmp r3,#200
 350 00fa 02D1     	 bne .L10
 351              	 .loc 3 66 0 is_stmt 0 discriminator 1
 352 00fc 074B     	 ldr r3,.L12+24
 353 00fe 0022     	 movs r2,#0
 354 0100 1A70     	 strb r2,[r3]
 355              	.L10:
  67:../main.c     **** }
 356              	 .loc 3 67 0 is_stmt 1
 357 0102 B0BD     	 pop {r4,r5,r7,pc}
 358              	.L13:
 359              	 .align 2
 360              	.L12:
 361 0104 00000000 	 .word single_data
 362 0108 00000000 	 .word DAC_0
 363 010c 00000000 	 .word ADC_MEASUREMENT_ADV_0_Channel_A_handle
 364 0110 00000000 	 .word amplitude
 365 0114 00000000 	 .word ADC_MEASUREMENT_ADV_0_Channel_B_handle
 366 0118 00000000 	 .word offset
 367 011c 00000000 	 .word counter
 368 0120 00000000 	 .word pi
 369 0124 00004843 	 .word 1128792064
 370 0128 00000000 	 .word x
 371              	 .cfi_endproc
 372              	.LFE361:
 374              	 .text
 375              	.Letext0:
 376              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 377              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 378              	 .file 6 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 379              	 .file 7 "C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc/xmc4_gpio.h"
 380              	 .file 8 "C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ANALOG_IO/analog_io.h"
 381              	 .file 9 "C:/work_mari/XMC4800/DAC_ADC/Libraries/XMCLib/inc/xmc_dac.h"
 382              	 .file 10 "C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/DAC/dac.h"
 383              	 .file 11 "C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/DAVE.h"
 384              	 .file 12 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include/cmsis_gcc.h"
 385              	 .file 13 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Include/core_cm4.h"
 386              	 .file 14 "C:/work_mari/XMC4800/DAC_ADC/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
 387              	 .file 15 "C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/ADC_MEASUREMENT_ADV/adc_measurement_adv_extern.h"
 388              	 .file 16 "C:/work_mari/XMC4800/DAC_ADC/Dave/Generated/DAC/dac_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_VADC_GROUP_GetResult:00000000 $t
    {standard input}:24     .text.XMC_VADC_GROUP_GetResult:00000000 XMC_VADC_GROUP_GetResult
    {standard input}:68     .text.ADC_MEASUREMENT_ADV_GetResult:00000000 $t
    {standard input}:72     .text.ADC_MEASUREMENT_ADV_GetResult:00000000 ADC_MEASUREMENT_ADV_GetResult
    {standard input}:124    .text.ADC_MEASUREMENT_ADV_GetResult:00000038 $d
    {standard input}:132    .bss.counter:00000000 counter
    {standard input}:133    .bss.counter:00000000 $d
    {standard input}:139    .bss.single_data:00000000 single_data
    {standard input}:136    .bss.single_data:00000000 $d
    {standard input}:146    .data.amplitude:00000000 amplitude
    {standard input}:143    .data.amplitude:00000000 $d
    {standard input}:153    .bss.offset:00000000 offset
    {standard input}:150    .bss.offset:00000000 $d
    {standard input}:160    .bss.x:00000000 x
    {standard input}:157    .bss.x:00000000 $d
    {standard input}:167    .data.pi:00000000 pi
    {standard input}:164    .data.pi:00000000 $d
    {standard input}:170    .text.main:00000000 $t
    {standard input}:175    .text.main:00000000 main
    {standard input}:216    .text.VADC0_G0_1_IRQHandler:00000000 $t
    {standard input}:221    .text.VADC0_G0_1_IRQHandler:00000000 VADC0_G0_1_IRQHandler
    {standard input}:361    .text.VADC0_G0_1_IRQHandler:00000104 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
group_ptrs
DAVE_Init
__aeabi_f2d
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2uiz
DAC_SingleValue_SetValue_u16
sin
DAC_0
ADC_MEASUREMENT_ADV_0_Channel_A_handle
ADC_MEASUREMENT_ADV_0_Channel_B_handle
