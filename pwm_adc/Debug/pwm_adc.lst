
pwm_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000289c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         000000d0  1ffe8800  0c00289c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000010  1ffe88d0  0c00296c  000108d0  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000bd8  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015188  00000000  00000000  000114a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002242  00000000  00000000  00026630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004dda  00000000  00000000  00028872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000031c4  00000000  00000000  0002d64c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008df9  00000000  00000000  00030810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068e8  00000000  00000000  00039609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a68  00000000  00000000  0003fef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000004d2  00000000  00000000  00040959  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 51 1f 00 08 99 02 00 08 99 02 00 08     ....Q...........
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00289c 	.word	0x0c00289c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000000d0 	.word	0x000000d0
 8000254:	0c00289c 	.word	0x0c00289c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe88d0 	.word	0x1ffe88d0
 8000264:	00000010 	.word	0x00000010
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800278d 	.word	0x0800278d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001f35 	.word	0x08001f35

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f001 fbd3 	bl	8001a58 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f001 fc4f 	bl	8001b54 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 fc1a 	bl	8001b18 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_GetMirrorStatus+0x14>)
 80004e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	50004000 	.word	0x50004000

080004f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004fc:	f7ff fede 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <XMC_SCU_lDelay+0x3c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <XMC_SCU_lDelay+0x40>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0c9a      	lsrs	r2, r3, #18
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e003      	b.n	8000522 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800051a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f7      	bcc.n	800051a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2003ffc0 	.word	0x2003ffc0
 8000534:	431bde83 	.word	0x431bde83

08000538 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	50004074 	.word	0x50004074

08000550 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	50004074 	.word	0x50004074

0800056c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f891 	bl	800069c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800057a:	f000 fa83 	bl	8000a84 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000586:	f000 fabb 	bl	8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800058a:	bf00      	nop
 800058c:	f000 faa6 	bl	8000adc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f7      	bne.n	800058c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a5b      	ldrb	r3, [r3, #9]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8f5 	bl	8000790 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005a6:	bf00      	nop
 80005a8:	f7ff ff98 	bl	80004dc <XMC_SCU_GetMirrorStatus>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1fa      	bne.n	80005a8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa3e 	bl	8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7c1b      	ldrb	r3, [r3, #16]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f903 	bl	80007cc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7c5b      	ldrb	r3, [r3, #17]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f926 	bl	800081c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7c9b      	ldrb	r3, [r3, #18]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f90d 	bl	80007f4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7cdb      	ldrb	r3, [r3, #19]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f930 	bl	8000844 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00a      	beq.n	8000602 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ec:	f000 fac0 	bl	8000b70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005f0:	bf00      	nop
 80005f2:	f000 fae5 	bl	8000bc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d017      	beq.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000618:	f000 faf6 	bl	8000c08 <XMC_SCU_CLOCK_DisableSystemPll>
 800061c:	e014      	b.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800061e:	f000 fae3 	bl	8000be8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8899      	ldrh	r1, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062e:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000634:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	462a      	mov	r2, r5
 8000642:	4623      	mov	r3, r4
 8000644:	f000 faf0 	bl	8000c28 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d103      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000652:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000656:	f000 f821 	bl	800069c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800065a:	f7ff fe2f 	bl	80002bc <SystemCoreClockUpdate>
}
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}

08000664 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	0f1b      	lsrs	r3, r3, #28
 8000670:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000678:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	461a      	mov	r2, r3
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000688:	4413      	add	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	50004414 	.word	0x50004414

0800069c <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	50004600 	.word	0x50004600

080006c4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006cc:	4906      	ldr	r1, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	50004600 	.word	0x50004600

080006ec <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	50004600 	.word	0x50004600

08000714 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d108      	bne.n	8000736 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	e007      	b.n	8000746 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	60d3      	str	r3, [r2, #12]
  }
}
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	50004710 	.word	0x50004710

08000754 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800075e:	bf00      	nop
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000762:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f8      	bne.n	8000760 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800076e:	4907      	ldr	r1, [pc, #28]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000778:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077a:	4313      	orrs	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	50004000 	.word	0x50004000
 800078c:	50004300 	.word	0x50004300

08000790 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079a:	bf00      	nop
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800079e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f8      	bne.n	800079c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004000 	.word	0x50004000
 80007c8:	50004300 	.word	0x50004300

080007cc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007d4:	4906      	ldr	r1, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	50004600 	.word	0x50004600

080007f4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080a:	4313      	orrs	r3, r2
 800080c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	50004600 	.word	0x50004600

0800081c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000832:	4313      	orrs	r3, r2
 8000834:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004600 	.word	0x50004600

08000844 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085a:	4313      	orrs	r3, r2
 800085c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	50004600 	.word	0x50004600

0800086c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000882:	4313      	orrs	r3, r2
 8000884:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	50004600 	.word	0x50004600

08000894 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	50004600 	.word	0x50004600

080008bc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d2:	4313      	orrs	r3, r2
 80008d4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	50004600 	.word	0x50004600

080008e4 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80008fa:	4313      	orrs	r3, r2
 80008fc:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	50004600 	.word	0x50004600

0800090c <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	6053      	str	r3, [r2, #4]
}
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	50004600 	.word	0x50004600

0800092c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	0f1b      	lsrs	r3, r3, #28
 8000938:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000940:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	461a      	mov	r2, r3
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000950:	4413      	add	r3, r2
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004648 	.word	0x50004648

08000964 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000972:	f023 0302 	bic.w	r3, r3, #2
 8000976:	6153      	str	r3, [r2, #20]
}
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	50004710 	.word	0x50004710

08000984 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800098e:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800099a:	bf00      	nop
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009b4:	491e      	ldr	r1, [pc, #120]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009c2:	4313      	orrs	r3, r2
 80009c4:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009c6:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	f023 0310 	bic.w	r3, r3, #16
 80009dc:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009ea:	bf00      	nop
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a04:	bf00      	nop
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f9      	bne.n	8000a06 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a1c:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	60da      	str	r2, [r3, #12]
}
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	50004710 	.word	0x50004710
 8000a34:	50004160 	.word	0x50004160

08000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a4c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10e      	bne.n	8000a72 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a5e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f7ff fd47 	bl	80004f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a70:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f7ff fd3e 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	50004710 	.word	0x50004710

08000a84 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a9a:	bf00      	nop
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f9      	beq.n	8000a9c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00a      	beq.n	8000aca <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000abc:	bf00      	nop
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f9      	bne.n	8000abe <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	50004200 	.word	0x50004200
 8000ad8:	50004400 	.word	0x50004400

08000adc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf0c      	ite	eq
 8000aec:	2301      	moveq	r3, #1
 8000aee:	2300      	movne	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	50004300 	.word	0x50004300

08000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b08:	f7ff fd22 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b16:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b18:	bf00      	nop
 8000b1a:	f7ff fd0d 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f8      	beq.n	8000b1a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b2c:	f7ff fd10 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b36:	bf00      	nop
 8000b38:	f7ff fcfe 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f8      	beq.n	8000b38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b4a:	f7ff fd01 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b5a:	bf00      	nop
 8000b5c:	f7ff fcec 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	50004300 	.word	0x50004300

08000b70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b70:	b5b0      	push	{r4, r5, r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b74:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b80:	4d0d      	ldr	r5, [pc, #52]	; (8000bb8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b8a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b8e:	f000 ffc3 	bl	8001b18 <OSCHP_GetFrequency>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b96:	fba3 2302 	umull	r2, r3, r3, r2
 8000b9a:	0d1b      	lsrs	r3, r3, #20
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ba6:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bae:	6053      	str	r3, [r2, #4]
}
 8000bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	50004710 	.word	0x50004710
 8000bb8:	50004700 	.word	0x50004700
 8000bbc:	6b5fca6b 	.word	0x6b5fca6b

08000bc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bcc:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	50004710 	.word	0x50004710

08000be8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	f023 0302 	bic.w	r3, r3, #2
 8000bfa:	6053      	str	r3, [r2, #4]
}
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	50004710 	.word	0x50004710

08000c08 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c0c:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6053      	str	r3, [r2, #4]
}
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	50004710 	.word	0x50004710

08000c28 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4603      	mov	r3, r0
 8000c34:	81fb      	strh	r3, [r7, #14]
 8000c36:	460b      	mov	r3, r1
 8000c38:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fd69 	bl	8000714 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f040 808b 	bne.w	8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c50:	f000 ff62 	bl	8001b18 <OSCHP_GetFrequency>
 8000c54:	4602      	mov	r2, r0
 8000c56:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c58:	fba3 2302 	umull	r2, r3, r3, r2
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	059b      	lsls	r3, r3, #22
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e002      	b.n	8000c6a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c64:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c68:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	fb02 f203 	mul.w	r2, r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	4a4b      	ldr	r2, [pc, #300]	; (8000dac <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	0d9b      	lsrs	r3, r3, #22
 8000c86:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c88:	4a49      	ldr	r2, [pc, #292]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c94:	bf00      	nop
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca4:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cae:	4940      	ldr	r1, [pc, #256]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb0:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000cb6:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	3a01      	subs	r2, #1
 8000cbc:	0212      	lsls	r2, r2, #8
 8000cbe:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cc6:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cd2:	4a37      	ldr	r2, [pc, #220]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd4:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cde:	4a34      	ldr	r2, [pc, #208]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce0:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f023 0310 	bic.w	r3, r3, #16
 8000ce8:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cf6:	bf00      	nop
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f9      	beq.n	8000cf8 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d04:	4a2a      	ldr	r2, [pc, #168]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d10:	bf00      	nop
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f9      	bne.n	8000d12 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	0d9b      	lsrs	r3, r3, #22
 8000d2a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d2c:	6a3a      	ldr	r2, [r7, #32]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d202      	bcs.n	8000d3a <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f000 f845 	bl	8000dc4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	085b      	lsrs	r3, r3, #1
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	0d9b      	lsrs	r3, r3, #22
 8000d48:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d4a:	6a3a      	ldr	r2, [r7, #32]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d202      	bcs.n	8000d58 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d52:	6938      	ldr	r0, [r7, #16]
 8000d54:	f000 f836 	bl	8000dc4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d58:	6a38      	ldr	r0, [r7, #32]
 8000d5a:	f000 f833 	bl	8000dc4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d5e:	e01c      	b.n	8000d9a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d60:	4913      	ldr	r1, [pc, #76]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d72:	bf00      	nop
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f9      	beq.n	8000d74 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d8c:	bf00      	nop
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f9      	beq.n	8000d8e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	60da      	str	r2, [r3, #12]
}
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	aaaaaaab 	.word	0xaaaaaaab
 8000db0:	50004710 	.word	0x50004710
 8000db4:	f08080ff 	.word	0xf08080ff
 8000db8:	88888889 	.word	0x88888889
 8000dbc:	b60b60b7 	.word	0xb60b60b7
 8000dc0:	50004160 	.word	0x50004160

08000dc4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dcc:	490b      	ldr	r1, [pc, #44]	; (8000dfc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000de0:	bf00      	nop
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000dee:	2032      	movs	r0, #50	; 0x32
 8000df0:	f7ff fb80 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	50004710 	.word	0x50004710

08000e00 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	60da      	str	r2, [r3, #12]
}
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	611a      	str	r2, [r3, #16]
}
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <XMC_CCU8_lDeassertReset+0x30>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d103      	bne.n	8000e4c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000e44:	2080      	movs	r0, #128	; 0x80
 8000e46:	f7ff fc0d 	bl	8000664 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e4a:	e007      	b.n	8000e5c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <XMC_CCU8_lDeassertReset+0x34>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d103      	bne.n	8000e5c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000e54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e58:	f7ff fc04 	bl	8000664 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40024000 	.word	0x40024000

08000e6c <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <XMC_CCU8_lUngateClock+0x30>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d103      	bne.n	8000e84 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	f7ff fd55 	bl	800092c <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000e82:	e007      	b.n	8000e94 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <XMC_CCU8_lUngateClock+0x34>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d103      	bne.n	8000e94 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8000e8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e90:	f7ff fd4c 	bl	800092c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40024000 	.word	0x40024000

08000ea4 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000eac:	2010      	movs	r0, #16
 8000eae:	f7ff fd2d 	bl	800090c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffda 	bl	8000e6c <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffbb 	bl	8000e34 <XMC_CCU8_lDeassertReset>
#endif
}
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ffe7 	bl	8000ea4 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff92 	bl	8000e00 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	039b      	lsls	r3, r3, #14
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	601a      	str	r2, [r3, #0]
}
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff86 	bl	8000e1c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	7b5b      	ldrb	r3, [r3, #13]
 8000f1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	051a      	lsls	r2, r3, #20
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	7b1b      	ldrb	r3, [r3, #12]
 8000f2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	7b1b      	ldrb	r3, [r3, #12]
 8000f3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	7b5b      	ldrb	r3, [r3, #13]
 8000f4c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f083 0214 	eor.w	r2, r3, #20
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop

08000f74 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8000fa6:	883a      	ldrh	r2, [r7, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fac:	e002      	b.n	8000fb4 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8000fae:	883a      	ldrh	r2, [r7, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b0b      	cmp	r3, #11
 8000fd4:	d83b      	bhi.n	800104e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <XMC_CCU8_SLICE_SetInterruptNode+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	0800100d 	.word	0x0800100d
 8000fe0:	0800100d 	.word	0x0800100d
 8000fe4:	08001017 	.word	0x08001017
 8000fe8:	08001017 	.word	0x08001017
 8000fec:	08001021 	.word	0x08001021
 8000ff0:	08001021 	.word	0x08001021
 8000ff4:	0800104f 	.word	0x0800104f
 8000ff8:	0800104f 	.word	0x0800104f
 8000ffc:	0800102b 	.word	0x0800102b
 8001000:	08001037 	.word	0x08001037
 8001004:	08001043 	.word	0x08001043
 8001008:	08001043 	.word	0x08001043
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 800100c:	2303      	movs	r3, #3
 800100e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
      break;
 8001014:	e020      	b.n	8001058 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 800101a:	2302      	movs	r3, #2
 800101c:	613b      	str	r3, [r7, #16]
      break;
 800101e:	e01b      	b.n	8001058 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8001024:	2304      	movs	r3, #4
 8001026:	613b      	str	r3, [r7, #16]
      break;
 8001028:	e016      	b.n	8001058 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 800102a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8001030:	2308      	movs	r3, #8
 8001032:	613b      	str	r3, [r7, #16]
      break;
 8001034:	e010      	b.n	8001058 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8001036:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800103a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 800103c:	230a      	movs	r3, #10
 800103e:	613b      	str	r3, [r7, #16]
      break;
 8001040:	e00a      	b.n	8001058 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8001042:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001046:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8001048:	230c      	movs	r3, #12
 800104a:	613b      	str	r3, [r7, #16]
      break;
 800104c:	e004      	b.n	8001058 <XMC_CCU8_SLICE_SetInterruptNode+0x98>
	  
	default:
	  mask = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
	  pos = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
	  break;
 8001056:	bf00      	nop
  }

  if (mask != 0)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d013      	beq.n	8001086 <XMC_CCU8_SLICE_SetInterruptNode+0xc6>
  {
    srs = slice->SRS;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001064:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	43db      	mvns	r3, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8001070:	78ba      	ldrb	r2, [r7, #2]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800109a:	783b      	ldrb	r3, [r7, #0]
 800109c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80010ce:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	079b      	lsls	r3, r3, #30
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800111a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800113e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fbe7 	bl	800092c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fa80 	bl	8000664 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop

08001168 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001172:	f7ff ffef 	bl	8001154 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop

080011bc <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f240 731f 	movw	r3, #1823	; 0x71f
 80011d8:	4013      	ands	r3, r2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	3128      	adds	r1, #40	; 0x28
 80011e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80011e4:	e007      	b.n	80011f6 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	3128      	adds	r1, #40	; 0x28
 80011f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	071f0000 	.word	0x071f0000

08001204 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001212:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e017      	b.n	8001252 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800123a:	e000      	b.n	800123e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 800123c:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f7      	bne.n	800123c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d9e4      	bls.n	8001222 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	080027d8 	.word	0x080027d8

08001268 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d903      	bls.n	8001282 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	3b04      	subs	r3, #4
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e001      	b.n	8001286 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128c:	f023 020f 	bic.w	r2, r3, #15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	2300      	movs	r3, #0
 80012c4:	f000 f828 	bl	8001318 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	2300      	movs	r3, #0
 80012d2:	f000 f821 	bl	8001318 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	2200      	movs	r2, #0
 80012de:	2301      	movs	r3, #1
 80012e0:	f000 f81a 	bl	8001318 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	6899      	ldr	r1, [r3, #8]
 80012ea:	2201      	movs	r2, #1
 80012ec:	2301      	movs	r3, #1
 80012ee:	f000 f813 	bl	8001318 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	6819      	ldr	r1, [r3, #0]
 800130c:	f7ff fec0 	bl	8001090 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop

08001318 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001318:	b480      	push	{r7}
 800131a:	b08d      	sub	sp, #52	; 0x34
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d113      	bne.n	8001356 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800132e:	2308      	movs	r3, #8
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001332:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 800133c:	231f      	movs	r3, #31
 800133e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001346:	b2db      	uxtb	r3, r3
 8001348:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800134a:	7a7b      	ldrb	r3, [r7, #9]
 800134c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	76fb      	strb	r3, [r7, #27]
 8001354:	e013      	b.n	800137e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001356:	2318      	movs	r3, #24
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800135a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001360:	2310      	movs	r3, #16
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001364:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001368:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800136a:	7abb      	ldrb	r3, [r7, #10]
 800136c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001370:	b2db      	uxtb	r3, r3
 8001372:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	3228      	adds	r2, #40	; 0x28
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	43db      	mvns	r3, r3
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001394:	7efa      	ldrb	r2, [r7, #27]
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	4313      	orrs	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80013ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	3228      	adds	r2, #40	; 0x28
 80013c0:	6979      	ldr	r1, [r7, #20]
 80013c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80013c6:	3734      	adds	r7, #52	; 0x34
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e2:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	e009      	b.n	800142c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	4a39      	ldr	r2, [pc, #228]	; (8001500 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe85 	bl	8001130 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	3301      	adds	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d9f2      	bls.n	8001418 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001448:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e021      	b.n	8001494 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800145c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001464:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	3301      	adds	r3, #1
 8001492:	75fb      	strb	r3, [r7, #23]
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d9da      	bls.n	8001450 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d107      	bne.n	80014d8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	75fb      	strb	r3, [r7, #23]
 80014dc:	e009      	b.n	80014f2 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80014de:	7dfb      	ldrb	r3, [r7, #23]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe10 	bl	800110c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	3301      	adds	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d9f2      	bls.n	80014de <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	080027d8 	.word	0x080027d8

08001504 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4013      	ands	r3, r2
 800152c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7b5b      	ldrb	r3, [r3, #13]
 8001548:	b25b      	sxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	db29      	blt.n	80015a2 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10a      	bne.n	800156e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001558:	2308      	movs	r3, #8
 800155a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001562:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800156c:	e00c      	b.n	8001588 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800157e:	f023 021f 	bic.w	r2, r3, #31
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	7b52      	ldrb	r2, [r2, #13]
 8001592:	b251      	sxtb	r1, r2
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	431a      	orrs	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	3280      	adds	r2, #128	; 0x80
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2201      	movs	r2, #1
 80015fc:	409a      	lsls	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60da      	str	r2, [r3, #12]
}
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	60da      	str	r2, [r3, #12]
}
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	611a      	str	r2, [r3, #16]
}
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <PWM_lCCU8_Init>:

#ifdef PWM_SLICE_USED_CCU8

/*Initialize the APP and CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_Init(PWM_t *const handle_ptr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800167e:	2b02      	cmp	r3, #2
 8001680:	d14e      	bne.n	8001720 <PWM_lCCU8_Init+0xb4>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handle);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f934 	bl	80018f4 <GLOBAL_CCU8_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU8 slice */
    if (PWM_STATUS_SUCCESS == status)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d140      	bne.n	8001718 <PWM_lCCU8_Init+0xac>
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fc2d 	bl	8000f00 <XMC_CCU8_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689a      	ldr	r2, [r3, #8]
    		                            (uint16_t)handle_ptr->period_value);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fc5e 	bl	8000f74 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	2100      	movs	r1, #0
 80016c6:	461a      	mov	r2, r3
 80016c8:	f7ff fc62 	bl	8000f90 <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff ffa4 	bl	8001624 <XMC_CCU8_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU8_ConfigInterrupts(handle_ptr);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f825 	bl	800172c <PWM_lCCU8_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6919      	ldr	r1, [r3, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	f7fe fe4b 	bl	8000390 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <PWM_lCCU8_Init+0xa6>
      {
        PWM_Start(handle_ptr);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f8bb 	bl	8001888 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e003      	b.n	8001720 <PWM_lCCU8_Init+0xb4>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return(status);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU8_Init() api */
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop

0800172c <PWM_lCCU8_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU8_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00f      	beq.n	800175e <PWM_lCCU8_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:period match event enable")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4618      	mov	r0, r3
 8001744:	2100      	movs	r1, #0
 8001746:	f7ff ff7b 	bl	8001640 <XMC_CCU8_SLICE_EnableEvent>

    /* Bind event to Service Request Node for period match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001754:	4610      	mov	r0, r2
 8001756:	2100      	movs	r1, #0
 8001758:	461a      	mov	r2, r3
 800175a:	f7ff fc31 	bl	8000fc0 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00f      	beq.n	8001788 <PWM_lCCU8_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:compare match event enable ")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4618      	mov	r0, r3
 800176e:	2102      	movs	r1, #2
 8001770:	f7ff ff66 	bl	8001640 <XMC_CCU8_SLICE_EnableEvent>
    /* Bind event to Service Request Node for compare match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800177e:	4610      	mov	r0, r2
 8001780:	2102      	movs	r1, #2
 8001782:	461a      	mov	r2, r3
 8001784:	f7ff fc1c 	bl	8000fc0 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_compare_match_node);
  }
}
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop

08001790 <PWM_lCCU8_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU8 slice. */
void PWM_lCCU8_Start(PWM_t *const handle_ptr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_lCCU8_Start:Invalid handle_ptr" , (handle_ptr != NULL));

  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <PWM_lCCU8_Start+0x1c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d111      	bne.n	80017d0 <PWM_lCCU8_Start+0x40>
  {
    /* Clears IDLE mode for the slice */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_kernel_ptr,handle_ptr->slice_number);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff ff17 	bl	80015ec <XMC_CCU8_EnableClock>
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff22 	bl	800160c <XMC_CCU8_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU8_Start:start PWM")
  }
} /* end of PWM_lCCU8_Start() api */
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop

080017d8 <PWM_lCCU8_SetDutyCycle>:
} /* end of PWM_lCCU8_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));
  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
                                                          (duty_cycle <= PWM_MAX_DUTY_CYCLE)));

  status = PWM_STATUS_FAILURE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
  if (handle_ptr->state != PWM_STATUS_UNINITIALIZED)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d02d      	beq.n	800184c <PWM_lCCU8_SetDutyCycle+0x74>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d828      	bhi.n	800184c <PWM_lCCU8_SetDutyCycle+0x74>
    {
      period = (uint32_t)handle_ptr->period_value + 1U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3301      	adds	r3, #1
 8001800:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * ((uint32_t) PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001808:	3310      	adds	r3, #16
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <PWM_lCCU8_SetDutyCycle+0x80>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0b5b      	lsrs	r3, r3, #13
 8001818:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	621a      	str	r2, [r3, #32]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b29b      	uxth	r3, r3
 800182e:	4610      	mov	r0, r2
 8001830:	2100      	movs	r1, #0
 8001832:	461a      	mov	r2, r3
 8001834:	f7ff fbac 	bl	8000f90 <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                             (uint16_t)compare);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff feee 	bl	8001624 <XMC_CCU8_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU8_SetDutyCycle:dutycycle set")
  return (status);
 800184c:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU8_SetDutyCycle() api */
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	d1b71759 	.word	0xd1b71759

0800185c <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
    status = PWM_lCCU4_Init(handle_ptr);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800186e:	2b01      	cmp	r3, #1
 8001870:	d104      	bne.n	800187c <PWM_Init+0x20>
  {
    status = PWM_lCCU8_Init(handle_ptr);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fefa 	bl	800166c <PWM_lCCU8_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop

08001888 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    PWM_lCCU4_Start(handle_ptr);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <PWM_Start+0x18>
  {
    PWM_lCCU8_Start(handle_ptr);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ff78 	bl	8001790 <PWM_lCCU8_Start>
  }
#endif
}
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop

080018a8 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	f7ff ff88 	bl	80017d8 <PWM_lCCU8_SetDutyCycle>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop

080018d8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e6:	60da      	str	r2, [r3, #12]
}
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop

080018f4 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7b5b      	ldrb	r3, [r3, #13]
 8001900:	f083 0301 	eor.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00f      	beq.n	800192a <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7b1b      	ldrb	r3, [r3, #12]
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff fad5 	bl	8000ec4 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ffda 	bl	80018d8 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	3310      	adds	r3, #16
 8001948:	4619      	mov	r1, r3
 800194a:	2301      	movs	r3, #1
 800194c:	408b      	lsls	r3, r1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e1b      	ldrb	r3, [r3, #24]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d149      	bne.n	8001a04 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff fbf4 	bl	8001168 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e02f      	b.n	80019e6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4608      	mov	r0, r1
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff fc87 	bl	80012b0 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	2103      	movs	r1, #3
 80019b0:	f7ff fd0e 	bl	80013d0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	4618      	mov	r0, r3
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	f7ff ffb0 	bl	8001934 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	2200      	movs	r2, #0
 80019de:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d9cc      	bls.n	8001986 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e5b      	ldrb	r3, [r3, #25]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc03 	bl	8001204 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff ffd6 	bl	8001a10 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <SystemCoreSetup+0x94>)
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <SystemCoreSetup+0x98>)
 8001a6a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001a70:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <SystemCoreSetup+0x94>)
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <SystemCoreSetup+0x94>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <SystemCoreSetup+0x9c>)
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	3314      	adds	r3, #20
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f023 030f 	bic.w	r3, r3, #15
 8001a94:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <SystemCoreSetup+0x9c>)
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	3314      	adds	r3, #20
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <SystemCoreSetup+0x94>)
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <SystemCoreSetup+0x94>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f023 0310 	bic.w	r3, r3, #16
 8001ab4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <SystemCoreSetup+0x94>)
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <SystemCoreSetup+0x94>)
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f023 0308 	bic.w	r3, r3, #8
 8001ac0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SystemCoreSetup+0x94>)
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <SystemCoreSetup+0x94>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <SystemCoreSetup+0x94>)
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemCoreSetup+0x94>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ad8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <SystemCoreSetup+0x94>)
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <SystemCoreSetup+0x94>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	08000000 	.word	0x08000000
 8001af4:	58001000 	.word	0x58001000

08001af8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]

  return (status);
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <OSCHP_GetFrequency+0x10>)
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	00b71b00 	.word	0x00b71b00

08001b2c <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8001b34:	4906      	ldr	r1, [pc, #24]	; (8001b50 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	50004600 	.word	0x50004600

08001b54 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <SystemCoreClockSetup+0x60>)
 8001b5c:	1d3c      	adds	r4, r7, #4
 8001b5e:	461d      	mov	r5, r3
 8001b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcfe 	bl	800056c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7fe fdef 	bl	8000754 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8001b76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001b7a:	f7fe fda3 	bl	80006c4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8001b7e:	2006      	movs	r0, #6
 8001b80:	f7fe fe74 	bl	800086c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8001b84:	f7fe feee 	bl	8000964 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	2164      	movs	r1, #100	; 0x64
 8001b8c:	f7fe fefa 	bl	8000984 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ffcb 	bl	8001b2c <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7fe fea4 	bl	80008e4 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7fe fda5 	bl	80006ec <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7fe fe8a 	bl	80008bc <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7fe fe73 	bl	8000894 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb4:	0800286c 	.word	0x0800286c

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bc4:	0a1b      	lsrs	r3, r3, #8
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_EnableIRQ+0x34>)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	f002 021f 	and.w	r2, r2, #31
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	490d      	ldr	r1, [pc, #52]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	4909      	ldr	r1, [pc, #36]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
  }
}
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	bf28      	it	cs
 8001c7e:	2306      	movcs	r3, #6
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3306      	adds	r3, #6
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2201      	movs	r2, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	1e59      	subs	r1, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001cb4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	3260      	adds	r2, #96	; 0x60
 8001cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	ea42 0103 	orr.w	r1, r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	3260      	adds	r2, #96	; 0x60
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	32a0      	adds	r2, #160	; 0xa0
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	32c0      	adds	r2, #192	; 0xc0
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	b29b      	uxth	r3, r3
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7e1b      	ldrb	r3, [r3, #24]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 8099 	bne.w	8001eac <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fdee 	bl	8001960 <GLOBAL_ADC_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4610      	mov	r0, r2
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f7ff fa0f 	bl	80011bc <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7ff fb2c 	bl	8001408 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e02e      	b.n	8001e14 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	7b5b      	ldrb	r3, [r3, #13]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f7ff fb96 	bl	8001504 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	789b      	ldrb	r3, [r3, #2]
 8001de2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
                                indexed->res_handle);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001dee:	4610      	mov	r0, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	f7ff ff95 	bl	8001d20 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001e00:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001e06:	4610      	mov	r0, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f7ff ff6d 	bl	8001ce8 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3301      	adds	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0cd      	beq.n	8001db6 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	7a1b      	ldrb	r3, [r3, #8]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02c      	beq.n	8001e84 <ADC_MEASUREMENT_Init+0x11c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d028      	beq.n	8001e84 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b2dc      	uxtb	r4, r3
 8001e3a:	f7ff febd 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001e3e:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8001e44:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	f7ff ff05 	bl	8001c60 <NVIC_EncodePriority>
 8001e56:	4602      	mov	r2, r0
 8001e58:	b263      	sxtb	r3, r4
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	f7ff fed5 	bl	8001c0c <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7e5b      	ldrb	r3, [r3, #25]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7ff f9fa 	bl	8001268 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fea8 	bl	8001bd4 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7e9b      	ldrb	r3, [r3, #26]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff0f 	bl	8001cc4 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7bba      	ldrb	r2, [r7, #14]
 8001eaa:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7e1b      	ldrb	r3, [r3, #24]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	789b      	ldrb	r3, [r3, #2]
 8001eca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7ff ff36 	bl	8001d44 <XMC_VADC_GROUP_GetResult>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	81fb      	strh	r3, [r7, #14]

  return (result);
 8001edc:	89fb      	ldrh	r3, [r7, #14]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop

08001ee8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <DAVE_Init+0x40>)
 8001ef4:	f7ff fe00 	bl	8001af8 <CLOCK_XMC4_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <DAVE_Init+0x24>
  {
	 /**  Initialization of PWM APP instance PWM_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_0); 
 8001f02:	480a      	ldr	r0, [pc, #40]	; (8001f2c <DAVE_Init+0x44>)
 8001f04:	f7ff fcaa 	bl	800185c <PWM_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d104      	bne.n	8001f1c <DAVE_Init+0x34>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <DAVE_Init+0x48>)
 8001f14:	f7ff ff28 	bl	8001d68 <ADC_MEASUREMENT_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	1ffe88d0 	.word	0x1ffe88d0
 8001f2c:	1ffe8800 	.word	0x1ffe8800
 8001f30:	1ffe88b4 	.word	0x1ffe88b4

08001f34 <main>:
 * code.
 */
XMC_VADC_RESULT_SIZE_t result;
uint32_t value;
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8001f3a:	f7ff ffd5 	bl	8001ee8 <DAVE_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d000      	beq.n	8001f4a <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8001f48:	e7fe      	b.n	8001f48 <main+0x14>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 8001f4a:	e7fe      	b.n	8001f4a <main+0x16>
 8001f4c:	0000      	movs	r0, r0
	...

08001f50 <VADC0_C0_2_IRQHandler>:
}
void Adc_Measurement_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 8001f54:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <VADC0_C0_2_IRQHandler+0x58>)
 8001f56:	f7ff ffaf 	bl	8001eb8 <ADC_MEASUREMENT_GetResult>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <VADC0_C0_2_IRQHandler+0x5c>)
 8001f60:	801a      	strh	r2, [r3, #0]

	value =result / 0.4095;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <VADC0_C0_2_IRQHandler+0x5c>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f978 	bl	800225c <__aeabi_i2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	a30a      	add	r3, pc, #40	; (adr r3, 8001fa0 <VADC0_C0_2_IRQHandler+0x50>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f000 faff 	bl	800257c <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f000 fbe1 	bl	800274c <__aeabi_d2uiz>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <VADC0_C0_2_IRQHandler+0x60>)
 8001f8e:	601a      	str	r2, [r3, #0]
	PWM_SetDutyCycle(&PWM_0,value);
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <VADC0_C0_2_IRQHandler+0x60>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <VADC0_C0_2_IRQHandler+0x64>)
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7ff fc86 	bl	80018a8 <PWM_SetDutyCycle>
}
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	7ced9168 	.word	0x7ced9168
 8001fa4:	3fda353f 	.word	0x3fda353f
 8001fa8:	1ffe88a0 	.word	0x1ffe88a0
 8001fac:	1ffe88d8 	.word	0x1ffe88d8
 8001fb0:	1ffe88dc 	.word	0x1ffe88dc
 8001fb4:	1ffe8800 	.word	0x1ffe8800

08001fb8 <__aeabi_drsub>:
 8001fb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001fbc:	e002      	b.n	8001fc4 <__adddf3>
 8001fbe:	bf00      	nop

08001fc0 <__aeabi_dsub>:
 8001fc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08001fc4 <__adddf3>:
 8001fc4:	b530      	push	{r4, r5, lr}
 8001fc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001fca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001fce:	ea94 0f05 	teq	r4, r5
 8001fd2:	bf08      	it	eq
 8001fd4:	ea90 0f02 	teqeq	r0, r2
 8001fd8:	bf1f      	itttt	ne
 8001fda:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001fde:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001fe2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001fe6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001fea:	f000 80e2 	beq.w	80021b2 <__adddf3+0x1ee>
 8001fee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001ff2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001ff6:	bfb8      	it	lt
 8001ff8:	426d      	neglt	r5, r5
 8001ffa:	dd0c      	ble.n	8002016 <__adddf3+0x52>
 8001ffc:	442c      	add	r4, r5
 8001ffe:	ea80 0202 	eor.w	r2, r0, r2
 8002002:	ea81 0303 	eor.w	r3, r1, r3
 8002006:	ea82 0000 	eor.w	r0, r2, r0
 800200a:	ea83 0101 	eor.w	r1, r3, r1
 800200e:	ea80 0202 	eor.w	r2, r0, r2
 8002012:	ea81 0303 	eor.w	r3, r1, r3
 8002016:	2d36      	cmp	r5, #54	; 0x36
 8002018:	bf88      	it	hi
 800201a:	bd30      	pophi	{r4, r5, pc}
 800201c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002020:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002024:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002028:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800202c:	d002      	beq.n	8002034 <__adddf3+0x70>
 800202e:	4240      	negs	r0, r0
 8002030:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002034:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002038:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800203c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002040:	d002      	beq.n	8002048 <__adddf3+0x84>
 8002042:	4252      	negs	r2, r2
 8002044:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002048:	ea94 0f05 	teq	r4, r5
 800204c:	f000 80a7 	beq.w	800219e <__adddf3+0x1da>
 8002050:	f1a4 0401 	sub.w	r4, r4, #1
 8002054:	f1d5 0e20 	rsbs	lr, r5, #32
 8002058:	db0d      	blt.n	8002076 <__adddf3+0xb2>
 800205a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800205e:	fa22 f205 	lsr.w	r2, r2, r5
 8002062:	1880      	adds	r0, r0, r2
 8002064:	f141 0100 	adc.w	r1, r1, #0
 8002068:	fa03 f20e 	lsl.w	r2, r3, lr
 800206c:	1880      	adds	r0, r0, r2
 800206e:	fa43 f305 	asr.w	r3, r3, r5
 8002072:	4159      	adcs	r1, r3
 8002074:	e00e      	b.n	8002094 <__adddf3+0xd0>
 8002076:	f1a5 0520 	sub.w	r5, r5, #32
 800207a:	f10e 0e20 	add.w	lr, lr, #32
 800207e:	2a01      	cmp	r2, #1
 8002080:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002084:	bf28      	it	cs
 8002086:	f04c 0c02 	orrcs.w	ip, ip, #2
 800208a:	fa43 f305 	asr.w	r3, r3, r5
 800208e:	18c0      	adds	r0, r0, r3
 8002090:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002094:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002098:	d507      	bpl.n	80020aa <__adddf3+0xe6>
 800209a:	f04f 0e00 	mov.w	lr, #0
 800209e:	f1dc 0c00 	rsbs	ip, ip, #0
 80020a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80020a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80020aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80020ae:	d31b      	bcc.n	80020e8 <__adddf3+0x124>
 80020b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80020b4:	d30c      	bcc.n	80020d0 <__adddf3+0x10c>
 80020b6:	0849      	lsrs	r1, r1, #1
 80020b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80020bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80020c0:	f104 0401 	add.w	r4, r4, #1
 80020c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80020c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80020cc:	f080 809a 	bcs.w	8002204 <__adddf3+0x240>
 80020d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80020d4:	bf08      	it	eq
 80020d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80020da:	f150 0000 	adcs.w	r0, r0, #0
 80020de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80020e2:	ea41 0105 	orr.w	r1, r1, r5
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80020ec:	4140      	adcs	r0, r0
 80020ee:	eb41 0101 	adc.w	r1, r1, r1
 80020f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80020f6:	f1a4 0401 	sub.w	r4, r4, #1
 80020fa:	d1e9      	bne.n	80020d0 <__adddf3+0x10c>
 80020fc:	f091 0f00 	teq	r1, #0
 8002100:	bf04      	itt	eq
 8002102:	4601      	moveq	r1, r0
 8002104:	2000      	moveq	r0, #0
 8002106:	fab1 f381 	clz	r3, r1
 800210a:	bf08      	it	eq
 800210c:	3320      	addeq	r3, #32
 800210e:	f1a3 030b 	sub.w	r3, r3, #11
 8002112:	f1b3 0220 	subs.w	r2, r3, #32
 8002116:	da0c      	bge.n	8002132 <__adddf3+0x16e>
 8002118:	320c      	adds	r2, #12
 800211a:	dd08      	ble.n	800212e <__adddf3+0x16a>
 800211c:	f102 0c14 	add.w	ip, r2, #20
 8002120:	f1c2 020c 	rsb	r2, r2, #12
 8002124:	fa01 f00c 	lsl.w	r0, r1, ip
 8002128:	fa21 f102 	lsr.w	r1, r1, r2
 800212c:	e00c      	b.n	8002148 <__adddf3+0x184>
 800212e:	f102 0214 	add.w	r2, r2, #20
 8002132:	bfd8      	it	le
 8002134:	f1c2 0c20 	rsble	ip, r2, #32
 8002138:	fa01 f102 	lsl.w	r1, r1, r2
 800213c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002140:	bfdc      	itt	le
 8002142:	ea41 010c 	orrle.w	r1, r1, ip
 8002146:	4090      	lslle	r0, r2
 8002148:	1ae4      	subs	r4, r4, r3
 800214a:	bfa2      	ittt	ge
 800214c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002150:	4329      	orrge	r1, r5
 8002152:	bd30      	popge	{r4, r5, pc}
 8002154:	ea6f 0404 	mvn.w	r4, r4
 8002158:	3c1f      	subs	r4, #31
 800215a:	da1c      	bge.n	8002196 <__adddf3+0x1d2>
 800215c:	340c      	adds	r4, #12
 800215e:	dc0e      	bgt.n	800217e <__adddf3+0x1ba>
 8002160:	f104 0414 	add.w	r4, r4, #20
 8002164:	f1c4 0220 	rsb	r2, r4, #32
 8002168:	fa20 f004 	lsr.w	r0, r0, r4
 800216c:	fa01 f302 	lsl.w	r3, r1, r2
 8002170:	ea40 0003 	orr.w	r0, r0, r3
 8002174:	fa21 f304 	lsr.w	r3, r1, r4
 8002178:	ea45 0103 	orr.w	r1, r5, r3
 800217c:	bd30      	pop	{r4, r5, pc}
 800217e:	f1c4 040c 	rsb	r4, r4, #12
 8002182:	f1c4 0220 	rsb	r2, r4, #32
 8002186:	fa20 f002 	lsr.w	r0, r0, r2
 800218a:	fa01 f304 	lsl.w	r3, r1, r4
 800218e:	ea40 0003 	orr.w	r0, r0, r3
 8002192:	4629      	mov	r1, r5
 8002194:	bd30      	pop	{r4, r5, pc}
 8002196:	fa21 f004 	lsr.w	r0, r1, r4
 800219a:	4629      	mov	r1, r5
 800219c:	bd30      	pop	{r4, r5, pc}
 800219e:	f094 0f00 	teq	r4, #0
 80021a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80021a6:	bf06      	itte	eq
 80021a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80021ac:	3401      	addeq	r4, #1
 80021ae:	3d01      	subne	r5, #1
 80021b0:	e74e      	b.n	8002050 <__adddf3+0x8c>
 80021b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80021b6:	bf18      	it	ne
 80021b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80021bc:	d029      	beq.n	8002212 <__adddf3+0x24e>
 80021be:	ea94 0f05 	teq	r4, r5
 80021c2:	bf08      	it	eq
 80021c4:	ea90 0f02 	teqeq	r0, r2
 80021c8:	d005      	beq.n	80021d6 <__adddf3+0x212>
 80021ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80021ce:	bf04      	itt	eq
 80021d0:	4619      	moveq	r1, r3
 80021d2:	4610      	moveq	r0, r2
 80021d4:	bd30      	pop	{r4, r5, pc}
 80021d6:	ea91 0f03 	teq	r1, r3
 80021da:	bf1e      	ittt	ne
 80021dc:	2100      	movne	r1, #0
 80021de:	2000      	movne	r0, #0
 80021e0:	bd30      	popne	{r4, r5, pc}
 80021e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80021e6:	d105      	bne.n	80021f4 <__adddf3+0x230>
 80021e8:	0040      	lsls	r0, r0, #1
 80021ea:	4149      	adcs	r1, r1
 80021ec:	bf28      	it	cs
 80021ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80021f2:	bd30      	pop	{r4, r5, pc}
 80021f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80021f8:	bf3c      	itt	cc
 80021fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80021fe:	bd30      	popcc	{r4, r5, pc}
 8002200:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002204:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002208:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800220c:	f04f 0000 	mov.w	r0, #0
 8002210:	bd30      	pop	{r4, r5, pc}
 8002212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002216:	bf1a      	itte	ne
 8002218:	4619      	movne	r1, r3
 800221a:	4610      	movne	r0, r2
 800221c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002220:	bf1c      	itt	ne
 8002222:	460b      	movne	r3, r1
 8002224:	4602      	movne	r2, r0
 8002226:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800222a:	bf06      	itte	eq
 800222c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002230:	ea91 0f03 	teqeq	r1, r3
 8002234:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002238:	bd30      	pop	{r4, r5, pc}
 800223a:	bf00      	nop

0800223c <__aeabi_ui2d>:
 800223c:	f090 0f00 	teq	r0, #0
 8002240:	bf04      	itt	eq
 8002242:	2100      	moveq	r1, #0
 8002244:	4770      	bxeq	lr
 8002246:	b530      	push	{r4, r5, lr}
 8002248:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800224c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002250:	f04f 0500 	mov.w	r5, #0
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	e750      	b.n	80020fc <__adddf3+0x138>
 800225a:	bf00      	nop

0800225c <__aeabi_i2d>:
 800225c:	f090 0f00 	teq	r0, #0
 8002260:	bf04      	itt	eq
 8002262:	2100      	moveq	r1, #0
 8002264:	4770      	bxeq	lr
 8002266:	b530      	push	{r4, r5, lr}
 8002268:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800226c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002270:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002274:	bf48      	it	mi
 8002276:	4240      	negmi	r0, r0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	e73e      	b.n	80020fc <__adddf3+0x138>
 800227e:	bf00      	nop

08002280 <__aeabi_f2d>:
 8002280:	0042      	lsls	r2, r0, #1
 8002282:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002286:	ea4f 0131 	mov.w	r1, r1, rrx
 800228a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800228e:	bf1f      	itttt	ne
 8002290:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002294:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002298:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800229c:	4770      	bxne	lr
 800229e:	f092 0f00 	teq	r2, #0
 80022a2:	bf14      	ite	ne
 80022a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80022a8:	4770      	bxeq	lr
 80022aa:	b530      	push	{r4, r5, lr}
 80022ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80022b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80022b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80022b8:	e720      	b.n	80020fc <__adddf3+0x138>
 80022ba:	bf00      	nop

080022bc <__aeabi_ul2d>:
 80022bc:	ea50 0201 	orrs.w	r2, r0, r1
 80022c0:	bf08      	it	eq
 80022c2:	4770      	bxeq	lr
 80022c4:	b530      	push	{r4, r5, lr}
 80022c6:	f04f 0500 	mov.w	r5, #0
 80022ca:	e00a      	b.n	80022e2 <__aeabi_l2d+0x16>

080022cc <__aeabi_l2d>:
 80022cc:	ea50 0201 	orrs.w	r2, r0, r1
 80022d0:	bf08      	it	eq
 80022d2:	4770      	bxeq	lr
 80022d4:	b530      	push	{r4, r5, lr}
 80022d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80022da:	d502      	bpl.n	80022e2 <__aeabi_l2d+0x16>
 80022dc:	4240      	negs	r0, r0
 80022de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80022e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80022e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80022ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80022ee:	f43f aedc 	beq.w	80020aa <__adddf3+0xe6>
 80022f2:	f04f 0203 	mov.w	r2, #3
 80022f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80022fa:	bf18      	it	ne
 80022fc:	3203      	addne	r2, #3
 80022fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002302:	bf18      	it	ne
 8002304:	3203      	addne	r2, #3
 8002306:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800230a:	f1c2 0320 	rsb	r3, r2, #32
 800230e:	fa00 fc03 	lsl.w	ip, r0, r3
 8002312:	fa20 f002 	lsr.w	r0, r0, r2
 8002316:	fa01 fe03 	lsl.w	lr, r1, r3
 800231a:	ea40 000e 	orr.w	r0, r0, lr
 800231e:	fa21 f102 	lsr.w	r1, r1, r2
 8002322:	4414      	add	r4, r2
 8002324:	e6c1      	b.n	80020aa <__adddf3+0xe6>
 8002326:	bf00      	nop

08002328 <__aeabi_dmul>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800232e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002332:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002336:	bf1d      	ittte	ne
 8002338:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800233c:	ea94 0f0c 	teqne	r4, ip
 8002340:	ea95 0f0c 	teqne	r5, ip
 8002344:	f000 f8de 	bleq	8002504 <__aeabi_dmul+0x1dc>
 8002348:	442c      	add	r4, r5
 800234a:	ea81 0603 	eor.w	r6, r1, r3
 800234e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002352:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002356:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800235a:	bf18      	it	ne
 800235c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002360:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002368:	d038      	beq.n	80023dc <__aeabi_dmul+0xb4>
 800236a:	fba0 ce02 	umull	ip, lr, r0, r2
 800236e:	f04f 0500 	mov.w	r5, #0
 8002372:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002376:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800237a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800237e:	f04f 0600 	mov.w	r6, #0
 8002382:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002386:	f09c 0f00 	teq	ip, #0
 800238a:	bf18      	it	ne
 800238c:	f04e 0e01 	orrne.w	lr, lr, #1
 8002390:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002394:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002398:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800239c:	d204      	bcs.n	80023a8 <__aeabi_dmul+0x80>
 800239e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80023a2:	416d      	adcs	r5, r5
 80023a4:	eb46 0606 	adc.w	r6, r6, r6
 80023a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80023ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80023b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80023b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80023b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80023bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80023c0:	bf88      	it	hi
 80023c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80023c6:	d81e      	bhi.n	8002406 <__aeabi_dmul+0xde>
 80023c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80023cc:	bf08      	it	eq
 80023ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80023d2:	f150 0000 	adcs.w	r0, r0, #0
 80023d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80023e0:	ea46 0101 	orr.w	r1, r6, r1
 80023e4:	ea40 0002 	orr.w	r0, r0, r2
 80023e8:	ea81 0103 	eor.w	r1, r1, r3
 80023ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80023f0:	bfc2      	ittt	gt
 80023f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80023f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80023fa:	bd70      	popgt	{r4, r5, r6, pc}
 80023fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002400:	f04f 0e00 	mov.w	lr, #0
 8002404:	3c01      	subs	r4, #1
 8002406:	f300 80ab 	bgt.w	8002560 <__aeabi_dmul+0x238>
 800240a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800240e:	bfde      	ittt	le
 8002410:	2000      	movle	r0, #0
 8002412:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002416:	bd70      	pople	{r4, r5, r6, pc}
 8002418:	f1c4 0400 	rsb	r4, r4, #0
 800241c:	3c20      	subs	r4, #32
 800241e:	da35      	bge.n	800248c <__aeabi_dmul+0x164>
 8002420:	340c      	adds	r4, #12
 8002422:	dc1b      	bgt.n	800245c <__aeabi_dmul+0x134>
 8002424:	f104 0414 	add.w	r4, r4, #20
 8002428:	f1c4 0520 	rsb	r5, r4, #32
 800242c:	fa00 f305 	lsl.w	r3, r0, r5
 8002430:	fa20 f004 	lsr.w	r0, r0, r4
 8002434:	fa01 f205 	lsl.w	r2, r1, r5
 8002438:	ea40 0002 	orr.w	r0, r0, r2
 800243c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002440:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002444:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002448:	fa21 f604 	lsr.w	r6, r1, r4
 800244c:	eb42 0106 	adc.w	r1, r2, r6
 8002450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002454:	bf08      	it	eq
 8002456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	f1c4 040c 	rsb	r4, r4, #12
 8002460:	f1c4 0520 	rsb	r5, r4, #32
 8002464:	fa00 f304 	lsl.w	r3, r0, r4
 8002468:	fa20 f005 	lsr.w	r0, r0, r5
 800246c:	fa01 f204 	lsl.w	r2, r1, r4
 8002470:	ea40 0002 	orr.w	r0, r0, r2
 8002474:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002478:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800247c:	f141 0100 	adc.w	r1, r1, #0
 8002480:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002484:	bf08      	it	eq
 8002486:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f1c4 0520 	rsb	r5, r4, #32
 8002490:	fa00 f205 	lsl.w	r2, r0, r5
 8002494:	ea4e 0e02 	orr.w	lr, lr, r2
 8002498:	fa20 f304 	lsr.w	r3, r0, r4
 800249c:	fa01 f205 	lsl.w	r2, r1, r5
 80024a0:	ea43 0302 	orr.w	r3, r3, r2
 80024a4:	fa21 f004 	lsr.w	r0, r1, r4
 80024a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80024ac:	fa21 f204 	lsr.w	r2, r1, r4
 80024b0:	ea20 0002 	bic.w	r0, r0, r2
 80024b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80024b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80024bc:	bf08      	it	eq
 80024be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80024c2:	bd70      	pop	{r4, r5, r6, pc}
 80024c4:	f094 0f00 	teq	r4, #0
 80024c8:	d10f      	bne.n	80024ea <__aeabi_dmul+0x1c2>
 80024ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80024ce:	0040      	lsls	r0, r0, #1
 80024d0:	eb41 0101 	adc.w	r1, r1, r1
 80024d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80024d8:	bf08      	it	eq
 80024da:	3c01      	subeq	r4, #1
 80024dc:	d0f7      	beq.n	80024ce <__aeabi_dmul+0x1a6>
 80024de:	ea41 0106 	orr.w	r1, r1, r6
 80024e2:	f095 0f00 	teq	r5, #0
 80024e6:	bf18      	it	ne
 80024e8:	4770      	bxne	lr
 80024ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80024ee:	0052      	lsls	r2, r2, #1
 80024f0:	eb43 0303 	adc.w	r3, r3, r3
 80024f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80024f8:	bf08      	it	eq
 80024fa:	3d01      	subeq	r5, #1
 80024fc:	d0f7      	beq.n	80024ee <__aeabi_dmul+0x1c6>
 80024fe:	ea43 0306 	orr.w	r3, r3, r6
 8002502:	4770      	bx	lr
 8002504:	ea94 0f0c 	teq	r4, ip
 8002508:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800250c:	bf18      	it	ne
 800250e:	ea95 0f0c 	teqne	r5, ip
 8002512:	d00c      	beq.n	800252e <__aeabi_dmul+0x206>
 8002514:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002518:	bf18      	it	ne
 800251a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800251e:	d1d1      	bne.n	80024c4 <__aeabi_dmul+0x19c>
 8002520:	ea81 0103 	eor.w	r1, r1, r3
 8002524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002532:	bf06      	itte	eq
 8002534:	4610      	moveq	r0, r2
 8002536:	4619      	moveq	r1, r3
 8002538:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800253c:	d019      	beq.n	8002572 <__aeabi_dmul+0x24a>
 800253e:	ea94 0f0c 	teq	r4, ip
 8002542:	d102      	bne.n	800254a <__aeabi_dmul+0x222>
 8002544:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002548:	d113      	bne.n	8002572 <__aeabi_dmul+0x24a>
 800254a:	ea95 0f0c 	teq	r5, ip
 800254e:	d105      	bne.n	800255c <__aeabi_dmul+0x234>
 8002550:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002554:	bf1c      	itt	ne
 8002556:	4610      	movne	r0, r2
 8002558:	4619      	movne	r1, r3
 800255a:	d10a      	bne.n	8002572 <__aeabi_dmul+0x24a>
 800255c:	ea81 0103 	eor.w	r1, r1, r3
 8002560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002564:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002568:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800256c:	f04f 0000 	mov.w	r0, #0
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002576:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800257a:	bd70      	pop	{r4, r5, r6, pc}

0800257c <__aeabi_ddiv>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800258a:	bf1d      	ittte	ne
 800258c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002590:	ea94 0f0c 	teqne	r4, ip
 8002594:	ea95 0f0c 	teqne	r5, ip
 8002598:	f000 f8a7 	bleq	80026ea <__aeabi_ddiv+0x16e>
 800259c:	eba4 0405 	sub.w	r4, r4, r5
 80025a0:	ea81 0e03 	eor.w	lr, r1, r3
 80025a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80025a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80025ac:	f000 8088 	beq.w	80026c0 <__aeabi_ddiv+0x144>
 80025b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80025b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80025b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80025bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80025c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80025c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80025c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80025cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80025d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80025d4:	429d      	cmp	r5, r3
 80025d6:	bf08      	it	eq
 80025d8:	4296      	cmpeq	r6, r2
 80025da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80025de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80025e2:	d202      	bcs.n	80025ea <__aeabi_ddiv+0x6e>
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80025ea:	1ab6      	subs	r6, r6, r2
 80025ec:	eb65 0503 	sbc.w	r5, r5, r3
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80025f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80025fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8002602:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002606:	bf22      	ittt	cs
 8002608:	1ab6      	subcs	r6, r6, r2
 800260a:	4675      	movcs	r5, lr
 800260c:	ea40 000c 	orrcs.w	r0, r0, ip
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	ea4f 0232 	mov.w	r2, r2, rrx
 8002616:	ebb6 0e02 	subs.w	lr, r6, r2
 800261a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800261e:	bf22      	ittt	cs
 8002620:	1ab6      	subcs	r6, r6, r2
 8002622:	4675      	movcs	r5, lr
 8002624:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	ea4f 0232 	mov.w	r2, r2, rrx
 800262e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002632:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002636:	bf22      	ittt	cs
 8002638:	1ab6      	subcs	r6, r6, r2
 800263a:	4675      	movcs	r5, lr
 800263c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	ea4f 0232 	mov.w	r2, r2, rrx
 8002646:	ebb6 0e02 	subs.w	lr, r6, r2
 800264a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800264e:	bf22      	ittt	cs
 8002650:	1ab6      	subcs	r6, r6, r2
 8002652:	4675      	movcs	r5, lr
 8002654:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002658:	ea55 0e06 	orrs.w	lr, r5, r6
 800265c:	d018      	beq.n	8002690 <__aeabi_ddiv+0x114>
 800265e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002662:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002666:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800266a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800266e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002672:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002676:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800267a:	d1c0      	bne.n	80025fe <__aeabi_ddiv+0x82>
 800267c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002680:	d10b      	bne.n	800269a <__aeabi_ddiv+0x11e>
 8002682:	ea41 0100 	orr.w	r1, r1, r0
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800268e:	e7b6      	b.n	80025fe <__aeabi_ddiv+0x82>
 8002690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002694:	bf04      	itt	eq
 8002696:	4301      	orreq	r1, r0
 8002698:	2000      	moveq	r0, #0
 800269a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800269e:	bf88      	it	hi
 80026a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80026a4:	f63f aeaf 	bhi.w	8002406 <__aeabi_dmul+0xde>
 80026a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80026ac:	bf04      	itt	eq
 80026ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80026b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80026b6:	f150 0000 	adcs.w	r0, r0, #0
 80026ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80026c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80026c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80026cc:	bfc2      	ittt	gt
 80026ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80026d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80026d6:	bd70      	popgt	{r4, r5, r6, pc}
 80026d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80026dc:	f04f 0e00 	mov.w	lr, #0
 80026e0:	3c01      	subs	r4, #1
 80026e2:	e690      	b.n	8002406 <__aeabi_dmul+0xde>
 80026e4:	ea45 0e06 	orr.w	lr, r5, r6
 80026e8:	e68d      	b.n	8002406 <__aeabi_dmul+0xde>
 80026ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80026ee:	ea94 0f0c 	teq	r4, ip
 80026f2:	bf08      	it	eq
 80026f4:	ea95 0f0c 	teqeq	r5, ip
 80026f8:	f43f af3b 	beq.w	8002572 <__aeabi_dmul+0x24a>
 80026fc:	ea94 0f0c 	teq	r4, ip
 8002700:	d10a      	bne.n	8002718 <__aeabi_ddiv+0x19c>
 8002702:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002706:	f47f af34 	bne.w	8002572 <__aeabi_dmul+0x24a>
 800270a:	ea95 0f0c 	teq	r5, ip
 800270e:	f47f af25 	bne.w	800255c <__aeabi_dmul+0x234>
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	e72c      	b.n	8002572 <__aeabi_dmul+0x24a>
 8002718:	ea95 0f0c 	teq	r5, ip
 800271c:	d106      	bne.n	800272c <__aeabi_ddiv+0x1b0>
 800271e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002722:	f43f aefd 	beq.w	8002520 <__aeabi_dmul+0x1f8>
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	e722      	b.n	8002572 <__aeabi_dmul+0x24a>
 800272c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002730:	bf18      	it	ne
 8002732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002736:	f47f aec5 	bne.w	80024c4 <__aeabi_dmul+0x19c>
 800273a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800273e:	f47f af0d 	bne.w	800255c <__aeabi_dmul+0x234>
 8002742:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002746:	f47f aeeb 	bne.w	8002520 <__aeabi_dmul+0x1f8>
 800274a:	e712      	b.n	8002572 <__aeabi_dmul+0x24a>

0800274c <__aeabi_d2uiz>:
 800274c:	004a      	lsls	r2, r1, #1
 800274e:	d211      	bcs.n	8002774 <__aeabi_d2uiz+0x28>
 8002750:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002754:	d211      	bcs.n	800277a <__aeabi_d2uiz+0x2e>
 8002756:	d50d      	bpl.n	8002774 <__aeabi_d2uiz+0x28>
 8002758:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800275c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002760:	d40e      	bmi.n	8002780 <__aeabi_d2uiz+0x34>
 8002762:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800276a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800276e:	fa23 f002 	lsr.w	r0, r3, r2
 8002772:	4770      	bx	lr
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	4770      	bx	lr
 800277a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800277e:	d102      	bne.n	8002786 <__aeabi_d2uiz+0x3a>
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	4770      	bx	lr
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	4770      	bx	lr

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <__libc_init_array+0x3c>)
 8002790:	4c0e      	ldr	r4, [pc, #56]	; (80027cc <__libc_init_array+0x40>)
 8002792:	1ae4      	subs	r4, r4, r3
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	2500      	movs	r5, #0
 8002798:	461e      	mov	r6, r3
 800279a:	42a5      	cmp	r5, r4
 800279c:	d004      	beq.n	80027a8 <__libc_init_array+0x1c>
 800279e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027a2:	4798      	blx	r3
 80027a4:	3501      	adds	r5, #1
 80027a6:	e7f8      	b.n	800279a <__libc_init_array+0xe>
 80027a8:	f7fe ff1a 	bl	80015e0 <_init>
 80027ac:	4c08      	ldr	r4, [pc, #32]	; (80027d0 <__libc_init_array+0x44>)
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <__libc_init_array+0x48>)
 80027b0:	1ae4      	subs	r4, r4, r3
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	2500      	movs	r5, #0
 80027b6:	461e      	mov	r6, r3
 80027b8:	42a5      	cmp	r5, r4
 80027ba:	d004      	beq.n	80027c6 <__libc_init_array+0x3a>
 80027bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027c0:	4798      	blx	r3
 80027c2:	3501      	adds	r5, #1
 80027c4:	e7f8      	b.n	80027b8 <__libc_init_array+0x2c>
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	1ffe88d0 	.word	0x1ffe88d0
 80027cc:	1ffe88d0 	.word	0x1ffe88d0
 80027d0:	1ffe88d0 	.word	0x1ffe88d0
 80027d4:	1ffe88d0 	.word	0x1ffe88d0

080027d8 <g_xmc_vadc_group_array>:
 80027d8:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

080027e8 <PWM_0_compare_config>:
	...

080027f8 <PWM_0_gpio_out_config>:
 80027f8:	00000098 00010000 00000004              ............

08002804 <group_init_handle0>:
	...

08002818 <group_init_handle1>:
	...

0800282c <group_init_handle2>:
	...

08002840 <group_init_handle3>:
	...

08002854 <global_config>:
 8002854:	00000000 00000004 00000000 00000000     ................
	...
 800286c:	01010230 00010000 00000000 00010000     0...............
 800287c:	01010102                                ....

08002880 <global_iclass_config>:
 8002880:	00000000                                ....

08002884 <backgnd_rs_intr_handle>:
 8002884:	00000010 0000003f 00000000              ....?.......

08002890 <backgnd_config>:
 8002890:	00000005 00004a00 0000000c              .....J......
