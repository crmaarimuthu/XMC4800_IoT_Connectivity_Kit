   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "global_adc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GLOBAL_DisablePostCalibration,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_VADC_GLOBAL_DisablePostCalibration:
  25              	.LFB182:
  26              	 .file 1 "C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2019-12-02
   4:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  12:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  14:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  21:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  28:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  41:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  42:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  43:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  44:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  45:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  46:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  47:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  48:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  49:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  50:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  51:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  52:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  53:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  54:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  55:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  57:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  58:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  59:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  60:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  61:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  62:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  63:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  64:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  65:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  66:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  67:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  68:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  69:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  70:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  71:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  72:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  73:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  74:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  75:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  76:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  77:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  78:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  79:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  80:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed.
  81:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  82:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  83:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  84:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  85:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  86:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  87:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  88:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  89:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  90:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  91:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  92:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  93:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  94:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  95:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  96:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  97:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR.
  98:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  99:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
 100:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
 101:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
 102:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
 103:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
 104:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 105:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 106:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 107:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 108:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 109:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 110:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 111:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 112:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 113:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 114:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 115:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 116:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 118:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 119:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 120:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 121:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 122:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-03-30:
 123:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 124:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetChannelAlias()
 125:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 126:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-12-02:
 127:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fix including files following the convention: angle brackets are used for standard include
 128:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 129:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2020-09-03:
 130:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetPowerMode()
 131:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 132:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2020-11-11:
 133:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() and XMC_VADC_GROUP_SetChannelAlias()
 134:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 135:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond
 136:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 137:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 138:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 139:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 140:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 141:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 142:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 143:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 144:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 145:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_common.h"
 146:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_scu.h"
 147:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #include "xmc_vadc_map.h"
 148:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 149:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 150:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 151:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 152:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 153:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 154:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 155:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 156:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 157:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 158:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 159:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 160:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 161:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 162:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 163:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 164:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 165:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 166:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 167:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 168:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 169:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 170:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 171:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 172:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 173:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 174:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 175:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 176:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 177:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 178:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 179:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 180:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 181:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 182:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 183:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 184:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 185:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 186:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 187:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 188:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 189:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 190:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 191:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 192:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 193:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 194:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 195:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 196:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 197:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 198:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 199:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 200:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 201:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 202:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 203:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 204:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 205:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 206:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 207:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 208:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 209:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 210:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 211:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 212:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 213:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 215:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 216:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 217:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 218:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 219:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 221:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 222:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 223:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 224:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 225:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 227:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 228:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 229:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 233:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 242:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 243:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 247:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 251:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 259:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 260:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 261:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 263:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 264:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 265:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 266:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 269:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 270:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 271:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 272:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 273:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 275:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 276:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 278:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 279:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 280:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 281:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 282:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 283:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 284:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 285:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 286:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 287:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 288:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 289:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 290:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 291:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 292:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 293:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 294:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 295:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 296:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 297:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 298:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 299:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/
 300:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 301:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 302:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 303:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 304:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 305:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 306:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 307:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 308:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 309:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 310:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 311:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 312:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 313:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 314:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 315:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 316:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 317:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 318:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 319:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 320:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 321:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 322:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 323:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 324:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 325:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 326:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 327:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 328:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 329:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 330:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 331:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 332:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 333:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 334:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 335:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 336:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 337:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 338:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 339:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 340:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 341:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 342:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 343:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 344:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 345:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 346:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 347:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 348:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 349:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 350:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 351:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 352:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 353:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 354:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 355:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 356:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 357:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 358:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 359:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 360:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 361:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 362:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 363:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 364:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 365:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 366:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 367:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 368:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 369:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 370:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 371:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 372:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 373:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 374:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 375:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 376:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 377:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 378:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 379:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 380:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 381:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 382:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 383:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 384:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 385:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 386:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 387:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 388:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 389:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 390:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 391:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 392:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 393:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 394:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 395:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 396:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 397:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 398:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 399:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 400:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 401:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 402:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 403:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 404:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 405:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 406:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 407:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 408:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 409:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 410:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 411:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 412:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 413:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 414:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 415:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 416:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 417:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 418:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 419:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 420:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 421:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 422:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 423:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 424:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 425:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 426:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 427:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 428:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 429:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 430:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 431:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 432:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 433:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 434:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 435:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 436:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 437:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 438:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 439:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 440:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 441:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 442:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 443:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 444:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 445:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 446:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 447:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 448:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 449:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 450:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 451:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 452:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 453:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 454:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 455:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 456:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 457:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 458:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 459:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 460:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 461:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 462:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 463:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 464:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 465:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 466:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 467:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 468:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 469:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 470:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 471:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 472:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 473:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 474:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 475:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH,    /**< Input higher than than programmed reference */
 476:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 477:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 478:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 479:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 480:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 481:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 482:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 483:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 484:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 485:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 486:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 487:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 488:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 489:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 490:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 491:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 492:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 493:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 494:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 495:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 496:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 497:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 498:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 499:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 500:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 501:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 502:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 503:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 504:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 505:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 506:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 507:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 508:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 509:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 510:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 511:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 512:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 513:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 514:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 515:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 516:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 517:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 518:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 520:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 521:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 522:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 523:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 524:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 525:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 526:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 527:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 528:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 529:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 530:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 531:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 532:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 533:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 534:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 535:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 536:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 537:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 538:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 539:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 540:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 541:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 542:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 543:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 544:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 545:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 546:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 547:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 548:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 549:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 550:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 551:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 552:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 553:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 554:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 555:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 556:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 557:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 558:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 559:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 560:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 561:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 562:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 563:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 564:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 565:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 566:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 567:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 568:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 569:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 570:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 571:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 572:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 573:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 574:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 575:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 576:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 577:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 578:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 581:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 583:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 585:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 586:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 587:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 588:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 589:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 590:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 591:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 592:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 593:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 594:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 595:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 596:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 597:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 598:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 599:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 600:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 601:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 602:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 603:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 604:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 605:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 606:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 607:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 608:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 609:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 610:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 611:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 612:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 613:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 614:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 615:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 616:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 617:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 618:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 619:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 620:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 621:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 622:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 623:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 624:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 625:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 626:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 627:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 628:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 629:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 632:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 634:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 636:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 637:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 638:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 640:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 641:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 642:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 643:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 644:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 645:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 646:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 647:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 649:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 650:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 651:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 652:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 653:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 654:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 655:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 656:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 657:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION
 658:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 659:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 660:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 661:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 662:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 663:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 664:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 665:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 666:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 667:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 668:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 669:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 670:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 671:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 672:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 673:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 674:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 675:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 676:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_RS_PRIORITY_t;
 677:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 678:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 679:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 680:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 681:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 682:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 683:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 684:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 685:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level i
 686:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level i
 687:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 688:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 689:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 690:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 691:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 692:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 693:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 694:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 695:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 696:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 697:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_BOUNDARY_SELECT_t;
 698:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 699:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 701:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 702:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 703:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 704:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 705:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_0   = 0,
 706:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_1,
 707:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 708:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_2,
 709:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_INDEX_3
 710:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 711:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_INDEX_t;
 712:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 713:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 714:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 715:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 716:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** */
 717:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 718:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 720:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 721:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 722:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 723:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 724:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 725:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 726:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 727:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 728:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 729:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 730:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 731:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 732:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 733:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 734:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 735:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 736:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 737:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 738:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 739:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 740:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 741:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 742:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 743:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 744:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 745:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 746:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 747:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 748:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 749:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 750:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 751:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 752:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SHS_GAIN_LEVEL_t;
 753:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 754:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 755:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 756:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 757:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 758:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 759:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 760:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 761:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 762:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SHS_LOOP_CH_t;
 763:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 764:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 765:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 766:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 767:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 768:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 769:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 770:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 771:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 772:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 773:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 774:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 775:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 776:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 777:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 778:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 779:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 780:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 781:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 782:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 783:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 784:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 785:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 786:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 787:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 788:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_BOUNDARY_NODE_t;
 789:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 790:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 791:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 792:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 793:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 794:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 795:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 796:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 797:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 798:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 799:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 800:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 801:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 802:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SYNCTR_EVAL_t;
 803:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 804:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 805:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 806:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 807:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 808:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 809:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma push
 810:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma anon_unions
 811:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 812:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma warning 586
 813:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 814:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 815:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 816:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 817:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 818:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 819:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 820:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request s
 821:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 822:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 823:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion s
 824:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 825:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 826:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 827:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 828:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 829:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 830:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 831:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as the 
 832:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 833:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 834:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 835:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
 836:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 837:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
 838:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigger. U
 839:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 840:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
 841:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 842:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 843:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
 844:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating. Us
 845:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 846:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 8;
 847:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant sampl
 848:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 849:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 3;
 850:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 851:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t asctrl;
 852:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 853:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 854:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 855:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 856:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 857:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 2;
 858:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trigger 
 859:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conversi
 860:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion com
 861:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 862:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_LOAD_
 863:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 26;
 864:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 865:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t asmr;
 866:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 867:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 868:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 869:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 870:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 871:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 872:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 873:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 874:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 875:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 876:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 877:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 878:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 879:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 880:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 881:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 882:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t input_class                : 2;  /**< Input conversion class selection.
 883:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 884:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 2;
 885:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bound?
 886:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 887:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bound?
 888:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 889:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 890:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 891:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the configu
 892:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either VARef
 893:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 894:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 4;
 895:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result_reg_number          : 4;  /**< Group result register number */
 896:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t use_global_result          : 1;  /**< Use global result register for background requ
 897:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result_alignment           : 1;  /**< Alignment of the results read in the result re
 898:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 899:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                            : 6;
 900:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor for 
 901:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 902:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacitor is
 903:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 904:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t chctr;
 905:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 906:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 907:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 908:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 909:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 910:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 8;
 911:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 912:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should cha
 913:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 914:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should cha
 915:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 916:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should cha
 917:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 918:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should cha
 919:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 920:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 921:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 4;
 922:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 923:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 4;
 924:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 925:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 926:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 927:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 928:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 929:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 930:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 931:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the specific 
 932:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the specific 
 933:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the specific 
 934:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the specific 
 935:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 936:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 12;
 937:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 938:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t bfl;
 939:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 940:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 941:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 942:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 943:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 944:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 945:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 0
 946:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 947:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 1
 948:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 949:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 2
 950:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 951:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 3
 952:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 953:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 16;
 954:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 955:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t bflc;
 956:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 957:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 958:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   bool    channel_priority;  /**< Only non priority channels can be converted by Background Request
 959:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (which
 960:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 961:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 962:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 963:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 964:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 965:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 966:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 967:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 968:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 969:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 970:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 971:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 972:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 973:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<BR>Ra
 974:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back into t
 975:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 976:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trigger.
 977:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                    : 24;
 978:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 979:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 980:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qinr0;
 981:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
 982:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 983:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
 984:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 985:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 986:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 987:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 988:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
 989:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request s
 990:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 991:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 992:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC_G
 993:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
 994:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
 995:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
 996:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 997:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 998:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as the
 999:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
1000:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
1001:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1002:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1003:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1004:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1005:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigger.
1006:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
1007:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
1008:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
1009:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
1010:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 1;
1011:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating.
1012:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
1013:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 8;
1014:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be act
1015:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 3;
1016:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1017:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qctrl0;
1018:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1019:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1020:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1021:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1022:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1023:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                   : 2;
1024:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1025:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                   : 29;
1026:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1027:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t qmr0;
1028:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1029:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1030:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1031:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1032:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1033:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1034:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1035:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1036:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1037:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1038:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1039:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1040:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1041:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1042:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly connect
1043:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1044:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1045:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly con
1046:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1047:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1048:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1049:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected via EM
1050:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1051:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1052:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connected vi
1053:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1054:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1055:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1056:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 16;
1057:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1058:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1059:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globiclass;
1060:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1061:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1062:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1063:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1064:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1065:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1066:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1067:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1068:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1069:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1070:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1071:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1072:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1073:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1074:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 0x1F
1075:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 2;
1076:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter */
1077:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Range:
1078:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 5;
1079:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 17;
1080:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1081:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globcfg;
1082:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1083:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1084:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1085:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1086:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1087:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1088:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1089:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1090:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1091:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1092:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1093:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1094:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1095:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1096:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1097:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1098:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1099:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1100:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1101:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globbound;
1102:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1103:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1104:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1105:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1106:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0]*
1107:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1]*
1108:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1109:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1110:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1111:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1112:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 16;
1113:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1114:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1115:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be overwr
1116:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1117:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 6;
1118:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new result.
1119:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1120:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t globrcr;
1121:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1122:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1123:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1124:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1125:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1127:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                             : 2;
1128:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sleep 
1129:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                             : 28;
1130:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1131:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t clc;
1132:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1133:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1134:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1135:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1136:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1137:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1138:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1139:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1140:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1141:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1142:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1143:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1144:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1145:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1146:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly connect
1147:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1148:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1149:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly con
1150:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1151:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1152:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected via EM
1153:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1154:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 3;
1155:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connected vi
1156:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1157:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                                 : 5;
1158:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1159:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_iclass0;
1160:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1161:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1162:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1163:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1165:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1166:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1167:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1168:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1169:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1170:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1171:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1172:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1173:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC will
1174:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1175:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1176:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 13;
1177:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1178:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected. */
1179:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1180:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected. */
1181:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 5;
1182:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1183:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Steady,
1184:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1185:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC_VAD
1186:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external cha
1187:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1188:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b connect
1189:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1190:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 1;
1191:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1192:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                           : 2;
1193:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1194:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1195:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_emuxctr;
1196:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1197:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1198:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1200:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1201:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1202:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1203:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1204:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1205:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1206:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1207:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[0]
1208:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[1]
1209:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1210:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1211:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1212:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1213:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1214:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1215:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1216:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t            : 4;
1217:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1218:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_bound;
1219:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1220:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1221:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1222:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1223:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1224:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 4;
1225:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1226:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 1;
1227:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode or 
1228:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1229:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 24;
1230:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1231:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_arbcfg;
1232:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1233:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1234:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1235:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1236:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1237:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1238:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1239:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1240:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1241:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1242:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1243:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1244:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1245:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 16;
1246:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1247:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_VADC_
1248:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1249:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1250:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1251:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 2;
1252:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous results 
1253:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIFO? *
1254:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                         : 4;
1255:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new result.
1256:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1257:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t g_rcr;
1258:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1259:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1260:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1261:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1262:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1263:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1264:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1265:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1266:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1267:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1268:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1269:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1270:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1271:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1272:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            : 3;  /**< Select a Sample and hold unit for the stepper's 
1273:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             : 1; /**< Should the step be added to the sequence */
1275:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            : 3;  /**< Select a Sample and hold unit for the stepper's 
1276:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             : 1; /**< Should the step be added to the sequence */
1278:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            : 3;  /**< Select a Sample and hold unit for the stepper's 
1279:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1280:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             : 1; /**< Should the step be added to the sequence */
1281:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            : 3;  /**< Select a Sample and hold unit for the stepper's 
1282:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1283:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             : 1; /**< Should the step be added to the sequence */
1284:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            : 3;  /**< Select a Sample and hold unit for the stepper's 
1285:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1286:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             : 1; /**< Should the step be added to the sequence */
1287:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            : 3;  /**< Select a Sample and hold unit for the stepper's 
1288:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1289:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             : 1; /**< Should the step be added to the sequence */
1290:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            : 3;  /**< Select a Sample and hold unit for the stepper's 
1291:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1292:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             : 1; /**< Should the step be added to the sequence */
1293:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            : 3;  /**< Select a Sample and hold unit for the stepper's 
1294:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1295:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             : 1; /**< Should the step be added to the sequence */
1296:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1297:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1298:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1299:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1300:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1301:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1302:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1303:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1304:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1305:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1306:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1307:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1308:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1309:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1310:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1311:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1312:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        : 4; /**< The divider value for the SHS clock. Range: [0x0 
1313:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 6;
1314:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1315:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 10;
1316:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1317:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  : 2; /**< It is possible to different reference voltage for
1318:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          : 20;
1319:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1320:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1321:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1322:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1323:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1324:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1325:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_CONFIG_t;
1326:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1327:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1328:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1329:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1330:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1331:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1332:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1333:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1334:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1335:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1336:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1337:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1338:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   : 16; /**< Result of the Analog to digital conversion*/
1339:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             : 4;  /**< Indicates the group to which the channel_number 
1340:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           : 5;  /**< Converted channel number*/
1341:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      : 3;   /**< Converted external multiplexer channel number.
1342:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1343:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source : 2;  /**< Converted request source*/
1344:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      : 1;  /**< Fast compare result if conversion mode is fast c
1345:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             : 1;  /**< Valid flag is set when a new result is available
1346:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1347:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1348:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1349:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1350:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1351:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1352:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1353:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1354:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1355:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1356:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1357:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1358:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1359:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1360:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   : 16; /**< Result of the Analog to digital conversion*/
1361:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   : 4;  /**< Results reduction counter value*/
1362:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           : 5;  /**< Converted channel number*/
1363:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      : 3;   /**< Converted external multiplexer channel number.
1364:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1365:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source : 2;  /**< Converted request source*/
1366:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      : 1;  /**< Fast compare result if conversion mode is fast c
1367:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             : 1;  /**< Valid flag is set when a new result is available
1368:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1369:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1370:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1371:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1372:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1373:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1374:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1375:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1376:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma pop
1377:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1378:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #pragma warning restore
1379:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1380:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1381:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1382:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1383:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1385:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1386:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1387:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1388:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr 
1389:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1390:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1391:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1392:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1393:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1394:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1395:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1396:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1397:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1398:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1399:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1400:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1401:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1402:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1403:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1404:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1405:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1406:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1407:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1408:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1409:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1410:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1411:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1412:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1413:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1415:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1416:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1417:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1418:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1419:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1420:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1421:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1426:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1427:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1428:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1429:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1430:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1431:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1432:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1433:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1434:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1435:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1436:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1437:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1438:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1439:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1444:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1445:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1446:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1447:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1448:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1450:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1451:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1452:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1453:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1454:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1455:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1456:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1457:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1459:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1461:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1462:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1463:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1464:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1465:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1466:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1467:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1468:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1469:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1470:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1471:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1472:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1473:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1474:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1475:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1476:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1477:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1479:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1481:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1482:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1483:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1485:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1486:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1487:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1488:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1489:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1490:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1491:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1492:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1493:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1494:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1495:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1496:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1497:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1498:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1499:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1500:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1501:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1502:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1503:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1504:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1505:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1506:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1507:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1508:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1509:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1510:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1511:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1512:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1513:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1514:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1515:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1516:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1517:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1518:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1519:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1520:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1521:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1522:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1523:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1524:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1525:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1526:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1527:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1528:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1529:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1530:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1531:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1532:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1533:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1534:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1535:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1536:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1537:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1538:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1539:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1540:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1541:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1542:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1543:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1544:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1545:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1546:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1547:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1548:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1550:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1551:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1552:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1553:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1554:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1555:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1556:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1557:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1558:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1559:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1560:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1561:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1562:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1563:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1564:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1565:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1566:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1567:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1568:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1569:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1570:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1571:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1572:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1573:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1574:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1575:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1576:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1578:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1579:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1580:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
1581:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1582:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1583:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1584:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1585:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1586:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1588:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1589:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1590:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1591:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1592:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1593:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1594:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1596:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1597:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1598:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1600:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1601:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC
1602:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1603:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1604:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1605:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1606:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1607:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1608:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1609:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1610:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1611:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1612:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1614:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1616:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1617:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1618:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1619:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1620:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1622:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1623:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1624:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1625:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1626:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1627:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1628:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1629:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1630:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1631:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1632:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1633:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1634:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1636:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1637:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1638:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1639:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1640:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1641:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1642:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1643:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1644:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1645:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
1646:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1647:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1648:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
1649:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1650:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1651:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1652:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1653:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1654:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1655:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1656:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1657:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1658:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1659:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1660:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1661:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1662:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1663:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1664:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1665:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1666:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1667:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1668:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1669:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1670:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1671:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1672:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1673:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** {
  27              	 .loc 1 1673 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
1674:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1675:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** 
1676:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
  44              	 .loc 1 1676 0
  45 000a 7B68     	 ldr r3,[r7,#4]
  46 000c D3F88020 	 ldr r2,[r3,#128]
  47 0010 3B68     	 ldr r3,[r7]
  48 0012 1033     	 adds r3,r3,#16
  49 0014 1946     	 mov r1,r3
  50 0016 0123     	 movs r3,#1
  51 0018 8B40     	 lsls r3,r3,r1
  52 001a 1A43     	 orrs r2,r2,r3
  53 001c 7B68     	 ldr r3,[r7,#4]
  54 001e C3F88020 	 str r2,[r3,#128]
1677:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_vadc.h **** }
  55              	 .loc 1 1677 0
  56 0022 0C37     	 adds r7,r7,#12
  57              	.LCFI3:
  58              	 .cfi_def_cfa_offset 4
  59 0024 BD46     	 mov sp,r7
  60              	.LCFI4:
  61              	 .cfi_def_cfa_register 13
  62              	 
  63 0026 5DF8047B 	 ldr r7,[sp],#4
  64              	.LCFI5:
  65              	 .cfi_restore 7
  66              	 .cfi_def_cfa_offset 0
  67 002a 7047     	 bx lr
  68              	 .cfi_endproc
  69              	.LFE182:
  71              	 .section .text.GLOBAL_ADC_GetAppVersion,"ax",%progbits
  72              	 .align 2
  73              	 .global GLOBAL_ADC_GetAppVersion
  74              	 .thumb
  75              	 .thumb_func
  77              	GLOBAL_ADC_GetAppVersion:
  78              	.LFB256:
  79              	 .file 2 "../Dave/Generated/GLOBAL_ADC/global_adc.c"
   1:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**
   2:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @file global_adc.c
   3:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @date 2017-06-24
   4:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
   5:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * NOTE:
   6:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
   8:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @cond
   9:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  10:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * GLOBAL_ADC v4.0.22 - Initializes VADC GLOBAL and GROUP resources.
  11:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  12:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * All rights reserved.
  14:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  15:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * following conditions are met:
  17:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  18:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   disclaimer.
  20:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  21:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  24:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  27:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  35:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  38:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  39:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Change History
  40:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * --------------
  41:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  42:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-02-16:
  43:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Initial version for DAVEv4.<BR>
  44:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  45:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-04-27:
  46:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Configuration structure modified.<BR>
  47:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - GLOBAL_ADC_group_t changed to GLOBAL_ADC_GROUP_t.<BR>
  48:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  49:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-06-20:
  50:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Updated the copyright section.<BR>
  51:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  52:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-09-01:
  53:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC14 and XMC48/47.<BR>
  54:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  55:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-10-01:
  56:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Analog clock default value changed to 26Mhz in XMC42.<BR>
  57:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  58:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-10-08:
  59:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC4700/XMC4800 devices.<BR>
  60:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  61:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-12-03:
  62:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC4300 devices.<BR>
  63:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Optimized the manifest.<BR>
  64:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  65:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-03-18:
  66:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     -Modified the minimum configurable value for Desired analog clock in XMC1x to 1MHz.<BR>
  67:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  68:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-07-08:
  69:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Fixed incorrect case for an included header.<br>
  70:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  71:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-08-18:
  72:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for low frequency operations by configuring DIVS.<BR>
  73:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  74:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @endcond
  75:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  76:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  */
  77:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  78:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  79:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * HEADER FILES
  80:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  81:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  82:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /** Inclusion of header file */
  83:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #include "global_adc.h"
  84:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  85:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  86:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * MACROS
  87:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  88:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  89:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  90:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * LOCAL DATA
  91:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  92:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  93:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  94:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * LOCAL ROUTINES
  95:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  96:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  97:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  /*************************************************************************************************
  98:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * API IMPLEMENTATION
  99:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
 100:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 101:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /*This function returns the version of the GLOBAL_ADC APP*/
 102:../Dave/Generated/GLOBAL_ADC/global_adc.c **** DAVE_APP_VERSION_t GLOBAL_ADC_GetAppVersion(void)
 103:../Dave/Generated/GLOBAL_ADC/global_adc.c **** {
  80              	 .loc 2 103 0
  81              	 .cfi_startproc
  82              	 
  83              	 
  84              	 
  85 0000 80B4     	 push {r7}
  86              	.LCFI6:
  87              	 .cfi_def_cfa_offset 4
  88              	 .cfi_offset 7,-4
  89 0002 83B0     	 sub sp,sp,#12
  90              	.LCFI7:
  91              	 .cfi_def_cfa_offset 16
  92 0004 00AF     	 add r7,sp,#0
  93              	.LCFI8:
  94              	 .cfi_def_cfa_register 7
 104:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   DAVE_APP_VERSION_t version;
 105:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 106:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.major = (uint8_t) GLOBAL_ADC_MAJOR_VERSION;
  95              	 .loc 2 106 0
  96 0006 0423     	 movs r3,#4
  97 0008 3B70     	 strb r3,[r7]
 107:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.minor = (uint8_t) GLOBAL_ADC_MINOR_VERSION;
  98              	 .loc 2 107 0
  99 000a 0023     	 movs r3,#0
 100 000c 7B70     	 strb r3,[r7,#1]
 108:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.patch = (uint8_t) GLOBAL_ADC_PATCH_VERSION;
 101              	 .loc 2 108 0
 102 000e 1623     	 movs r3,#22
 103 0010 BB70     	 strb r3,[r7,#2]
 109:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 110:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   return version;
 104              	 .loc 2 110 0
 105 0012 3B1D     	 adds r3,r7,#4
 106 0014 3A46     	 mov r2,r7
 107 0016 1268     	 ldr r2,[r2]
 108 0018 1146     	 mov r1,r2
 109 001a 1980     	 strh r1,[r3]
 110 001c 0233     	 adds r3,r3,#2
 111 001e 120C     	 lsrs r2,r2,#16
 112 0020 1A70     	 strb r2,[r3]
 113 0022 0023     	 movs r3,#0
 114 0024 3A79     	 ldrb r2,[r7,#4]
 115 0026 62F30703 	 bfi r3,r2,#0,#8
 116 002a 7A79     	 ldrb r2,[r7,#5]
 117 002c 62F30F23 	 bfi r3,r2,#8,#8
 118 0030 BA79     	 ldrb r2,[r7,#6]
 119 0032 62F31743 	 bfi r3,r2,#16,#8
 111:../Dave/Generated/GLOBAL_ADC/global_adc.c **** }
 120              	 .loc 2 111 0
 121 0036 1846     	 mov r0,r3
 122 0038 0C37     	 adds r7,r7,#12
 123              	.LCFI9:
 124              	 .cfi_def_cfa_offset 4
 125 003a BD46     	 mov sp,r7
 126              	.LCFI10:
 127              	 .cfi_def_cfa_register 13
 128              	 
 129 003c 5DF8047B 	 ldr r7,[sp],#4
 130              	.LCFI11:
 131              	 .cfi_restore 7
 132              	 .cfi_def_cfa_offset 0
 133 0040 7047     	 bx lr
 134              	 .cfi_endproc
 135              	.LFE256:
 137 0042 00BF     	 .section .text.GLOBAL_ADC_Init,"ax",%progbits
 138              	 .align 2
 139              	 .global GLOBAL_ADC_Init
 140              	 .thumb
 141              	 .thumb_func
 143              	GLOBAL_ADC_Init:
 144              	.LFB257:
 112:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 113:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**
 114:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * This function initializes all instances of the ADC Global APP and low level app.
 115:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  */
 116:../Dave/Generated/GLOBAL_ADC/global_adc.c **** GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
 117:../Dave/Generated/GLOBAL_ADC/global_adc.c **** {
 145              	 .loc 2 117 0
 146              	 .cfi_startproc
 147              	 
 148              	 
 149 0000 80B5     	 push {r7,lr}
 150              	.LCFI12:
 151              	 .cfi_def_cfa_offset 8
 152              	 .cfi_offset 7,-8
 153              	 .cfi_offset 14,-4
 154 0002 84B0     	 sub sp,sp,#16
 155              	.LCFI13:
 156              	 .cfi_def_cfa_offset 24
 157 0004 00AF     	 add r7,sp,#0
 158              	.LCFI14:
 159              	 .cfi_def_cfa_register 7
 160 0006 7860     	 str r0,[r7,#4]
 118:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
 119:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 120:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   uint32_t group_index;
 121:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 122:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 123:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 161              	 .loc 2 123 0
 162 0008 7B68     	 ldr r3,[r7,#4]
 163 000a 1B7E     	 ldrb r3,[r3,#24]
 164 000c 022B     	 cmp r3,#2
 165 000e 49D1     	 bne .L5
 124:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   {  
 125:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     /* Initialize an instance of Global hardware */
 126:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 166              	 .loc 2 126 0
 167 0010 7B68     	 ldr r3,[r7,#4]
 168 0012 5A69     	 ldr r2,[r3,#20]
 169 0014 7B68     	 ldr r3,[r7,#4]
 170 0016 1B69     	 ldr r3,[r3,#16]
 171 0018 1046     	 mov r0,r2
 172 001a 1946     	 mov r1,r3
 173 001c FFF7FEFF 	 bl XMC_VADC_GLOBAL_Init
 127:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 128:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     /* Initialize all the Groups */
 129:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 174              	 .loc 2 130 0
 175 0020 0023     	 movs r3,#0
 176 0022 FB60     	 str r3,[r7,#12]
 177 0024 2FE0     	 b .L6
 178              	.L8:
 131:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 132:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /*Initialize Group*/
 133:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 179              	 .loc 2 133 0
 180 0026 7B68     	 ldr r3,[r7,#4]
 181 0028 FA68     	 ldr r2,[r7,#12]
 182 002a 53F82230 	 ldr r3,[r3,r2,lsl#2]
 183 002e 1968     	 ldr r1,[r3]
 134:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 184              	 .loc 2 134 0
 185 0030 7B68     	 ldr r3,[r7,#4]
 186 0032 FA68     	 ldr r2,[r7,#12]
 187 0034 53F82230 	 ldr r3,[r3,r2,lsl#2]
 133:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 188              	 .loc 2 133 0
 189 0038 5B68     	 ldr r3,[r3,#4]
 190 003a 0846     	 mov r0,r1
 191 003c 1946     	 mov r1,r3
 192 003e FFF7FEFF 	 bl XMC_VADC_GROUP_Init
 135:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 136:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /* Switch on the converter of the Group[group_index]*/
 137:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 193              	 .loc 2 137 0
 194 0042 7B68     	 ldr r3,[r7,#4]
 195 0044 FA68     	 ldr r2,[r7,#12]
 196 0046 53F82230 	 ldr r3,[r3,r2,lsl#2]
 197 004a 1B68     	 ldr r3,[r3]
 198 004c 1846     	 mov r0,r3
 199 004e 0321     	 movs r1,#3
 200 0050 FFF7FEFF 	 bl XMC_VADC_GROUP_SetPowerMode
 138:../Dave/Generated/GLOBAL_ADC/global_adc.c ****                                   XMC_VADC_GROUP_POWERMODE_NORMAL);
 139:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 140:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /* Disable the post calibration option for the respective group*/
 141:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 201              	 .loc 2 141 0
 202 0054 7B68     	 ldr r3,[r7,#4]
 203 0056 FA68     	 ldr r2,[r7,#12]
 204 0058 53F82230 	 ldr r3,[r3,r2,lsl#2]
 205 005c 1B7A     	 ldrb r3,[r3,#8]
 206 005e 83F00103 	 eor r3,r3,#1
 207 0062 DBB2     	 uxtb r3,r3
 208 0064 002B     	 cmp r3,#0
 209 0066 05D0     	 beq .L7
 142:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       {
 143:../Dave/Generated/GLOBAL_ADC/global_adc.c ****         XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 210              	 .loc 2 143 0
 211 0068 7B68     	 ldr r3,[r7,#4]
 212 006a 5B69     	 ldr r3,[r3,#20]
 213 006c 1846     	 mov r0,r3
 214 006e F968     	 ldr r1,[r7,#12]
 215 0070 FFF7FEFF 	 bl XMC_VADC_GLOBAL_DisablePostCalibration
 216              	.L7:
 144:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       }
 145:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 146:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 147:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t
 148:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 149:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 150:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 217              	 .loc 2 150 0 discriminator 2
 218 0074 7B68     	 ldr r3,[r7,#4]
 219 0076 FA68     	 ldr r2,[r7,#12]
 220 0078 53F82230 	 ldr r3,[r3,r2,lsl#2]
 221 007c 0022     	 movs r2,#0
 222 007e 5A72     	 strb r2,[r3,#9]
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 223              	 .loc 2 130 0 discriminator 2
 224 0080 FB68     	 ldr r3,[r7,#12]
 225 0082 0133     	 adds r3,r3,#1
 226 0084 FB60     	 str r3,[r7,#12]
 227              	.L6:
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 228              	 .loc 2 130 0 is_stmt 0 discriminator 1
 229 0086 FB68     	 ldr r3,[r7,#12]
 230 0088 032B     	 cmp r3,#3
 231 008a CCD9     	 bls .L8
 151:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     }
 152:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 153:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE
 154:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 155:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif /* _XMC_VADC_GROUP_AVAILABLE_ */
 156:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 157:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
 158:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 159:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     if((bool)true == handle_ptr->enable_startup_calibration)
 232              	 .loc 2 159 0 is_stmt 1
 233 008c 7B68     	 ldr r3,[r7,#4]
 234 008e 5B7E     	 ldrb r3,[r3,#25]
 235 0090 002B     	 cmp r3,#0
 236 0092 04D0     	 beq .L9
 160:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 161:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 237              	 .loc 2 161 0
 238 0094 7B68     	 ldr r3,[r7,#4]
 239 0096 5B69     	 ldr r3,[r3,#20]
 240 0098 1846     	 mov r0,r3
 241 009a FFF7FEFF 	 bl XMC_VADC_GLOBAL_StartupCalibration
 242              	.L9:
 162:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     }
 163:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 243              	 .loc 2 163 0
 244 009e 7B68     	 ldr r3,[r7,#4]
 245 00a0 0022     	 movs r2,#0
 246 00a2 1A76     	 strb r2,[r3,#24]
 247              	.L5:
 164:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   }
 165:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   return (handle_ptr->init_state);
 248              	 .loc 2 165 0
 249 00a4 7B68     	 ldr r3,[r7,#4]
 250 00a6 1B7E     	 ldrb r3,[r3,#24]
 166:../Dave/Generated/GLOBAL_ADC/global_adc.c **** }
 251              	 .loc 2 166 0
 252 00a8 1846     	 mov r0,r3
 253 00aa 1037     	 adds r7,r7,#16
 254              	.LCFI15:
 255              	 .cfi_def_cfa_offset 8
 256 00ac BD46     	 mov sp,r7
 257              	.LCFI16:
 258              	 .cfi_def_cfa_register 13
 259              	 
 260 00ae 80BD     	 pop {r7,pc}
 261              	 .cfi_endproc
 262              	.LFE257:
 264              	 .text
 265              	.Letext0:
 266              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 267              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 268              	 .file 5 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 269              	 .file 6 "C:/work_mari/XMC4800/pwm_adc/Dave/Generated/DAVE_Common.h"
 270              	 .file 7 "../Dave/Generated/GLOBAL_ADC/global_adc.h"
 271              	 .file 8 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Include/cmsis_gcc.h"
 272              	 .file 9 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Include/core_cm4.h"
 273              	 .file 10 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 global_adc.c
    {standard input}:20     .text.XMC_VADC_GLOBAL_DisablePostCalibration:00000000 $t
    {standard input}:24     .text.XMC_VADC_GLOBAL_DisablePostCalibration:00000000 XMC_VADC_GLOBAL_DisablePostCalibration
    {standard input}:72     .text.GLOBAL_ADC_GetAppVersion:00000000 $t
    {standard input}:77     .text.GLOBAL_ADC_GetAppVersion:00000000 GLOBAL_ADC_GetAppVersion
    {standard input}:138    .text.GLOBAL_ADC_Init:00000000 $t
    {standard input}:143    .text.GLOBAL_ADC_Init:00000000 GLOBAL_ADC_Init
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_VADC_GLOBAL_Init
XMC_VADC_GROUP_Init
XMC_VADC_GROUP_SetPowerMode
XMC_VADC_GLOBAL_StartupCalibration
