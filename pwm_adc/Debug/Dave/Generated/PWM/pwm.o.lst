   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pwm.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU8_EnableClock,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU8_EnableClock:
  25              	.LFB153:
  26              	 .file 1 "C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc/xmc_ccu8.h"
   1:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
   2:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @date 2019-07-29
   4:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   5:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @cond
   6:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *****************************************************************************
   7:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   9:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * All rights reserved.
  11:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  12:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  14:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * do so, all subject to the following:
  20:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  21:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a source language processor.
  27:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  28:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  36:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * at XMCSupport@infineon.com.
  39:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *****************************************************************************
  40:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  41:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Change History
  42:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * --------------
  43:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  44:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-02-20:
  45:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Initial <br>
  46:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Documentation updates <br>
  47:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  48:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-06-20:
  49:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  51:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       during external load event.
  52:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  53:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-01:
  54:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  55:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  56:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-24:
  57:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  58:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  59:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-08-17:
  60:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  61:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  62:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  63:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  64:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  65:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  66:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to support XMC14 devices.
  67:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  68:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  69:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  70:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  71:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-09-29:
  72:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  73:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       settings.
  74:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  75:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-10-07:
  76:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  77:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  78:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  79:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  80:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  81:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  82:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  83:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-03-09:
  84:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Optimization of write only registers
  85:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  86:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-05-20:
  87:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_StopClearTimer()
  88:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_StopTimer() and XMC_CCU8_SLICE_ClearTimer()
  89:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  90:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2017-04-27:
  91:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU8_SLICE_PRESCALER_t
  92:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  93:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2017-09-15:
  94:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Fix XMC_CCU8_SLICE_SetShadowTransferMode()
  95:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added parity checking functionality
  96:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  97:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2019-03-30:
  98:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_StartPrescaler(), XMC_CCU8_StartParityChecker(), XMC_CCU8_StopPrescaler()
  99:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_EnableMultipleClocks(), XMC_CCU8_EnableClock(), XMC_CCU8_DisableClock() to avoid 
 100:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_SetEvent(), XMC_CCU8_SLICE_ClearEvent() to avoid RMW access
 101:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SetSuspendMode(), XMC_CCU8_SLICE_GetPrescaler()
 102:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_GetTimerCompareMatchChannel1() and XMC_CCU8_SLICE_GetTimerCompareMatc
 103:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 104:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2019-07-29:
 105:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_GetSliceStatusBit()
 106:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 107:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @endcond
 108:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 109:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 110:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifndef XMC_CCU8_H
 111:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_H
 112:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 113:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 114:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * HEADER FILES
 115:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 116:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #include "xmc_common.h"
 117:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 118:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80)
 119:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 120:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC1
 121:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #include "xmc1_ccu8_map.h"
 122:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 123:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 124:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC4
 125:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #include "xmc4_ccu8_map.h"
 126:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 127:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 128:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 129:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 130:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 131:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 132:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 133:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 134:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup CCU8
 135:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 136:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 137:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 138:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 139:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 140:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 141:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 142:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 143:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 144:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 145:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 146:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 147:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Note:
 148:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 149:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 150:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 151:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 152:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t,
 153:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 154:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 155:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 156:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 157:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 158:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 159:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 160:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 161:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 162:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 163:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Capture configuration:
 164:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 165:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 166:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 167:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 168:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 169:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 170:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 171:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 172:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Function/Event configuration:
 173:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 174:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 175:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 176:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 177:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 178:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(),
 179:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 180:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 181:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 182:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 183:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 184:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 185:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Interrupt configuration:
 186:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 187:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 188:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 189:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 190:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 191:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 192:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * MACROS
 193:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 194:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 195:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 196:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 197:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 198:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 199:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 200:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 201:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 202:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 203:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 204:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 205:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 206:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 207:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 208:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 209:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 210:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 211:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 212:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * ENUMS
 213:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 214:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 215:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 216:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 217:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 218:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 219:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 220:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 221:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 222:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 223:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 224:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 225:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 226:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Return Value of an API
 227:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 228:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 229:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 230:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 231:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR,        /**< API cannot fulfil request */
 232:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING,      /**< The timer slice is currently running */
 233:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 234:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 235:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 236:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 237:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 module clock
 238:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 239:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 240:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 241:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 242:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A,      /**< External clock-A */
 243:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B,      /**< External clock-B */
 244:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 245:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 246:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 247:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 248:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 249:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 250:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 251:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 252:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 253:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 254:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 255:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 256:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 257:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 258:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 259:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 260:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 261:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 262:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 263:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 264:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 265:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 266:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 267:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 268:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 269:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 270:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 271:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 272:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 273:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 274:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 275:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 276:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 277:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 278:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 279:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 280:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Slice Output selection
 281:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 282:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 283:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 284:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 285:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 286:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 287:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 288:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 289:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 290:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 291:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer counting modes for the slice
 292:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 293:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 294:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 295:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 296:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 297:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 298:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 299:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 300:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer repetition mode for the slice
 301:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 302:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 303:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 304:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 305:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 306:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 307:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 308:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 309:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 310:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 311:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 312:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 313:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 314:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 315:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 316:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 317:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 318:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 319:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Capture mode register sets
 320:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 321:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 322:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 323:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 324:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 325:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 326:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 327:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 328:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Prescaler mode
 329:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 330:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 331:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 332:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 333:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 334:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 335:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 336:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 337:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer output passive level
 338:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 339:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 340:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 341:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 342:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 343:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 344:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 345:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 346:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare Channel selection
 347:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 348:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 349:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 350:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 351:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 352:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 353:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 354:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 355:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer clock Divider
 356:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 357:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 358:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 359:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 360:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2,       /**< Slice Clock = fccu8/2 */
 361:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4,       /**< Slice Clock = fccu8/4 */
 362:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8,       /**< Slice Clock = fccu8/8 */
 363:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16,      /**< Slice Clock = fccu8/16 */
 364:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32,      /**< Slice Clock = fccu8/32 */
 365:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64,      /**< Slice Clock = fccu8/64 */
 366:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128,     /**< Slice Clock = fccu8/128 */
 367:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256,     /**< Slice Clock = fccu8/256 */
 368:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512,     /**< Slice Clock = fccu8/512 */
 369:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024,    /**< Slice Clock = fccu8/1024 */
 370:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048,    /**< Slice Clock = fccu8/2048 */
 371:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096,    /**< Slice Clock = fccu8/4096 */
 372:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192,    /**< Slice Clock = fccu8/8192 */
 373:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384,   /**< Slice Clock = fccu8/16384 */
 374:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 375:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 376:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 377:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 378:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 379:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 380:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 381:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 382:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 383:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2,       /**< DTC clock = Slice Clock/2 */
 384:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4,       /**< DTC clock = Slice Clock/4 */
 385:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 386:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 387:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 388:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 389:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 390:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 391:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 392:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 393:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 394:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 395:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2,             /**< Channel-2 status connected to Slice Status */
 396:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2, /**< \b Wired \b AND of Channel-1 and Channel-2 status con
 397:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     Slice status */
 398:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 399:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 400:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 401:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 402:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 403:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 404:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 405:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 406:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 407:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 408:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 409:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 410:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1,          /**< Modulation for Compare Channel-1 */
 411:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2,          /**< Modulation for Compare Channel-2 */
 412:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 413:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 414:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 415:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 416:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Function list
 417:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 418:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 419:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 420:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 421:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP,                 /**< Stop function */
 422:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0, /**< Capture Event-0 function, CCycapt0 signal is used fo
 423:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 424:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1, /**< Capture Event-1 function, CCycapt1 signal is used fo
 425:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 426:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING,               /**< Gating function */
 427:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION,            /**< Direction function */
 428:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD,                 /**< Load function */
 429:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT,                /**< Counting function */
 430:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE,             /**< Override function */
 431:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION,           /**< Modulation function */
 432:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 433:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 434:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 435:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 436:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event list
 437:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 438:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 439:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 440:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 441:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0,          /**< Event-0 */
 442:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1,          /**< Event-1 */
 443:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 444:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 445:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 446:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 447:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 448:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 449:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 450:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 451:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 452:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE, /**< Rising Edge of the input signal generates
 453:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  event trigger */
 454:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE, /**< Falling Edge of the input signal generat
 455:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  trigger */
 456:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 457:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 458:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 459:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 460:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 461:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 462:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 463:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 464:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 465:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 466:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   /* Below enum items can be utilised specific to the functionality */
 467:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 468:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 469:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 470:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 471:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 472:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 473:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 474:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 475:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 476:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 477:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES,       /**< Input should be stable for 3 clock cycles */
 478:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES,       /**< Input should be stable for 5 clock cycles */
 479:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 480:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 481:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 482:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 483:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 484:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Interconnects are specific to each device.
 485:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 486:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 487:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 488:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 489:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 490:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 491:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 492:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 493:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 494:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 495:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR,           /**< Without stopping timer, clears the TIMER regi
 496:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 497:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 498:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 499:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 500:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 501:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 502:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 503:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 504:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 505:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 506:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 507:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 508:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 509:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Modulation of timer output signals
 510:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 511:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 512:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 513:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 514:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 515:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 516:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 517:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 518:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Trap exit mode
 519:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 520:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 521:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 522:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 523:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 524:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 525:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 526:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 527:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer clear on capture
 528:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 529:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 530:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 531:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 532:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH,      /**< Clear only when timer value has been captured
 533:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW,       /**< Clear only when timer value has been captured
 534:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 535:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 536:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 537:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 538:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 539:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 540:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 541:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 542:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 543:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 544:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 545:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 register values to the actual regis
 546:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 request */
 547:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 548:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 Compare register values to the actu
 549:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 MCS xfer request */
 550:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 551:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 552:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 553:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids
 554:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 555:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 556:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 557:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U,  /**< Period match counting up */
 558:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U,  /**< One match counting down */
 559:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U,  /**< Compare match counting up for channel 1
 560:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U,  /**< Compare match counting down for channel
 561:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U,  /**< Compare match counting up for channel 2
 562:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U,  /**< Compare match counting down for channel
 563:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U,  /**< Event-0 occurrence */
 564:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U,  /**< Event-1 occurrence */
 565:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 566:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 567:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 568:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 569:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 570:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 571:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 572:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 573:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 574:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 575:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 576:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 577:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 578:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 579:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 580:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 581:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 582:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 583:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 584:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 585:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 586:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 587:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 588:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 589:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 590:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 591:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1,         /**< Service Request Line-1 selected  */
 592:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2,         /**< Service Request Line-2 selected  */
 593:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 594:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 595:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 596:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 597:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 598:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer options.
 599:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 600:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 601:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 602:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 603:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 604:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-0 */
 605:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 606:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 607:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 608:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 609:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 610:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 611:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-1 */
 612:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 613:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual registers for S
 614:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 615:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 616:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 617:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 618:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-2 */
 619:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 620:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 621:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 622:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 623:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 624:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 625:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-3 */
 626:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 627:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 628:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 629:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 630:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 631:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 632:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 633:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 634:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 635:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Not available for XMC4500 series
 636:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 637:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 638:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 639:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 640:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                One match. */
 641:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 642:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 643:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 644:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 645:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 646:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 647:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 648:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 649:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 650:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 651:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SOURCE_OUT0
 652:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 653:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 654:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 655:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 656:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 657:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 658:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 659:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 660:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 661:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 662:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 663:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SOURCE_OUT1
 664:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 665:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 666:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 667:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 668:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 669:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 670:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 671:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 672:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Output sources for OUTy2 signal
 673:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 674:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 675:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SOURCE_OUT2
 676:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 677:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 678:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 679:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 680:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 681:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 682:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 683:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 684:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 685:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 686:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 687:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SOURCE_OUT3
 688:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 689:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 690:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 691:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 692:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 693:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 694:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 695:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 696:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 697:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 698:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 699:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 700:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 701:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 702:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 703:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 704:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 705:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 706:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 707:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 708:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 709:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 710:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 711:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 712:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
 713:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 714:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 715:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 716:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 717:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 718:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 719:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 720:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 721:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 722:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 723:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 724:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 725:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 726:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 727:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 728:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 729:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 730:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 731:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 732:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 733:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 734:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Immediate write into configuration register
 735:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 736:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 737:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 738:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 739:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 740:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 741:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 742:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 743:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 744:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 745:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 746:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 747:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 748:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 749:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 750:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 751:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 752:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 753:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 754:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 755:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 756:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Val
 757:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 758:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 759:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 760:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 761:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 762:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 763:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 764:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 765:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 766:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 767:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 768:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 769:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 770:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 771:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 772:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 773:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 774:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 775:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 776:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 777:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 778:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 779:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 780:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 781:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 782:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 783:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 784:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 785:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 786:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 787:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 788:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 789:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 790:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 791:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 792:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 793:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 794:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 795:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 796:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 797:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U,  /**< SLICE-0 */
 798:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U,  /**< SLICE-1 */
 799:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U,  /**< SLICE-2 */
 800:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 801:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 802:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 803:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 804:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects which signal is controlling the delay between the change at the CCU8 outputs and effect
 805:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 806:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DELAY_INPUT
 807:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 808:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTA = 0 << CCU8_GPCHK_PCDS_Pos,
 809:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTB = 1 << CCU8_GPCHK_PCDS_Pos,
 810:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTC = 2 << CCU8_GPCHK_PCDS_Pos,
 811:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTD = 3 << CCU8_GPCHK_PCDS_Pos
 812:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_t;
 813:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 814:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 815:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 816:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects which signal contains the driver parity information
 817:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 818:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT
 819:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 820:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_0 = 0 << CCU8_GPCHK_PISEL_Pos,
 821:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_1 = 1 << CCU8_GPCHK_PISEL_Pos,
 822:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_2 = 2 << CCU8_GPCHK_PISEL_Pos,
 823:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_3 = 3 << CCU8_GPCHK_PISEL_Pos,
 824:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_t;
 825:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 826:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 827:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects if we have an odd or even parity
 828:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 829:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_TYPE
 830:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 831:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_EVEN = 0 << CCU8_GPCHK_PCTS_Pos,
 832:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_ODD = 1 << CCU8_GPCHK_PCTS_Pos,
 833:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_TYPE_t;
 834:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 835:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 836:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects suspend mode
 837:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 838:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SUSPEND_MODE
 839:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 840:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_IGNORE = 0 << CCU8_GCTRL_SUSCFG_Pos, /**< Suspend request ignored. The modu
 841:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_STOPS_INMEDIATELLY = 1 << CCU8_GCTRL_SUSCFG_Pos, /**< Stops all the running
 842:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_SAFE_STOP = 2 << CCU8_GCTRL_SUSCFG_Pos, /**< Stops the block immediately an
 843:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_WAIT_ROLL_OVER = 3 << CCU8_GCTRL_SUSCFG_Pos /**< Waits for the roll over of
 844:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SUSPEND_MODE_t;
 845:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 846:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 847:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  CCU8 slice status bit
 848:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 849:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS_BIT
 850:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 851:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_BIT_PASSIVE = false, /**< Passive */
 852:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_BIT_ACTIVE  = true   /**< Active  */
 853:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_BIT_t;
 854:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 855:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 856:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 857:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DATA STRUCTURES
 858:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 859:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 860:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 861:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 862:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 863:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 864:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 865:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 866:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 867:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 868:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 869:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 870:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 871:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an level sensitive
 872:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 873:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 874:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 875:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 876:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 877:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #pragma push
 878:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #pragma anon_unions
 879:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 880:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #pragma warning 586
 881:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 882:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 883:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 884:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time configuration
 885:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 886:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 887:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 888:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 889:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 890:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 891:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 892:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 893:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 894:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 895:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 896:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-1? */
 897:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 898:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 899:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-2? */
 900:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 901:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 902:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 24;
 903:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 904:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dtc;
 905:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 906:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 907:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 908:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 909:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 910:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 911:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 912:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 913:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 914:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 915:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 916:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc1r;
 917:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 918:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 919:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 920:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 921:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 922:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 923:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 924:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 925:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 926:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 927:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 928:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc2r;
 929:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 930:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 931:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 932:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 933:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 934:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 935:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 936:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 937:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 938:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 939:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 940:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 941:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 942:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 943:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 944:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 945:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 946:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 947:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 10;
 948:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 949:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 950:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 951:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 952:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 953:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 8;
 954:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 955:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 956:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 957:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 958:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 959:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 960:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 961:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
 962:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 963:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 964:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 965:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 966:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 967:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0.
 968:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 969:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1.
 970:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 971:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2.
 972:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 973:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3.
 974:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 975:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 28;
 976:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 977:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t psl;
 978:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 979:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 980:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 981:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 982:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 983:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 984:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             rather than period value? */
 985:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */
 986:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 987:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 988:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 989:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 990:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 27;
 991:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
 992:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
 993:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 994:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t
 995:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register.
 996:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 997:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 998:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 999:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t
1000:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register.
1001:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
1002:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
1003:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
1004:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t
1005:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
1006:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
1007:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
1008:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
1009:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t
1010:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
1011:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
1012:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 14;
1013:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1014:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
1015:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t chc;
1016:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
1017:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value
1018:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
1019:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
1020:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
1021:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering
1022:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
1023:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
1024:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
1025:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1026:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1027:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
1028:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
1029:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1030:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
1031:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1032:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
1033:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
1034:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
1035:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
1036:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
1037:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
1038:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
1039:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
1040:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
1041:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
1042:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
1043:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
1044:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
1045:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 15;
1046:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
1047:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
1048:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
1049:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
1050:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
1051:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
1052:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
1053:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard end*/
1054:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
1055:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #pragma pop
1056:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
1057:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #pragma warning restore
1058:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1059:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
1060:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * API Prototypes
1061:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
1062:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifdef __cplusplus
1063:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** extern "C" {
1064:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1065:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1066:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
1067:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1068:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1069:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1070:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (module == CCU80);
1071:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1072:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)
1073:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
1074:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1075:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1076:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;
1077:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1078:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1079:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
1080:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1081:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1082:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1083:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1084:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC81)
1085:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1086:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1087:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC82)
1088:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1089:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1090:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC83)
1091:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1092:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1093:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)
1094:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1095:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC81)
1096:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1097:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1098:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC82)
1099:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1100:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1101:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC83)
1102:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1103:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1104:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1105:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1106:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;
1107:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1108:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1109:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1110:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1111:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1112:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1113:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1114:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1115:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1116:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1117:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1118:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1119:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1120:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1121:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1122:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1123:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1124:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1125:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1126:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1127:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1128:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1129:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1130:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1131:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1132:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1133:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1134:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1135:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1136:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1137:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1138:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1139:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1140:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1141:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1142:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1143:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1144:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1145:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1146:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1147:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1148:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1149:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * on the device being selected).\n\n
1150:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1151:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1152:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1153:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1154:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1155:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1156:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1157:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1158:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1159:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1160:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1161:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1162:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1163:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1164:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1165:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1166:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1167:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1168:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1169:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1170:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.<BR>
1171:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1172:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1173:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1174:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1175:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1176:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1177:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1178:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1179:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1180:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1181:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1182:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1183:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1184:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1185:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1186:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1187:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1188:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1189:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1190:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1191:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1192:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
1193:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1194:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1195:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1196:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1197:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1198:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1199:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1200:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1201:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the parity function.<br>\n
1202:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this  API after XMC_CCU8_Init()
1203:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1204:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1205:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR> XMC_CCU8_StopParity
1206:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1207:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartParityChecker(XMC_CCU8_MODULE_t *const module)
1208:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1209:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1210:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = (uint32_t) CCU8_GIDLC_SPCH_Msk;
1211:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1212:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1213:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1214:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1215:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1216:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1217:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1218:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1219:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1220:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1221:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the slices of the module.
1222:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1223:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1224:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1225:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1226:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1227:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1228:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1229:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS = (uint32_t) CCU8_GIDLS_CPRB_Msk;
1230:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1231:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1232:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1233:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1234:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1235:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1236:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1237:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1238:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the parity function.<br>\n
1239:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1240:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1241:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartParityChecker()<BR>
1242:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1243:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopParityChecker(XMC_CCU8_MODULE_t *const module)
1244:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1245:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1246:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS = (uint32_t) CCU8_GIDLS_CPCH_Msk;
1247:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1248:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1249:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1250:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1251:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1252:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1253:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1254:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1255:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1256:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true.
1257:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1258:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1259:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1260:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1261:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1262:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1263:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1264:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1265:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1266:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1267:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1268:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1269:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1270:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1271:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1272:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1273:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the parity checker.\n\n
1274:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1275:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1276:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_StopParityChecker()<BR> XMC_CCU8_EnableClock()<BR>  
1277:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1278:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsParityCheckerRunning(XMC_CCU8_MODULE_t *const module)
1279:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1280:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1281:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PCRB_Msk) == CCU8_GSTAT_PCRB_Msk));
1282:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1283:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1284:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1285:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1286:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1287:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
1288:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1289:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1290:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1291:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1292:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1293:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I,
1294:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1295:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1296:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the idle state simultaneously.
1297:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1298:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1299:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1300:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1301:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1302:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1303:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1304:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1305:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1306:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = (uint32_t) clock_mask;
1307:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1308:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1309:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1310:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1311:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode   Selects suspend mode
1312:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1313:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1314:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1315:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1316:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the entering in suspend mode for all the CCU8 slices.
1317:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1318:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1319:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.
1320:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1321:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SetSuspendMode(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SUSPEN
1322:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1323:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1324:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GCTRL = (module->GCTRL & (uint32_t)~CCU8_GCTRL_SUSCFG_Msk) | mode;
1325:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1326:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1327:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1328:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1329:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1330:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1331:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1332:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1333:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1334:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1335:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1336:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1337:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1338:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1339:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1340:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1341:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.
1342:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1343:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1344:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1345:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1346:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1347:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1348:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1349:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1350:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1351:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1352:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1353:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1354:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1355:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1356:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
1357:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1358:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1359:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1360:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1361:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1362:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1363:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1364:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1365:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1366:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1367:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1368:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1369:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1370:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1371:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1372:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I,
1373:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1374:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1375:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1376:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1377:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1378:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1379:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1380:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1381:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
  27              	 .loc 1 1381 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1382:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1383:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1384:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1385:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = ((uint32_t) 1 << slice_number);
  45              	 .loc 1 1385 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 DA60     	 str r2,[r3,#12]
1386:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
  51              	 .loc 1 1386 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE153:
  67              	 .section .text.XMC_CCU8_DisableClock,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_CCU8_DisableClock:
  73              	.LFB154:
1387:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1388:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1389:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1390:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1391:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1392:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1393:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1394:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1395:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1396:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I,
1397:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1398:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1399:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1400:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1401:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1402:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1403:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1404:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1405:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
  74              	 .loc 1 1405 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
1406:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1407:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1408:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1409:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS = ((uint32_t) 1 << slice_number);
  92              	 .loc 1 1409 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 0122     	 movs r2,#1
  95 0010 9A40     	 lsls r2,r2,r3
  96 0012 7B68     	 ldr r3,[r7,#4]
  97 0014 9A60     	 str r2,[r3,#8]
1410:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
  98              	 .loc 1 1410 0
  99 0016 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 0018 BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001a 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 001e 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE154:
 114              	 .section .text.XMC_CCU8_SLICE_IsTimerRunning,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_CCU8_SLICE_IsTimerRunning:
 120              	.LFB164:
1411:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1412:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1413:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1414:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1415:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1416:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param output Slice output.
1417:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1418:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1419:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1420:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1421:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check.
1422:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1423:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1424:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput()<BR>
1425:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1426:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput(XMC_CCU8_MODULE_t *const module,
1427:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1428:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Module Pointer", XMC_CCU8_IsVal
1429:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Slice Number", (slice_number < 
1430:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1431:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK |= (uint32_t)(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1432:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1433:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1434:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1435:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1436:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1437:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1438:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1439:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1440:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1441:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param output Slice output ::XMC_CCU8_SLICE_OUTPUT_t.
1442:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1443:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1444:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1445:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1446:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check.
1447:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1448:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1449:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput()<BR>
1450:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1451:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput(XMC_CCU8_MODULE_t *const module
1452:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1453:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Module Pointer", XMC_CCU8_IsVal
1454:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput:Invalid Slice Number", (slice_number <
1455:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1456:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK &= (uint32_t)~(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1457:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1458:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1459:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1460:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1461:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1462:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1463:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1464:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input signal controlling the delay between the change at the CCU8 outputs and effective c
1465:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1466:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1467:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1468:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1469:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects which signal is controlling the delay between the change at the CCU8 outputs and effecti
1470:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1471:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1472:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1473:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1474:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDelayInput(XMC_CCU8_MODULE_t *const module, con
1475:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1476:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1477:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCDS_Msk) | input;
1478:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1479:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1480:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1481:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1482:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input signal contains the driver parity information ::XMC_CCU8_PARITY_CHECKER_DRIVER_INPU
1483:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1484:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1485:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1486:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1487:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects which signal contains the driver parity information.
1488:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The signal must be selected throughout the input selector mux of each slice. The signal must be 
1489:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1490:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1491:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker(), XMC_CCU8_SLICE_SetInput()<BR>.
1492:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1493:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDriverInput(XMC_CCU8_MODULE_t *const module, co
1494:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1495:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1496:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PISEL_Msk) | input;
1497:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1498:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1499:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1500:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1501:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param type odd or even parity ::XMC_CCU8_PARITY_CHECKER_TYPE_t.
1502:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1503:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1504:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1505:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1506:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects if we have an odd or even parity.
1507:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1508:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1509:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>.
1510:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1511:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetType(XMC_CCU8_MODULE_t *const module, const XMC
1512:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1513:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1514:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCTS_Msk) | type;
1515:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1516:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1517:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1518:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1519:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1520:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return status of parity checker. If >0 then an error is dectected
1521:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1522:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1523:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns current value of the XOR chain.
1524:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1525:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1526:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1527:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1528:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint32_t XMC_CCU8_SLICE_ParityCheckerGetStatus(XMC_CCU8_MODULE_t *const module)
1529:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1530:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1531:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (module->GPCHK & CCU8_GPCHK_PCST_Msk);
1532:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1533:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1534:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1535:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1536:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1537:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1538:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1539:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1540:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1541:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1542:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1543:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1544:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1545:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1546:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1547:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1548:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1549:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1550:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None
1551:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** */
1552:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1553:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1554:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1555:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1556:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1557:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1558:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1559:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1560:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1561:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1562:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1563:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1564:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1565:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1566:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1567:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1568:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1569:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1570:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1571:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1572:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1573:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1574:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1575:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1576:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1577:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1578:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1579:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1580:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1581:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1582:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1583:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1584:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1585:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1586:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1587:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1588:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1589:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1590:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1591:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1592:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1593:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1594:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1595:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1596:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1597:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1598:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1599:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1600:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1601:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1602:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            compare channel 2\n
1603:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1604:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1605:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1606:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1607:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1608:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1609:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1610:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1611:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1612:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1613:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1614:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1615:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1616:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1617:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1618:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1619:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1620:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1621:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1622:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1623:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1624:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1625:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1626:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1627:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1628:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1629:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1630:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1631:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1632:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1633:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1634:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1635:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1636:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1637:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1638:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1639:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1640:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1641:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1642:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1643:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the modulation function is configured as well.
1644:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1645:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1646:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1647:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1648:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1649:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1650:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1651:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
1652:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const bool synch_with_pwm
1653:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     );
1654:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1655:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1656:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1657:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1658:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1659:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1660:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1661:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1662:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1663:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1664:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1665:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * edges present on the \b event selected.
1666:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1667:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1668:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1669:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1670:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1671:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1672:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1673:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1674:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1675:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1676:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1677:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1678:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1679:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1680:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1681:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1682:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1683:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1684:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1685:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1686:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1687:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1688:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1689:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1690:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1691:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1692:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1693:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1694:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1695:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1696:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1697:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1698:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1699:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1700:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1701:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1702:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1703:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1704:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1705:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1706:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1707:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1708:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1709:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1710:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1711:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1712:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1713:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1714:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1715:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1716:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1717:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1718:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1719:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1720:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1721:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1722:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1723:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1724:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1725:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1726:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1727:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1728:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1729:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1730:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1731:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1732:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1733:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1734:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1735:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1736:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1737:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1738:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1739:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1740:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1741:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1742:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1743:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1744:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1745:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1746:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1747:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1748:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1749:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1750:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1751:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1752:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1753:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1754:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1755:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1756:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1757:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1758:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1759:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
1760:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1761:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1762:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1763:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1764:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1765:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1766:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1767:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1768:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1769:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1770:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1771:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1772:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1773:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1774:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1775:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1776:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1777:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1778:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1779:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1780:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1781:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1782:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1783:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1784:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1785:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1786:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1787:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1788:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1789:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1790:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1791:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1792:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1793:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1794:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1795:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1796:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1797:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1798:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1799:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1800:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1801:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1802:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1803:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1804:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1805:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1806:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1807:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1808:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1809:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1810:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1811:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1812:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1813:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1814:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1815:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1816:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1817:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1818:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1819:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1820:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1821:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1822:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1823:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1824:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1825:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1826:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1827:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1828:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1829:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1830:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1831:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1832:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1833:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                bool synch_with_pwm);
1834:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1835:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1836:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1837:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1838:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1839:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1840:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1841:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1842:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1843:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1844:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1845:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1846:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1847:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Event-2 input would be the override value.
1848:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1849:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1850:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1851:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1852:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1853:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
1854:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config);
1855:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1856:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1857:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1858:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1859:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1860:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1861:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1862:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1863:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1864:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1865:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1866:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1867:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1868:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1869:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1870:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1871:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1872:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1873:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1874:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1875:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1876:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1877:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1878:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1879:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1880:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1881:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1882:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1883:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1884:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1885:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1886:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1887:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1888:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1889:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1890:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1891:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1892:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1893:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1894:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1895:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1896:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1897:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1898:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1899:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1900:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1901:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1902:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1903:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1904:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1905:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1906:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation
1907:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1908:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1909:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1910:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1911:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1912:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1913:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n
1914:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1915:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1916:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1917:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1918:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1919:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1920:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1921:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1922:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1923:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1924:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
1925:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1926:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1927:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1928:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1929:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1930:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1931:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation.
1932:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1933:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1934:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1935:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1936:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1937:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1938:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1939:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1940:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1941:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1942:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1943:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1944:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1945:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1946:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1947:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1948:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1949:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1950:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1951:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1952:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1953:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1954:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1955:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1956:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1957:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1958:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1959:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1960:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1961:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1962:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1963:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1964:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 121              	 .loc 1 1964 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
1965:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1966:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 137              	 .loc 1 1966 0
 138 0008 7B68     	 ldr r3,[r7,#4]
 139 000a 9B68     	 ldr r3,[r3,#8]
 140 000c 03F00103 	 and r3,r3,#1
 141 0010 002B     	 cmp r3,#0
 142 0012 14BF     	 ite ne
 143 0014 0123     	 movne r3,#1
 144 0016 0023     	 moveq r3,#0
 145 0018 DBB2     	 uxtb r3,r3
1967:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 146              	 .loc 1 1967 0
 147 001a 1846     	 mov r0,r3
 148 001c 0C37     	 adds r7,r7,#12
 149              	.LCFI15:
 150              	 .cfi_def_cfa_offset 4
 151 001e BD46     	 mov sp,r7
 152              	.LCFI16:
 153              	 .cfi_def_cfa_register 13
 154              	 
 155 0020 5DF8047B 	 ldr r7,[sp],#4
 156              	.LCFI17:
 157              	 .cfi_restore 7
 158              	 .cfi_def_cfa_offset 0
 159 0024 7047     	 bx lr
 160              	 .cfi_endproc
 161              	.LFE164:
 163 0026 00BF     	 .section .text.XMC_CCU8_SLICE_StartTimer,"ax",%progbits
 164              	 .align 2
 165              	 .thumb
 166              	 .thumb_func
 168              	XMC_CCU8_SLICE_StartTimer:
 169              	.LFB168:
1968:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1969:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1970:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1971:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1972:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1973:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1974:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1975:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1976:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1977:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1978:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1979:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1980:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1981:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1982:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1983:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1984:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1985:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1986:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1987:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1988:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1989:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1990:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1991:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1992:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1993:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1994:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1995:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1996:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1997:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1998:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1999:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
2000:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2001:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
2002:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
2003:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2004:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2005:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2006:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2007:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2008:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
2009:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2010:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2011:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
2012:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
2013:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
2014:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2015:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2016:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2017:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2018:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
2019:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2020:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2021:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_T
2022:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2023:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2024:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2025:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2026:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2027:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2028:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2029:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
2030:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
2031:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
2032:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2033:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2034:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
2035:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2036:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
2037:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 170              	 .loc 1 2037 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174              	 
 175 0000 80B4     	 push {r7}
 176              	.LCFI18:
 177              	 .cfi_def_cfa_offset 4
 178              	 .cfi_offset 7,-4
 179 0002 83B0     	 sub sp,sp,#12
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
2038:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2039:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 186              	 .loc 1 2039 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 0122     	 movs r2,#1
 189 000c DA60     	 str r2,[r3,#12]
2040:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 190              	 .loc 1 2040 0
 191 000e 0C37     	 adds r7,r7,#12
 192              	.LCFI21:
 193              	 .cfi_def_cfa_offset 4
 194 0010 BD46     	 mov sp,r7
 195              	.LCFI22:
 196              	 .cfi_def_cfa_register 13
 197              	 
 198 0012 5DF8047B 	 ldr r7,[sp],#4
 199              	.LCFI23:
 200              	 .cfi_restore 7
 201              	 .cfi_def_cfa_offset 0
 202 0016 7047     	 bx lr
 203              	 .cfi_endproc
 204              	.LFE168:
 206              	 .section .text.XMC_CCU8_SLICE_StopTimer,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	XMC_CCU8_SLICE_StopTimer:
 212              	.LFB169:
2041:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2042:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2043:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2044:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2045:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2046:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2047:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2048:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the Timer.\n\n
2049:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
2050:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2051:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2052:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2053:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2054:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
2055:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 213              	 .loc 1 2055 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217              	 
 218 0000 80B4     	 push {r7}
 219              	.LCFI24:
 220              	 .cfi_def_cfa_offset 4
 221              	 .cfi_offset 7,-4
 222 0002 83B0     	 sub sp,sp,#12
 223              	.LCFI25:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI26:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
2056:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2057:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 229              	 .loc 1 2057 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 0122     	 movs r2,#1
 232 000c 1A61     	 str r2,[r3,#16]
2058:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 233              	 .loc 1 2058 0
 234 000e 0C37     	 adds r7,r7,#12
 235              	.LCFI27:
 236              	 .cfi_def_cfa_offset 4
 237 0010 BD46     	 mov sp,r7
 238              	.LCFI28:
 239              	 .cfi_def_cfa_register 13
 240              	 
 241 0012 5DF8047B 	 ldr r7,[sp],#4
 242              	.LCFI29:
 243              	 .cfi_restore 7
 244              	 .cfi_def_cfa_offset 0
 245 0016 7047     	 bx lr
 246              	 .cfi_endproc
 247              	.LFE169:
 249              	 .section .text.XMC_CCU8_SLICE_ClearTimer,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	XMC_CCU8_SLICE_ClearTimer:
 255              	.LFB170:
2059:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2060:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2061:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2062:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2063:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2064:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2065:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2066:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
2067:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
2068:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
2069:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2070:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2071:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2072:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2073:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
2074:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 256              	 .loc 1 2074 0
 257              	 .cfi_startproc
 258              	 
 259              	 
 260              	 
 261 0000 80B4     	 push {r7}
 262              	.LCFI30:
 263              	 .cfi_def_cfa_offset 4
 264              	 .cfi_offset 7,-4
 265 0002 83B0     	 sub sp,sp,#12
 266              	.LCFI31:
 267              	 .cfi_def_cfa_offset 16
 268 0004 00AF     	 add r7,sp,#0
 269              	.LCFI32:
 270              	 .cfi_def_cfa_register 7
 271 0006 7860     	 str r0,[r7,#4]
2075:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2076:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 272              	 .loc 1 2076 0
 273 0008 7B68     	 ldr r3,[r7,#4]
 274 000a 0222     	 movs r2,#2
 275 000c 1A61     	 str r2,[r3,#16]
2077:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 276              	 .loc 1 2077 0
 277 000e 0C37     	 adds r7,r7,#12
 278              	.LCFI33:
 279              	 .cfi_def_cfa_offset 4
 280 0010 BD46     	 mov sp,r7
 281              	.LCFI34:
 282              	 .cfi_def_cfa_register 13
 283              	 
 284 0012 5DF8047B 	 ldr r7,[sp],#4
 285              	.LCFI35:
 286              	 .cfi_restore 7
 287              	 .cfi_def_cfa_offset 0
 288 0016 7047     	 bx lr
 289              	 .cfi_endproc
 290              	.LFE170:
 292              	 .section .text.XMC_CCU8_EnableShadowTransfer,"ax",%progbits
 293              	 .align 2
 294              	 .thumb
 295              	 .thumb_func
 297              	XMC_CCU8_EnableShadowTransfer:
 298              	.LFB180:
2078:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2079:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2080:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2081:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2082:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2083:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2084:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2085:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops and resets the timer count to zero, by setting CC8yTCCLR.TCC and CC8yTCCLR.TRBC bit.\n\n
2086:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2087:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2088:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2089:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2090:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopClearTimer(XMC_CCU8_SLICE_t *const slice)
2091:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2092:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2093:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = CCU8_CC8_TCCLR_TRBC_Msk | CCU8_CC8_TCCLR_TCC_Msk;
2094:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2095:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2096:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2097:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2098:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2099:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
2100:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
2101:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2102:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2103:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
2104:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
2105:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
2106:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * invalid.
2107:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2108:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2109:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2110:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2111:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
2112:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2113:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2114:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
2115:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2116:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2117:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2118:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2119:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
2120:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2121:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2122:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2123:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2124:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
2125:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
2126:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
2127:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * reaching the terminal count.
2128:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2129:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2130:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
2131:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2132:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
2133:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2134:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2135:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2136:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2137:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
2138:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
2139:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2140:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2141:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
2142:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
2143:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
2144:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * all over again after reaching the terminal count.
2145:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2146:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2147:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
2148:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2149:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
2150:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   const XMC_CCU8_SLICE_t *const slice)
2151:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2152:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
2153:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_
2154:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2155:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2156:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2157:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
2158:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2159:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2160:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2161:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2162:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
2163:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
2164:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
2165:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
2166:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
2167:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * greater than the compare value.
2168:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2169:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2170:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
2171:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2172:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
2173:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2174:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2175:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2176:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2177:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
2178:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
2179:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2180:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2181:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
2182:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2183:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2184:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
2185:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2186:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
2187:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   const XMC_CCU8_SLICE_t *const slice)
2188:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2189:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2190:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TC
2191:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2192:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2193:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2194:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_val Timer period value
2195:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
2196:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2197:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2198:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2199:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2200:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
2201:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
2202:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
2203:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
2204:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
2205:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2206:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2207:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
2208:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2209:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
2210:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2211:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2212:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2213:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2214:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer period value
2215:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2216:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2217:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2218:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
2219:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
2220:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2221:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2222:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
2223:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
2224:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
2225:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2226:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2227:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2228:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
2229:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2230:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
2231:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2232:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
2233:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((uint16_t) slice->PR);
2234:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2235:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2236:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2237:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
2238:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2239:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2240:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2241:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2242:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2243:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
2244:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
2245:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2246:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
2247:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
2248:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
2249:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2250:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2251:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2252:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2253:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
2254:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
2255:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const uint16_t compare_val);
2256:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2257:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2258:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2259:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2260:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2261:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2262:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2263:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2264:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
2265:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2266:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2267:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2268:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2269:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2270:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2271:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2272:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2273:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2274:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
2275:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2276:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2277:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
2278:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2279:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2280:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2281:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2282:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2283:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2284:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2285:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2286:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2287:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
2288:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2289:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2290:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2291:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2292:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2293:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2294:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2295:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2296:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2297:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2298:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2299:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2300:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2301:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2302:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2303:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2304:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2305:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2306:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2307:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2308:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2309:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2310:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2311:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2312:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2313:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2314:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2315:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2316:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2317:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2318:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2319:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2320:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2321:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2322:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2323:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2324:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2325:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2326:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2327:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2328:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return
2329:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint16_t Timer compare value
2330:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2331:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2332:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gets the timer compare1 value, by reading CC8yCR1 register.\n\n
2333:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2334:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2335:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatchChannel1().
2336:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2337:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice)
2338:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2339:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2340:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return slice->CR1;
2341:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2342:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2343:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2344:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2345:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return Timer compare value
2346:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint16_t Timer compare value
2347:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2348:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2349:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gets the timer compare1 value, by reading CC8yCR2 register.\n\n
2350:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2351:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2352:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatchChannel2().
2353:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2354:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice)
2355:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2356:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2357:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return slice->CR2;
2358:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2359:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2360:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2361:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2362:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2363:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2364:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            using a bit wise OR operation.
2365:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2366:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2367:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2368:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2369:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2370:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the GCSS register.\n\n
2371:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2372:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2373:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2374:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR>
2375:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2376:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be succeeded by this API.
2377:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2378:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2379:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2380:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2381:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2382:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 299              	 .loc 1 2382 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303              	 
 304 0000 80B4     	 push {r7}
 305              	.LCFI36:
 306              	 .cfi_def_cfa_offset 4
 307              	 .cfi_offset 7,-4
 308 0002 83B0     	 sub sp,sp,#12
 309              	.LCFI37:
 310              	 .cfi_def_cfa_offset 16
 311 0004 00AF     	 add r7,sp,#0
 312              	.LCFI38:
 313              	 .cfi_def_cfa_register 7
 314 0006 7860     	 str r0,[r7,#4]
 315 0008 3960     	 str r1,[r7]
2383:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2384:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;
 316              	 .loc 1 2384 0
 317 000a 7B68     	 ldr r3,[r7,#4]
 318 000c 3A68     	 ldr r2,[r7]
 319 000e 1A61     	 str r2,[r3,#16]
2385:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 320              	 .loc 1 2385 0
 321 0010 0C37     	 adds r7,r7,#12
 322              	.LCFI39:
 323              	 .cfi_def_cfa_offset 4
 324 0012 BD46     	 mov sp,r7
 325              	.LCFI40:
 326              	 .cfi_def_cfa_register 13
 327              	 
 328 0014 5DF8047B 	 ldr r7,[sp],#4
 329              	.LCFI41:
 330              	 .cfi_restore 7
 331              	 .cfi_def_cfa_offset 0
 332 0018 7047     	 bx lr
 333              	 .cfi_endproc
 334              	.LFE180:
 336 001a 00BF     	 .section .text.XMC_CCU8_SLICE_EnableEvent,"ax",%progbits
 337              	 .align 2
 338              	 .thumb
 339              	 .thumb_func
 341              	XMC_CCU8_SLICE_EnableEvent:
 342              	.LFB191:
2386:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2387:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2388:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2389:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2390:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer value
2391:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2392:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2393:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2394:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2395:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2396:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2397:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2398:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2399:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2400:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2401:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2402:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return ((uint16_t) slice->TIMER);
2403:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2404:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2405:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2406:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2407:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2408:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2409:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2410:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2411:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2412:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2413:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2414:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2415:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2416:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2417:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2418:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2419:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2420:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2421:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2422:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2423:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2424:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2425:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2426:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2427:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2428:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2429:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param spread Dither compare value
2430:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2431:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2432:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2433:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2434:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2435:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2436:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2437:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2438:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2439:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2440:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2441:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2442:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2443:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2444:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to transfer the dither value.
2445:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2446:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2447:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2448:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2449:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2450:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool period_dither,
2451:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool duty_dither,
2452:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const uint8_t spread);
2453:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2454:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2455:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2456:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2457:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2458:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2459:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2460:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2461:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2462:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will not clear the dither compare value.
2463:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2464:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2465:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2466:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2467:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2468:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2469:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2470:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2471:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2472:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2473:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2474:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2475:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2476:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2477:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2478:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2479:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2480:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2481:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2482:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2483:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2484:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2485:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2486:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2487:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2488:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2489:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2490:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2491:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2492:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2493:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2494:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2495:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2496:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2497:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2498:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2499:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2500:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2501:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2502:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2503:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2504:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2505:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2506:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2507:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2508:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2509:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2510:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2511:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2512:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2513:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2514:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2515:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param comp_val Dither compare value
2516:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2517:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2518:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2519:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2520:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2521:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2522:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2523:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2524:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2525:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * called with appropriate mask.
2526:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2527:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2528:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2529:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2530:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2531:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2532:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2533:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2534:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2535:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->DITS = comp_val;
2536:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2537:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2538:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2539:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2540:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param div_val Prescaler divider value. Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t
2541:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2542:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2543:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2544:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2545:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2546:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the slice specific prescaler divider, by configuring the CC8yPSC and CC8yFPC registers.
2547:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler divider may only be programmed after the prescaler run bit has been cleared
2548:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_StopPrescaler().
2549:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2550:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2551:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue().
2552:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2553:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t di
2554:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2555:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2556:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2557:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2558:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_PRESCALER_t Prescaler divider value. <BR>
2559:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2560:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2561:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns current prescaler value.\n\n
2562:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Used to detrmine the clock frequency of the CCU8 slice XMC_SCU_CLOCK_GetCcuClockFrequency() / XM
2563:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2564:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2565:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetPrescaler().
2566:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2567:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_PRESCALER_t XMC_CCU8_SLICE_GetPrescaler(XMC_CCU8_SLICE_t *const slic
2568:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2569:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2570:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2571:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (XMC_CCU8_SLICE_PRESCALER_t)slice->PSC;
2572:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2573:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2574:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2575:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2576:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param cmp_val Prescaler divider compare value
2577:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2578:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2579:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2580:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2581:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2582:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the slice specific prescaler divider compare value, by configuring CC8yFPCS register.\n
2583:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is applicable only in floating mode of operation. The prescaler divider starts
2584:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * value and increments to the compare value steadily upon every period match. Once prescaler divid
2585:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * equals the prescaler divider compare value, the value in the former resets back to the PVAL (fro
2586:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the value, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask.
2587:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2588:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2589:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetPrescaler().
2590:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2591:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue(XMC_CCU8_SLICE_t *const slice,
2592:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const uint8_t cmp_val)
2593:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2594:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue:Invalid Slice Pointer", XMC_CCU8_IsVa
2595:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   /* First, write to the shadow register */
2596:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->FPCS = (uint32_t) cmp_val;
2597:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2598:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2599:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2600:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2601:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Compare channel for which the multi-channel mode is needed.
2602:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2603:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2604:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2605:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2606:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the multichannel mode, by setting CC8yTC.MCME1 or CC8yTC.MCME1 bits based on the \a ch_n
2607:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The output state of the Timer slices can be controlled in parallel by a single input signal.
2608:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A particularly useful feature in motor control applications where the PWM output of multiple sli
2609:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * be gated and ungated by multi-channel gating inputs connected to the slices. A peripheral like P
2610:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * motor knows exactly which of the power drive switches are to be turned on and off at any instant
2611:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a gating bus (known as multi-channel inputs) control which of the slices output stays gated/unga
2612:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2613:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2614:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultiChannelMode()<BR>  XMC_CCU8_SetMultiChannelShadowTransferMode().
2615:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2616:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableMultiChannelMode(XMC_CCU8_SLICE_t *const slice,
2617:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
2618:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2619:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultiChannelMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
2620:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultiChannelMode:Invalid Channel", XMC_CCU8_SLICE_CHECK_COMP_CHA
2621:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2622:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)CCU8_CC8_TC_MCME1_Msk << ch_num;
2623:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2624:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2625:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2626:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2627:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Compare channel for which the multi-channel mode needs to be disabled.
2628:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2629:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2630:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2631:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2632:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the multichannel mode, by clearing CC8yTC.MCME1 or CC8yTC.MCME1 bits based on the \a ch
2633:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the slices to the normal operation mode. This takes the slice number as input and
2634:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * configures the multi channel mode for it.
2635:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2636:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2637:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableMultiChannelMode().
2638:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2639:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableMultiChannelMode(XMC_CCU8_SLICE_t *const slice,
2640:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
2641:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2642:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultiChannelMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2643:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultiChannelMode:Invalid Channel", XMC_CCU8_SLICE_CHECK_COMP_CH
2644:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2645:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)CCU8_CC8_TC_MCME1_Msk << ch_num);
2646:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2647:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2648:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2649:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2650:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_mode_msk Slices for which the configuration has to be applied.
2651:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                       Use ::XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t enum items to create a mask
2652:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                             using a bit wise OR operation.
2653:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2654:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2655:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2656:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2657:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the Multi-channel shadow transfer request trigger signal either by software or hardware 
2658:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GCTRL.MSE0, GCTRL.MSE1, GCTRL.MSE2, and GCTRL.MSE3 based on the mask.\n\n
2659:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The shadow transfer would take place either if it was requested by software or by the CCU8x.MCSS
2660:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2661:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2662:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2663:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** */
2664:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
2665:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2666:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2667:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2668:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param reg_num The capture register from which the captured value is to be retrieved
2669:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                Range: [0,3]
2670:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2671:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint32_t  Returns the Capture register value.
2672:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *              Range: [0 to 0x1FFFFF]
2673:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2674:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2675:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves timer value which has been captured in the Capture registers, by reading CC8yCV[\b reg
2676:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The signal whose timing characteristics are to be measured must be mapped to an event which in t
2677:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to the capture function. Based on the capture criteria, the timer values are captured into captu
2678:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * characteristics of the input signal may then be derived/inferred from the captured values. The f
2679:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to find out if there is a new captured value present.
2680:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2681:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2682:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetLastCapturedTimerValue().
2683:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2684:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
2685:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2686:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2687:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2688:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param set  The capture register set, which must be evaluated
2689:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param val_ptr Out Parameter of the API.Stores the captured timer value into this out parameter.
2690:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2691:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_STATUS_t Returns XMC_CCU8_STATUS_OK if there was new value present in the capture re
2692:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   returns XMC_CCU8_STATUS_ERROR if there was no new value present in the capture
2693:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2694:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2695:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the latest captured timer value, by reading CC8yCV registers.\n\n
2696:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieve the timer value last stored by the slice. When separate capture events are used,
2697:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * users must specify the capture set to evaluate. If single capture event mode is used, all 8 capt
2698:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * evaluated.\n
2699:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The lowest register is evaluated first followed by the next higher ordered register and this con
2700:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * capture registers have been evaluated.
2701:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2702:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2703:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetCaptureregisterValue().
2704:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2705:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
2706:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     const XMC_CCU8_SLICE_CAP_REG_SET_t set,
2707:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t *val_ptr);
2708:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2709:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2710:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2711:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2712:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2713:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2714:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2715:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2716:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the generation of an interrupt pulse for the event, by configuring CC8yINTE register.\n\
2717:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2718:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API merely enables the event. Binding with SR is perform
2719:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2720:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2721:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLIC
2722:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2723:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2724:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE
2725:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 343              	 .loc 1 2725 0
 344              	 .cfi_startproc
 345              	 
 346              	 
 347              	 
 348 0000 80B4     	 push {r7}
 349              	.LCFI42:
 350              	 .cfi_def_cfa_offset 4
 351              	 .cfi_offset 7,-4
 352 0002 83B0     	 sub sp,sp,#12
 353              	.LCFI43:
 354              	 .cfi_def_cfa_offset 16
 355 0004 00AF     	 add r7,sp,#0
 356              	.LCFI44:
 357              	 .cfi_def_cfa_register 7
 358 0006 7860     	 str r0,[r7,#4]
 359 0008 0B46     	 mov r3,r1
 360 000a FB70     	 strb r3,[r7,#3]
2726:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2727:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2728:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2729:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 361              	 .loc 1 2729 0
 362 000c 7B68     	 ldr r3,[r7,#4]
 363 000e D3F8A420 	 ldr r2,[r3,#164]
 364 0012 FB78     	 ldrb r3,[r7,#3]
 365 0014 0121     	 movs r1,#1
 366 0016 01FA03F3 	 lsl r3,r1,r3
 367 001a 1A43     	 orrs r2,r2,r3
 368 001c 7B68     	 ldr r3,[r7,#4]
 369 001e C3F8A420 	 str r2,[r3,#164]
2730:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 370              	 .loc 1 2730 0
 371 0022 0C37     	 adds r7,r7,#12
 372              	.LCFI45:
 373              	 .cfi_def_cfa_offset 4
 374 0024 BD46     	 mov sp,r7
 375              	.LCFI46:
 376              	 .cfi_def_cfa_register 13
 377              	 
 378 0026 5DF8047B 	 ldr r7,[sp],#4
 379              	.LCFI47:
 380              	 .cfi_restore 7
 381              	 .cfi_def_cfa_offset 0
 382 002a 7047     	 bx lr
 383              	 .cfi_endproc
 384              	.LFE191:
 386              	 .section .text.XMC_CCU8_SLICE_ClearEvent,"ax",%progbits
 387              	 .align 2
 388              	 .thumb
 389              	 .thumb_func
 391              	XMC_CCU8_SLICE_ClearEvent:
 392              	.LFB196:
2731:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2732:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2733:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2734:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mask Event mask such that multiple events can be enabled.
2735:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  Use ::XMC_CCU8_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2736:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  using a bit wise OR operation.
2737:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2738:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2739:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2740:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2741:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the generation of an interrupt pulse for the required events, by configuring CC8yINTE re
2742:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2743:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API merely enables the events. Binding with SR is perfor
2744:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2745:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2746:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_Disable
2747:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2748:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2749:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableMultipleEvents(XMC_CCU8_SLICE_t *const slice, const uint1
2750:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2751:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultipleEvents:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2752:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE = (uint32_t) mask;
2753:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2754:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2755:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2756:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2757:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2758:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2759:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2760:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2761:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2762:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the generation of an interrupt pulse for the event, by clearing CC8yINTE register.\n\n
2763:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Prevents the event from being asserted.
2764:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2765:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2766:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2767:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2768:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2769:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLIC
2770:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2771:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2772:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event))
2773:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2774:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE &= ~(((uint32_t) 1) << ((uint32_t) event));
2775:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2776:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2777:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2778:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2779:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mask Event mask such that multiple events can be enabled.
2780:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Use ::XMC_CCU8_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2781:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             using a bit wise OR operation.
2782:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2783:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2784:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2785:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2786:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Disables the generation of an interrupt pulse for the required events, by clearing CC8yINTE reg
2787:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Prevents selected events of the slice from being asserted.
2788:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2789:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2790:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2791:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableEvent().
2792:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2793:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableMultipleEvents(XMC_CCU8_SLICE_t *const slice, const uint
2794:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2795:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultipleEvents:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2796:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->INTE &= ~((uint32_t) mask);
2797:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2798:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2799:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2800:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2801:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2802:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2803:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2804:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2805:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2806:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Manually asserts the requested event, by setting CC8ySWS register.\n\n
2807:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2808:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API manually asserts the requested event.
2809:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2810:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2811:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2812:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2813:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IR
2814:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2815:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2816:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2817:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2818:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->SWS = ((uint32_t) 1) << ((uint32_t) event);
2819:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2820:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2821:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2822:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2823:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Asserted event which must be acknowledged.
2824:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2825:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2826:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2827:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2828:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Acknowledges an asserted event, by setting CC8ySWR with respective event flag.\n\n
2829:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2830:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2831:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
2832:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2833:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2834:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_
2835:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 393              	 .loc 1 2835 0
 394              	 .cfi_startproc
 395              	 
 396              	 
 397              	 
 398 0000 80B4     	 push {r7}
 399              	.LCFI48:
 400              	 .cfi_def_cfa_offset 4
 401              	 .cfi_offset 7,-4
 402 0002 83B0     	 sub sp,sp,#12
 403              	.LCFI49:
 404              	 .cfi_def_cfa_offset 16
 405 0004 00AF     	 add r7,sp,#0
 406              	.LCFI50:
 407              	 .cfi_def_cfa_register 7
 408 0006 7860     	 str r0,[r7,#4]
 409 0008 0B46     	 mov r3,r1
 410 000a FB70     	 strb r3,[r7,#3]
2836:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2837:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2838:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 411              	 .loc 1 2838 0
 412 000c FB78     	 ldrb r3,[r7,#3]
 413 000e 0122     	 movs r2,#1
 414 0010 9A40     	 lsls r2,r2,r3
 415 0012 7B68     	 ldr r3,[r7,#4]
 416 0014 C3F8B020 	 str r2,[r3,#176]
2839:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 417              	 .loc 1 2839 0
 418 0018 0C37     	 adds r7,r7,#12
 419              	.LCFI51:
 420              	 .cfi_def_cfa_offset 4
 421 001a BD46     	 mov sp,r7
 422              	.LCFI52:
 423              	 .cfi_def_cfa_register 13
 424              	 
 425 001c 5DF8047B 	 ldr r7,[sp],#4
 426              	.LCFI53:
 427              	 .cfi_restore 7
 428              	 .cfi_def_cfa_offset 0
 429 0020 7047     	 bx lr
 430              	 .cfi_endproc
 431              	.LFE196:
 433 0022 00BF     	 .section .text.XMC_CCU8_SLICE_GetEvent,"ax",%progbits
 434              	 .align 2
 435              	 .thumb
 436              	 .thumb_func
 438              	XMC_CCU8_SLICE_GetEvent:
 439              	.LFB197:
2840:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2841:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2842:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2843:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Event to be evaluated for assertion
2844:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2845:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *         bool  Returns true if event is set else false is returned.
2846:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2847:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2848:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Evaluates if a given event is asserted or not, by reading CC8yINTS register.\n\n
2849:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Return true if the event is asserted. For a event to be asserted it has to be
2850:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * first enabled. Only if that event is enabled the call to this API is valid.
2851:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the Event is enabled and has not yet occurred then a false is returned.
2852:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2853:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2854:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
2855:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2856:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SL
2857:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 440              	 .loc 1 2857 0
 441              	 .cfi_startproc
 442              	 
 443              	 
 444              	 
 445 0000 80B4     	 push {r7}
 446              	.LCFI54:
 447              	 .cfi_def_cfa_offset 4
 448              	 .cfi_offset 7,-4
 449 0002 83B0     	 sub sp,sp,#12
 450              	.LCFI55:
 451              	 .cfi_def_cfa_offset 16
 452 0004 00AF     	 add r7,sp,#0
 453              	.LCFI56:
 454              	 .cfi_def_cfa_register 7
 455 0006 7860     	 str r0,[r7,#4]
 456 0008 0B46     	 mov r3,r1
 457 000a FB70     	 strb r3,[r7,#3]
2858:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2859:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2860:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 458              	 .loc 1 2860 0
 459 000c 7B68     	 ldr r3,[r7,#4]
 460 000e D3F8A020 	 ldr r2,[r3,#160]
 461 0012 FB78     	 ldrb r3,[r7,#3]
 462 0014 22FA03F3 	 lsr r3,r2,r3
 463 0018 03F00103 	 and r3,r3,#1
 464 001c 002B     	 cmp r3,#0
 465 001e 14BF     	 ite ne
 466 0020 0123     	 movne r3,#1
 467 0022 0023     	 moveq r3,#0
 468 0024 DBB2     	 uxtb r3,r3
2861:C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 469              	 .loc 1 2861 0
 470 0026 1846     	 mov r0,r3
 471 0028 0C37     	 adds r7,r7,#12
 472              	.LCFI57:
 473              	 .cfi_def_cfa_offset 4
 474 002a BD46     	 mov sp,r7
 475              	.LCFI58:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 002c 5DF8047B 	 ldr r7,[sp],#4
 479              	.LCFI59:
 480              	 .cfi_restore 7
 481              	 .cfi_def_cfa_offset 0
 482 0030 7047     	 bx lr
 483              	 .cfi_endproc
 484              	.LFE197:
 486 0032 00BF     	 .section .text.PWM_lCCU8_Init,"ax",%progbits
 487              	 .align 2
 488              	 .global PWM_lCCU8_Init
 489              	 .thumb
 490              	 .thumb_func
 492              	PWM_lCCU8_Init:
 493              	.LFB247:
 494              	 .file 2 "../Dave/Generated/PWM/pwm.c"
   1:../Dave/Generated/PWM/pwm.c **** /**
   2:../Dave/Generated/PWM/pwm.c ****  * @file pwm.c
   3:../Dave/Generated/PWM/pwm.c ****  * @date 2016-07-28
   4:../Dave/Generated/PWM/pwm.c ****  *
   5:../Dave/Generated/PWM/pwm.c ****  * NOTE:
   6:../Dave/Generated/PWM/pwm.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/PWM/pwm.c ****  *
   8:../Dave/Generated/PWM/pwm.c ****  * @cond
   9:../Dave/Generated/PWM/pwm.c ****  **************************************************************************************************
  10:../Dave/Generated/PWM/pwm.c ****  * PWM v4.1.12 - Generates a PWM using one timer slice of CCU4 or CCU8.
  11:../Dave/Generated/PWM/pwm.c ****  *
  12:../Dave/Generated/PWM/pwm.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:../Dave/Generated/PWM/pwm.c ****  * All rights reserved.
  14:../Dave/Generated/PWM/pwm.c ****  *
  15:../Dave/Generated/PWM/pwm.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/PWM/pwm.c ****  * following conditions are met:
  17:../Dave/Generated/PWM/pwm.c ****  *
  18:../Dave/Generated/PWM/pwm.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/PWM/pwm.c ****  *   disclaimer.
  20:../Dave/Generated/PWM/pwm.c ****  *
  21:../Dave/Generated/PWM/pwm.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/PWM/pwm.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/PWM/pwm.c ****  *
  24:../Dave/Generated/PWM/pwm.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/PWM/pwm.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/PWM/pwm.c ****  *
  27:../Dave/Generated/PWM/pwm.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/PWM/pwm.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/PWM/pwm.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/PWM/pwm.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/PWM/pwm.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/PWM/pwm.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/PWM/pwm.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/PWM/pwm.c ****  *
  35:../Dave/Generated/PWM/pwm.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/PWM/pwm.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/PWM/pwm.c ****  **************************************************************************************************
  38:../Dave/Generated/PWM/pwm.c ****  *
  39:../Dave/Generated/PWM/pwm.c ****  * Change History
  40:../Dave/Generated/PWM/pwm.c ****  * --------------
  41:../Dave/Generated/PWM/pwm.c ****  *
  42:../Dave/Generated/PWM/pwm.c ****  * 2015-02-16:
  43:../Dave/Generated/PWM/pwm.c ****  *     - Initial version for DAVEv4.<BR>
  44:../Dave/Generated/PWM/pwm.c ****  *
  45:../Dave/Generated/PWM/pwm.c ****  * 2015-04-06:
  46:../Dave/Generated/PWM/pwm.c ****  *     - Configuration structure modified of PWM_t.<BR>
  47:../Dave/Generated/PWM/pwm.c ****  *     - Removed PWM_Dynamic_t,PWM_ConfigType_t.<BR>
  48:../Dave/Generated/PWM/pwm.c ****  *     - Added New macros for Mixed usage.<BR>
  49:../Dave/Generated/PWM/pwm.c ****  *     - Added New API PWM_SetPeriodMatchValue().<BR>
  50:../Dave/Generated/PWM/pwm.c ****  *     - Modified enumeration PWM_InterruptType_t to PWM_INTERRUPT_t.<BR>
  51:../Dave/Generated/PWM/pwm.c ****  *     - Modified enumeration PWM_OutputPassiveLevelType_t to PWM_OUTPUT_PASSIVE_LEVEL_t.<BR>
  52:../Dave/Generated/PWM/pwm.c ****  *     - Modified enumeration PWM_TIMER_TYPE_t to PWM_TIMER_SLICE_t .<BR>
  53:../Dave/Generated/PWM/pwm.c ****  *     - PWM_ClearEvent(), PWM_GetInterruptStatus() and PWM_SetPassiveLevel() API prototype modifie
  54:../Dave/Generated/PWM/pwm.c ****  *       new enum.<BR>
  55:../Dave/Generated/PWM/pwm.c ****  *     - API name change PWM_AcknowledgeInterrupt to PWM_ClearEvent.<BR>
  56:../Dave/Generated/PWM/pwm.c ****  *
  57:../Dave/Generated/PWM/pwm.c ****  * 2015-07-09:
  58:../Dave/Generated/PWM/pwm.c ****  *     - Documentation updated.<BR>
  59:../Dave/Generated/PWM/pwm.c ****  *
  60:../Dave/Generated/PWM/pwm.c ****  * 2015-09-01:
  61:../Dave/Generated/PWM/pwm.c ****  *     - XMC14 device support added..<BR>
  62:../Dave/Generated/PWM/pwm.c ****  *
  63:../Dave/Generated/PWM/pwm.c ****  * 2015-10-08:
  64:../Dave/Generated/PWM/pwm.c ****  *     - Added support for XMC4700/XMC4800 devices.<BR>
  65:../Dave/Generated/PWM/pwm.c ****  *
  66:../Dave/Generated/PWM/pwm.c ****  * 2015-12-16:
  67:../Dave/Generated/PWM/pwm.c ****  *     - Added support for XMC4300 devices.<BR>
  68:../Dave/Generated/PWM/pwm.c ****  *
  69:../Dave/Generated/PWM/pwm.c ****  * 2016-07-28:
  70:../Dave/Generated/PWM/pwm.c ****  *     - All event signals are made mandatory.<BR>
  71:../Dave/Generated/PWM/pwm.c ****  *
  72:../Dave/Generated/PWM/pwm.c ****  * @endcond
  73:../Dave/Generated/PWM/pwm.c ****  *
  74:../Dave/Generated/PWM/pwm.c ****  */
  75:../Dave/Generated/PWM/pwm.c **** 
  76:../Dave/Generated/PWM/pwm.c **** /**************************************************************************************************
  77:../Dave/Generated/PWM/pwm.c ****  * HEADER FILES
  78:../Dave/Generated/PWM/pwm.c ****  **************************************************************************************************
  79:../Dave/Generated/PWM/pwm.c **** #include "pwm.h"
  80:../Dave/Generated/PWM/pwm.c **** 
  81:../Dave/Generated/PWM/pwm.c **** /**************************************************************************************************
  82:../Dave/Generated/PWM/pwm.c ****  * MACROS
  83:../Dave/Generated/PWM/pwm.c ****  **************************************************************************************************
  84:../Dave/Generated/PWM/pwm.c **** #define PWM_MAX_DUTY_CYCLE ((uint32_t)10000)
  85:../Dave/Generated/PWM/pwm.c **** #define PWM_DUTY_CYCLE_SCALE ((uint32_t)100)
  86:../Dave/Generated/PWM/pwm.c **** #define PWM_MAX_PRESCALER ((uint32_t)15)
  87:../Dave/Generated/PWM/pwm.c **** #define PWM_MAX_PERIOD_VALUE ((uint32_t) 65535)
  88:../Dave/Generated/PWM/pwm.c **** 
  89:../Dave/Generated/PWM/pwm.c **** /**************************************************************************************************
  90:../Dave/Generated/PWM/pwm.c ****  * LOCAL ROUTINES
  91:../Dave/Generated/PWM/pwm.c ****  **************************************************************************************************
  92:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
  93:../Dave/Generated/PWM/pwm.c **** /*Initialize the App and XMC_CCU4 slice. */
  94:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr);
  95:../Dave/Generated/PWM/pwm.c **** 
  96:../Dave/Generated/PWM/pwm.c **** /*Initialize interrupts*/
  97:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr);
  98:../Dave/Generated/PWM/pwm.c **** 
  99:../Dave/Generated/PWM/pwm.c **** /*Starts the CCU4 slice. */
 100:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU4_Start(PWM_t *const handle_ptr);
 101:../Dave/Generated/PWM/pwm.c **** 
 102:../Dave/Generated/PWM/pwm.c **** /*Stops the CCU4 slice. */
 103:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU4_Stop(PWM_t *const handle_ptr);
 104:../Dave/Generated/PWM/pwm.c **** 
 105:../Dave/Generated/PWM/pwm.c **** /*Sets the duty cycle for CCU4 slice. */
 106:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle);
 107:../Dave/Generated/PWM/pwm.c **** 
 108:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency for CCU4 slice. */
 109:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz);
 110:../Dave/Generated/PWM/pwm.c **** 
 111:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency and duty cycle for CCU4 slice. */
 112:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_SetFreqAndDutyCycle(PWM_t *const handle_ptr, uint32_t pwm_freq_hz, uint32_t 
 113:../Dave/Generated/PWM/pwm.c **** #endif
 114:../Dave/Generated/PWM/pwm.c **** 
 115:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 116:../Dave/Generated/PWM/pwm.c **** /*Initialize the App and XMC_CCU8 slice. */
 117:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_Init(PWM_t *const handle_ptr);
 118:../Dave/Generated/PWM/pwm.c **** 
 119:../Dave/Generated/PWM/pwm.c **** /*Initialize interrupts*/
 120:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU8_ConfigInterrupts(PWM_t *const handle_ptr);
 121:../Dave/Generated/PWM/pwm.c **** 
 122:../Dave/Generated/PWM/pwm.c **** /*Starts the CCU8 slice. */
 123:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU8_Start(PWM_t *const handle_ptr);
 124:../Dave/Generated/PWM/pwm.c **** 
 125:../Dave/Generated/PWM/pwm.c **** /*Stops the CCU8 slice. */
 126:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU8_Stop(PWM_t *const handle_ptr);
 127:../Dave/Generated/PWM/pwm.c **** 
 128:../Dave/Generated/PWM/pwm.c **** /*Sets the duty cycle for CCU8 slice. */
 129:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle);
 130:../Dave/Generated/PWM/pwm.c **** 
 131:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency for CCU8 slice. */
 132:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz);
 133:../Dave/Generated/PWM/pwm.c **** 
 134:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency and duty cycle for CCU8 slice. */
 135:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_SetFreqAndDutyCycle(PWM_t *const handle_ptr, uint32_t pwm_freq_hz, uint32_t 
 136:../Dave/Generated/PWM/pwm.c **** #endif
 137:../Dave/Generated/PWM/pwm.c **** 
 138:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 139:../Dave/Generated/PWM/pwm.c **** 
 140:../Dave/Generated/PWM/pwm.c **** /*Initialize the APP and CCU4 slice. */
 141:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
 142:../Dave/Generated/PWM/pwm.c **** {
 143:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status = PWM_STATUS_FAILURE;
 144:../Dave/Generated/PWM/pwm.c **** 
 145:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL));
 146:../Dave/Generated/PWM/pwm.c **** 
 147:../Dave/Generated/PWM/pwm.c ****   if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 148:../Dave/Generated/PWM/pwm.c ****   {
 149:../Dave/Generated/PWM/pwm.c ****     /* Initialize consumed Apps */
 150:../Dave/Generated/PWM/pwm.c ****     status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 151:../Dave/Generated/PWM/pwm.c **** 
 152:../Dave/Generated/PWM/pwm.c ****     /*Initialize CCU4 slice */
 153:../Dave/Generated/PWM/pwm.c ****     if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 154:../Dave/Generated/PWM/pwm.c ****     {
 155:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
 156:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 157:../Dave/Generated/PWM/pwm.c **** 
 158:../Dave/Generated/PWM/pwm.c ****       /* Set the period and compare register values */
 159:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 160:../Dave/Generated/PWM/pwm.c ****     		                             (uint16_t)handle_ptr->period_value);
 161:../Dave/Generated/PWM/pwm.c **** 
 162:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 163:../Dave/Generated/PWM/pwm.c ****     		                              (uint16_t)handle_ptr->compare_value);
 164:../Dave/Generated/PWM/pwm.c **** 
 165:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 166:../Dave/Generated/PWM/pwm.c **** 
 167:../Dave/Generated/PWM/pwm.c ****       /* Initialize interrupts */
 168:../Dave/Generated/PWM/pwm.c ****       PWM_lCCU4_ConfigInterrupts(handle_ptr);
 169:../Dave/Generated/PWM/pwm.c **** 
 170:../Dave/Generated/PWM/pwm.c ****       XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 171:../Dave/Generated/PWM/pwm.c ****     		        handle_ptr->gpio_out_config);
 172:../Dave/Generated/PWM/pwm.c **** 
 173:../Dave/Generated/PWM/pwm.c ****       handle_ptr->state = PWM_STATUS_SUCCESS;
 174:../Dave/Generated/PWM/pwm.c **** 
 175:../Dave/Generated/PWM/pwm.c ****       /* Start the PWM generation if start at initialization is enabled */
 176:../Dave/Generated/PWM/pwm.c ****       if ((bool) true == handle_ptr->start_control)
 177:../Dave/Generated/PWM/pwm.c ****       {
 178:../Dave/Generated/PWM/pwm.c ****         PWM_Start(handle_ptr);
 179:../Dave/Generated/PWM/pwm.c ****       }
 180:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_SUCCESS;
 181:../Dave/Generated/PWM/pwm.c ****     }
 182:../Dave/Generated/PWM/pwm.c ****     else
 183:../Dave/Generated/PWM/pwm.c ****     {
 184:../Dave/Generated/PWM/pwm.c ****       handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 185:../Dave/Generated/PWM/pwm.c ****     }
 186:../Dave/Generated/PWM/pwm.c **** 
 187:../Dave/Generated/PWM/pwm.c ****   }
 188:../Dave/Generated/PWM/pwm.c ****   return (status);
 189:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU4_Init() api */
 190:../Dave/Generated/PWM/pwm.c **** 
 191:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 192:../Dave/Generated/PWM/pwm.c **** /* Initialize interrupts */
 193:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
 194:../Dave/Generated/PWM/pwm.c **** {
 195:../Dave/Generated/PWM/pwm.c ****   if ((bool) true == handle_ptr->period_match_enable)
 196:../Dave/Generated/PWM/pwm.c ****   {
 197:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
 198:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 199:../Dave/Generated/PWM/pwm.c **** 
 200:../Dave/Generated/PWM/pwm.c ****     /* Bind event to Service Request Node to period match event*/
 201:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 202:../Dave/Generated/PWM/pwm.c ****                                     handle_ptr->ccu4_slice_period_match_node);
 203:../Dave/Generated/PWM/pwm.c ****   }
 204:../Dave/Generated/PWM/pwm.c **** 
 205:../Dave/Generated/PWM/pwm.c ****   if ((bool) true == handle_ptr->compare_match_enable)
 206:../Dave/Generated/PWM/pwm.c ****   {
 207:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
 208:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 209:../Dave/Generated/PWM/pwm.c **** 
 210:../Dave/Generated/PWM/pwm.c ****     /* Bind event to Service Request Node to compare match event */
 211:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH
 212:../Dave/Generated/PWM/pwm.c ****                                     handle_ptr->ccu4_slice_compare_match_node);
 213:../Dave/Generated/PWM/pwm.c ****   }
 214:../Dave/Generated/PWM/pwm.c **** }
 215:../Dave/Generated/PWM/pwm.c **** 
 216:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 217:../Dave/Generated/PWM/pwm.c **** /*Starts the CCU4 slice. */
 218:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU4_Start(PWM_t *const handle_ptr)
 219:../Dave/Generated/PWM/pwm.c **** {
 220:../Dave/Generated/PWM/pwm.c ****   if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 221:../Dave/Generated/PWM/pwm.c ****   {
 222:../Dave/Generated/PWM/pwm.c ****     /* Clears the IDLE mode for the slice */
 223:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 224:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 225:../Dave/Generated/PWM/pwm.c **** 
 226:../Dave/Generated/PWM/pwm.c ****     handle_ptr->state = PWM_STATUS_RUNNING;
 227:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU4_Start:start PWM")
 228:../Dave/Generated/PWM/pwm.c ****   }
 229:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU4_Start() api */
 230:../Dave/Generated/PWM/pwm.c **** 
 231:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 232:../Dave/Generated/PWM/pwm.c **** /*Stops the CCU4 slice. */
 233:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU4_Stop(PWM_t *const handle_ptr)
 234:../Dave/Generated/PWM/pwm.c **** {
 235:../Dave/Generated/PWM/pwm.c ****   if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 236:../Dave/Generated/PWM/pwm.c ****   {
 237:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 238:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 239:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_DisableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 240:../Dave/Generated/PWM/pwm.c **** 
 241:../Dave/Generated/PWM/pwm.c ****     handle_ptr->state = PWM_STATUS_STOPPED;
 242:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU4_Stop:stop PWM")
 243:../Dave/Generated/PWM/pwm.c ****   }
 244:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU4_Stop() api */
 245:../Dave/Generated/PWM/pwm.c **** 
 246:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 247:../Dave/Generated/PWM/pwm.c **** /*Sets the duty cycle for CCU4 slice. */
 248:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
 249:../Dave/Generated/PWM/pwm.c **** {
 250:../Dave/Generated/PWM/pwm.c ****   uint32_t period;
 251:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 252:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 253:../Dave/Generated/PWM/pwm.c **** 
 254:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PW
 255:../Dave/Generated/PWM/pwm.c **** 
 256:../Dave/Generated/PWM/pwm.c ****   status = PWM_STATUS_FAILURE;
 257:../Dave/Generated/PWM/pwm.c ****   if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 258:../Dave/Generated/PWM/pwm.c ****   {
 259:../Dave/Generated/PWM/pwm.c ****     /* Duty cycle needs between 0 and 10000 */
 260:../Dave/Generated/PWM/pwm.c ****     if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 261:../Dave/Generated/PWM/pwm.c ****     {
 262:../Dave/Generated/PWM/pwm.c ****       /* period = (PR + 1) */
 263:../Dave/Generated/PWM/pwm.c ****       period = (uint32_t)handle_ptr->period_value + 1U;
 264:../Dave/Generated/PWM/pwm.c **** 
 265:../Dave/Generated/PWM/pwm.c ****       /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
 266:../Dave/Generated/PWM/pwm.c ****       compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SC
 267:../Dave/Generated/PWM/pwm.c **** 
 268:../Dave/Generated/PWM/pwm.c ****       handle_ptr->compare_value = compare;
 269:../Dave/Generated/PWM/pwm.c ****       handle_ptr->duty_cycle = duty_cycle;
 270:../Dave/Generated/PWM/pwm.c **** 
 271:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 272:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 273:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_SUCCESS;
 274:../Dave/Generated/PWM/pwm.c ****     }
 275:../Dave/Generated/PWM/pwm.c ****   }
 276:../Dave/Generated/PWM/pwm.c **** 
 277:../Dave/Generated/PWM/pwm.c ****   XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
 278:../Dave/Generated/PWM/pwm.c ****   return (status);
 279:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU4_SetDutyCycle() api */
 280:../Dave/Generated/PWM/pwm.c **** 
 281:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 282:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency for CCU4 slice. */
 283:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz)
 284:../Dave/Generated/PWM/pwm.c **** {
 285:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 286:../Dave/Generated/PWM/pwm.c ****   uint32_t module_freq;
 287:../Dave/Generated/PWM/pwm.c ****   uint8_t prescaler;
 288:../Dave/Generated/PWM/pwm.c ****   uint32_t period_value;
 289:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 290:../Dave/Generated/PWM/pwm.c **** 
 291:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU4_SetFreq:Invalid pwm_freq_hz " , (pwm_freq_hz != 0U));
 292:../Dave/Generated/PWM/pwm.c **** 
 293:../Dave/Generated/PWM/pwm.c ****   status = handle_ptr->state;
 294:../Dave/Generated/PWM/pwm.c ****   prescaler = 0U;
 295:../Dave/Generated/PWM/pwm.c ****   period_value = 0U;
 296:../Dave/Generated/PWM/pwm.c **** 
 297:../Dave/Generated/PWM/pwm.c ****   /* Can't set the frequency when the PWM is not yet initialized or when required frequency is 0*/
 298:../Dave/Generated/PWM/pwm.c ****   if ((status != PWM_STATUS_UNINITIALIZED) && ((uint32_t)0 != pwm_freq_hz))
 299:../Dave/Generated/PWM/pwm.c ****   {
 300:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_SUCCESS;
 301:../Dave/Generated/PWM/pwm.c ****     /*Get the Module frequency*/
 302:../Dave/Generated/PWM/pwm.c ****     module_freq = handle_ptr->global_ccu4_handle->module_frequency;
 303:../Dave/Generated/PWM/pwm.c **** 
 304:../Dave/Generated/PWM/pwm.c ****     /*Calculate the prescaler and the period register values.*/
 305:../Dave/Generated/PWM/pwm.c ****     while (prescaler <= PWM_MAX_PRESCALER)
 306:../Dave/Generated/PWM/pwm.c ****     {
 307:../Dave/Generated/PWM/pwm.c ****       period_value = (uint32_t)((uint32_t)module_freq / (uint32_t)pwm_freq_hz) >> (uint32_t)prescal
 308:../Dave/Generated/PWM/pwm.c ****       /*If the prescaler selected is not big enough goto the next prescaler value else come out.*/
 309:../Dave/Generated/PWM/pwm.c ****       if (period_value <= PWM_MAX_TIMER_COUNT )
 310:../Dave/Generated/PWM/pwm.c ****       {
 311:../Dave/Generated/PWM/pwm.c ****         break;
 312:../Dave/Generated/PWM/pwm.c ****       }
 313:../Dave/Generated/PWM/pwm.c ****       prescaler++;
 314:../Dave/Generated/PWM/pwm.c ****     }
 315:../Dave/Generated/PWM/pwm.c **** 
 316:../Dave/Generated/PWM/pwm.c ****     /*Can't set the frequency if the required value is too small or when the required frequency is 
 317:../Dave/Generated/PWM/pwm.c ****     if ((prescaler > PWM_MAX_PRESCALER) || ((uint32_t)0 == period_value))
 318:../Dave/Generated/PWM/pwm.c ****     {
 319:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU4_SetFreq:Frequency could not be set")
 320:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_FAILURE;
 321:../Dave/Generated/PWM/pwm.c ****     }
 322:../Dave/Generated/PWM/pwm.c ****     else
 323:../Dave/Generated/PWM/pwm.c ****     {
 324:../Dave/Generated/PWM/pwm.c ****       /*Calculate the new compare values using new period values */
 325:../Dave/Generated/PWM/pwm.c ****       compare = (period_value * (PWM_MAX_DUTY_CYCLE - handle_ptr->duty_cycle))
 326:../Dave/Generated/PWM/pwm.c ****     		     / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE);
 327:../Dave/Generated/PWM/pwm.c **** 
 328:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, prescaler);
 329:../Dave/Generated/PWM/pwm.c **** 
 330:../Dave/Generated/PWM/pwm.c ****       /* The period register is always one count less than calculated.*/
 331:../Dave/Generated/PWM/pwm.c ****       period_value = period_value - (uint32_t)1;
 332:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period_value));
 333:../Dave/Generated/PWM/pwm.c **** 
 334:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 335:../Dave/Generated/PWM/pwm.c **** 
 336:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 337:../Dave/Generated/PWM/pwm.c **** 
 338:../Dave/Generated/PWM/pwm.c ****       handle_ptr->compare_value = compare;
 339:../Dave/Generated/PWM/pwm.c ****       handle_ptr->period_value = period_value;
 340:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU4_SetFreq:frequency set")
 341:../Dave/Generated/PWM/pwm.c ****     }
 342:../Dave/Generated/PWM/pwm.c ****   }
 343:../Dave/Generated/PWM/pwm.c ****   else
 344:../Dave/Generated/PWM/pwm.c ****   {
 345:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_FAILURE;
 346:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU4_SetFreq:Frequency could not be set")
 347:../Dave/Generated/PWM/pwm.c ****   }
 348:../Dave/Generated/PWM/pwm.c **** 
 349:../Dave/Generated/PWM/pwm.c **** 
 350:../Dave/Generated/PWM/pwm.c ****   return status;
 351:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU4_SetFreq() api */
 352:../Dave/Generated/PWM/pwm.c **** 
 353:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 354:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency and duty cycle for CCU4 slice. */
 355:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU4_SetFreqAndDutyCycle(PWM_t *const handle_ptr, uint32_t pwm_freq_hz, uint32_t 
 356:../Dave/Generated/PWM/pwm.c **** {
 357:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 358:../Dave/Generated/PWM/pwm.c ****   uint32_t module_freq;
 359:../Dave/Generated/PWM/pwm.c ****   uint8_t prescaler;
 360:../Dave/Generated/PWM/pwm.c ****   uint32_t period_value;
 361:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 362:../Dave/Generated/PWM/pwm.c **** 
 363:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU4_SetFreqAndDutyCycle:Invalid pwm_freq_hz " , (pwm_freq_hz != 0U));
 364:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU4_SetFreqAndDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
 365:../Dave/Generated/PWM/pwm.c ****                                                                (duty_cycle <= PWM_MAX_DUTY_CYCLE)))
 366:../Dave/Generated/PWM/pwm.c **** 
 367:../Dave/Generated/PWM/pwm.c ****   status = handle_ptr->state;
 368:../Dave/Generated/PWM/pwm.c ****   prescaler = 0U;
 369:../Dave/Generated/PWM/pwm.c ****   period_value = 0U;
 370:../Dave/Generated/PWM/pwm.c **** 
 371:../Dave/Generated/PWM/pwm.c ****   /* Can't set the frequency when the PWM is not yet initialized or when required frequency is 0*/
 372:../Dave/Generated/PWM/pwm.c ****   if ((status != PWM_STATUS_UNINITIALIZED) && ((uint32_t)0 != pwm_freq_hz))
 373:../Dave/Generated/PWM/pwm.c ****   {
 374:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_SUCCESS;
 375:../Dave/Generated/PWM/pwm.c ****     /*Get the Module frequency*/
 376:../Dave/Generated/PWM/pwm.c ****     module_freq = handle_ptr->global_ccu4_handle->module_frequency;
 377:../Dave/Generated/PWM/pwm.c **** 
 378:../Dave/Generated/PWM/pwm.c ****     /*Calculate the prescaler and the period register values.*/
 379:../Dave/Generated/PWM/pwm.c ****     while (prescaler <= PWM_MAX_PRESCALER)
 380:../Dave/Generated/PWM/pwm.c ****     {
 381:../Dave/Generated/PWM/pwm.c ****       period_value = (uint32_t)((uint32_t)module_freq / (uint32_t)pwm_freq_hz) >> (uint32_t)prescal
 382:../Dave/Generated/PWM/pwm.c ****       /*If the prescaler selected is not big enough goto the next prescaler value else come out.*/
 383:../Dave/Generated/PWM/pwm.c ****       if (period_value <= PWM_MAX_TIMER_COUNT )
 384:../Dave/Generated/PWM/pwm.c ****       {
 385:../Dave/Generated/PWM/pwm.c ****         break;
 386:../Dave/Generated/PWM/pwm.c ****       }
 387:../Dave/Generated/PWM/pwm.c **** 
 388:../Dave/Generated/PWM/pwm.c ****       prescaler++;
 389:../Dave/Generated/PWM/pwm.c ****     }
 390:../Dave/Generated/PWM/pwm.c **** 
 391:../Dave/Generated/PWM/pwm.c ****     /*Can't set the frequency if the required value is too small or when the required frequency is 
 392:../Dave/Generated/PWM/pwm.c ****     if ((prescaler > PWM_MAX_PRESCALER) || (duty_cycle > PWM_MAX_DUTY_CYCLE) || ((uint32_t)0 == per
 393:../Dave/Generated/PWM/pwm.c ****     {
 394:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU4_SetFreqAndDutyCycle:Frequency or duty cycle could not be set")
 395:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_FAILURE;
 396:../Dave/Generated/PWM/pwm.c ****     }
 397:../Dave/Generated/PWM/pwm.c ****     else
 398:../Dave/Generated/PWM/pwm.c ****     {
 399:../Dave/Generated/PWM/pwm.c ****       /*Calculate the new compare values using new period values */
 400:../Dave/Generated/PWM/pwm.c ****       compare = (period_value * ((uint32_t)PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PW
 401:../Dave/Generated/PWM/pwm.c **** 
 402:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, prescaler);
 403:../Dave/Generated/PWM/pwm.c **** 
 404:../Dave/Generated/PWM/pwm.c ****       /* The period register is always one count less than calculated.*/
 405:../Dave/Generated/PWM/pwm.c ****       period_value = period_value - (uint32_t)1;
 406:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period_value));
 407:../Dave/Generated/PWM/pwm.c **** 
 408:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 409:../Dave/Generated/PWM/pwm.c **** 
 410:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 411:../Dave/Generated/PWM/pwm.c **** 
 412:../Dave/Generated/PWM/pwm.c ****       handle_ptr->compare_value = compare;
 413:../Dave/Generated/PWM/pwm.c ****       handle_ptr->period_value = period_value;
 414:../Dave/Generated/PWM/pwm.c ****       handle_ptr->duty_cycle = duty_cycle;
 415:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU4_SetFreqAndDutyCycle:frequency and duty cycle set")
 416:../Dave/Generated/PWM/pwm.c ****     }
 417:../Dave/Generated/PWM/pwm.c ****   }
 418:../Dave/Generated/PWM/pwm.c ****   else
 419:../Dave/Generated/PWM/pwm.c ****   {
 420:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_FAILURE;
 421:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU4_SetFreqAndDutyCycle:Frequency or duty cycle could not be set")
 422:../Dave/Generated/PWM/pwm.c ****   }
 423:../Dave/Generated/PWM/pwm.c **** 
 424:../Dave/Generated/PWM/pwm.c **** 
 425:../Dave/Generated/PWM/pwm.c ****   return status;
 426:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU4_SetFreqAndDutyCycle() api */
 427:../Dave/Generated/PWM/pwm.c **** 
 428:../Dave/Generated/PWM/pwm.c **** #endif /* end of CCU4 function definitions */
 429:../Dave/Generated/PWM/pwm.c **** 
 430:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 431:../Dave/Generated/PWM/pwm.c **** 
 432:../Dave/Generated/PWM/pwm.c **** /*Initialize the APP and CCU8 slice. */
 433:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_Init(PWM_t *const handle_ptr)
 434:../Dave/Generated/PWM/pwm.c **** {
 495              	 .loc 2 434 0
 496              	 .cfi_startproc
 497              	 
 498              	 
 499 0000 80B5     	 push {r7,lr}
 500              	.LCFI60:
 501              	 .cfi_def_cfa_offset 8
 502              	 .cfi_offset 7,-8
 503              	 .cfi_offset 14,-4
 504 0002 84B0     	 sub sp,sp,#16
 505              	.LCFI61:
 506              	 .cfi_def_cfa_offset 24
 507 0004 00AF     	 add r7,sp,#0
 508              	.LCFI62:
 509              	 .cfi_def_cfa_register 7
 510 0006 7860     	 str r0,[r7,#4]
 435:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status = PWM_STATUS_FAILURE;
 511              	 .loc 2 435 0
 512 0008 0123     	 movs r3,#1
 513 000a FB73     	 strb r3,[r7,#15]
 436:../Dave/Generated/PWM/pwm.c **** 
 437:../Dave/Generated/PWM/pwm.c ****   if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 514              	 .loc 2 437 0
 515 000c 7B68     	 ldr r3,[r7,#4]
 516 000e 93F82930 	 ldrb r3,[r3,#41]
 517 0012 022B     	 cmp r3,#2
 518 0014 4ED1     	 bne .L14
 438:../Dave/Generated/PWM/pwm.c ****   {
 439:../Dave/Generated/PWM/pwm.c ****     /* Initialize consumed Apps */
 440:../Dave/Generated/PWM/pwm.c ****     status = (PWM_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handle);
 519              	 .loc 2 440 0
 520 0016 7B68     	 ldr r3,[r7,#4]
 521 0018 1B68     	 ldr r3,[r3]
 522 001a 1846     	 mov r0,r3
 523 001c FFF7FEFF 	 bl GLOBAL_CCU8_Init
 524 0020 0346     	 mov r3,r0
 525 0022 FB73     	 strb r3,[r7,#15]
 441:../Dave/Generated/PWM/pwm.c **** 
 442:../Dave/Generated/PWM/pwm.c ****     /*Initialize CCU8 slice */
 443:../Dave/Generated/PWM/pwm.c ****     if (PWM_STATUS_SUCCESS == status)
 526              	 .loc 2 443 0
 527 0024 FB7B     	 ldrb r3,[r7,#15]
 528 0026 002B     	 cmp r3,#0
 529 0028 40D1     	 bne .L15
 444:../Dave/Generated/PWM/pwm.c ****     {
 445:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
 446:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 530              	 .loc 2 446 0
 531 002a 7B68     	 ldr r3,[r7,#4]
 532 002c 9A68     	 ldr r2,[r3,#8]
 533 002e 7B68     	 ldr r3,[r7,#4]
 534 0030 DB68     	 ldr r3,[r3,#12]
 535 0032 1046     	 mov r0,r2
 536 0034 1946     	 mov r1,r3
 537 0036 FFF7FEFF 	 bl XMC_CCU8_SLICE_CompareInit
 447:../Dave/Generated/PWM/pwm.c **** 
 448:../Dave/Generated/PWM/pwm.c ****       /* Set the period and compare register values */
 449:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 538              	 .loc 2 449 0
 539 003a 7B68     	 ldr r3,[r7,#4]
 540 003c 9A68     	 ldr r2,[r3,#8]
 450:../Dave/Generated/PWM/pwm.c ****     		                            (uint16_t)handle_ptr->period_value);
 541              	 .loc 2 450 0
 542 003e 7B68     	 ldr r3,[r7,#4]
 543 0040 DB69     	 ldr r3,[r3,#28]
 449:../Dave/Generated/PWM/pwm.c ****     		                            (uint16_t)handle_ptr->period_value);
 544              	 .loc 2 449 0
 545 0042 9BB2     	 uxth r3,r3
 546 0044 1046     	 mov r0,r2
 547 0046 1946     	 mov r1,r3
 548 0048 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 451:../Dave/Generated/PWM/pwm.c **** 
 452:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 549              	 .loc 2 452 0
 550 004c 7B68     	 ldr r3,[r7,#4]
 551 004e 9A68     	 ldr r2,[r3,#8]
 453:../Dave/Generated/PWM/pwm.c ****     		                              (uint16_t)handle_ptr->compare_value);
 552              	 .loc 2 453 0
 553 0050 7B68     	 ldr r3,[r7,#4]
 554 0052 9B69     	 ldr r3,[r3,#24]
 452:../Dave/Generated/PWM/pwm.c ****     		                              (uint16_t)handle_ptr->compare_value);
 555              	 .loc 2 452 0
 556 0054 9BB2     	 uxth r3,r3
 557 0056 1046     	 mov r0,r2
 558 0058 0021     	 movs r1,#0
 559 005a 1A46     	 mov r2,r3
 560 005c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 454:../Dave/Generated/PWM/pwm.c **** 
 455:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 561              	 .loc 2 455 0
 562 0060 7B68     	 ldr r3,[r7,#4]
 563 0062 5A68     	 ldr r2,[r3,#4]
 564 0064 7B68     	 ldr r3,[r7,#4]
 565 0066 5B6A     	 ldr r3,[r3,#36]
 566 0068 1046     	 mov r0,r2
 567 006a 1946     	 mov r1,r3
 568 006c FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 456:../Dave/Generated/PWM/pwm.c **** 
 457:../Dave/Generated/PWM/pwm.c ****       /* Initialize interrupts */
 458:../Dave/Generated/PWM/pwm.c ****       PWM_lCCU8_ConfigInterrupts(handle_ptr);
 569              	 .loc 2 458 0
 570 0070 7868     	 ldr r0,[r7,#4]
 571 0072 FFF7FEFF 	 bl PWM_lCCU8_ConfigInterrupts
 459:../Dave/Generated/PWM/pwm.c **** 
 460:../Dave/Generated/PWM/pwm.c ****       XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 572              	 .loc 2 460 0
 573 0076 7B68     	 ldr r3,[r7,#4]
 574 0078 1969     	 ldr r1,[r3,#16]
 575 007a 7B68     	 ldr r3,[r7,#4]
 576 007c 93F82C20 	 ldrb r2,[r3,#44]
 577 0080 7B68     	 ldr r3,[r7,#4]
 578 0082 5B69     	 ldr r3,[r3,#20]
 579 0084 0846     	 mov r0,r1
 580 0086 1146     	 mov r1,r2
 581 0088 1A46     	 mov r2,r3
 582 008a FFF7FEFF 	 bl XMC_GPIO_Init
 461:../Dave/Generated/PWM/pwm.c ****     		        handle_ptr->gpio_out_config);
 462:../Dave/Generated/PWM/pwm.c **** 
 463:../Dave/Generated/PWM/pwm.c ****       handle_ptr->state = PWM_STATUS_SUCCESS;
 583              	 .loc 2 463 0
 584 008e 7B68     	 ldr r3,[r7,#4]
 585 0090 0022     	 movs r2,#0
 586 0092 83F82920 	 strb r2,[r3,#41]
 464:../Dave/Generated/PWM/pwm.c **** 
 465:../Dave/Generated/PWM/pwm.c ****       /* Start the PWM generation if start at initialization is enabled */
 466:../Dave/Generated/PWM/pwm.c ****       if ((bool) true == handle_ptr->start_control)
 587              	 .loc 2 466 0
 588 0096 7B68     	 ldr r3,[r7,#4]
 589 0098 93F82F30 	 ldrb r3,[r3,#47]
 590 009c 002B     	 cmp r3,#0
 591 009e 02D0     	 beq .L16
 467:../Dave/Generated/PWM/pwm.c ****       {
 468:../Dave/Generated/PWM/pwm.c ****         PWM_Start(handle_ptr);
 592              	 .loc 2 468 0
 593 00a0 7868     	 ldr r0,[r7,#4]
 594 00a2 FFF7FEFF 	 bl PWM_Start
 595              	.L16:
 469:../Dave/Generated/PWM/pwm.c ****       }
 470:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_SUCCESS;
 596              	 .loc 2 470 0
 597 00a6 0023     	 movs r3,#0
 598 00a8 FB73     	 strb r3,[r7,#15]
 599 00aa 03E0     	 b .L14
 600              	.L15:
 471:../Dave/Generated/PWM/pwm.c ****     }
 472:../Dave/Generated/PWM/pwm.c ****     else
 473:../Dave/Generated/PWM/pwm.c ****     {
 474:../Dave/Generated/PWM/pwm.c ****       handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 601              	 .loc 2 474 0
 602 00ac 7B68     	 ldr r3,[r7,#4]
 603 00ae 0222     	 movs r2,#2
 604 00b0 83F82920 	 strb r2,[r3,#41]
 605              	.L14:
 475:../Dave/Generated/PWM/pwm.c ****     }
 476:../Dave/Generated/PWM/pwm.c **** 
 477:../Dave/Generated/PWM/pwm.c ****   }
 478:../Dave/Generated/PWM/pwm.c ****   return(status);
 606              	 .loc 2 478 0
 607 00b4 FB7B     	 ldrb r3,[r7,#15]
 479:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU8_Init() api */
 608              	 .loc 2 479 0
 609 00b6 1846     	 mov r0,r3
 610 00b8 1037     	 adds r7,r7,#16
 611              	.LCFI63:
 612              	 .cfi_def_cfa_offset 8
 613 00ba BD46     	 mov sp,r7
 614              	.LCFI64:
 615              	 .cfi_def_cfa_register 13
 616              	 
 617 00bc 80BD     	 pop {r7,pc}
 618              	 .cfi_endproc
 619              	.LFE247:
 621 00be 00BF     	 .section .text.PWM_lCCU8_ConfigInterrupts,"ax",%progbits
 622              	 .align 2
 623              	 .global PWM_lCCU8_ConfigInterrupts
 624              	 .thumb
 625              	 .thumb_func
 627              	PWM_lCCU8_ConfigInterrupts:
 628              	.LFB248:
 480:../Dave/Generated/PWM/pwm.c **** 
 481:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 482:../Dave/Generated/PWM/pwm.c **** /* Initialize interrupts */
 483:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU8_ConfigInterrupts(PWM_t *const handle_ptr)
 484:../Dave/Generated/PWM/pwm.c **** {
 629              	 .loc 2 484 0
 630              	 .cfi_startproc
 631              	 
 632              	 
 633 0000 80B5     	 push {r7,lr}
 634              	.LCFI65:
 635              	 .cfi_def_cfa_offset 8
 636              	 .cfi_offset 7,-8
 637              	 .cfi_offset 14,-4
 638 0002 82B0     	 sub sp,sp,#8
 639              	.LCFI66:
 640              	 .cfi_def_cfa_offset 16
 641 0004 00AF     	 add r7,sp,#0
 642              	.LCFI67:
 643              	 .cfi_def_cfa_register 7
 644 0006 7860     	 str r0,[r7,#4]
 485:../Dave/Generated/PWM/pwm.c ****   if ((bool) true == handle_ptr->period_match_enable)
 645              	 .loc 2 485 0
 646 0008 7B68     	 ldr r3,[r7,#4]
 647 000a 93F83030 	 ldrb r3,[r3,#48]
 648 000e 002B     	 cmp r3,#0
 649 0010 0FD0     	 beq .L19
 486:../Dave/Generated/PWM/pwm.c ****   {
 487:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:period match event enable")
 488:../Dave/Generated/PWM/pwm.c **** 
 489:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 650              	 .loc 2 489 0
 651 0012 7B68     	 ldr r3,[r7,#4]
 652 0014 9B68     	 ldr r3,[r3,#8]
 653 0016 1846     	 mov r0,r3
 654 0018 0021     	 movs r1,#0
 655 001a FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 490:../Dave/Generated/PWM/pwm.c **** 
 491:../Dave/Generated/PWM/pwm.c ****     /* Bind event to Service Request Node for period match event */
 492:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 656              	 .loc 2 492 0
 657 001e 7B68     	 ldr r3,[r7,#4]
 658 0020 9A68     	 ldr r2,[r3,#8]
 659 0022 7B68     	 ldr r3,[r7,#4]
 660 0024 93F82A30 	 ldrb r3,[r3,#42]
 661 0028 1046     	 mov r0,r2
 662 002a 0021     	 movs r1,#0
 663 002c 1A46     	 mov r2,r3
 664 002e FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 665              	.L19:
 493:../Dave/Generated/PWM/pwm.c ****                                     handle_ptr->ccu8_slice_period_match_node);
 494:../Dave/Generated/PWM/pwm.c ****   }
 495:../Dave/Generated/PWM/pwm.c **** 
 496:../Dave/Generated/PWM/pwm.c ****   if ((bool) true == handle_ptr->compare_match_enable)
 666              	 .loc 2 496 0
 667 0032 7B68     	 ldr r3,[r7,#4]
 668 0034 93F83130 	 ldrb r3,[r3,#49]
 669 0038 002B     	 cmp r3,#0
 670 003a 0FD0     	 beq .L18
 497:../Dave/Generated/PWM/pwm.c ****   {
 498:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:compare match event enable ")
 499:../Dave/Generated/PWM/pwm.c **** 
 500:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_C
 671              	 .loc 2 500 0
 672 003c 7B68     	 ldr r3,[r7,#4]
 673 003e 9B68     	 ldr r3,[r3,#8]
 674 0040 1846     	 mov r0,r3
 675 0042 0221     	 movs r1,#2
 676 0044 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 501:../Dave/Generated/PWM/pwm.c ****     /* Bind event to Service Request Node for compare match event */
 502:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH
 677              	 .loc 2 502 0
 678 0048 7B68     	 ldr r3,[r7,#4]
 679 004a 9A68     	 ldr r2,[r3,#8]
 680 004c 7B68     	 ldr r3,[r7,#4]
 681 004e 93F82B30 	 ldrb r3,[r3,#43]
 682 0052 1046     	 mov r0,r2
 683 0054 0221     	 movs r1,#2
 684 0056 1A46     	 mov r2,r3
 685 0058 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 686              	.L18:
 503:../Dave/Generated/PWM/pwm.c ****                                     handle_ptr->ccu8_slice_compare_match_node);
 504:../Dave/Generated/PWM/pwm.c ****   }
 505:../Dave/Generated/PWM/pwm.c **** }
 687              	 .loc 2 505 0
 688 005c 0837     	 adds r7,r7,#8
 689              	.LCFI68:
 690              	 .cfi_def_cfa_offset 8
 691 005e BD46     	 mov sp,r7
 692              	.LCFI69:
 693              	 .cfi_def_cfa_register 13
 694              	 
 695 0060 80BD     	 pop {r7,pc}
 696              	 .cfi_endproc
 697              	.LFE248:
 699 0062 00BF     	 .section .text.PWM_lCCU8_Start,"ax",%progbits
 700              	 .align 2
 701              	 .global PWM_lCCU8_Start
 702              	 .thumb
 703              	 .thumb_func
 705              	PWM_lCCU8_Start:
 706              	.LFB249:
 506:../Dave/Generated/PWM/pwm.c **** 
 507:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 508:../Dave/Generated/PWM/pwm.c **** /*Starts the CCU8 slice. */
 509:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU8_Start(PWM_t *const handle_ptr)
 510:../Dave/Generated/PWM/pwm.c **** {
 707              	 .loc 2 510 0
 708              	 .cfi_startproc
 709              	 
 710              	 
 711 0000 80B5     	 push {r7,lr}
 712              	.LCFI70:
 713              	 .cfi_def_cfa_offset 8
 714              	 .cfi_offset 7,-8
 715              	 .cfi_offset 14,-4
 716 0002 82B0     	 sub sp,sp,#8
 717              	.LCFI71:
 718              	 .cfi_def_cfa_offset 16
 719 0004 00AF     	 add r7,sp,#0
 720              	.LCFI72:
 721              	 .cfi_def_cfa_register 7
 722 0006 7860     	 str r0,[r7,#4]
 511:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_Start:Invalid handle_ptr" , (handle_ptr != NULL));
 512:../Dave/Generated/PWM/pwm.c **** 
 513:../Dave/Generated/PWM/pwm.c ****   if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 723              	 .loc 2 513 0
 724 0008 7B68     	 ldr r3,[r7,#4]
 725 000a 93F82930 	 ldrb r3,[r3,#41]
 726 000e 002B     	 cmp r3,#0
 727 0010 04D0     	 beq .L22
 728              	 .loc 2 513 0 is_stmt 0 discriminator 1
 729 0012 7B68     	 ldr r3,[r7,#4]
 730 0014 93F82930 	 ldrb r3,[r3,#41]
 731 0018 042B     	 cmp r3,#4
 732 001a 11D1     	 bne .L21
 733              	.L22:
 514:../Dave/Generated/PWM/pwm.c ****   {
 515:../Dave/Generated/PWM/pwm.c ****     /* Clears IDLE mode for the slice */
 516:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_EnableClock(handle_ptr->ccu8_kernel_ptr,handle_ptr->slice_number);
 734              	 .loc 2 516 0 is_stmt 1
 735 001c 7B68     	 ldr r3,[r7,#4]
 736 001e 5A68     	 ldr r2,[r3,#4]
 737 0020 7B68     	 ldr r3,[r7,#4]
 738 0022 93F82E30 	 ldrb r3,[r3,#46]
 739 0026 1046     	 mov r0,r2
 740 0028 1946     	 mov r1,r3
 741 002a FFF7FEFF 	 bl XMC_CCU8_EnableClock
 517:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 742              	 .loc 2 517 0
 743 002e 7B68     	 ldr r3,[r7,#4]
 744 0030 9B68     	 ldr r3,[r3,#8]
 745 0032 1846     	 mov r0,r3
 746 0034 FFF7FEFF 	 bl XMC_CCU8_SLICE_StartTimer
 518:../Dave/Generated/PWM/pwm.c **** 
 519:../Dave/Generated/PWM/pwm.c ****     handle_ptr->state = PWM_STATUS_RUNNING;
 747              	 .loc 2 519 0
 748 0038 7B68     	 ldr r3,[r7,#4]
 749 003a 0322     	 movs r2,#3
 750 003c 83F82920 	 strb r2,[r3,#41]
 751              	.L21:
 520:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU8_Start:start PWM")
 521:../Dave/Generated/PWM/pwm.c ****   }
 522:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU8_Start() api */
 752              	 .loc 2 522 0
 753 0040 0837     	 adds r7,r7,#8
 754              	.LCFI73:
 755              	 .cfi_def_cfa_offset 8
 756 0042 BD46     	 mov sp,r7
 757              	.LCFI74:
 758              	 .cfi_def_cfa_register 13
 759              	 
 760 0044 80BD     	 pop {r7,pc}
 761              	 .cfi_endproc
 762              	.LFE249:
 764 0046 00BF     	 .section .text.PWM_lCCU8_Stop,"ax",%progbits
 765              	 .align 2
 766              	 .global PWM_lCCU8_Stop
 767              	 .thumb
 768              	 .thumb_func
 770              	PWM_lCCU8_Stop:
 771              	.LFB250:
 523:../Dave/Generated/PWM/pwm.c **** 
 524:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 525:../Dave/Generated/PWM/pwm.c **** /*Stops the CCU8 slice. */
 526:../Dave/Generated/PWM/pwm.c **** void PWM_lCCU8_Stop(PWM_t *const handle_ptr)
 527:../Dave/Generated/PWM/pwm.c **** {
 772              	 .loc 2 527 0
 773              	 .cfi_startproc
 774              	 
 775              	 
 776 0000 80B5     	 push {r7,lr}
 777              	.LCFI75:
 778              	 .cfi_def_cfa_offset 8
 779              	 .cfi_offset 7,-8
 780              	 .cfi_offset 14,-4
 781 0002 82B0     	 sub sp,sp,#8
 782              	.LCFI76:
 783              	 .cfi_def_cfa_offset 16
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI77:
 786              	 .cfi_def_cfa_register 7
 787 0006 7860     	 str r0,[r7,#4]
 528:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_Stop:Invalid handle_ptr" , (handle_ptr != NULL));
 529:../Dave/Generated/PWM/pwm.c **** 
 530:../Dave/Generated/PWM/pwm.c ****   if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 788              	 .loc 2 530 0
 789 0008 7B68     	 ldr r3,[r7,#4]
 790 000a 93F82930 	 ldrb r3,[r3,#41]
 791 000e 022B     	 cmp r3,#2
 792 0010 16D0     	 beq .L24
 531:../Dave/Generated/PWM/pwm.c ****   {
 532:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 793              	 .loc 2 532 0
 794 0012 7B68     	 ldr r3,[r7,#4]
 795 0014 9B68     	 ldr r3,[r3,#8]
 796 0016 1846     	 mov r0,r3
 797 0018 FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 533:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 798              	 .loc 2 533 0
 799 001c 7B68     	 ldr r3,[r7,#4]
 800 001e 9B68     	 ldr r3,[r3,#8]
 801 0020 1846     	 mov r0,r3
 802 0022 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearTimer
 534:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_DisableClock(handle_ptr->ccu8_kernel_ptr, handle_ptr->slice_number);
 803              	 .loc 2 534 0
 804 0026 7B68     	 ldr r3,[r7,#4]
 805 0028 5A68     	 ldr r2,[r3,#4]
 806 002a 7B68     	 ldr r3,[r7,#4]
 807 002c 93F82E30 	 ldrb r3,[r3,#46]
 808 0030 1046     	 mov r0,r2
 809 0032 1946     	 mov r1,r3
 810 0034 FFF7FEFF 	 bl XMC_CCU8_DisableClock
 535:../Dave/Generated/PWM/pwm.c **** 
 536:../Dave/Generated/PWM/pwm.c ****     handle_ptr->state = PWM_STATUS_STOPPED;
 811              	 .loc 2 536 0
 812 0038 7B68     	 ldr r3,[r7,#4]
 813 003a 0422     	 movs r2,#4
 814 003c 83F82920 	 strb r2,[r3,#41]
 815              	.L24:
 537:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU8_Stop:stop PWM")
 538:../Dave/Generated/PWM/pwm.c ****   }
 539:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU8_Stop() api */
 816              	 .loc 2 539 0
 817 0040 0837     	 adds r7,r7,#8
 818              	.LCFI78:
 819              	 .cfi_def_cfa_offset 8
 820 0042 BD46     	 mov sp,r7
 821              	.LCFI79:
 822              	 .cfi_def_cfa_register 13
 823              	 
 824 0044 80BD     	 pop {r7,pc}
 825              	 .cfi_endproc
 826              	.LFE250:
 828 0046 00BF     	 .section .text.PWM_lCCU8_SetDutyCycle,"ax",%progbits
 829              	 .align 2
 830              	 .global PWM_lCCU8_SetDutyCycle
 831              	 .thumb
 832              	 .thumb_func
 834              	PWM_lCCU8_SetDutyCycle:
 835              	.LFB251:
 540:../Dave/Generated/PWM/pwm.c **** 
 541:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 542:../Dave/Generated/PWM/pwm.c **** /*Sets the duty cycle for CCU8 slice. */
 543:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
 544:../Dave/Generated/PWM/pwm.c **** {
 836              	 .loc 2 544 0
 837              	 .cfi_startproc
 838              	 
 839              	 
 840 0000 80B5     	 push {r7,lr}
 841              	.LCFI80:
 842              	 .cfi_def_cfa_offset 8
 843              	 .cfi_offset 7,-8
 844              	 .cfi_offset 14,-4
 845 0002 86B0     	 sub sp,sp,#24
 846              	.LCFI81:
 847              	 .cfi_def_cfa_offset 32
 848 0004 00AF     	 add r7,sp,#0
 849              	.LCFI82:
 850              	 .cfi_def_cfa_register 7
 851 0006 7860     	 str r0,[r7,#4]
 852 0008 3960     	 str r1,[r7]
 545:../Dave/Generated/PWM/pwm.c ****   uint32_t period;
 546:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 547:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 548:../Dave/Generated/PWM/pwm.c **** 
 549:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));
 550:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
 551:../Dave/Generated/PWM/pwm.c ****                                                           (duty_cycle <= PWM_MAX_DUTY_CYCLE)));
 552:../Dave/Generated/PWM/pwm.c **** 
 553:../Dave/Generated/PWM/pwm.c ****   status = PWM_STATUS_FAILURE;
 853              	 .loc 2 553 0
 854 000a 0123     	 movs r3,#1
 855 000c FB75     	 strb r3,[r7,#23]
 554:../Dave/Generated/PWM/pwm.c ****   if (handle_ptr->state != PWM_STATUS_UNINITIALIZED)
 856              	 .loc 2 554 0
 857 000e 7B68     	 ldr r3,[r7,#4]
 858 0010 93F82930 	 ldrb r3,[r3,#41]
 859 0014 022B     	 cmp r3,#2
 860 0016 2DD0     	 beq .L27
 555:../Dave/Generated/PWM/pwm.c ****   {
 556:../Dave/Generated/PWM/pwm.c ****     /* Duty cycle needs between 0 and 10000 */
 557:../Dave/Generated/PWM/pwm.c ****     if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 861              	 .loc 2 557 0
 862 0018 3B68     	 ldr r3,[r7]
 863 001a 42F21072 	 movw r2,#10000
 864 001e 9342     	 cmp r3,r2
 865 0020 28D8     	 bhi .L27
 558:../Dave/Generated/PWM/pwm.c ****     {
 559:../Dave/Generated/PWM/pwm.c ****       period = (uint32_t)handle_ptr->period_value + 1U;
 866              	 .loc 2 559 0
 867 0022 7B68     	 ldr r3,[r7,#4]
 868 0024 DB69     	 ldr r3,[r3,#28]
 869 0026 0133     	 adds r3,r3,#1
 870 0028 3B61     	 str r3,[r7,#16]
 560:../Dave/Generated/PWM/pwm.c **** 
 561:../Dave/Generated/PWM/pwm.c ****       /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
 562:../Dave/Generated/PWM/pwm.c ****       compare = ((period * ((uint32_t) PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DU
 871              	 .loc 2 562 0
 872 002a 3B68     	 ldr r3,[r7]
 873 002c C3F51C53 	 rsb r3,r3,#9984
 874 0030 1033     	 adds r3,r3,#16
 875 0032 3A69     	 ldr r2,[r7,#16]
 876 0034 02FB03F3 	 mul r3,r2,r3
 877 0038 114A     	 ldr r2,.L29
 878 003a A2FB0323 	 umull r2,r3,r2,r3
 879 003e 5B0B     	 lsrs r3,r3,#13
 880 0040 FB60     	 str r3,[r7,#12]
 563:../Dave/Generated/PWM/pwm.c **** 
 564:../Dave/Generated/PWM/pwm.c ****       handle_ptr->compare_value = compare;
 881              	 .loc 2 564 0
 882 0042 7B68     	 ldr r3,[r7,#4]
 883 0044 FA68     	 ldr r2,[r7,#12]
 884 0046 9A61     	 str r2,[r3,#24]
 565:../Dave/Generated/PWM/pwm.c ****       handle_ptr->duty_cycle = duty_cycle;
 885              	 .loc 2 565 0
 886 0048 7B68     	 ldr r3,[r7,#4]
 887 004a 3A68     	 ldr r2,[r7]
 888 004c 1A62     	 str r2,[r3,#32]
 566:../Dave/Generated/PWM/pwm.c **** 
 567:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 889              	 .loc 2 567 0
 890 004e 7B68     	 ldr r3,[r7,#4]
 891 0050 9A68     	 ldr r2,[r3,#8]
 892 0052 FB68     	 ldr r3,[r7,#12]
 893 0054 9BB2     	 uxth r3,r3
 894 0056 1046     	 mov r0,r2
 895 0058 0021     	 movs r1,#0
 896 005a 1A46     	 mov r2,r3
 897 005c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 568:../Dave/Generated/PWM/pwm.c ****     		                             (uint16_t)compare);
 569:../Dave/Generated/PWM/pwm.c **** 
 570:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 898              	 .loc 2 570 0
 899 0060 7B68     	 ldr r3,[r7,#4]
 900 0062 5A68     	 ldr r2,[r3,#4]
 901 0064 7B68     	 ldr r3,[r7,#4]
 902 0066 5B6A     	 ldr r3,[r3,#36]
 903 0068 1046     	 mov r0,r2
 904 006a 1946     	 mov r1,r3
 905 006c FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 571:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_SUCCESS;
 906              	 .loc 2 571 0
 907 0070 0023     	 movs r3,#0
 908 0072 FB75     	 strb r3,[r7,#23]
 909              	.L27:
 572:../Dave/Generated/PWM/pwm.c ****     }
 573:../Dave/Generated/PWM/pwm.c ****   }
 574:../Dave/Generated/PWM/pwm.c **** 
 575:../Dave/Generated/PWM/pwm.c ****   XMC_DEBUG("PWM_lCCU8_SetDutyCycle:dutycycle set")
 576:../Dave/Generated/PWM/pwm.c ****   return (status);
 910              	 .loc 2 576 0
 911 0074 FB7D     	 ldrb r3,[r7,#23]
 577:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU8_SetDutyCycle() api */
 912              	 .loc 2 577 0
 913 0076 1846     	 mov r0,r3
 914 0078 1837     	 adds r7,r7,#24
 915              	.LCFI83:
 916              	 .cfi_def_cfa_offset 8
 917 007a BD46     	 mov sp,r7
 918              	.LCFI84:
 919              	 .cfi_def_cfa_register 13
 920              	 
 921 007c 80BD     	 pop {r7,pc}
 922              	.L30:
 923 007e 00BF     	 .align 2
 924              	.L29:
 925 0080 5917B7D1 	 .word -776530087
 926              	 .cfi_endproc
 927              	.LFE251:
 929              	 .section .text.PWM_lCCU8_SetFreq,"ax",%progbits
 930              	 .align 2
 931              	 .global PWM_lCCU8_SetFreq
 932              	 .thumb
 933              	 .thumb_func
 935              	PWM_lCCU8_SetFreq:
 936              	.LFB252:
 578:../Dave/Generated/PWM/pwm.c **** 
 579:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 580:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency for CCU8 slice. */
 581:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz)
 582:../Dave/Generated/PWM/pwm.c **** {
 937              	 .loc 2 582 0
 938              	 .cfi_startproc
 939              	 
 940              	 
 941 0000 80B5     	 push {r7,lr}
 942              	.LCFI85:
 943              	 .cfi_def_cfa_offset 8
 944              	 .cfi_offset 7,-8
 945              	 .cfi_offset 14,-4
 946 0002 86B0     	 sub sp,sp,#24
 947              	.LCFI86:
 948              	 .cfi_def_cfa_offset 32
 949 0004 00AF     	 add r7,sp,#0
 950              	.LCFI87:
 951              	 .cfi_def_cfa_register 7
 952 0006 7860     	 str r0,[r7,#4]
 953 0008 3960     	 str r1,[r7]
 583:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 584:../Dave/Generated/PWM/pwm.c ****   uint32_t module_freq;
 585:../Dave/Generated/PWM/pwm.c ****   uint8_t prescaler;
 586:../Dave/Generated/PWM/pwm.c ****   uint32_t period_value;
 587:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 588:../Dave/Generated/PWM/pwm.c **** 
 589:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_SetFreq:Invalid pwm_freq_hz " , (pwm_freq_hz != 0U));
 590:../Dave/Generated/PWM/pwm.c **** 
 591:../Dave/Generated/PWM/pwm.c ****   status = handle_ptr->state;
 954              	 .loc 2 591 0
 955 000a 7B68     	 ldr r3,[r7,#4]
 956 000c 93F82930 	 ldrb r3,[r3,#41]
 957 0010 FB75     	 strb r3,[r7,#23]
 592:../Dave/Generated/PWM/pwm.c ****   prescaler = 0U;
 958              	 .loc 2 592 0
 959 0012 0023     	 movs r3,#0
 960 0014 BB75     	 strb r3,[r7,#22]
 593:../Dave/Generated/PWM/pwm.c ****   period_value = 0U;
 961              	 .loc 2 593 0
 962 0016 0023     	 movs r3,#0
 963 0018 3B61     	 str r3,[r7,#16]
 594:../Dave/Generated/PWM/pwm.c **** 
 595:../Dave/Generated/PWM/pwm.c ****   /* Can't set the frequency when the PWM is not yet initialized or when required frequency is 0*/
 596:../Dave/Generated/PWM/pwm.c ****   if ((status != PWM_STATUS_UNINITIALIZED) && ((uint32_t)0 != pwm_freq_hz))
 964              	 .loc 2 596 0
 965 001a FB7D     	 ldrb r3,[r7,#23]
 966 001c 022B     	 cmp r3,#2
 967 001e 5CD0     	 beq .L32
 968              	 .loc 2 596 0 is_stmt 0 discriminator 1
 969 0020 3B68     	 ldr r3,[r7]
 970 0022 002B     	 cmp r3,#0
 971 0024 59D0     	 beq .L32
 597:../Dave/Generated/PWM/pwm.c ****   {
 598:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_SUCCESS;
 972              	 .loc 2 598 0 is_stmt 1
 973 0026 0023     	 movs r3,#0
 974 0028 FB75     	 strb r3,[r7,#23]
 599:../Dave/Generated/PWM/pwm.c ****     /*Get the Module frequency*/
 600:../Dave/Generated/PWM/pwm.c ****     module_freq = handle_ptr->global_ccu8_handle->module_frequency;
 975              	 .loc 2 600 0
 976 002a 7B68     	 ldr r3,[r7,#4]
 977 002c 1B68     	 ldr r3,[r3]
 978 002e 1B68     	 ldr r3,[r3]
 979 0030 FB60     	 str r3,[r7,#12]
 601:../Dave/Generated/PWM/pwm.c **** 
 602:../Dave/Generated/PWM/pwm.c ****     /*Calculate the prescaler and the period register values.*/
 603:../Dave/Generated/PWM/pwm.c ****     while (prescaler <= PWM_MAX_PRESCALER)
 980              	 .loc 2 603 0
 981 0032 0FE0     	 b .L33
 982              	.L36:
 604:../Dave/Generated/PWM/pwm.c ****     {
 605:../Dave/Generated/PWM/pwm.c ****       period_value = (uint32_t)((uint32_t)module_freq / (uint32_t)pwm_freq_hz) >> (uint32_t)prescal
 983              	 .loc 2 605 0
 984 0034 FA68     	 ldr r2,[r7,#12]
 985 0036 3B68     	 ldr r3,[r7]
 986 0038 B2FBF3F2 	 udiv r2,r2,r3
 987 003c BB7D     	 ldrb r3,[r7,#22]
 988 003e 22FA03F3 	 lsr r3,r2,r3
 989 0042 3B61     	 str r3,[r7,#16]
 606:../Dave/Generated/PWM/pwm.c ****       /*If the prescaler selected is not big enough goto the next prescaler value else come out.*/
 607:../Dave/Generated/PWM/pwm.c ****       if (period_value <= PWM_MAX_TIMER_COUNT)
 990              	 .loc 2 607 0
 991 0044 3B69     	 ldr r3,[r7,#16]
 992 0046 B3F5803F 	 cmp r3,#65536
 993 004a 00D2     	 bcs .L34
 608:../Dave/Generated/PWM/pwm.c ****       {
 609:../Dave/Generated/PWM/pwm.c ****         break;
 994              	 .loc 2 609 0
 995 004c 05E0     	 b .L35
 996              	.L34:
 610:../Dave/Generated/PWM/pwm.c ****       }
 611:../Dave/Generated/PWM/pwm.c **** 
 612:../Dave/Generated/PWM/pwm.c ****       prescaler++;
 997              	 .loc 2 612 0
 998 004e BB7D     	 ldrb r3,[r7,#22]
 999 0050 0133     	 adds r3,r3,#1
 1000 0052 BB75     	 strb r3,[r7,#22]
 1001              	.L33:
 603:../Dave/Generated/PWM/pwm.c ****     {
 1002              	 .loc 2 603 0
 1003 0054 BB7D     	 ldrb r3,[r7,#22]
 1004 0056 0F2B     	 cmp r3,#15
 1005 0058 ECD9     	 bls .L36
 1006              	.L35:
 613:../Dave/Generated/PWM/pwm.c ****     }
 614:../Dave/Generated/PWM/pwm.c **** 
 615:../Dave/Generated/PWM/pwm.c ****     /*Can't set the frequency if the required value is too small or when the required frequency is 
 616:../Dave/Generated/PWM/pwm.c ****     if ((prescaler > PWM_MAX_PRESCALER) || ((uint32_t)0 == period_value))
 1007              	 .loc 2 616 0
 1008 005a BB7D     	 ldrb r3,[r7,#22]
 1009 005c 0F2B     	 cmp r3,#15
 1010 005e 02D8     	 bhi .L37
 1011              	 .loc 2 616 0 is_stmt 0 discriminator 1
 1012 0060 3B69     	 ldr r3,[r7,#16]
 1013 0062 002B     	 cmp r3,#0
 1014 0064 02D1     	 bne .L38
 1015              	.L37:
 617:../Dave/Generated/PWM/pwm.c ****     {
 618:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU8_SetFreq:frequency could not be set")
 619:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_FAILURE;
 1016              	 .loc 2 619 0 is_stmt 1
 1017 0066 0123     	 movs r3,#1
 1018 0068 FB75     	 strb r3,[r7,#23]
 616:../Dave/Generated/PWM/pwm.c ****     {
 1019              	 .loc 2 616 0
 1020 006a 38E0     	 b .L40
 1021              	.L38:
 620:../Dave/Generated/PWM/pwm.c ****     }
 621:../Dave/Generated/PWM/pwm.c ****     else
 622:../Dave/Generated/PWM/pwm.c ****     {
 623:../Dave/Generated/PWM/pwm.c ****       /*Calculate the new compare values using new period values*/
 624:../Dave/Generated/PWM/pwm.c ****       compare = (period_value * (PWM_MAX_DUTY_CYCLE - handle_ptr->duty_cycle))
 1022              	 .loc 2 624 0
 1023 006c 7B68     	 ldr r3,[r7,#4]
 1024 006e 1B6A     	 ldr r3,[r3,#32]
 1025 0070 C3F51C53 	 rsb r3,r3,#9984
 1026 0074 1033     	 adds r3,r3,#16
 1027 0076 3A69     	 ldr r2,[r7,#16]
 1028 0078 02FB03F3 	 mul r3,r2,r3
 1029 007c 1A4A     	 ldr r2,.L42
 1030 007e A2FB0323 	 umull r2,r3,r2,r3
 1031 0082 5B0B     	 lsrs r3,r3,#13
 1032 0084 BB60     	 str r3,[r7,#8]
 625:../Dave/Generated/PWM/pwm.c ****           		     / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE);
 626:../Dave/Generated/PWM/pwm.c **** 
 627:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, prescaler);
 1033              	 .loc 2 627 0
 1034 0086 7B68     	 ldr r3,[r7,#4]
 1035 0088 9A68     	 ldr r2,[r3,#8]
 1036 008a BB7D     	 ldrb r3,[r7,#22]
 1037 008c 1046     	 mov r0,r2
 1038 008e 1946     	 mov r1,r3
 1039 0090 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetPrescaler
 628:../Dave/Generated/PWM/pwm.c **** 
 629:../Dave/Generated/PWM/pwm.c ****       /* The period register is always one count less than calculated.*/
 630:../Dave/Generated/PWM/pwm.c ****       period_value = period_value - (uint32_t)1;
 1040              	 .loc 2 630 0
 1041 0094 3B69     	 ldr r3,[r7,#16]
 1042 0096 013B     	 subs r3,r3,#1
 1043 0098 3B61     	 str r3,[r7,#16]
 631:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period_value));
 1044              	 .loc 2 631 0
 1045 009a 7B68     	 ldr r3,[r7,#4]
 1046 009c 9A68     	 ldr r2,[r3,#8]
 1047 009e 3B69     	 ldr r3,[r7,#16]
 1048 00a0 9BB2     	 uxth r3,r3
 1049 00a2 1046     	 mov r0,r2
 1050 00a4 1946     	 mov r1,r3
 1051 00a6 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 632:../Dave/Generated/PWM/pwm.c **** 
 633:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 1052              	 .loc 2 633 0
 1053 00aa 7B68     	 ldr r3,[r7,#4]
 1054 00ac 9A68     	 ldr r2,[r3,#8]
 1055 00ae BB68     	 ldr r3,[r7,#8]
 1056 00b0 9BB2     	 uxth r3,r3
 1057 00b2 1046     	 mov r0,r2
 1058 00b4 0021     	 movs r1,#0
 1059 00b6 1A46     	 mov r2,r3
 1060 00b8 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 634:../Dave/Generated/PWM/pwm.c ****     		                             (uint16_t)compare);
 635:../Dave/Generated/PWM/pwm.c **** 
 636:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 1061              	 .loc 2 636 0
 1062 00bc 7B68     	 ldr r3,[r7,#4]
 1063 00be 5A68     	 ldr r2,[r3,#4]
 1064 00c0 7B68     	 ldr r3,[r7,#4]
 1065 00c2 5B6A     	 ldr r3,[r3,#36]
 1066 00c4 1046     	 mov r0,r2
 1067 00c6 1946     	 mov r1,r3
 1068 00c8 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 637:../Dave/Generated/PWM/pwm.c **** 
 638:../Dave/Generated/PWM/pwm.c ****       handle_ptr->compare_value = compare;
 1069              	 .loc 2 638 0
 1070 00cc 7B68     	 ldr r3,[r7,#4]
 1071 00ce BA68     	 ldr r2,[r7,#8]
 1072 00d0 9A61     	 str r2,[r3,#24]
 639:../Dave/Generated/PWM/pwm.c ****       handle_ptr->period_value = period_value;
 1073              	 .loc 2 639 0
 1074 00d2 7B68     	 ldr r3,[r7,#4]
 1075 00d4 3A69     	 ldr r2,[r7,#16]
 1076 00d6 DA61     	 str r2,[r3,#28]
 616:../Dave/Generated/PWM/pwm.c ****     {
 1077              	 .loc 2 616 0
 1078 00d8 01E0     	 b .L40
 1079              	.L32:
 640:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU8_SetFreq:frequency set")
 641:../Dave/Generated/PWM/pwm.c **** 	}
 642:../Dave/Generated/PWM/pwm.c ****   }
 643:../Dave/Generated/PWM/pwm.c ****   else
 644:../Dave/Generated/PWM/pwm.c ****   {
 645:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_FAILURE;
 1080              	 .loc 2 645 0
 1081 00da 0123     	 movs r3,#1
 1082 00dc FB75     	 strb r3,[r7,#23]
 1083              	.L40:
 646:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU8_SetFreq:frequency could not be set")
 647:../Dave/Generated/PWM/pwm.c ****   }
 648:../Dave/Generated/PWM/pwm.c **** 
 649:../Dave/Generated/PWM/pwm.c ****   return status;
 1084              	 .loc 2 649 0
 1085 00de FB7D     	 ldrb r3,[r7,#23]
 650:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU8_SetFreq() api */
 1086              	 .loc 2 650 0
 1087 00e0 1846     	 mov r0,r3
 1088 00e2 1837     	 adds r7,r7,#24
 1089              	.LCFI88:
 1090              	 .cfi_def_cfa_offset 8
 1091 00e4 BD46     	 mov sp,r7
 1092              	.LCFI89:
 1093              	 .cfi_def_cfa_register 13
 1094              	 
 1095 00e6 80BD     	 pop {r7,pc}
 1096              	.L43:
 1097              	 .align 2
 1098              	.L42:
 1099 00e8 5917B7D1 	 .word -776530087
 1100              	 .cfi_endproc
 1101              	.LFE252:
 1103              	 .section .text.PWM_lCCU8_SetFreqAndDutyCycle,"ax",%progbits
 1104              	 .align 2
 1105              	 .global PWM_lCCU8_SetFreqAndDutyCycle
 1106              	 .thumb
 1107              	 .thumb_func
 1109              	PWM_lCCU8_SetFreqAndDutyCycle:
 1110              	.LFB253:
 651:../Dave/Generated/PWM/pwm.c **** 
 652:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 653:../Dave/Generated/PWM/pwm.c **** /*Sets the frequency and duty cycle for CCU8 slice. */
 654:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_lCCU8_SetFreqAndDutyCycle(PWM_t *const handle_ptr, uint32_t pwm_freq_hz, uint32_t 
 655:../Dave/Generated/PWM/pwm.c **** {
 1111              	 .loc 2 655 0
 1112              	 .cfi_startproc
 1113              	 
 1114              	 
 1115 0000 80B5     	 push {r7,lr}
 1116              	.LCFI90:
 1117              	 .cfi_def_cfa_offset 8
 1118              	 .cfi_offset 7,-8
 1119              	 .cfi_offset 14,-4
 1120 0002 88B0     	 sub sp,sp,#32
 1121              	.LCFI91:
 1122              	 .cfi_def_cfa_offset 40
 1123 0004 00AF     	 add r7,sp,#0
 1124              	.LCFI92:
 1125              	 .cfi_def_cfa_register 7
 1126 0006 F860     	 str r0,[r7,#12]
 1127 0008 B960     	 str r1,[r7,#8]
 1128 000a 7A60     	 str r2,[r7,#4]
 656:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 657:../Dave/Generated/PWM/pwm.c ****   uint32_t module_freq;
 658:../Dave/Generated/PWM/pwm.c ****   uint8_t prescaler;
 659:../Dave/Generated/PWM/pwm.c ****   uint32_t period_value;
 660:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 661:../Dave/Generated/PWM/pwm.c **** 
 662:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_SetFreqAndDutyCycle:Invalid pwm_freq_hz " , (pwm_freq_hz != 0U));
 663:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_lCCU8_SetFreqAndDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
 664:../Dave/Generated/PWM/pwm.c ****   		                                                       (duty_cycle <= PWM_MAX_DUTY_CYCLE)));
 665:../Dave/Generated/PWM/pwm.c **** 
 666:../Dave/Generated/PWM/pwm.c ****   status = handle_ptr->state;
 1129              	 .loc 2 666 0
 1130 000c FB68     	 ldr r3,[r7,#12]
 1131 000e 93F82930 	 ldrb r3,[r3,#41]
 1132 0012 FB77     	 strb r3,[r7,#31]
 667:../Dave/Generated/PWM/pwm.c ****   prescaler = 0U;
 1133              	 .loc 2 667 0
 1134 0014 0023     	 movs r3,#0
 1135 0016 BB77     	 strb r3,[r7,#30]
 668:../Dave/Generated/PWM/pwm.c ****   period_value = 0U;
 1136              	 .loc 2 668 0
 1137 0018 0023     	 movs r3,#0
 1138 001a BB61     	 str r3,[r7,#24]
 669:../Dave/Generated/PWM/pwm.c **** 
 670:../Dave/Generated/PWM/pwm.c ****   /* Can't set the frequency when the PWM is not yet initialized or when required frequency is 0*/
 671:../Dave/Generated/PWM/pwm.c ****   if ((status != PWM_STATUS_UNINITIALIZED) && ((uint32_t)0 != pwm_freq_hz))
 1139              	 .loc 2 671 0
 1140 001c FB7F     	 ldrb r3,[r7,#31]
 1141 001e 022B     	 cmp r3,#2
 1142 0020 63D0     	 beq .L45
 1143              	 .loc 2 671 0 is_stmt 0 discriminator 1
 1144 0022 BB68     	 ldr r3,[r7,#8]
 1145 0024 002B     	 cmp r3,#0
 1146 0026 60D0     	 beq .L45
 672:../Dave/Generated/PWM/pwm.c ****   {
 673:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_SUCCESS;
 1147              	 .loc 2 673 0 is_stmt 1
 1148 0028 0023     	 movs r3,#0
 1149 002a FB77     	 strb r3,[r7,#31]
 674:../Dave/Generated/PWM/pwm.c ****     /*Get the Module frequency*/
 675:../Dave/Generated/PWM/pwm.c ****     module_freq = handle_ptr->global_ccu8_handle->module_frequency;
 1150              	 .loc 2 675 0
 1151 002c FB68     	 ldr r3,[r7,#12]
 1152 002e 1B68     	 ldr r3,[r3]
 1153 0030 1B68     	 ldr r3,[r3]
 1154 0032 7B61     	 str r3,[r7,#20]
 676:../Dave/Generated/PWM/pwm.c **** 
 677:../Dave/Generated/PWM/pwm.c ****     /*Calculate the prescaler and the period register values.*/
 678:../Dave/Generated/PWM/pwm.c ****     while (prescaler <= PWM_MAX_PRESCALER)
 1155              	 .loc 2 678 0
 1156 0034 0FE0     	 b .L46
 1157              	.L49:
 679:../Dave/Generated/PWM/pwm.c ****     {
 680:../Dave/Generated/PWM/pwm.c ****       period_value = (uint32_t)((uint32_t)module_freq / (uint32_t)pwm_freq_hz) >> (uint32_t)prescal
 1158              	 .loc 2 680 0
 1159 0036 7A69     	 ldr r2,[r7,#20]
 1160 0038 BB68     	 ldr r3,[r7,#8]
 1161 003a B2FBF3F2 	 udiv r2,r2,r3
 1162 003e BB7F     	 ldrb r3,[r7,#30]
 1163 0040 22FA03F3 	 lsr r3,r2,r3
 1164 0044 BB61     	 str r3,[r7,#24]
 681:../Dave/Generated/PWM/pwm.c **** 	  /*If the prescaler selected is not big enough goto the next prescaler value else come out.*/
 682:../Dave/Generated/PWM/pwm.c ****       if (period_value <= PWM_MAX_TIMER_COUNT)
 1165              	 .loc 2 682 0
 1166 0046 BB69     	 ldr r3,[r7,#24]
 1167 0048 B3F5803F 	 cmp r3,#65536
 1168 004c 00D2     	 bcs .L47
 683:../Dave/Generated/PWM/pwm.c ****       {
 684:../Dave/Generated/PWM/pwm.c ****         break;
 1169              	 .loc 2 684 0
 1170 004e 05E0     	 b .L48
 1171              	.L47:
 685:../Dave/Generated/PWM/pwm.c ****       }
 686:../Dave/Generated/PWM/pwm.c ****       prescaler++;
 1172              	 .loc 2 686 0
 1173 0050 BB7F     	 ldrb r3,[r7,#30]
 1174 0052 0133     	 adds r3,r3,#1
 1175 0054 BB77     	 strb r3,[r7,#30]
 1176              	.L46:
 678:../Dave/Generated/PWM/pwm.c ****     {
 1177              	 .loc 2 678 0
 1178 0056 BB7F     	 ldrb r3,[r7,#30]
 1179 0058 0F2B     	 cmp r3,#15
 1180 005a ECD9     	 bls .L49
 1181              	.L48:
 687:../Dave/Generated/PWM/pwm.c ****     }
 688:../Dave/Generated/PWM/pwm.c **** 
 689:../Dave/Generated/PWM/pwm.c ****     /*Can't set the frequency if the required value is too small or when the required frequency is 
 690:../Dave/Generated/PWM/pwm.c ****     if ((prescaler > PWM_MAX_PRESCALER) || (duty_cycle > PWM_MAX_DUTY_CYCLE) || ((uint32_t)0 == per
 1182              	 .loc 2 690 0
 1183 005c BB7F     	 ldrb r3,[r7,#30]
 1184 005e 0F2B     	 cmp r3,#15
 1185 0060 07D8     	 bhi .L50
 1186              	 .loc 2 690 0 is_stmt 0 discriminator 1
 1187 0062 7B68     	 ldr r3,[r7,#4]
 1188 0064 42F21072 	 movw r2,#10000
 1189 0068 9342     	 cmp r3,r2
 1190 006a 02D8     	 bhi .L50
 1191              	 .loc 2 690 0 discriminator 2
 1192 006c BB69     	 ldr r3,[r7,#24]
 1193 006e 002B     	 cmp r3,#0
 1194 0070 02D1     	 bne .L51
 1195              	.L50:
 691:../Dave/Generated/PWM/pwm.c ****     {
 692:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU8_SetFreqAndDutyCycle:Frequency or duty cycle could not be set")
 693:../Dave/Generated/PWM/pwm.c ****       status = PWM_STATUS_FAILURE;
 1196              	 .loc 2 693 0 is_stmt 1
 1197 0072 0123     	 movs r3,#1
 1198 0074 FB77     	 strb r3,[r7,#31]
 690:../Dave/Generated/PWM/pwm.c ****     {
 1199              	 .loc 2 690 0
 1200 0076 3AE0     	 b .L53
 1201              	.L51:
 694:../Dave/Generated/PWM/pwm.c ****     }
 695:../Dave/Generated/PWM/pwm.c ****     else
 696:../Dave/Generated/PWM/pwm.c ****     {
 697:../Dave/Generated/PWM/pwm.c ****       /*Calculate the new compare values using new period values */
 698:../Dave/Generated/PWM/pwm.c ****       compare = (period_value * ((uint32_t)PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PW
 1202              	 .loc 2 698 0
 1203 0078 7B68     	 ldr r3,[r7,#4]
 1204 007a C3F51C53 	 rsb r3,r3,#9984
 1205 007e 1033     	 adds r3,r3,#16
 1206 0080 BA69     	 ldr r2,[r7,#24]
 1207 0082 02FB03F3 	 mul r3,r2,r3
 1208 0086 1C4A     	 ldr r2,.L55
 1209 0088 A2FB0323 	 umull r2,r3,r2,r3
 1210 008c 5B0B     	 lsrs r3,r3,#13
 1211 008e 3B61     	 str r3,[r7,#16]
 699:../Dave/Generated/PWM/pwm.c **** 
 700:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, prescaler);
 1212              	 .loc 2 700 0
 1213 0090 FB68     	 ldr r3,[r7,#12]
 1214 0092 9A68     	 ldr r2,[r3,#8]
 1215 0094 BB7F     	 ldrb r3,[r7,#30]
 1216 0096 1046     	 mov r0,r2
 1217 0098 1946     	 mov r1,r3
 1218 009a FFF7FEFF 	 bl XMC_CCU8_SLICE_SetPrescaler
 701:../Dave/Generated/PWM/pwm.c **** 
 702:../Dave/Generated/PWM/pwm.c ****       /* The period register is always one count less than calculated.*/
 703:../Dave/Generated/PWM/pwm.c ****       period_value = period_value - (uint32_t)1;
 1219              	 .loc 2 703 0
 1220 009e BB69     	 ldr r3,[r7,#24]
 1221 00a0 013B     	 subs r3,r3,#1
 1222 00a2 BB61     	 str r3,[r7,#24]
 704:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period_value));
 1223              	 .loc 2 704 0
 1224 00a4 FB68     	 ldr r3,[r7,#12]
 1225 00a6 9A68     	 ldr r2,[r3,#8]
 1226 00a8 BB69     	 ldr r3,[r7,#24]
 1227 00aa 9BB2     	 uxth r3,r3
 1228 00ac 1046     	 mov r0,r2
 1229 00ae 1946     	 mov r1,r3
 1230 00b0 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 705:../Dave/Generated/PWM/pwm.c **** 
 706:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 1231              	 .loc 2 706 0
 1232 00b4 FB68     	 ldr r3,[r7,#12]
 1233 00b6 9A68     	 ldr r2,[r3,#8]
 1234 00b8 3B69     	 ldr r3,[r7,#16]
 1235 00ba 9BB2     	 uxth r3,r3
 1236 00bc 1046     	 mov r0,r2
 1237 00be 0021     	 movs r1,#0
 1238 00c0 1A46     	 mov r2,r3
 1239 00c2 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 707:../Dave/Generated/PWM/pwm.c ****     		                             (uint16_t)compare);
 708:../Dave/Generated/PWM/pwm.c **** 
 709:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 1240              	 .loc 2 709 0
 1241 00c6 FB68     	 ldr r3,[r7,#12]
 1242 00c8 5A68     	 ldr r2,[r3,#4]
 1243 00ca FB68     	 ldr r3,[r7,#12]
 1244 00cc 5B6A     	 ldr r3,[r3,#36]
 1245 00ce 1046     	 mov r0,r2
 1246 00d0 1946     	 mov r1,r3
 1247 00d2 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 710:../Dave/Generated/PWM/pwm.c **** 
 711:../Dave/Generated/PWM/pwm.c ****       handle_ptr->compare_value = compare;
 1248              	 .loc 2 711 0
 1249 00d6 FB68     	 ldr r3,[r7,#12]
 1250 00d8 3A69     	 ldr r2,[r7,#16]
 1251 00da 9A61     	 str r2,[r3,#24]
 712:../Dave/Generated/PWM/pwm.c ****       handle_ptr->period_value = period_value;
 1252              	 .loc 2 712 0
 1253 00dc FB68     	 ldr r3,[r7,#12]
 1254 00de BA69     	 ldr r2,[r7,#24]
 1255 00e0 DA61     	 str r2,[r3,#28]
 713:../Dave/Generated/PWM/pwm.c ****       handle_ptr->duty_cycle = duty_cycle;
 1256              	 .loc 2 713 0
 1257 00e2 FB68     	 ldr r3,[r7,#12]
 1258 00e4 7A68     	 ldr r2,[r7,#4]
 1259 00e6 1A62     	 str r2,[r3,#32]
 690:../Dave/Generated/PWM/pwm.c ****     {
 1260              	 .loc 2 690 0
 1261 00e8 01E0     	 b .L53
 1262              	.L45:
 714:../Dave/Generated/PWM/pwm.c ****       XMC_DEBUG("PWM_lCCU8_SetFreqAndDutyCycle:Frequency and Duty cycle set")
 715:../Dave/Generated/PWM/pwm.c ****     }
 716:../Dave/Generated/PWM/pwm.c ****   }
 717:../Dave/Generated/PWM/pwm.c ****   else
 718:../Dave/Generated/PWM/pwm.c ****   {
 719:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_FAILURE;
 1263              	 .loc 2 719 0
 1264 00ea 0123     	 movs r3,#1
 1265 00ec FB77     	 strb r3,[r7,#31]
 1266              	.L53:
 720:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_lCCU8_SetFreqAndDutyCycle:Frequency and Duty cycle could not be set")
 721:../Dave/Generated/PWM/pwm.c ****   }
 722:../Dave/Generated/PWM/pwm.c **** 
 723:../Dave/Generated/PWM/pwm.c **** 
 724:../Dave/Generated/PWM/pwm.c ****   return status;
 1267              	 .loc 2 724 0
 1268 00ee FB7F     	 ldrb r3,[r7,#31]
 725:../Dave/Generated/PWM/pwm.c **** } /* end of PWM_lCCU8_SetFreqAndDutyCycle() api */
 1269              	 .loc 2 725 0
 1270 00f0 1846     	 mov r0,r3
 1271 00f2 2037     	 adds r7,r7,#32
 1272              	.LCFI93:
 1273              	 .cfi_def_cfa_offset 8
 1274 00f4 BD46     	 mov sp,r7
 1275              	.LCFI94:
 1276              	 .cfi_def_cfa_register 13
 1277              	 
 1278 00f6 80BD     	 pop {r7,pc}
 1279              	.L56:
 1280              	 .align 2
 1281              	.L55:
 1282 00f8 5917B7D1 	 .word -776530087
 1283              	 .cfi_endproc
 1284              	.LFE253:
 1286              	 .section .text.PWM_GetAppVersion,"ax",%progbits
 1287              	 .align 2
 1288              	 .global PWM_GetAppVersion
 1289              	 .thumb
 1290              	 .thumb_func
 1292              	PWM_GetAppVersion:
 1293              	.LFB254:
 726:../Dave/Generated/PWM/pwm.c **** 
 727:../Dave/Generated/PWM/pwm.c **** #endif /* end of CCU8 function definitions */
 728:../Dave/Generated/PWM/pwm.c **** 
 729:../Dave/Generated/PWM/pwm.c **** /**************************************************************************************************
 730:../Dave/Generated/PWM/pwm.c ****  * API IMPLEMENTATION
 731:../Dave/Generated/PWM/pwm.c ****  **************************************************************************************************
 732:../Dave/Generated/PWM/pwm.c **** 
 733:../Dave/Generated/PWM/pwm.c **** /*This function returns the version of the PWM App*/
 734:../Dave/Generated/PWM/pwm.c **** DAVE_APP_VERSION_t PWM_GetAppVersion(void)
 735:../Dave/Generated/PWM/pwm.c **** {
 1294              	 .loc 2 735 0
 1295              	 .cfi_startproc
 1296              	 
 1297              	 
 1298              	 
 1299 0000 80B4     	 push {r7}
 1300              	.LCFI95:
 1301              	 .cfi_def_cfa_offset 4
 1302              	 .cfi_offset 7,-4
 1303 0002 83B0     	 sub sp,sp,#12
 1304              	.LCFI96:
 1305              	 .cfi_def_cfa_offset 16
 1306 0004 00AF     	 add r7,sp,#0
 1307              	.LCFI97:
 1308              	 .cfi_def_cfa_register 7
 736:../Dave/Generated/PWM/pwm.c ****   DAVE_APP_VERSION_t version;
 737:../Dave/Generated/PWM/pwm.c **** 
 738:../Dave/Generated/PWM/pwm.c ****   version.major = (uint8_t) PWM_MAJOR_VERSION;
 1309              	 .loc 2 738 0
 1310 0006 0423     	 movs r3,#4
 1311 0008 3B70     	 strb r3,[r7]
 739:../Dave/Generated/PWM/pwm.c ****   version.minor = (uint8_t) PWM_MINOR_VERSION;
 1312              	 .loc 2 739 0
 1313 000a 0123     	 movs r3,#1
 1314 000c 7B70     	 strb r3,[r7,#1]
 740:../Dave/Generated/PWM/pwm.c ****   version.patch = (uint8_t) PWM_PATCH_VERSION;
 1315              	 .loc 2 740 0
 1316 000e 0C23     	 movs r3,#12
 1317 0010 BB70     	 strb r3,[r7,#2]
 741:../Dave/Generated/PWM/pwm.c **** 
 742:../Dave/Generated/PWM/pwm.c ****   return version;
 1318              	 .loc 2 742 0
 1319 0012 3B1D     	 adds r3,r7,#4
 1320 0014 3A46     	 mov r2,r7
 1321 0016 1268     	 ldr r2,[r2]
 1322 0018 1146     	 mov r1,r2
 1323 001a 1980     	 strh r1,[r3]
 1324 001c 0233     	 adds r3,r3,#2
 1325 001e 120C     	 lsrs r2,r2,#16
 1326 0020 1A70     	 strb r2,[r3]
 1327 0022 0023     	 movs r3,#0
 1328 0024 3A79     	 ldrb r2,[r7,#4]
 1329 0026 62F30703 	 bfi r3,r2,#0,#8
 1330 002a 7A79     	 ldrb r2,[r7,#5]
 1331 002c 62F30F23 	 bfi r3,r2,#8,#8
 1332 0030 BA79     	 ldrb r2,[r7,#6]
 1333 0032 62F31743 	 bfi r3,r2,#16,#8
 743:../Dave/Generated/PWM/pwm.c **** }
 1334              	 .loc 2 743 0
 1335 0036 1846     	 mov r0,r3
 1336 0038 0C37     	 adds r7,r7,#12
 1337              	.LCFI98:
 1338              	 .cfi_def_cfa_offset 4
 1339 003a BD46     	 mov sp,r7
 1340              	.LCFI99:
 1341              	 .cfi_def_cfa_register 13
 1342              	 
 1343 003c 5DF8047B 	 ldr r7,[sp],#4
 1344              	.LCFI100:
 1345              	 .cfi_restore 7
 1346              	 .cfi_def_cfa_offset 0
 1347 0040 7047     	 bx lr
 1348              	 .cfi_endproc
 1349              	.LFE254:
 1351 0042 00BF     	 .section .text.PWM_Init,"ax",%progbits
 1352              	 .align 2
 1353              	 .global PWM_Init
 1354              	 .thumb
 1355              	 .thumb_func
 1357              	PWM_Init:
 1358              	.LFB255:
 744:../Dave/Generated/PWM/pwm.c **** 
 745:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 746:../Dave/Generated/PWM/pwm.c **** /* This function initializes the app */
 747:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
 748:../Dave/Generated/PWM/pwm.c **** {
 1359              	 .loc 2 748 0
 1360              	 .cfi_startproc
 1361              	 
 1362              	 
 1363 0000 80B5     	 push {r7,lr}
 1364              	.LCFI101:
 1365              	 .cfi_def_cfa_offset 8
 1366              	 .cfi_offset 7,-8
 1367              	 .cfi_offset 14,-4
 1368 0002 84B0     	 sub sp,sp,#16
 1369              	.LCFI102:
 1370              	 .cfi_def_cfa_offset 24
 1371 0004 00AF     	 add r7,sp,#0
 1372              	.LCFI103:
 1373              	 .cfi_def_cfa_register 7
 1374 0006 7860     	 str r0,[r7,#4]
 749:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 750:../Dave/Generated/PWM/pwm.c ****   status = PWM_STATUS_FAILURE;
 1375              	 .loc 2 750 0
 1376 0008 0123     	 movs r3,#1
 1377 000a FB73     	 strb r3,[r7,#15]
 751:../Dave/Generated/PWM/pwm.c **** 
 752:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL));
 753:../Dave/Generated/PWM/pwm.c **** 
 754:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 755:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 756:../Dave/Generated/PWM/pwm.c ****   {
 757:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU4_Init(handle_ptr);
 758:../Dave/Generated/PWM/pwm.c ****   }
 759:../Dave/Generated/PWM/pwm.c **** #endif
 760:../Dave/Generated/PWM/pwm.c **** 
 761:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 762:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1378              	 .loc 2 762 0
 1379 000c 7B68     	 ldr r3,[r7,#4]
 1380 000e 93F82830 	 ldrb r3,[r3,#40]
 1381 0012 012B     	 cmp r3,#1
 1382 0014 04D1     	 bne .L60
 763:../Dave/Generated/PWM/pwm.c ****   {
 764:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU8_Init(handle_ptr);
 1383              	 .loc 2 764 0
 1384 0016 7868     	 ldr r0,[r7,#4]
 1385 0018 FFF7FEFF 	 bl PWM_lCCU8_Init
 1386 001c 0346     	 mov r3,r0
 1387 001e FB73     	 strb r3,[r7,#15]
 1388              	.L60:
 765:../Dave/Generated/PWM/pwm.c ****   }
 766:../Dave/Generated/PWM/pwm.c **** #endif
 767:../Dave/Generated/PWM/pwm.c **** 
 768:../Dave/Generated/PWM/pwm.c ****   return (status);
 1389              	 .loc 2 768 0
 1390 0020 FB7B     	 ldrb r3,[r7,#15]
 769:../Dave/Generated/PWM/pwm.c **** }
 1391              	 .loc 2 769 0
 1392 0022 1846     	 mov r0,r3
 1393 0024 1037     	 adds r7,r7,#16
 1394              	.LCFI104:
 1395              	 .cfi_def_cfa_offset 8
 1396 0026 BD46     	 mov sp,r7
 1397              	.LCFI105:
 1398              	 .cfi_def_cfa_register 13
 1399              	 
 1400 0028 80BD     	 pop {r7,pc}
 1401              	 .cfi_endproc
 1402              	.LFE255:
 1404 002a 00BF     	 .section .text.PWM_Start,"ax",%progbits
 1405              	 .align 2
 1406              	 .global PWM_Start
 1407              	 .thumb
 1408              	 .thumb_func
 1410              	PWM_Start:
 1411              	.LFB256:
 770:../Dave/Generated/PWM/pwm.c **** 
 771:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 772:../Dave/Generated/PWM/pwm.c **** /* This function starts the PWM generation. This needs to be called even if external start is confi
 773:../Dave/Generated/PWM/pwm.c **** void PWM_Start(PWM_t *const handle_ptr)
 774:../Dave/Generated/PWM/pwm.c **** {
 1412              	 .loc 2 774 0
 1413              	 .cfi_startproc
 1414              	 
 1415              	 
 1416 0000 80B5     	 push {r7,lr}
 1417              	.LCFI106:
 1418              	 .cfi_def_cfa_offset 8
 1419              	 .cfi_offset 7,-8
 1420              	 .cfi_offset 14,-4
 1421 0002 82B0     	 sub sp,sp,#8
 1422              	.LCFI107:
 1423              	 .cfi_def_cfa_offset 16
 1424 0004 00AF     	 add r7,sp,#0
 1425              	.LCFI108:
 1426              	 .cfi_def_cfa_register 7
 1427 0006 7860     	 str r0,[r7,#4]
 775:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL));
 776:../Dave/Generated/PWM/pwm.c **** 
 777:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 778:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 779:../Dave/Generated/PWM/pwm.c ****   {
 780:../Dave/Generated/PWM/pwm.c ****     PWM_lCCU4_Start(handle_ptr);
 781:../Dave/Generated/PWM/pwm.c ****   }
 782:../Dave/Generated/PWM/pwm.c **** #endif
 783:../Dave/Generated/PWM/pwm.c **** 
 784:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 785:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1428              	 .loc 2 785 0
 1429 0008 7B68     	 ldr r3,[r7,#4]
 1430 000a 93F82830 	 ldrb r3,[r3,#40]
 1431 000e 012B     	 cmp r3,#1
 1432 0010 02D1     	 bne .L62
 786:../Dave/Generated/PWM/pwm.c ****   {
 787:../Dave/Generated/PWM/pwm.c ****     PWM_lCCU8_Start(handle_ptr);
 1433              	 .loc 2 787 0
 1434 0012 7868     	 ldr r0,[r7,#4]
 1435 0014 FFF7FEFF 	 bl PWM_lCCU8_Start
 1436              	.L62:
 788:../Dave/Generated/PWM/pwm.c ****   }
 789:../Dave/Generated/PWM/pwm.c **** #endif
 790:../Dave/Generated/PWM/pwm.c **** }
 1437              	 .loc 2 790 0
 1438 0018 0837     	 adds r7,r7,#8
 1439              	.LCFI109:
 1440              	 .cfi_def_cfa_offset 8
 1441 001a BD46     	 mov sp,r7
 1442              	.LCFI110:
 1443              	 .cfi_def_cfa_register 13
 1444              	 
 1445 001c 80BD     	 pop {r7,pc}
 1446              	 .cfi_endproc
 1447              	.LFE256:
 1449 001e 00BF     	 .section .text.PWM_Stop,"ax",%progbits
 1450              	 .align 2
 1451              	 .global PWM_Stop
 1452              	 .thumb
 1453              	 .thumb_func
 1455              	PWM_Stop:
 1456              	.LFB257:
 791:../Dave/Generated/PWM/pwm.c **** 
 792:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 793:../Dave/Generated/PWM/pwm.c **** /* This function stops the PWM generation. */
 794:../Dave/Generated/PWM/pwm.c **** void PWM_Stop(PWM_t *const handle_ptr)
 795:../Dave/Generated/PWM/pwm.c **** {
 1457              	 .loc 2 795 0
 1458              	 .cfi_startproc
 1459              	 
 1460              	 
 1461 0000 80B5     	 push {r7,lr}
 1462              	.LCFI111:
 1463              	 .cfi_def_cfa_offset 8
 1464              	 .cfi_offset 7,-8
 1465              	 .cfi_offset 14,-4
 1466 0002 82B0     	 sub sp,sp,#8
 1467              	.LCFI112:
 1468              	 .cfi_def_cfa_offset 16
 1469 0004 00AF     	 add r7,sp,#0
 1470              	.LCFI113:
 1471              	 .cfi_def_cfa_register 7
 1472 0006 7860     	 str r0,[r7,#4]
 796:../Dave/Generated/PWM/pwm.c **** 
 797:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_Stop:Invalid handle_ptr" , (handle_ptr != NULL));
 798:../Dave/Generated/PWM/pwm.c **** 
 799:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 800:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 801:../Dave/Generated/PWM/pwm.c ****   {
 802:../Dave/Generated/PWM/pwm.c ****     PWM_lCCU4_Stop(handle_ptr);
 803:../Dave/Generated/PWM/pwm.c ****   }
 804:../Dave/Generated/PWM/pwm.c **** #endif
 805:../Dave/Generated/PWM/pwm.c **** 
 806:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 807:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1473              	 .loc 2 807 0
 1474 0008 7B68     	 ldr r3,[r7,#4]
 1475 000a 93F82830 	 ldrb r3,[r3,#40]
 1476 000e 012B     	 cmp r3,#1
 1477 0010 02D1     	 bne .L64
 808:../Dave/Generated/PWM/pwm.c ****   {
 809:../Dave/Generated/PWM/pwm.c ****     PWM_lCCU8_Stop(handle_ptr);
 1478              	 .loc 2 809 0
 1479 0012 7868     	 ldr r0,[r7,#4]
 1480 0014 FFF7FEFF 	 bl PWM_lCCU8_Stop
 1481              	.L64:
 810:../Dave/Generated/PWM/pwm.c ****   }
 811:../Dave/Generated/PWM/pwm.c **** #endif
 812:../Dave/Generated/PWM/pwm.c **** }
 1482              	 .loc 2 812 0
 1483 0018 0837     	 adds r7,r7,#8
 1484              	.LCFI114:
 1485              	 .cfi_def_cfa_offset 8
 1486 001a BD46     	 mov sp,r7
 1487              	.LCFI115:
 1488              	 .cfi_def_cfa_register 13
 1489              	 
 1490 001c 80BD     	 pop {r7,pc}
 1491              	 .cfi_endproc
 1492              	.LFE257:
 1494 001e 00BF     	 .section .text.PWM_SetDutyCycle,"ax",%progbits
 1495              	 .align 2
 1496              	 .global PWM_SetDutyCycle
 1497              	 .thumb
 1498              	 .thumb_func
 1500              	PWM_SetDutyCycle:
 1501              	.LFB258:
 813:../Dave/Generated/PWM/pwm.c **** 
 814:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 815:../Dave/Generated/PWM/pwm.c **** /*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
 816:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
 817:../Dave/Generated/PWM/pwm.c **** {
 1502              	 .loc 2 817 0
 1503              	 .cfi_startproc
 1504              	 
 1505              	 
 1506 0000 80B5     	 push {r7,lr}
 1507              	.LCFI116:
 1508              	 .cfi_def_cfa_offset 8
 1509              	 .cfi_offset 7,-8
 1510              	 .cfi_offset 14,-4
 1511 0002 84B0     	 sub sp,sp,#16
 1512              	.LCFI117:
 1513              	 .cfi_def_cfa_offset 24
 1514 0004 00AF     	 add r7,sp,#0
 1515              	.LCFI118:
 1516              	 .cfi_def_cfa_register 7
 1517 0006 7860     	 str r0,[r7,#4]
 1518 0008 3960     	 str r1,[r7]
 818:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 819:../Dave/Generated/PWM/pwm.c ****   status = PWM_STATUS_FAILURE;
 1519              	 .loc 2 819 0
 1520 000a 0123     	 movs r3,#1
 1521 000c FB73     	 strb r3,[r7,#15]
 820:../Dave/Generated/PWM/pwm.c **** 
 821:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));
 822:../Dave/Generated/PWM/pwm.c **** 
 823:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 824:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 825:../Dave/Generated/PWM/pwm.c ****   {
 826:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 827:../Dave/Generated/PWM/pwm.c ****   }
 828:../Dave/Generated/PWM/pwm.c **** #endif
 829:../Dave/Generated/PWM/pwm.c **** 
 830:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 831:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1522              	 .loc 2 831 0
 1523 000e 7B68     	 ldr r3,[r7,#4]
 1524 0010 93F82830 	 ldrb r3,[r3,#40]
 1525 0014 012B     	 cmp r3,#1
 1526 0016 05D1     	 bne .L67
 832:../Dave/Generated/PWM/pwm.c ****   {
 833:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
 1527              	 .loc 2 833 0
 1528 0018 7868     	 ldr r0,[r7,#4]
 1529 001a 3968     	 ldr r1,[r7]
 1530 001c FFF7FEFF 	 bl PWM_lCCU8_SetDutyCycle
 1531 0020 0346     	 mov r3,r0
 1532 0022 FB73     	 strb r3,[r7,#15]
 1533              	.L67:
 834:../Dave/Generated/PWM/pwm.c ****   }
 835:../Dave/Generated/PWM/pwm.c **** #endif
 836:../Dave/Generated/PWM/pwm.c ****   return (status);
 1534              	 .loc 2 836 0
 1535 0024 FB7B     	 ldrb r3,[r7,#15]
 837:../Dave/Generated/PWM/pwm.c **** }
 1536              	 .loc 2 837 0
 1537 0026 1846     	 mov r0,r3
 1538 0028 1037     	 adds r7,r7,#16
 1539              	.LCFI119:
 1540              	 .cfi_def_cfa_offset 8
 1541 002a BD46     	 mov sp,r7
 1542              	.LCFI120:
 1543              	 .cfi_def_cfa_register 13
 1544              	 
 1545 002c 80BD     	 pop {r7,pc}
 1546              	 .cfi_endproc
 1547              	.LFE258:
 1549 002e 00BF     	 .section .text.PWM_SetFreq,"ax",%progbits
 1550              	 .align 2
 1551              	 .global PWM_SetFreq
 1552              	 .thumb
 1553              	 .thumb_func
 1555              	PWM_SetFreq:
 1556              	.LFB259:
 838:../Dave/Generated/PWM/pwm.c **** 
 839:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 840:../Dave/Generated/PWM/pwm.c **** /*This function changes the PWM frequency. Input parameter is the frequency value in Hz */
 841:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz)
 842:../Dave/Generated/PWM/pwm.c **** {
 1557              	 .loc 2 842 0
 1558              	 .cfi_startproc
 1559              	 
 1560              	 
 1561 0000 80B5     	 push {r7,lr}
 1562              	.LCFI121:
 1563              	 .cfi_def_cfa_offset 8
 1564              	 .cfi_offset 7,-8
 1565              	 .cfi_offset 14,-4
 1566 0002 84B0     	 sub sp,sp,#16
 1567              	.LCFI122:
 1568              	 .cfi_def_cfa_offset 24
 1569 0004 00AF     	 add r7,sp,#0
 1570              	.LCFI123:
 1571              	 .cfi_def_cfa_register 7
 1572 0006 7860     	 str r0,[r7,#4]
 1573 0008 3960     	 str r1,[r7]
 843:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 844:../Dave/Generated/PWM/pwm.c ****   status = PWM_STATUS_FAILURE;
 1574              	 .loc 2 844 0
 1575 000a 0123     	 movs r3,#1
 1576 000c FB73     	 strb r3,[r7,#15]
 845:../Dave/Generated/PWM/pwm.c **** 
 846:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetFreq:Invalid handle_ptr" , (handle_ptr != NULL));
 847:../Dave/Generated/PWM/pwm.c **** 
 848:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 849:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 850:../Dave/Generated/PWM/pwm.c ****   {
 851:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU4_SetFreq(handle_ptr, pwm_freq_hz);
 852:../Dave/Generated/PWM/pwm.c ****   }
 853:../Dave/Generated/PWM/pwm.c **** #endif
 854:../Dave/Generated/PWM/pwm.c **** 
 855:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 856:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1577              	 .loc 2 856 0
 1578 000e 7B68     	 ldr r3,[r7,#4]
 1579 0010 93F82830 	 ldrb r3,[r3,#40]
 1580 0014 012B     	 cmp r3,#1
 1581 0016 05D1     	 bne .L70
 857:../Dave/Generated/PWM/pwm.c ****   {
 858:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU8_SetFreq(handle_ptr, pwm_freq_hz);
 1582              	 .loc 2 858 0
 1583 0018 7868     	 ldr r0,[r7,#4]
 1584 001a 3968     	 ldr r1,[r7]
 1585 001c FFF7FEFF 	 bl PWM_lCCU8_SetFreq
 1586 0020 0346     	 mov r3,r0
 1587 0022 FB73     	 strb r3,[r7,#15]
 1588              	.L70:
 859:../Dave/Generated/PWM/pwm.c ****   }
 860:../Dave/Generated/PWM/pwm.c **** #endif
 861:../Dave/Generated/PWM/pwm.c ****   return status;
 1589              	 .loc 2 861 0
 1590 0024 FB7B     	 ldrb r3,[r7,#15]
 862:../Dave/Generated/PWM/pwm.c **** }
 1591              	 .loc 2 862 0
 1592 0026 1846     	 mov r0,r3
 1593 0028 1037     	 adds r7,r7,#16
 1594              	.LCFI124:
 1595              	 .cfi_def_cfa_offset 8
 1596 002a BD46     	 mov sp,r7
 1597              	.LCFI125:
 1598              	 .cfi_def_cfa_register 13
 1599              	 
 1600 002c 80BD     	 pop {r7,pc}
 1601              	 .cfi_endproc
 1602              	.LFE259:
 1604 002e 00BF     	 .section .text.PWM_SetFreqAndDutyCycle,"ax",%progbits
 1605              	 .align 2
 1606              	 .global PWM_SetFreqAndDutyCycle
 1607              	 .thumb
 1608              	 .thumb_func
 1610              	PWM_SetFreqAndDutyCycle:
 1611              	.LFB260:
 863:../Dave/Generated/PWM/pwm.c **** 
 864:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 865:../Dave/Generated/PWM/pwm.c **** /*This function sets frequency and the duty cycle */
 866:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_SetFreqAndDutyCycle(PWM_t *const handle_ptr, uint32_t pwm_freq_hz, uint32_t duty_c
 867:../Dave/Generated/PWM/pwm.c **** {
 1612              	 .loc 2 867 0
 1613              	 .cfi_startproc
 1614              	 
 1615              	 
 1616 0000 80B5     	 push {r7,lr}
 1617              	.LCFI126:
 1618              	 .cfi_def_cfa_offset 8
 1619              	 .cfi_offset 7,-8
 1620              	 .cfi_offset 14,-4
 1621 0002 86B0     	 sub sp,sp,#24
 1622              	.LCFI127:
 1623              	 .cfi_def_cfa_offset 32
 1624 0004 00AF     	 add r7,sp,#0
 1625              	.LCFI128:
 1626              	 .cfi_def_cfa_register 7
 1627 0006 F860     	 str r0,[r7,#12]
 1628 0008 B960     	 str r1,[r7,#8]
 1629 000a 7A60     	 str r2,[r7,#4]
 868:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 869:../Dave/Generated/PWM/pwm.c ****   status = PWM_STATUS_FAILURE;
 1630              	 .loc 2 869 0
 1631 000c 0123     	 movs r3,#1
 1632 000e FB75     	 strb r3,[r7,#23]
 870:../Dave/Generated/PWM/pwm.c **** 
 871:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetFreqAndDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));
 872:../Dave/Generated/PWM/pwm.c **** 
 873:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 874:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 875:../Dave/Generated/PWM/pwm.c ****   {
 876:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU4_SetFreqAndDutyCycle(handle_ptr, pwm_freq_hz, duty_cycle);
 877:../Dave/Generated/PWM/pwm.c ****   }
 878:../Dave/Generated/PWM/pwm.c **** #endif
 879:../Dave/Generated/PWM/pwm.c **** 
 880:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 881:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1633              	 .loc 2 881 0
 1634 0010 FB68     	 ldr r3,[r7,#12]
 1635 0012 93F82830 	 ldrb r3,[r3,#40]
 1636 0016 012B     	 cmp r3,#1
 1637 0018 06D1     	 bne .L73
 882:../Dave/Generated/PWM/pwm.c ****   {
 883:../Dave/Generated/PWM/pwm.c ****     status = PWM_lCCU8_SetFreqAndDutyCycle(handle_ptr, pwm_freq_hz, duty_cycle);
 1638              	 .loc 2 883 0
 1639 001a F868     	 ldr r0,[r7,#12]
 1640 001c B968     	 ldr r1,[r7,#8]
 1641 001e 7A68     	 ldr r2,[r7,#4]
 1642 0020 FFF7FEFF 	 bl PWM_lCCU8_SetFreqAndDutyCycle
 1643 0024 0346     	 mov r3,r0
 1644 0026 FB75     	 strb r3,[r7,#23]
 1645              	.L73:
 884:../Dave/Generated/PWM/pwm.c ****   }
 885:../Dave/Generated/PWM/pwm.c **** #endif
 886:../Dave/Generated/PWM/pwm.c ****   return status;
 1646              	 .loc 2 886 0
 1647 0028 FB7D     	 ldrb r3,[r7,#23]
 887:../Dave/Generated/PWM/pwm.c **** }
 1648              	 .loc 2 887 0
 1649 002a 1846     	 mov r0,r3
 1650 002c 1837     	 adds r7,r7,#24
 1651              	.LCFI129:
 1652              	 .cfi_def_cfa_offset 8
 1653 002e BD46     	 mov sp,r7
 1654              	.LCFI130:
 1655              	 .cfi_def_cfa_register 13
 1656              	 
 1657 0030 80BD     	 pop {r7,pc}
 1658              	 .cfi_endproc
 1659              	.LFE260:
 1661 0032 00BF     	 .section .text.PWM_GetTimerStatus,"ax",%progbits
 1662              	 .align 2
 1663              	 .global PWM_GetTimerStatus
 1664              	 .thumb
 1665              	 .thumb_func
 1667              	PWM_GetTimerStatus:
 1668              	.LFB261:
 888:../Dave/Generated/PWM/pwm.c **** 
 889:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 890:../Dave/Generated/PWM/pwm.c **** /*This function changes the PWM timer status_timer */
 891:../Dave/Generated/PWM/pwm.c **** bool PWM_GetTimerStatus(PWM_t *const handle_ptr)
 892:../Dave/Generated/PWM/pwm.c **** {
 1669              	 .loc 2 892 0
 1670              	 .cfi_startproc
 1671              	 
 1672              	 
 1673 0000 80B5     	 push {r7,lr}
 1674              	.LCFI131:
 1675              	 .cfi_def_cfa_offset 8
 1676              	 .cfi_offset 7,-8
 1677              	 .cfi_offset 14,-4
 1678 0002 84B0     	 sub sp,sp,#16
 1679              	.LCFI132:
 1680              	 .cfi_def_cfa_offset 24
 1681 0004 00AF     	 add r7,sp,#0
 1682              	.LCFI133:
 1683              	 .cfi_def_cfa_register 7
 1684 0006 7860     	 str r0,[r7,#4]
 893:../Dave/Generated/PWM/pwm.c ****   bool status_timer;
 894:../Dave/Generated/PWM/pwm.c ****   status_timer = (bool)false;
 1685              	 .loc 2 894 0
 1686 0008 0023     	 movs r3,#0
 1687 000a FB73     	 strb r3,[r7,#15]
 895:../Dave/Generated/PWM/pwm.c **** 
 896:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_GetTimerStatus:Invalid handle_ptr" , (handle_ptr != NULL));
 897:../Dave/Generated/PWM/pwm.c **** 
 898:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 899:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 900:../Dave/Generated/PWM/pwm.c ****   {
 901:../Dave/Generated/PWM/pwm.c ****     status_timer = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 902:../Dave/Generated/PWM/pwm.c ****   }
 903:../Dave/Generated/PWM/pwm.c **** #endif
 904:../Dave/Generated/PWM/pwm.c **** 
 905:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 906:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1688              	 .loc 2 906 0
 1689 000c 7B68     	 ldr r3,[r7,#4]
 1690 000e 93F82830 	 ldrb r3,[r3,#40]
 1691 0012 012B     	 cmp r3,#1
 1692 0014 06D1     	 bne .L76
 907:../Dave/Generated/PWM/pwm.c ****   {
 908:../Dave/Generated/PWM/pwm.c ****     status_timer = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 1693              	 .loc 2 908 0
 1694 0016 7B68     	 ldr r3,[r7,#4]
 1695 0018 9B68     	 ldr r3,[r3,#8]
 1696 001a 1846     	 mov r0,r3
 1697 001c FFF7FEFF 	 bl XMC_CCU8_SLICE_IsTimerRunning
 1698 0020 0346     	 mov r3,r0
 1699 0022 FB73     	 strb r3,[r7,#15]
 1700              	.L76:
 909:../Dave/Generated/PWM/pwm.c ****   }
 910:../Dave/Generated/PWM/pwm.c **** #endif
 911:../Dave/Generated/PWM/pwm.c **** 
 912:../Dave/Generated/PWM/pwm.c ****   return (status_timer);
 1701              	 .loc 2 912 0
 1702 0024 FB7B     	 ldrb r3,[r7,#15]
 913:../Dave/Generated/PWM/pwm.c **** }
 1703              	 .loc 2 913 0
 1704 0026 1846     	 mov r0,r3
 1705 0028 1037     	 adds r7,r7,#16
 1706              	.LCFI134:
 1707              	 .cfi_def_cfa_offset 8
 1708 002a BD46     	 mov sp,r7
 1709              	.LCFI135:
 1710              	 .cfi_def_cfa_register 13
 1711              	 
 1712 002c 80BD     	 pop {r7,pc}
 1713              	 .cfi_endproc
 1714              	.LFE261:
 1716 002e 00BF     	 .section .text.PWM_GetInterruptStatus,"ax",%progbits
 1717              	 .align 2
 1718              	 .global PWM_GetInterruptStatus
 1719              	 .thumb
 1720              	 .thumb_func
 1722              	PWM_GetInterruptStatus:
 1723              	.LFB262:
 914:../Dave/Generated/PWM/pwm.c **** 
 915:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 916:../Dave/Generated/PWM/pwm.c **** /*This function returns the interrupt status_timer */
 917:../Dave/Generated/PWM/pwm.c **** bool PWM_GetInterruptStatus(PWM_t *const handle_ptr, PWM_INTERRUPT_t pwm_interrupt)
 918:../Dave/Generated/PWM/pwm.c **** {
 1724              	 .loc 2 918 0
 1725              	 .cfi_startproc
 1726              	 
 1727              	 
 1728 0000 80B5     	 push {r7,lr}
 1729              	.LCFI136:
 1730              	 .cfi_def_cfa_offset 8
 1731              	 .cfi_offset 7,-8
 1732              	 .cfi_offset 14,-4
 1733 0002 84B0     	 sub sp,sp,#16
 1734              	.LCFI137:
 1735              	 .cfi_def_cfa_offset 24
 1736 0004 00AF     	 add r7,sp,#0
 1737              	.LCFI138:
 1738              	 .cfi_def_cfa_register 7
 1739 0006 7860     	 str r0,[r7,#4]
 1740 0008 0B46     	 mov r3,r1
 1741 000a FB70     	 strb r3,[r7,#3]
 919:../Dave/Generated/PWM/pwm.c ****   bool status;
 920:../Dave/Generated/PWM/pwm.c ****   status = (bool) false;
 1742              	 .loc 2 920 0
 1743 000c 0023     	 movs r3,#0
 1744 000e FB73     	 strb r3,[r7,#15]
 921:../Dave/Generated/PWM/pwm.c **** 
 922:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_GetInterruptStatus:Invalid handle_ptr" , (handle_ptr != NULL));
 923:../Dave/Generated/PWM/pwm.c **** 
 924:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 925:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 926:../Dave/Generated/PWM/pwm.c ****   {
 927:../Dave/Generated/PWM/pwm.c ****     status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, (XMC_CCU4_SLICE_IRQ_ID_t)pwm_inter
 928:../Dave/Generated/PWM/pwm.c ****   }
 929:../Dave/Generated/PWM/pwm.c **** #endif
 930:../Dave/Generated/PWM/pwm.c **** 
 931:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 932:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1745              	 .loc 2 932 0
 1746 0010 7B68     	 ldr r3,[r7,#4]
 1747 0012 93F82830 	 ldrb r3,[r3,#40]
 1748 0016 012B     	 cmp r3,#1
 1749 0018 08D1     	 bne .L79
 933:../Dave/Generated/PWM/pwm.c ****   {
 934:../Dave/Generated/PWM/pwm.c ****     status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)pwm_inter
 1750              	 .loc 2 934 0
 1751 001a 7B68     	 ldr r3,[r7,#4]
 1752 001c 9A68     	 ldr r2,[r3,#8]
 1753 001e FB78     	 ldrb r3,[r7,#3]
 1754 0020 1046     	 mov r0,r2
 1755 0022 1946     	 mov r1,r3
 1756 0024 FFF7FEFF 	 bl XMC_CCU8_SLICE_GetEvent
 1757 0028 0346     	 mov r3,r0
 1758 002a FB73     	 strb r3,[r7,#15]
 1759              	.L79:
 935:../Dave/Generated/PWM/pwm.c ****   }
 936:../Dave/Generated/PWM/pwm.c **** #endif
 937:../Dave/Generated/PWM/pwm.c **** 
 938:../Dave/Generated/PWM/pwm.c ****   return status;
 1760              	 .loc 2 938 0
 1761 002c FB7B     	 ldrb r3,[r7,#15]
 939:../Dave/Generated/PWM/pwm.c **** }
 1762              	 .loc 2 939 0
 1763 002e 1846     	 mov r0,r3
 1764 0030 1037     	 adds r7,r7,#16
 1765              	.LCFI139:
 1766              	 .cfi_def_cfa_offset 8
 1767 0032 BD46     	 mov sp,r7
 1768              	.LCFI140:
 1769              	 .cfi_def_cfa_register 13
 1770              	 
 1771 0034 80BD     	 pop {r7,pc}
 1772              	 .cfi_endproc
 1773              	.LFE262:
 1775 0036 00BF     	 .section .text.PWM_ClearEvent,"ax",%progbits
 1776              	 .align 2
 1777              	 .global PWM_ClearEvent
 1778              	 .thumb
 1779              	 .thumb_func
 1781              	PWM_ClearEvent:
 1782              	.LFB263:
 940:../Dave/Generated/PWM/pwm.c **** 
 941:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 942:../Dave/Generated/PWM/pwm.c **** /*This function Acknowledges the corresponding interrupt */
 943:../Dave/Generated/PWM/pwm.c **** void PWM_ClearEvent(PWM_t *const handle_ptr, PWM_INTERRUPT_t pwm_interrupt)
 944:../Dave/Generated/PWM/pwm.c **** {
 1783              	 .loc 2 944 0
 1784              	 .cfi_startproc
 1785              	 
 1786              	 
 1787 0000 80B5     	 push {r7,lr}
 1788              	.LCFI141:
 1789              	 .cfi_def_cfa_offset 8
 1790              	 .cfi_offset 7,-8
 1791              	 .cfi_offset 14,-4
 1792 0002 82B0     	 sub sp,sp,#8
 1793              	.LCFI142:
 1794              	 .cfi_def_cfa_offset 16
 1795 0004 00AF     	 add r7,sp,#0
 1796              	.LCFI143:
 1797              	 .cfi_def_cfa_register 7
 1798 0006 7860     	 str r0,[r7,#4]
 1799 0008 0B46     	 mov r3,r1
 1800 000a FB70     	 strb r3,[r7,#3]
 945:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_ClearEvent:Invalid handle_ptr" , (handle_ptr != NULL));
 946:../Dave/Generated/PWM/pwm.c **** 
 947:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 948:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 949:../Dave/Generated/PWM/pwm.c ****   {
 950:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, (XMC_CCU4_SLICE_IRQ_ID_t) pwm_interrupt);
 951:../Dave/Generated/PWM/pwm.c ****   }
 952:../Dave/Generated/PWM/pwm.c **** #endif
 953:../Dave/Generated/PWM/pwm.c **** 
 954:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 955:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1801              	 .loc 2 955 0
 1802 000c 7B68     	 ldr r3,[r7,#4]
 1803 000e 93F82830 	 ldrb r3,[r3,#40]
 1804 0012 012B     	 cmp r3,#1
 1805 0014 06D1     	 bne .L81
 956:../Dave/Generated/PWM/pwm.c ****   {
 957:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t) pwm_interrupt);
 1806              	 .loc 2 957 0
 1807 0016 7B68     	 ldr r3,[r7,#4]
 1808 0018 9A68     	 ldr r2,[r3,#8]
 1809 001a FB78     	 ldrb r3,[r7,#3]
 1810 001c 1046     	 mov r0,r2
 1811 001e 1946     	 mov r1,r3
 1812 0020 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearEvent
 1813              	.L81:
 958:../Dave/Generated/PWM/pwm.c ****   }
 959:../Dave/Generated/PWM/pwm.c **** #endif
 960:../Dave/Generated/PWM/pwm.c **** }
 1814              	 .loc 2 960 0
 1815 0024 0837     	 adds r7,r7,#8
 1816              	.LCFI144:
 1817              	 .cfi_def_cfa_offset 8
 1818 0026 BD46     	 mov sp,r7
 1819              	.LCFI145:
 1820              	 .cfi_def_cfa_register 13
 1821              	 
 1822 0028 80BD     	 pop {r7,pc}
 1823              	 .cfi_endproc
 1824              	.LFE263:
 1826 002a 00BF     	 .section .text.PWM_SetPassiveLevel,"ax",%progbits
 1827              	 .align 2
 1828              	 .global PWM_SetPassiveLevel
 1829              	 .thumb
 1830              	 .thumb_func
 1832              	PWM_SetPassiveLevel:
 1833              	.LFB264:
 961:../Dave/Generated/PWM/pwm.c **** 
 962:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 963:../Dave/Generated/PWM/pwm.c **** /*This function sets the passive level of the PWM*/
 964:../Dave/Generated/PWM/pwm.c **** void PWM_SetPassiveLevel(PWM_t *const handle_ptr, PWM_OUTPUT_PASSIVE_LEVEL_t pwm_output_passive_lev
 965:../Dave/Generated/PWM/pwm.c **** {
 1834              	 .loc 2 965 0
 1835              	 .cfi_startproc
 1836              	 
 1837              	 
 1838 0000 80B5     	 push {r7,lr}
 1839              	.LCFI146:
 1840              	 .cfi_def_cfa_offset 8
 1841              	 .cfi_offset 7,-8
 1842              	 .cfi_offset 14,-4
 1843 0002 82B0     	 sub sp,sp,#8
 1844              	.LCFI147:
 1845              	 .cfi_def_cfa_offset 16
 1846 0004 00AF     	 add r7,sp,#0
 1847              	.LCFI148:
 1848              	 .cfi_def_cfa_register 7
 1849 0006 7860     	 str r0,[r7,#4]
 1850 0008 0B46     	 mov r3,r1
 1851 000a FB70     	 strb r3,[r7,#3]
 966:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetPassiveLevel:Invalid handle_ptr" , (handle_ptr != NULL));
 967:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetPassiveLevel:Invalid pwm_output_passive_level", (pwm_output_passive_level < PW
 968:../Dave/Generated/PWM/pwm.c **** 
 969:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
 970:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 971:../Dave/Generated/PWM/pwm.c ****   {
 972:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_SLICE_SetPassiveLevel(handle_ptr->ccu4_slice_ptr,
 973:../Dave/Generated/PWM/pwm.c ****   		                         (XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t)pwm_output_passive_level);
 974:../Dave/Generated/PWM/pwm.c **** 
 975:../Dave/Generated/PWM/pwm.c ****     XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 976:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_SetPassiveLevel:CCU4 slice, passive level changed")
 977:../Dave/Generated/PWM/pwm.c ****   }
 978:../Dave/Generated/PWM/pwm.c **** #endif
 979:../Dave/Generated/PWM/pwm.c **** 
 980:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
 981:../Dave/Generated/PWM/pwm.c ****   if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1852              	 .loc 2 981 0
 1853 000c 7B68     	 ldr r3,[r7,#4]
 1854 000e 93F82830 	 ldrb r3,[r3,#40]
 1855 0012 012B     	 cmp r3,#1
 1856 0014 0FD1     	 bne .L83
 982:../Dave/Generated/PWM/pwm.c ****   {
 983:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_SLICE_SetPassiveLevel(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_OUTPUT_0,
 1857              	 .loc 2 983 0
 1858 0016 7B68     	 ldr r3,[r7,#4]
 1859 0018 9A68     	 ldr r2,[r3,#8]
 1860 001a FB78     	 ldrb r3,[r7,#3]
 1861 001c 1046     	 mov r0,r2
 1862 001e 0121     	 movs r1,#1
 1863 0020 1A46     	 mov r2,r3
 1864 0022 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetPassiveLevel
 984:../Dave/Generated/PWM/pwm.c ****     		                        (XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t)pwm_output_passive_level);
 985:../Dave/Generated/PWM/pwm.c **** 
 986:../Dave/Generated/PWM/pwm.c ****     XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 1865              	 .loc 2 986 0
 1866 0026 7B68     	 ldr r3,[r7,#4]
 1867 0028 5A68     	 ldr r2,[r3,#4]
 1868 002a 7B68     	 ldr r3,[r7,#4]
 1869 002c 5B6A     	 ldr r3,[r3,#36]
 1870 002e 1046     	 mov r0,r2
 1871 0030 1946     	 mov r1,r3
 1872 0032 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 1873              	.L83:
 987:../Dave/Generated/PWM/pwm.c ****     XMC_DEBUG("PWM_SetPassiveLevel:CCU8 slice, passive level changed")
 988:../Dave/Generated/PWM/pwm.c ****   }
 989:../Dave/Generated/PWM/pwm.c **** #endif
 990:../Dave/Generated/PWM/pwm.c **** }
 1874              	 .loc 2 990 0
 1875 0036 0837     	 adds r7,r7,#8
 1876              	.LCFI149:
 1877              	 .cfi_def_cfa_offset 8
 1878 0038 BD46     	 mov sp,r7
 1879              	.LCFI150:
 1880              	 .cfi_def_cfa_register 13
 1881              	 
 1882 003a 80BD     	 pop {r7,pc}
 1883              	 .cfi_endproc
 1884              	.LFE264:
 1886              	 .section .text.PWM_SetPeriodMatchValue,"ax",%progbits
 1887              	 .align 2
 1888              	 .global PWM_SetPeriodMatchValue
 1889              	 .thumb
 1890              	 .thumb_func
 1892              	PWM_SetPeriodMatchValue:
 1893              	.LFB265:
 991:../Dave/Generated/PWM/pwm.c **** 
 992:../Dave/Generated/PWM/pwm.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 993:../Dave/Generated/PWM/pwm.c **** /*Configures the period register */
 994:../Dave/Generated/PWM/pwm.c **** PWM_STATUS_t PWM_SetPeriodMatchValue(PWM_t *const handle_ptr, uint32_t period_match_value)
 995:../Dave/Generated/PWM/pwm.c **** {
 1894              	 .loc 2 995 0
 1895              	 .cfi_startproc
 1896              	 
 1897              	 
 1898 0000 80B5     	 push {r7,lr}
 1899              	.LCFI151:
 1900              	 .cfi_def_cfa_offset 8
 1901              	 .cfi_offset 7,-8
 1902              	 .cfi_offset 14,-4
 1903 0002 84B0     	 sub sp,sp,#16
 1904              	.LCFI152:
 1905              	 .cfi_def_cfa_offset 24
 1906 0004 00AF     	 add r7,sp,#0
 1907              	.LCFI153:
 1908              	 .cfi_def_cfa_register 7
 1909 0006 7860     	 str r0,[r7,#4]
 1910 0008 3960     	 str r1,[r7]
 996:../Dave/Generated/PWM/pwm.c ****   uint32_t compare;
 997:../Dave/Generated/PWM/pwm.c ****   PWM_STATUS_t status;
 998:../Dave/Generated/PWM/pwm.c **** 
 999:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetPeriodMatchValue:Invalid handle_ptr" , (handle_ptr != NULL));
1000:../Dave/Generated/PWM/pwm.c ****   XMC_ASSERT("PWM_SetPeriodMatchValue:Invalid period_match_value" , (period_match_value <= PWM_MAX_
1001:../Dave/Generated/PWM/pwm.c **** 
1002:../Dave/Generated/PWM/pwm.c ****   status = handle_ptr->state;
 1911              	 .loc 2 1002 0
 1912 000a 7B68     	 ldr r3,[r7,#4]
 1913 000c 93F82930 	 ldrb r3,[r3,#41]
 1914 0010 FB73     	 strb r3,[r7,#15]
1003:../Dave/Generated/PWM/pwm.c **** 
1004:../Dave/Generated/PWM/pwm.c ****   if ( (status != PWM_STATUS_UNINITIALIZED) && (PWM_MAX_PERIOD_VALUE >= period_match_value))
 1915              	 .loc 2 1004 0
 1916 0012 FB7B     	 ldrb r3,[r7,#15]
 1917 0014 022B     	 cmp r3,#2
 1918 0016 37D0     	 beq .L86
 1919              	 .loc 2 1004 0 is_stmt 0 discriminator 1
 1920 0018 3B68     	 ldr r3,[r7]
 1921 001a B3F5803F 	 cmp r3,#65536
 1922 001e 33D2     	 bcs .L86
1005:../Dave/Generated/PWM/pwm.c ****   {
1006:../Dave/Generated/PWM/pwm.c ****     compare = (period_match_value * ((uint32_t)PWM_MAX_DUTY_CYCLE - handle_ptr->duty_cycle))
 1923              	 .loc 2 1006 0 is_stmt 1
 1924 0020 7B68     	 ldr r3,[r7,#4]
 1925 0022 1B6A     	 ldr r3,[r3,#32]
 1926 0024 C3F51C53 	 rsb r3,r3,#9984
 1927 0028 1033     	 adds r3,r3,#16
 1928 002a 3A68     	 ldr r2,[r7]
 1929 002c 02FB03F3 	 mul r3,r2,r3
 1930 0030 194A     	 ldr r2,.L90
 1931 0032 A2FB0323 	 umull r2,r3,r2,r3
 1932 0036 5B0B     	 lsrs r3,r3,#13
 1933 0038 BB60     	 str r3,[r7,#8]
1007:../Dave/Generated/PWM/pwm.c **** 		                           / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE);
1008:../Dave/Generated/PWM/pwm.c **** 
1009:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU4
1010:../Dave/Generated/PWM/pwm.c ****     if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
1011:../Dave/Generated/PWM/pwm.c ****     {
1012:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)period_match_value);
1013:../Dave/Generated/PWM/pwm.c **** 
1014:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare );
1015:../Dave/Generated/PWM/pwm.c **** 
1016:../Dave/Generated/PWM/pwm.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
1017:../Dave/Generated/PWM/pwm.c ****     }
1018:../Dave/Generated/PWM/pwm.c **** #endif
1019:../Dave/Generated/PWM/pwm.c **** 
1020:../Dave/Generated/PWM/pwm.c **** #ifdef PWM_SLICE_USED_CCU8
1021:../Dave/Generated/PWM/pwm.c ****     if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 1934              	 .loc 2 1021 0
 1935 003a 7B68     	 ldr r3,[r7,#4]
 1936 003c 93F82830 	 ldrb r3,[r3,#40]
 1937 0040 012B     	 cmp r3,#1
 1938 0042 18D1     	 bne .L87
1022:../Dave/Generated/PWM/pwm.c ****     {
1023:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)period_match_value);
 1939              	 .loc 2 1023 0
 1940 0044 7B68     	 ldr r3,[r7,#4]
 1941 0046 9A68     	 ldr r2,[r3,#8]
 1942 0048 3B68     	 ldr r3,[r7]
 1943 004a 9BB2     	 uxth r3,r3
 1944 004c 1046     	 mov r0,r2
 1945 004e 1946     	 mov r1,r3
 1946 0050 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
1024:../Dave/Generated/PWM/pwm.c **** 
1025:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 1947              	 .loc 2 1025 0
 1948 0054 7B68     	 ldr r3,[r7,#4]
 1949 0056 9A68     	 ldr r2,[r3,#8]
 1950 0058 BB68     	 ldr r3,[r7,#8]
 1951 005a 9BB2     	 uxth r3,r3
 1952 005c 1046     	 mov r0,r2
 1953 005e 0021     	 movs r1,#0
 1954 0060 1A46     	 mov r2,r3
 1955 0062 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
1026:../Dave/Generated/PWM/pwm.c ****           		                              (uint16_t)compare);
1027:../Dave/Generated/PWM/pwm.c **** 
1028:../Dave/Generated/PWM/pwm.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 1956              	 .loc 2 1028 0
 1957 0066 7B68     	 ldr r3,[r7,#4]
 1958 0068 5A68     	 ldr r2,[r3,#4]
 1959 006a 7B68     	 ldr r3,[r7,#4]
 1960 006c 5B6A     	 ldr r3,[r3,#36]
 1961 006e 1046     	 mov r0,r2
 1962 0070 1946     	 mov r1,r3
 1963 0072 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 1964              	.L87:
1029:../Dave/Generated/PWM/pwm.c ****     }
1030:../Dave/Generated/PWM/pwm.c **** #endif
1031:../Dave/Generated/PWM/pwm.c ****     handle_ptr->period_value =  period_match_value;
 1965              	 .loc 2 1031 0
 1966 0076 7B68     	 ldr r3,[r7,#4]
 1967 0078 3A68     	 ldr r2,[r7]
 1968 007a DA61     	 str r2,[r3,#28]
1032:../Dave/Generated/PWM/pwm.c ****     handle_ptr->compare_value =  compare;
 1969              	 .loc 2 1032 0
 1970 007c 7B68     	 ldr r3,[r7,#4]
 1971 007e BA68     	 ldr r2,[r7,#8]
 1972 0080 9A61     	 str r2,[r3,#24]
1033:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_SUCCESS;
 1973              	 .loc 2 1033 0
 1974 0082 0023     	 movs r3,#0
 1975 0084 FB73     	 strb r3,[r7,#15]
 1976 0086 01E0     	 b .L88
 1977              	.L86:
1034:../Dave/Generated/PWM/pwm.c ****   }
1035:../Dave/Generated/PWM/pwm.c ****   else
1036:../Dave/Generated/PWM/pwm.c ****   {
1037:../Dave/Generated/PWM/pwm.c ****     status = PWM_STATUS_FAILURE;
 1978              	 .loc 2 1037 0
 1979 0088 0123     	 movs r3,#1
 1980 008a FB73     	 strb r3,[r7,#15]
 1981              	.L88:
1038:../Dave/Generated/PWM/pwm.c ****   }
1039:../Dave/Generated/PWM/pwm.c **** 
1040:../Dave/Generated/PWM/pwm.c ****   return (status);
 1982              	 .loc 2 1040 0
 1983 008c FB7B     	 ldrb r3,[r7,#15]
1041:../Dave/Generated/PWM/pwm.c **** }
 1984              	 .loc 2 1041 0
 1985 008e 1846     	 mov r0,r3
 1986 0090 1037     	 adds r7,r7,#16
 1987              	.LCFI154:
 1988              	 .cfi_def_cfa_offset 8
 1989 0092 BD46     	 mov sp,r7
 1990              	.LCFI155:
 1991              	 .cfi_def_cfa_register 13
 1992              	 
 1993 0094 80BD     	 pop {r7,pc}
 1994              	.L91:
 1995 0096 00BF     	 .align 2
 1996              	.L90:
 1997 0098 5917B7D1 	 .word -776530087
 1998              	 .cfi_endproc
 1999              	.LFE265:
 2001              	 .text
 2002              	.Letext0:
 2003              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2004              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2005              	 .file 5 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 2006              	 .file 6 "C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc/xmc_gpio.h"
 2007              	 .file 7 "C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc/xmc4_gpio.h"
 2008              	 .file 8 "C:/work_mari/XMC4800/pwm_adc/Libraries/XMCLib/inc/xmc4_scu.h"
 2009              	 .file 9 "C:/work_mari/XMC4800/pwm_adc/Dave/Generated/DAVE_Common.h"
 2010              	 .file 10 "C:/work_mari/XMC4800/pwm_adc/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 2011              	 .file 11 "../Dave/Generated/PWM/pwm.h"
 2012              	 .file 12 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Include/cmsis_gcc.h"
 2013              	 .file 13 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Include/core_cm4.h"
 2014              	 .file 14 "C:/work_mari/XMC4800/pwm_adc/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pwm.c
    {standard input}:20     .text.XMC_CCU8_EnableClock:00000000 $t
    {standard input}:24     .text.XMC_CCU8_EnableClock:00000000 XMC_CCU8_EnableClock
    {standard input}:68     .text.XMC_CCU8_DisableClock:00000000 $t
    {standard input}:72     .text.XMC_CCU8_DisableClock:00000000 XMC_CCU8_DisableClock
    {standard input}:115    .text.XMC_CCU8_SLICE_IsTimerRunning:00000000 $t
    {standard input}:119    .text.XMC_CCU8_SLICE_IsTimerRunning:00000000 XMC_CCU8_SLICE_IsTimerRunning
    {standard input}:164    .text.XMC_CCU8_SLICE_StartTimer:00000000 $t
    {standard input}:168    .text.XMC_CCU8_SLICE_StartTimer:00000000 XMC_CCU8_SLICE_StartTimer
    {standard input}:207    .text.XMC_CCU8_SLICE_StopTimer:00000000 $t
    {standard input}:211    .text.XMC_CCU8_SLICE_StopTimer:00000000 XMC_CCU8_SLICE_StopTimer
    {standard input}:250    .text.XMC_CCU8_SLICE_ClearTimer:00000000 $t
    {standard input}:254    .text.XMC_CCU8_SLICE_ClearTimer:00000000 XMC_CCU8_SLICE_ClearTimer
    {standard input}:293    .text.XMC_CCU8_EnableShadowTransfer:00000000 $t
    {standard input}:297    .text.XMC_CCU8_EnableShadowTransfer:00000000 XMC_CCU8_EnableShadowTransfer
    {standard input}:337    .text.XMC_CCU8_SLICE_EnableEvent:00000000 $t
    {standard input}:341    .text.XMC_CCU8_SLICE_EnableEvent:00000000 XMC_CCU8_SLICE_EnableEvent
    {standard input}:387    .text.XMC_CCU8_SLICE_ClearEvent:00000000 $t
    {standard input}:391    .text.XMC_CCU8_SLICE_ClearEvent:00000000 XMC_CCU8_SLICE_ClearEvent
    {standard input}:434    .text.XMC_CCU8_SLICE_GetEvent:00000000 $t
    {standard input}:438    .text.XMC_CCU8_SLICE_GetEvent:00000000 XMC_CCU8_SLICE_GetEvent
    {standard input}:487    .text.PWM_lCCU8_Init:00000000 $t
    {standard input}:492    .text.PWM_lCCU8_Init:00000000 PWM_lCCU8_Init
    {standard input}:627    .text.PWM_lCCU8_ConfigInterrupts:00000000 PWM_lCCU8_ConfigInterrupts
    {standard input}:1410   .text.PWM_Start:00000000 PWM_Start
    {standard input}:622    .text.PWM_lCCU8_ConfigInterrupts:00000000 $t
    {standard input}:700    .text.PWM_lCCU8_Start:00000000 $t
    {standard input}:705    .text.PWM_lCCU8_Start:00000000 PWM_lCCU8_Start
    {standard input}:765    .text.PWM_lCCU8_Stop:00000000 $t
    {standard input}:770    .text.PWM_lCCU8_Stop:00000000 PWM_lCCU8_Stop
    {standard input}:829    .text.PWM_lCCU8_SetDutyCycle:00000000 $t
    {standard input}:834    .text.PWM_lCCU8_SetDutyCycle:00000000 PWM_lCCU8_SetDutyCycle
    {standard input}:925    .text.PWM_lCCU8_SetDutyCycle:00000080 $d
    {standard input}:930    .text.PWM_lCCU8_SetFreq:00000000 $t
    {standard input}:935    .text.PWM_lCCU8_SetFreq:00000000 PWM_lCCU8_SetFreq
    {standard input}:1099   .text.PWM_lCCU8_SetFreq:000000e8 $d
    {standard input}:1104   .text.PWM_lCCU8_SetFreqAndDutyCycle:00000000 $t
    {standard input}:1109   .text.PWM_lCCU8_SetFreqAndDutyCycle:00000000 PWM_lCCU8_SetFreqAndDutyCycle
    {standard input}:1282   .text.PWM_lCCU8_SetFreqAndDutyCycle:000000f8 $d
    {standard input}:1287   .text.PWM_GetAppVersion:00000000 $t
    {standard input}:1292   .text.PWM_GetAppVersion:00000000 PWM_GetAppVersion
    {standard input}:1352   .text.PWM_Init:00000000 $t
    {standard input}:1357   .text.PWM_Init:00000000 PWM_Init
    {standard input}:1405   .text.PWM_Start:00000000 $t
    {standard input}:1450   .text.PWM_Stop:00000000 $t
    {standard input}:1455   .text.PWM_Stop:00000000 PWM_Stop
    {standard input}:1495   .text.PWM_SetDutyCycle:00000000 $t
    {standard input}:1500   .text.PWM_SetDutyCycle:00000000 PWM_SetDutyCycle
    {standard input}:1550   .text.PWM_SetFreq:00000000 $t
    {standard input}:1555   .text.PWM_SetFreq:00000000 PWM_SetFreq
    {standard input}:1605   .text.PWM_SetFreqAndDutyCycle:00000000 $t
    {standard input}:1610   .text.PWM_SetFreqAndDutyCycle:00000000 PWM_SetFreqAndDutyCycle
    {standard input}:1662   .text.PWM_GetTimerStatus:00000000 $t
    {standard input}:1667   .text.PWM_GetTimerStatus:00000000 PWM_GetTimerStatus
    {standard input}:1717   .text.PWM_GetInterruptStatus:00000000 $t
    {standard input}:1722   .text.PWM_GetInterruptStatus:00000000 PWM_GetInterruptStatus
    {standard input}:1776   .text.PWM_ClearEvent:00000000 $t
    {standard input}:1781   .text.PWM_ClearEvent:00000000 PWM_ClearEvent
    {standard input}:1827   .text.PWM_SetPassiveLevel:00000000 $t
    {standard input}:1832   .text.PWM_SetPassiveLevel:00000000 PWM_SetPassiveLevel
    {standard input}:1887   .text.PWM_SetPeriodMatchValue:00000000 $t
    {standard input}:1892   .text.PWM_SetPeriodMatchValue:00000000 PWM_SetPeriodMatchValue
    {standard input}:1997   .text.PWM_SetPeriodMatchValue:00000098 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GLOBAL_CCU8_Init
XMC_CCU8_SLICE_CompareInit
XMC_CCU8_SLICE_SetTimerPeriodMatch
XMC_CCU8_SLICE_SetTimerCompareMatch
XMC_GPIO_Init
XMC_CCU8_SLICE_SetInterruptNode
XMC_CCU8_SLICE_SetPrescaler
XMC_CCU8_SLICE_SetPassiveLevel
