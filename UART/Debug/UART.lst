
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e00  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         0000000c  1ffe8800  0c001e00  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000020  1ffe880c  0c001e0c  0001080c  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000790  00000000  00000000  00010810  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000942d  00000000  00000000  00010fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a5  00000000  00000000  0001a3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fc6  00000000  00000000  0001ba72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f34  00000000  00000000  0001ea38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000509d  00000000  00000000  0002096c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fee  00000000  00000000  00025a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a0  00000000  00000000  000299f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000322  00000000  00000000  0002a097  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001e00 	.word	0x0c001e00
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000000c 	.word	0x0000000c
 8000254:	0c001e00 	.word	0x0c001e00
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe880c 	.word	0x1ffe880c
 8000264:	00000020 	.word	0x00000020
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08001d49 	.word	0x08001d49
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001ce9 	.word	0x08001ce9

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f000 f805 	bl	80002bc <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f001 fccb 	bl	8001c4c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c2:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <SystemCoreSetup+0x64>)
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <SystemCoreSetup+0x68>)
 80002c8:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002ce:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f023 0308 	bic.w	r3, r3, #8
 80002ea:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <SystemCoreSetup+0x6c>)
 80002ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002f2:	3314      	adds	r3, #20
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f023 030f 	bic.w	r3, r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <SystemCoreSetup+0x6c>)
 800030a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800030e:	3314      	adds	r3, #20
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	08000000 	.word	0x08000000
 8000328:	58001000 	.word	0x58001000

0800032c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d03e      	beq.n	80003bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e002      	b.n	8000356 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000350:	f001 fc5e 	bl	8001c10 <OSCHP_GetFrequency>
 8000354:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000356:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	2b00      	cmp	r3, #0
 8000360:	d020      	beq.n	80003a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800036a:	0e1b      	lsrs	r3, r3, #24
 800036c:	3301      	adds	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	3301      	adds	r3, #1
 800038a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e00d      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ac:	3301      	adds	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e001      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 80003be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	3301      	adds	r3, #1
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SystemCoreClockUpdate+0xd0>)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	50004600 	.word	0x50004600
 80003f4:	50004710 	.word	0x50004710
 80003f8:	016e3600 	.word	0x016e3600
 80003fc:	2003ffc0 	.word	0x2003ffc0

08000400 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	460b      	mov	r3, r1
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	089b      	lsrs	r3, r3, #2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4618      	mov	r0, r3
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	089b      	lsrs	r3, r3, #2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3204      	adds	r2, #4
 8000422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	f003 0303 	and.w	r3, r3, #3
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	4619      	mov	r1, r3
 8000430:	23f8      	movs	r3, #248	; 0xf8
 8000432:	408b      	lsls	r3, r1
 8000434:	43db      	mvns	r3, r3
 8000436:	ea02 0103 	and.w	r1, r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	1d02      	adds	r2, r0, #4
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4619      	mov	r1, r3
 800044c:	2303      	movs	r3, #3
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	401a      	ands	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4a3a      	ldr	r2, [pc, #232]	; (8000544 <XMC_GPIO_Init+0x144>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <XMC_GPIO_Init+0x68>
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4a39      	ldr	r2, [pc, #228]	; (8000548 <XMC_GPIO_Init+0x148>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d10a      	bne.n	800047e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800046c:	7afb      	ldrb	r3, [r7, #11]
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	661a      	str	r2, [r3, #96]	; 0x60
 800047c:	e042      	b.n	8000504 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	b25b      	sxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	da3c      	bge.n	8000504 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	409a      	lsls	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3210      	adds	r2, #16
 80004aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4619      	mov	r1, r3
 80004b8:	2307      	movs	r3, #7
 80004ba:	408b      	lsls	r3, r1
 80004bc:	43db      	mvns	r3, r3
 80004be:	ea02 0103 	and.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f100 0210 	add.w	r2, r0, #16
 80004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3210      	adds	r2, #16
 80004e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7a1b      	ldrb	r3, [r3, #8]
 80004e8:	4619      	mov	r1, r3
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	f003 0307 	and.w	r3, r3, #7
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	ea42 0103 	orr.w	r1, r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	f100 0210 	add.w	r2, r0, #16
 8000500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	089b      	lsrs	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4618      	mov	r0, r3
 800050c:	7afb      	ldrb	r3, [r7, #11]
 800050e:	089b      	lsrs	r3, r3, #2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3204      	adds	r2, #4
 8000518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	f003 0303 	and.w	r3, r3, #3
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	ea42 0103 	orr.w	r1, r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1d02      	adds	r2, r0, #4
 8000536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	48028e00 	.word	0x48028e00
 8000548:	48028f00 	.word	0x48028f00

0800054c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2003ffc0 	.word	0x2003ffc0

08000564 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <XMC_SCU_GetMirrorStatus+0x14>)
 800056a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	50004000 	.word	0x50004000

0800057c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000584:	f7ff fed2 	bl	800032c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <XMC_SCU_lDelay+0x3c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <XMC_SCU_lDelay+0x40>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9a      	lsrs	r2, r3, #18
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e003      	b.n	80005aa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80005a2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3f7      	bcc.n	80005a2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2003ffc0 	.word	0x2003ffc0
 80005bc:	431bde83 	.word	0x431bde83

080005c0 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80005c6:	685b      	ldr	r3, [r3, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	50004074 	.word	0x50004074

080005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60d3      	str	r3, [r2, #12]
}
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	50004074 	.word	0x50004074

080005f4 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f8c5 	bl	800078c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000602:	f000 facb 	bl	8000b9c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	79db      	ldrb	r3, [r3, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00a      	beq.n	8000624 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800060e:	f000 fb03 	bl	8000c18 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000612:	bf00      	nop
 8000614:	f000 faee 	bl	8000bf4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000618:	4603      	mov	r3, r0
 800061a:	f083 0301 	eor.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f7      	bne.n	8000614 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7a5b      	ldrb	r3, [r3, #9]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f929 	bl	8000880 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800062e:	bf00      	nop
 8000630:	f7ff ff98 	bl	8000564 <XMC_SCU_GetMirrorStatus>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1fa      	bne.n	8000630 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fa86 	bl	8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7c1b      	ldrb	r3, [r3, #16]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f937 	bl	80008bc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7c5b      	ldrb	r3, [r3, #17]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f95a 	bl	800090c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7c9b      	ldrb	r3, [r3, #18]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f941 	bl	80008e4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7cdb      	ldrb	r3, [r3, #19]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f964 	bl	8000934 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	799b      	ldrb	r3, [r3, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000674:	f000 fb08 	bl	8000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000678:	bf00      	nop
 800067a:	f000 fb2d 	bl	8000cd8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800067e:	4603      	mov	r3, r0
 8000680:	f083 0301 	eor.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	799b      	ldrb	r3, [r3, #6]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d017      	beq.n	80006d0 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80006a0:	f000 fb3e 	bl	8000d20 <XMC_SCU_CLOCK_DisableSystemPll>
 80006a4:	e014      	b.n	80006d0 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80006a6:	f000 fb2b 	bl	8000d00 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8899      	ldrh	r1, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006b6:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006bc:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4608      	mov	r0, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	462a      	mov	r2, r5
 80006ca:	4623      	mov	r3, r4
 80006cc:	f000 fb38 	bl	8000d40 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006d8:	d103      	bne.n	80006e2 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 80006da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006de:	f000 f855 	bl	800078c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80006e2:	f7ff fe23 	bl	800032c <SystemCoreClockUpdate>
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}

080006ec <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	0f1b      	lsrs	r3, r3, #28
 80006f8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000700:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000710:	4413      	add	r3, r2
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	50004414 	.word	0x50004414

08000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0f1b      	lsrs	r3, r3, #28
 8000730:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000738:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	461a      	mov	r2, r3
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000748:	4413      	add	r3, r2
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4013      	ands	r3, r2
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	5000440c 	.word	0x5000440c

0800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000770:	f7ff feec 	bl	800054c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000774:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000778:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	50004600 	.word	0x50004600

0800078c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000794:	4906      	ldr	r1, [pc, #24]	; (80007b0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	50004600 	.word	0x50004600

080007b4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80007bc:	4906      	ldr	r1, [pc, #24]	; (80007d8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	50004600 	.word	0x50004600

080007dc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	50004600 	.word	0x50004600

08000804 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d108      	bne.n	8000826 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	60d3      	str	r3, [r2, #12]
 8000824:	e007      	b.n	8000836 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	60d3      	str	r3, [r2, #12]
  }
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004710 	.word	0x50004710

08000844 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800084e:	bf00      	nop
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800085e:	4907      	ldr	r1, [pc, #28]	; (800087c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000868:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800086a:	4313      	orrs	r3, r2
 800086c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	50004000 	.word	0x50004000
 800087c:	50004300 	.word	0x50004300

08000880 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800088a:	bf00      	nop
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800088e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f8      	bne.n	800088c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800089a:	4907      	ldr	r1, [pc, #28]	; (80008b8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004000 	.word	0x50004000
 80008b8:	50004300 	.word	0x50004300

080008bc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	50004600 	.word	0x50004600

080008e4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008fa:	4313      	orrs	r3, r2
 80008fc:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	50004600 	.word	0x50004600

0800090c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000922:	4313      	orrs	r3, r2
 8000924:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	50004600 	.word	0x50004600

08000934 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800094a:	4313      	orrs	r3, r2
 800094c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	50004600 	.word	0x50004600

0800095c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000964:	4906      	ldr	r1, [pc, #24]	; (8000980 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000972:	4313      	orrs	r3, r2
 8000974:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	50004600 	.word	0x50004600

08000984 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800099a:	4313      	orrs	r3, r2
 800099c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	50004600 	.word	0x50004600

080009ac <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009b4:	4906      	ldr	r1, [pc, #24]	; (80009d0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009c2:	4313      	orrs	r3, r2
 80009c4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	50004600 	.word	0x50004600

080009d4 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80009dc:	4906      	ldr	r1, [pc, #24]	; (80009f8 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 80009e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e2:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80009ea:	4313      	orrs	r3, r2
 80009ec:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	50004600 	.word	0x50004600

080009fc <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0f1b      	lsrs	r3, r3, #28
 8000a08:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a10:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000a20:	4413      	add	r3, r2
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	50004648 	.word	0x50004648

08000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	0f1b      	lsrs	r3, r3, #28
 8000a40:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a48:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	50004640 	.word	0x50004640

08000a7c <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8a:	f023 0302 	bic.w	r3, r3, #2
 8000a8e:	6153      	str	r3, [r2, #20]
}
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	50004710 	.word	0x50004710

08000a9c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000ab2:	bf00      	nop
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000acc:	491e      	ldr	r1, [pc, #120]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000ada:	4313      	orrs	r3, r2
 8000adc:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f023 0310 	bic.w	r3, r3, #16
 8000af4:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b00:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000b02:	bf00      	nop
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f9      	beq.n	8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000b1c:	bf00      	nop
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f9      	bne.n	8000b1e <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b34:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000b38:	2208      	movs	r2, #8
 8000b3a:	60da      	str	r2, [r3, #12]
}
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	50004710 	.word	0x50004710
 8000b4c:	50004160 	.word	0x50004160

08000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b64:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10e      	bne.n	8000b8a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b76:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b78:	2064      	movs	r0, #100	; 0x64
 8000b7a:	f7ff fcff 	bl	800057c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b88:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f7ff fcf6 	bl	800057c <XMC_SCU_lDelay>
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	50004710 	.word	0x50004710

08000b9c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000bb2:	bf00      	nop
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f9      	beq.n	8000bb4 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000bd4:	bf00      	nop
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f9      	bne.n	8000bd6 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	50004200 	.word	0x50004200
 8000bf0:	50004400 	.word	0x50004400

08000bf4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	50004300 	.word	0x50004300

08000c18 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000c1c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c20:	f7ff fcda 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c2e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000c30:	bf00      	nop
 8000c32:	f7ff fcc5 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f8      	beq.n	8000c32 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000c40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c44:	f7ff fcc8 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000c4e:	bf00      	nop
 8000c50:	f7ff fcb6 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f8      	beq.n	8000c50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000c5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c62:	f7ff fcb9 	bl	80005d8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c72:	bf00      	nop
 8000c74:	f7ff fca4 	bl	80005c0 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f8      	beq.n	8000c74 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	50004300 	.word	0x50004300

08000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c98:	4d0d      	ldr	r5, [pc, #52]	; (8000cd0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ca2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ca6:	f000 ffb3 	bl	8001c10 <OSCHP_GetFrequency>
 8000caa:	4602      	mov	r2, r0
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000cae:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb2:	0d1b      	lsrs	r3, r3, #20
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000cb8:	4323      	orrs	r3, r4
 8000cba:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000cbe:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000cc6:	6053      	str	r3, [r2, #4]
}
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	50004710 	.word	0x50004710
 8000cd0:	50004700 	.word	0x50004700
 8000cd4:	6b5fca6b 	.word	0x6b5fca6b

08000cd8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000ce4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ce8:	bf0c      	ite	eq
 8000cea:	2301      	moveq	r3, #1
 8000cec:	2300      	movne	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	50004710 	.word	0x50004710

08000d00 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	f023 0302 	bic.w	r3, r3, #2
 8000d12:	6053      	str	r3, [r2, #4]
}
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	50004710 	.word	0x50004710

08000d20 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	6053      	str	r3, [r2, #4]
}
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	50004710 	.word	0x50004710

08000d40 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60ba      	str	r2, [r7, #8]
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	81fb      	strh	r3, [r7, #14]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fd55 	bl	8000804 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000d5a:	7b7b      	ldrb	r3, [r7, #13]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	f040 808b 	bne.w	8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d109      	bne.n	8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000d68:	f000 ff52 	bl	8001c10 <OSCHP_GetFrequency>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000d70:	fba3 2302 	umull	r2, r3, r3, r2
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	059b      	lsls	r3, r3, #22
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e002      	b.n	8000d82 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d7c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d80:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	fb02 f203 	mul.w	r2, r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	0d9b      	lsrs	r3, r3, #22
 8000d9e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da0:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000dac:	bf00      	nop
 8000dae:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000dba:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000dc6:	4940      	ldr	r1, [pc, #256]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000dce:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	0212      	lsls	r2, r2, #8
 8000dd6:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000dde:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000dea:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000df6:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f023 0310 	bic.w	r3, r3, #16
 8000e00:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000e02:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000e0e:	bf00      	nop
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f9      	beq.n	8000e10 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000e28:	bf00      	nop
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f9      	bne.n	8000e2a <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	0d9b      	lsrs	r3, r3, #22
 8000e42:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e44:	6a3a      	ldr	r2, [r7, #32]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d202      	bcs.n	8000e52 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e4c:	6938      	ldr	r0, [r7, #16]
 8000e4e:	f000 f845 	bl	8000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	085b      	lsrs	r3, r3, #1
 8000e56:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	0d9b      	lsrs	r3, r3, #22
 8000e60:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e62:	6a3a      	ldr	r2, [r7, #32]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d202      	bcs.n	8000e70 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e6a:	6938      	ldr	r0, [r7, #16]
 8000e6c:	f000 f836 	bl	8000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000e70:	6a38      	ldr	r0, [r7, #32]
 8000e72:	f000 f833 	bl	8000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e76:	e01c      	b.n	8000eb2 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e78:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e86:	4313      	orrs	r3, r2
 8000e88:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e8a:	bf00      	nop
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f9      	beq.n	8000e8c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000ea4:	bf00      	nop
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f9      	beq.n	8000ea6 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	60da      	str	r2, [r3, #12]
}
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	aaaaaaab 	.word	0xaaaaaaab
 8000ec8:	50004710 	.word	0x50004710
 8000ecc:	f08080ff 	.word	0xf08080ff
 8000ed0:	88888889 	.word	0x88888889
 8000ed4:	b60b60b7 	.word	0xb60b60b7
 8000ed8:	50004160 	.word	0x50004160

08000edc <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ee4:	490b      	ldr	r1, [pc, #44]	; (8000f14 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000ef8:	bf00      	nop
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f9      	beq.n	8000efa <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000f06:	2032      	movs	r0, #50	; 0x32
 8000f08:	f7ff fb38 	bl	800057c <XMC_SCU_lDelay>
}
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	50004710 	.word	0x50004710

08000f18 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
 8000f24:	4613      	mov	r3, r2
 8000f26:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3204      	adds	r2, #4
 8000f3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	23f8      	movs	r3, #248	; 0xf8
 8000f4c:	408b      	lsls	r3, r1
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	ea02 0103 	and.w	r1, r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1d02      	adds	r2, r0, #4
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3204      	adds	r2, #4
 8000f70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	78f9      	ldrb	r1, [r7, #3]
 8000f78:	f001 0103 	and.w	r1, r1, #3
 8000f7c:	00c9      	lsls	r1, r1, #3
 8000f7e:	408b      	lsls	r3, r1
 8000f80:	ea42 0103 	orr.w	r1, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1d02      	adds	r2, r0, #4
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f023 020f 	bic.w	r2, r3, #15
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <XMC_UART_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return channel->PSR_ASCMode;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	4613      	mov	r3, r2
 8001020:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001022:	2310      	movs	r3, #16
 8001024:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 f8e2 	bl	80011f0 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	7a1b      	ldrb	r3, [r3, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	7a1b      	ldrb	r3, [r3, #8]
 8001038:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d014      	beq.n	800106a <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d009      	beq.n	800105c <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	f000 f989 	bl	800136c <XMC_USIC_CH_SetBaudrateEx>
 800105a:	e006      	b.n	800106a <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	4619      	mov	r1, r3
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	f000 f90f 	bl	8001288 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	79db      	ldrb	r3, [r3, #7]
 800106e:	3b01      	subs	r3, #1
 8001070:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	3301      	adds	r3, #1
 8001078:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800107a:	4313      	orrs	r3, r2
 800107c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	3b01      	subs	r3, #1
 800108e:	061b      	lsls	r3, r3, #24
 8001090:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	799b      	ldrb	r3, [r3, #6]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
 80010b2:	e008      	b.n	80010c6 <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	795b      	ldrb	r3, [r3, #5]
 80010bc:	3b01      	subs	r3, #1
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	895b      	ldrh	r3, [r3, #10]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop

080010e8 <XMC_UART_CH_SetBaudrate>:

XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  XMC_UART_CH_STATUS_t status;

  status = XMC_UART_CH_STATUS_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	75fb      	strb	r3, [r7, #23]

  if ((rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 2U)) && (oversampling >= XMC_UART_CH_OVERSAMPLING_MIN_VAL))
 80010f8:	f7ff fb38 	bl	800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010fc:	4603      	mov	r3, r0
 80010fe:	089a      	lsrs	r2, r3, #2
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	429a      	cmp	r2, r3
 8001104:	d30c      	bcc.n	8001120 <XMC_UART_CH_SetBaudrate+0x38>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d909      	bls.n	8001120 <XMC_UART_CH_SetBaudrate+0x38>
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, oversampling) == XMC_USIC_CH_STATUS_OK)
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	f000 f8b9 	bl	8001288 <XMC_USIC_CH_SetBaudrate>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <XMC_UART_CH_SetBaudrate+0x38>
    {
      status = XMC_UART_CH_STATUS_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8001120:	7dfb      	ldrb	r3, [r7, #23]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop

0800112c <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800113e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d110      	bne.n	8001168 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001146:	bf00      	nop
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff25 	bl	8000f98 <XMC_USIC_CH_GetTransmitBufferStatus>
 800114e:	4603      	mov	r3, r0
 8001150:	2b80      	cmp	r3, #128	; 0x80
 8001152:	d0f9      	beq.n	8001148 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	f7ff ff4d 	bl	8000ff8 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001166:	e003      	b.n	8001170 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop

08001178 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001186:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001192:	81fb      	strh	r3, [r7, #14]
 8001194:	e003      	b.n	800119e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800119c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800119e:	89fb      	ldrh	r3, [r7, #14]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <XMC_UART_CH_Stop>:

XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  if (((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U) ||
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff feed 	bl	8000f98 <XMC_USIC_CH_GetTransmitBufferStatus>
 80011be:	4603      	mov	r3, r0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db07      	blt.n	80011d8 <XMC_UART_CH_Stop+0x2c>
      ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff09 	bl	8000fe0 <XMC_UART_CH_GetStatusFlag>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f403 7300 	and.w	r3, r3, #512	; 0x200

XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
{
  XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;

  if (((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U) ||
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <XMC_UART_CH_Stop+0x32>
      ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
  {
    status = XMC_UART_CH_STATUS_BUSY;
 80011d8:	2302      	movs	r3, #2
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e003      	b.n	80011e6 <XMC_UART_CH_Stop+0x3a>
  }
  else
  {
    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	2100      	movs	r1, #0
 80011e2:	f7ff fee9 	bl	8000fb8 <XMC_USIC_CH_SetMode>
  }
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <XMC_USIC_CH_Enable+0x74>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d003      	beq.n	8001208 <XMC_USIC_CH_Enable+0x18>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <XMC_USIC_CH_Enable+0x78>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d103      	bne.n	8001210 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <XMC_USIC_CH_Enable+0x7c>)
 800120a:	f000 f99d 	bl	8001548 <XMC_USIC_Enable>
 800120e:	e016      	b.n	800123e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <XMC_USIC_CH_Enable+0x80>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d003      	beq.n	8001220 <XMC_USIC_CH_Enable+0x30>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <XMC_USIC_CH_Enable+0x84>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d103      	bne.n	8001228 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <XMC_USIC_CH_Enable+0x88>)
 8001222:	f000 f991 	bl	8001548 <XMC_USIC_Enable>
 8001226:	e00a      	b.n	800123e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <XMC_USIC_CH_Enable+0x8c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d003      	beq.n	8001238 <XMC_USIC_CH_Enable+0x48>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <XMC_USIC_CH_Enable+0x90>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d102      	bne.n	800123e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <XMC_USIC_CH_Enable+0x94>)
 800123a:	f000 f985 	bl	8001548 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001244:	bf00      	nop
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f9      	beq.n	8001246 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f023 020f 	bic.w	r2, r3, #15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40030000 	.word	0x40030000
 8001268:	40030200 	.word	0x40030200
 800126c:	40030008 	.word	0x40030008
 8001270:	48020000 	.word	0x48020000
 8001274:	48020200 	.word	0x48020200
 8001278:	48020008 	.word	0x48020008
 800127c:	48024000 	.word	0x48024000
 8001280:	48024200 	.word	0x48024200
 8001284:	48024008 	.word	0x48024008

08001288 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b63      	cmp	r3, #99	; 0x63
 8001298:	d95a      	bls.n	8001350 <XMC_USIC_CH_SetBaudrate+0xc8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d057      	beq.n	8001350 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80012a0:	f7ff fa64 	bl	800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80012a8:	fba3 2302 	umull	r2, r3, r3, r2
 80012ac:	095b      	lsrs	r3, r3, #5
 80012ae:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 80012bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80012c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80012cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
 80012d2:	e022      	b.n	800131a <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d8:	fb02 f203 	mul.w	r2, r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	0a9b      	lsrs	r3, r3, #10
 80012ee:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012f6:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	d809      	bhi.n	8001314 <XMC_USIC_CH_SetBaudrate+0x8c>
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	429a      	cmp	r2, r3
 8001306:	d205      	bcs.n	8001314 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	3b01      	subs	r3, #1
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1d9      	bne.n	80012d4 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001324:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8001332:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	3a01      	subs	r2, #1
 8001338:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800133a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133e:	3b01      	subs	r3, #1
 8001340:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001342:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800134e:	e002      	b.n	8001356 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800135a:	4618      	mov	r0, r3
 800135c:	3738      	adds	r7, #56	; 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	fc0080ef 	.word	0xfc0080ef

0800136c <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001378:	f7ff f9f8 	bl	800076c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800137c:	4603      	mov	r3, r0
 800137e:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	429a      	cmp	r2, r3
 8001394:	dd5f      	ble.n	8001456 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001396:	6a3a      	ldr	r2, [r7, #32]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	fb92 f3f3 	sdiv	r3, r2, r3
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80013a0:	e010      	b.n	80013c4 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	3301      	adds	r3, #1
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	fb03 f302 	mul.w	r3, r3, r2
 80013b8:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d8e9      	bhi.n	80013a2 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80013ce:	6a3a      	ldr	r2, [r7, #32]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80013e4:	6a3a      	ldr	r2, [r7, #32]
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	3301      	adds	r3, #1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001406:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1acb      	subs	r3, r1, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	bfb8      	it	lt
 8001414:	425b      	neglt	r3, r3
 8001416:	429a      	cmp	r2, r3
 8001418:	da02      	bge.n	8001420 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	3301      	adds	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001438:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	3a01      	subs	r2, #1
 800143e:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001440:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	3b01      	subs	r3, #1
 8001446:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001448:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001454:	e002      	b.n	800145c <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 800145c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001460:	4618      	mov	r0, r3
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	fc0080ef 	.word	0xfc0080ef

0800146c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001482:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001494:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	0211      	lsls	r1, r2, #8
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80014a2:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 80014a4:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	f8ffc0c0 	.word	0xf8ffc0c0

080014bc <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80014d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80014e4:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	0211      	lsls	r1, r2, #8
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80014f2:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	efffc0c0 	.word	0xefffc0c0

08001510 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	460b      	mov	r3, r1
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	2107      	movs	r1, #7
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <XMC_USIC_Enable+0xac>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d118      	bne.n	800158a <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001558:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800155c:	f7ff fa4e 	bl	80009fc <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001560:	bf00      	nop
 8001562:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001566:	f7ff fa65 	bl	8000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f8      	bne.n	8001562 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001570:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001574:	f7ff f8ba 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001578:	bf00      	nop
 800157a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800157e:	f7ff f8d1 	bl	8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f8      	bne.n	800157a <XMC_USIC_Enable+0x32>
 8001588:	e030      	b.n	80015ec <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <XMC_USIC_Enable+0xb0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d114      	bne.n	80015bc <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001592:	481a      	ldr	r0, [pc, #104]	; (80015fc <XMC_USIC_Enable+0xb4>)
 8001594:	f7ff fa32 	bl	80009fc <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001598:	bf00      	nop
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <XMC_USIC_Enable+0xb4>)
 800159c:	f7ff fa4a 	bl	8000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <XMC_USIC_Enable+0xb4>)
 80015a8:	f7ff f8a0 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80015ac:	bf00      	nop
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <XMC_USIC_Enable+0xb4>)
 80015b0:	f7ff f8b8 	bl	8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <XMC_USIC_Enable+0x66>
 80015ba:	e017      	b.n	80015ec <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <XMC_USIC_Enable+0xb8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d113      	bne.n	80015ec <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <XMC_USIC_Enable+0xbc>)
 80015c6:	f7ff fa19 	bl	80009fc <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 80015ca:	bf00      	nop
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <XMC_USIC_Enable+0xbc>)
 80015ce:	f7ff fa31 	bl	8000a34 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f9      	bne.n	80015cc <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <XMC_USIC_Enable+0xbc>)
 80015da:	f7ff f887 	bl	80006ec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 80015de:	bf00      	nop
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <XMC_USIC_Enable+0xbc>)
 80015e2:	f7ff f89f 	bl	8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f9      	bne.n	80015e0 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40030008 	.word	0x40030008
 80015f8:	48020008 	.word	0x48020008
 80015fc:	10000080 	.word	0x10000080
 8001600:	48024008 	.word	0x48024008
 8001604:	10000100 	.word	0x10000100

08001608 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001622:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800163e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf14      	ite	ne
 800166e:	2301      	movne	r3, #1
 8001670:	2300      	moveq	r3, #0
 8001672:	b2db      	uxtb	r3, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2301      	movne	r3, #1
 80016b4:	2300      	moveq	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f023 030f 	bic.w	r3, r3, #15
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <XMC_UART_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return channel->PSR_ASCMode;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <XMC_UART_CH_SetSamplePoint>:
 * example if the oversampling is 16, then the sample point is set to 9.
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample_point)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
                                    (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	021b      	lsls	r3, r3, #8
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample_point)
{
  channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)) |
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
                                    (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
}
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4798      	blx	r3
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]

  return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop

08001768 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001774:	2304      	movs	r3, #4
 8001776:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001780:	2b02      	cmp	r3, #2
 8001782:	d000      	beq.n	8001786 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001784:	e007      	b.n	8001796 <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	f000 f88c 	bl	80018a8 <UART_lStartTransmitPolling>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
    break;
 8001794:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8001796:	7dfb      	ldrb	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80017ac:	2304      	movs	r3, #4
 80017ae:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d000      	beq.n	80017be <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80017bc:	e007      	b.n	80017ce <UART_Receive+0x2e>
    ret_stat = UART_StartReceiveDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_RX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	f000 f8da 	bl	800197c <UART_lStartReceivePolling>
 80017c8:	4603      	mov	r3, r0
 80017ca:	75fb      	strb	r3, [r7, #23]
    break;
 80017cc:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <UART_SetBaudrate>:
 * The function stops the channel, calculates the clock divider values to achieve the desired baudrate.
 * Sets the divider values and reconfigures the channel as per the configuration in the UI. The channel is
 * enabled at the end of configuration.
 */
UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUSY;
 80017e4:	2302      	movs	r3, #2
 80017e6:	75fb      	strb	r3, [r7, #23]
  const UART_TX_CONFIG_t * ptr_tx_conf = handle->config->tx_pin_config;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_SetBaudrate: UART APP handle invalid", ((handle != NULL)&&
            ((handle->config != NULL) && (handle->runtime != NULL))));

  if ((handle->runtime->tx_busy == false) && (handle->runtime->rx_busy == false))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d04d      	beq.n	800189e <UART_SetBaudrate+0xc6>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	7e5b      	ldrb	r3, [r3, #25]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f083 0301 	eor.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d044      	beq.n	800189e <UART_SetBaudrate+0xc6>
  {
    /* Set UART TX pin as input pin to avoid spikes on the pin.*/
    if (handle->config->mode != UART_MODE_LOOPBACK)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d008      	beq.n	8001832 <UART_SetBaudrate+0x5a>
    {
      XMC_GPIO_SetMode(ptr_tx_conf->port, ptr_tx_conf->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	2200      	movs	r2, #0
 800182e:	f7ff fb73 	bl	8000f18 <XMC_GPIO_SetMode>
    }
    /* Stop the UART channel before changing the baudrate.*/
    if (XMC_UART_CH_Stop(handle->channel) == XMC_UART_CH_STATUS_OK)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fcb8 	bl	80011ac <XMC_UART_CH_Stop>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d12b      	bne.n	800189a <UART_SetBaudrate+0xc2>
    {
      /*Change the baudrate*/
      ret_stat = (UART_STATUS_t)XMC_UART_CH_SetBaudrate(handle->channel, baud, oversampling);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	f7ff fc4c 	bl	80010e8 <XMC_UART_CH_SetBaudrate>
 8001850:	4603      	mov	r3, r0
 8001852:	75fb      	strb	r3, [r7, #23]
      /*Set the sample point if the baudrate is modified*/
      if (ret_stat == UART_STATUS_SUCCESS)
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <UART_SetBaudrate+0x94>
      {
        XMC_UART_CH_SetSamplePoint(handle->channel, (uint32_t)(oversampling >> 1U)+1U);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3301      	adds	r3, #1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff ff58 	bl	800171c <XMC_UART_CH_SetSamplePoint>
      }
      /*Enable UART*/
      XMC_UART_CH_Start(handle->channel);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff27 	bl	80016c4 <XMC_UART_CH_Start>
      /* Initialize UART TX pin */
      if (handle->config->mode != UART_MODE_LOOPBACK)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d00d      	beq.n	800189e <UART_SetBaudrate+0xc6>
      {
        XMC_GPIO_Init(ptr_tx_conf->port, ptr_tx_conf->pin, ptr_tx_conf->config);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	791a      	ldrb	r2, [r3, #4]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4608      	mov	r0, r1
 8001890:	4611      	mov	r1, r2
 8001892:	461a      	mov	r2, r3
 8001894:	f7fe fdb4 	bl	8000400 <XMC_GPIO_Init>
 8001898:	e001      	b.n	800189e <UART_SetBaudrate+0xc6>
      }
    }
    else
    {
      ret_stat = UART_STATUS_BUSY;
 800189a:	2302      	movs	r3, #2
 800189c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret_stat;
 800189e:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 80018b4:	2303      	movs	r3, #3
 80018b6:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d058      	beq.n	8001970 <UART_lStartTransmitPolling+0xc8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d055      	beq.n	8001970 <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 80018c4:	2302      	movs	r3, #2
 80018c6:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	7e1b      	ldrb	r3, [r3, #24]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f083 0301 	eor.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d04a      	beq.n	8001970 <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2201      	movs	r2, #1
 80018e0:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe8e 	bl	8001614 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	e01c      	b.n	8001938 <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 800190a:	bf00      	nop
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fe8d 	bl	8001630 <XMC_USIC_CH_TXFIFO_IsFull>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f7      	bne.n	800190c <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4608      	mov	r0, r1
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff fbfd 	bl	800112c <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	3301      	adds	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3de      	bcc.n	80018fe <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 800194c:	bf00      	nop
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe80 	bl	8001658 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001958:	4603      	mov	r3, r0
 800195a:	f083 0301 	eor.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f4      	bne.n	800194e <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 8001964:	2300      	movs	r3, #0
 8001966:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 8001970:	7dfb      	ldrb	r3, [r7, #23]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop

0800197c <UART_lStartReceivePolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either RBUF or OUT register will be read.
 *
 */
static UART_STATUS_t UART_lStartReceivePolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8001988:	2303      	movs	r3, #3
 800198a:	77fb      	strb	r3, [r7, #31]
  uint32_t loc_status;

  XMC_ASSERT("UART_Receive: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d060      	beq.n	8001a54 <UART_lStartReceivePolling+0xd8>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d05d      	beq.n	8001a54 <UART_lStartReceivePolling+0xd8>
  {
    ret_stat = UART_STATUS_BUSY;
 8001998:	2302      	movs	r3, #2
 800199a:	77fb      	strb	r3, [r7, #31]
    if (handle->runtime->rx_busy == false)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d052      	beq.n	8001a54 <UART_lStartReceivePolling+0xd8>
    {
      handle->runtime->rx_busy = true;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2201      	movs	r2, #1
 80019b4:	765a      	strb	r2, [r3, #25]
      if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <UART_lStartReceivePolling+0x50>
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe5a 	bl	8001680 <XMC_USIC_CH_RXFIFO_Flush>
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	e036      	b.n	8001a40 <UART_lStartReceivePolling+0xc4>
      {
        /*If receive FIFO is configured, wait for FIFO to get data.*/
        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <UART_lStartReceivePolling+0x76>
        {
          /*Wait if FIFO empty*/
          while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 80019de:	bf00      	nop
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe59 	bl	800169c <XMC_USIC_CH_RXFIFO_IsEmpty>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f7      	bne.n	80019e0 <UART_lStartReceivePolling+0x64>
 80019f0:	e018      	b.n	8001a24 <UART_lStartReceivePolling+0xa8>
          }
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fe76 	bl	80016e8 <XMC_UART_CH_GetStatusFlag>
 80019fc:	6178      	str	r0, [r7, #20]
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 80019fe:	e005      	b.n	8001a0c <UART_lStartReceivePolling+0x90>
                (uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION)))
          {
            loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fe6f 	bl	80016e8 <XMC_UART_CH_GetStatusFlag>
 8001a0a:	6178      	str	r0, [r7, #20]
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f4      	beq.n	8001a00 <UART_lStartReceivePolling+0x84>
            loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          }
          /*Clear the detected event.
           * Both events should not be cleared at once, otherwise if 2 bytes are received, only
           * one byte will be read.*/
          XMC_UART_CH_ClearStatusFlag(handle->channel,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001a20:	f7ff fe6e 	bl	8001700 <XMC_UART_CH_ClearStatusFlag>
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	18d4      	adds	r4, r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fba2 	bl	8001178 <XMC_UART_CH_GetReceivedData>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	7023      	strb	r3, [r4, #0]
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3c4      	bcc.n	80019d2 <UART_lStartReceivePolling+0x56>
          XMC_UART_CH_ClearStatusFlag(handle->channel,
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      }
      ret_stat = UART_STATUS_SUCCESS;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
      handle->runtime->rx_busy = false;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2200      	movs	r2, #0
 8001a52:	765a      	strb	r2, [r3, #25]
    }
  }
  return ret_stat;
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	bf00      	nop

08001a60 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001a70:	78f8      	ldrb	r0, [r7, #3]
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	3306      	adds	r3, #6
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001a82:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001a84:	431a      	orrs	r2, r3
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	1d83      	adds	r3, r0, #6
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop

08001a9c <XMC_USIC_CH_EnableInputInversion>:
 * Polarity of the input source can be changed to provide inverted data input.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputInversion()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 8001aa8:	78f8      	ldrb	r0, [r7, #3]
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	3306      	adds	r3, #6
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	1d83      	adds	r3, r0, #6
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	605a      	str	r2, [r3, #4]
}
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <XMC_USIC_CH_SetShiftDirection>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_SHIFT_DIRECTION_t shift_direction)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae0:	f023 0201 	bic.w	r2, r3, #1
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop

08001af8 <XMC_USIC_CH_SetDataOutputMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mode;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f7ff fa70 	bl	8001014 <XMC_UART_CH_InitEx>
}
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop

08001b3c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	f043 0202 	orr.w	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 0U, &UART_0_rx_pin_config);
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <UART_0_init+0x7c>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <UART_0_init+0x80>)
 8001b70:	f7fe fc46 	bl	8000400 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH1, &UART_0_channel_config);
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <UART_0_init+0x84>)
 8001b76:	491c      	ldr	r1, [pc, #112]	; (8001be8 <UART_0_init+0x88>)
 8001b78:	f7ff ffd2 	bl	8001b20 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH1, XMC_USIC_CH_INPUT_DX0, 3U);
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <UART_0_init+0x84>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2203      	movs	r2, #3
 8001b82:	f7ff ff6d 	bl	8001a60 <XMC_USIC_CH_SetInputSource>
  /* MSB first */
  XMC_USIC_CH_SetShiftDirection(XMC_UART1_CH1, XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST);
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <UART_0_init+0x84>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	f7ff ffa1 	bl	8001ad0 <XMC_USIC_CH_SetShiftDirection>

  /* Invert output data */
  XMC_USIC_CH_SetDataOutputMode(XMC_UART1_CH1, XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED);
 8001b8e:	4815      	ldr	r0, [pc, #84]	; (8001be4 <UART_0_init+0x84>)
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	f7ff ffb1 	bl	8001af8 <XMC_USIC_CH_SetDataOutputMode>

  /* Invert input data */
  XMC_USIC_CH_EnableInputInversion(XMC_UART1_CH1, XMC_USIC_CH_INPUT_DX0);
 8001b96:	4813      	ldr	r0, [pc, #76]	; (8001be4 <UART_0_init+0x84>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f7ff ff7f 	bl	8001a9c <XMC_USIC_CH_EnableInputInversion>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH1,
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <UART_0_init+0x84>)
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f7ff fc61 	bl	800146c <XMC_USIC_CH_TXFIFO_Configure>
        8U,
        XMC_USIC_CH_FIFO_SIZE_8WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH1,
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <UART_0_init+0x84>)
 8001bac:	2100      	movs	r1, #0
 8001bae:	2203      	movs	r2, #3
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	f7ff fc83 	bl	80014bc <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_8WORDS,
        7U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH1);
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <UART_0_init+0x84>)
 8001bb8:	f7ff ffc0 	bl	8001b3c <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 1U, &UART_0_tx_pin_config);
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <UART_0_init+0x7c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <UART_0_init+0x8c>)
 8001bc2:	f7fe fc1d 	bl	8000400 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <UART_0_init+0x84>)
 8001bc8:	2110      	movs	r1, #16
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f7ff fca0 	bl	8001510 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	48028000 	.word	0x48028000
 8001be0:	08001de0 	.word	0x08001de0
 8001be4:	48020200 	.word	0x48020200
 8001be8:	08001d94 	.word	0x08001d94
 8001bec:	08001da0 	.word	0x08001da0

08001bf0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]

  return (status);
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <OSCHP_GetFrequency+0x10>)
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	00b71b00 	.word	0x00b71b00

08001c24 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	50004600 	.word	0x50004600

08001c4c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <SystemCoreClockSetup+0x60>)
 8001c54:	1d3c      	adds	r4, r7, #4
 8001c56:	461d      	mov	r5, r3
 8001c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fcc6 	bl	80005f4 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7fe fdeb 	bl	8000844 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8001c6e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c72:	f7fe fd9f 	bl	80007b4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8001c76:	2006      	movs	r0, #6
 8001c78:	f7fe fe70 	bl	800095c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8001c7c:	f7fe fefe 	bl	8000a7c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8001c80:	2003      	movs	r0, #3
 8001c82:	2164      	movs	r1, #100	; 0x64
 8001c84:	f7fe ff0a 	bl	8000a9c <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff ffcb 	bl	8001c24 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f7fe fea0 	bl	80009d4 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7fe fda1 	bl	80007dc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7fe fe86 	bl	80009ac <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7fe fe6f 	bl	8000984 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	08001dec 	.word	0x08001dec

08001cb0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <DAVE_Init+0x30>)
 8001cbc:	f7ff ff98 	bl	8001bf0 <CLOCK_XMC4_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <DAVE_Init+0x34>)
 8001ccc:	f7ff fd3a 	bl	8001744 <UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	1ffe8828 	.word	0x1ffe8828
 8001ce4:	1ffe8800 	.word	0x1ffe8800

08001ce8 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  uint8_t ReadData;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8001cee:	f7ff ffdf 	bl	8001cb0 <DAVE_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t baud=9600;
 8001cf6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001cfa:	60bb      	str	r3, [r7, #8]
  if (status != DAVE_STATUS_SUCCESS)
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d000      	beq.n	8001d04 <main+0x1c>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8001d02:	e7fe      	b.n	8001d02 <main+0x1a>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  UART_SetBaudrate(&UART_0, baud, 16);
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <main+0x5c>)
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	f7ff fd65 	bl	80017d8 <UART_SetBaudrate>
  while(1U)
  {

	  UART_Receive(&UART_0, ReadData, 1);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <main+0x5c>)
 8001d12:	4619      	mov	r1, r3
 8001d14:	2201      	movs	r2, #1
 8001d16:	f7ff fd43 	bl	80017a0 <UART_Receive>

	  UART_Transmit(&UART_0, ReadData, 1);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <main+0x5c>)
 8001d1e:	4619      	mov	r1, r3
 8001d20:	2201      	movs	r2, #1
 8001d22:	f7ff fd21 	bl	8001768 <UART_Transmit>
	  while(UART_0.runtime->rx_busy);
 8001d26:	bf00      	nop
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <main+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	7e5b      	ldrb	r3, [r3, #25]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f9      	bne.n	8001d28 <main+0x40>
	  while(UART_0.runtime->tx_busy);
 8001d34:	bf00      	nop
 8001d36:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <main+0x5c>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	7e1b      	ldrb	r3, [r3, #24]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <main+0x4e>
  }
 8001d42:	e7e4      	b.n	8001d0e <main+0x26>
 8001d44:	1ffe8800 	.word	0x1ffe8800

08001d48 <__libc_init_array>:
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <__libc_init_array+0x3c>)
 8001d4c:	4c0e      	ldr	r4, [pc, #56]	; (8001d88 <__libc_init_array+0x40>)
 8001d4e:	1ae4      	subs	r4, r4, r3
 8001d50:	10a4      	asrs	r4, r4, #2
 8001d52:	2500      	movs	r5, #0
 8001d54:	461e      	mov	r6, r3
 8001d56:	42a5      	cmp	r5, r4
 8001d58:	d004      	beq.n	8001d64 <__libc_init_array+0x1c>
 8001d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d5e:	4798      	blx	r3
 8001d60:	3501      	adds	r5, #1
 8001d62:	e7f8      	b.n	8001d56 <__libc_init_array+0xe>
 8001d64:	f7ff fc50 	bl	8001608 <_init>
 8001d68:	4c08      	ldr	r4, [pc, #32]	; (8001d8c <__libc_init_array+0x44>)
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <__libc_init_array+0x48>)
 8001d6c:	1ae4      	subs	r4, r4, r3
 8001d6e:	10a4      	asrs	r4, r4, #2
 8001d70:	2500      	movs	r5, #0
 8001d72:	461e      	mov	r6, r3
 8001d74:	42a5      	cmp	r5, r4
 8001d76:	d004      	beq.n	8001d82 <__libc_init_array+0x3a>
 8001d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d7c:	4798      	blx	r3
 8001d7e:	3501      	adds	r5, #1
 8001d80:	e7f8      	b.n	8001d74 <__libc_init_array+0x2c>
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	1ffe880c 	.word	0x1ffe880c
 8001d88:	1ffe880c 	.word	0x1ffe880c
 8001d8c:	1ffe880c 	.word	0x1ffe880c
 8001d90:	1ffe880c 	.word	0x1ffe880c

08001d94 <UART_0_channel_config>:
 8001d94:	00002580 01080800 00000010              .%..........

08001da0 <UART_0_tx_pin_config>:
 8001da0:	00000090 00000001 00000002              ............

08001dac <UART_0_tx_pin>:
 8001dac:	48028000 00000001 08001da0              ...H........

08001db8 <UART_0_config>:
 8001db8:	08001d94 08001b61 00000000 00000000     ....a...........
	...
 8001dd4:	08001dac 03020200 00000003              ............

08001de0 <UART_0_rx_pin_config>:
 8001de0:	00000000 00000001 00000002 01010230     ............0...
 8001df0:	00010000 00000000 00010000 01010102     ................
